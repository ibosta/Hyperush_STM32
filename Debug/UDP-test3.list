
UDP-test3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fe28  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a38  0800fff8  0800fff8  00010ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011a30  08011a30  000131c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08011a30  08011a30  00012a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011a38  08011a38  000131c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011a38  08011a38  00012a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011a3c  08011a3c  00012a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08011a40  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000084  08011ac4  00013084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000124  08011b64  00013124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00007d24  200001c4  08011c04  000131c4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20007ee8  08011c04  00013ee8  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000131c4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00023b67  00000000  00000000  000131f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005cb2  00000000  00000000  00036d5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001d00  00000000  00000000  0003ca10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001694  00000000  00000000  0003e710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003400f  00000000  00000000  0003fda4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002cb45  00000000  00000000  00073db3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00110372  00000000  00000000  000a08f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001b0c6a  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008480  00000000  00000000  001b0cb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006d  00000000  00000000  001b9130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001c4 	.word	0x200001c4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ffe0 	.word	0x0800ffe0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001c8 	.word	0x200001c8
 800020c:	0800ffe0 	.word	0x0800ffe0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b10:	f000 b988 	b.w	8000e24 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9d08      	ldr	r5, [sp, #32]
 8000b32:	468e      	mov	lr, r1
 8000b34:	4604      	mov	r4, r0
 8000b36:	4688      	mov	r8, r1
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d14a      	bne.n	8000bd2 <__udivmoddi4+0xa6>
 8000b3c:	428a      	cmp	r2, r1
 8000b3e:	4617      	mov	r7, r2
 8000b40:	d962      	bls.n	8000c08 <__udivmoddi4+0xdc>
 8000b42:	fab2 f682 	clz	r6, r2
 8000b46:	b14e      	cbz	r6, 8000b5c <__udivmoddi4+0x30>
 8000b48:	f1c6 0320 	rsb	r3, r6, #32
 8000b4c:	fa01 f806 	lsl.w	r8, r1, r6
 8000b50:	fa20 f303 	lsr.w	r3, r0, r3
 8000b54:	40b7      	lsls	r7, r6
 8000b56:	ea43 0808 	orr.w	r8, r3, r8
 8000b5a:	40b4      	lsls	r4, r6
 8000b5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b60:	fa1f fc87 	uxth.w	ip, r7
 8000b64:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b68:	0c23      	lsrs	r3, r4, #16
 8000b6a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b6e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b72:	fb01 f20c 	mul.w	r2, r1, ip
 8000b76:	429a      	cmp	r2, r3
 8000b78:	d909      	bls.n	8000b8e <__udivmoddi4+0x62>
 8000b7a:	18fb      	adds	r3, r7, r3
 8000b7c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000b80:	f080 80ea 	bcs.w	8000d58 <__udivmoddi4+0x22c>
 8000b84:	429a      	cmp	r2, r3
 8000b86:	f240 80e7 	bls.w	8000d58 <__udivmoddi4+0x22c>
 8000b8a:	3902      	subs	r1, #2
 8000b8c:	443b      	add	r3, r7
 8000b8e:	1a9a      	subs	r2, r3, r2
 8000b90:	b2a3      	uxth	r3, r4
 8000b92:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b96:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b9e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ba2:	459c      	cmp	ip, r3
 8000ba4:	d909      	bls.n	8000bba <__udivmoddi4+0x8e>
 8000ba6:	18fb      	adds	r3, r7, r3
 8000ba8:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000bac:	f080 80d6 	bcs.w	8000d5c <__udivmoddi4+0x230>
 8000bb0:	459c      	cmp	ip, r3
 8000bb2:	f240 80d3 	bls.w	8000d5c <__udivmoddi4+0x230>
 8000bb6:	443b      	add	r3, r7
 8000bb8:	3802      	subs	r0, #2
 8000bba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bbe:	eba3 030c 	sub.w	r3, r3, ip
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	b11d      	cbz	r5, 8000bce <__udivmoddi4+0xa2>
 8000bc6:	40f3      	lsrs	r3, r6
 8000bc8:	2200      	movs	r2, #0
 8000bca:	e9c5 3200 	strd	r3, r2, [r5]
 8000bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d905      	bls.n	8000be2 <__udivmoddi4+0xb6>
 8000bd6:	b10d      	cbz	r5, 8000bdc <__udivmoddi4+0xb0>
 8000bd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4608      	mov	r0, r1
 8000be0:	e7f5      	b.n	8000bce <__udivmoddi4+0xa2>
 8000be2:	fab3 f183 	clz	r1, r3
 8000be6:	2900      	cmp	r1, #0
 8000be8:	d146      	bne.n	8000c78 <__udivmoddi4+0x14c>
 8000bea:	4573      	cmp	r3, lr
 8000bec:	d302      	bcc.n	8000bf4 <__udivmoddi4+0xc8>
 8000bee:	4282      	cmp	r2, r0
 8000bf0:	f200 8105 	bhi.w	8000dfe <__udivmoddi4+0x2d2>
 8000bf4:	1a84      	subs	r4, r0, r2
 8000bf6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	4690      	mov	r8, r2
 8000bfe:	2d00      	cmp	r5, #0
 8000c00:	d0e5      	beq.n	8000bce <__udivmoddi4+0xa2>
 8000c02:	e9c5 4800 	strd	r4, r8, [r5]
 8000c06:	e7e2      	b.n	8000bce <__udivmoddi4+0xa2>
 8000c08:	2a00      	cmp	r2, #0
 8000c0a:	f000 8090 	beq.w	8000d2e <__udivmoddi4+0x202>
 8000c0e:	fab2 f682 	clz	r6, r2
 8000c12:	2e00      	cmp	r6, #0
 8000c14:	f040 80a4 	bne.w	8000d60 <__udivmoddi4+0x234>
 8000c18:	1a8a      	subs	r2, r1, r2
 8000c1a:	0c03      	lsrs	r3, r0, #16
 8000c1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c20:	b280      	uxth	r0, r0
 8000c22:	b2bc      	uxth	r4, r7
 8000c24:	2101      	movs	r1, #1
 8000c26:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c2a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c32:	fb04 f20c 	mul.w	r2, r4, ip
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d907      	bls.n	8000c4a <__udivmoddi4+0x11e>
 8000c3a:	18fb      	adds	r3, r7, r3
 8000c3c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000c40:	d202      	bcs.n	8000c48 <__udivmoddi4+0x11c>
 8000c42:	429a      	cmp	r2, r3
 8000c44:	f200 80e0 	bhi.w	8000e08 <__udivmoddi4+0x2dc>
 8000c48:	46c4      	mov	ip, r8
 8000c4a:	1a9b      	subs	r3, r3, r2
 8000c4c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c50:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c54:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c58:	fb02 f404 	mul.w	r4, r2, r4
 8000c5c:	429c      	cmp	r4, r3
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0x144>
 8000c60:	18fb      	adds	r3, r7, r3
 8000c62:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0x142>
 8000c68:	429c      	cmp	r4, r3
 8000c6a:	f200 80ca 	bhi.w	8000e02 <__udivmoddi4+0x2d6>
 8000c6e:	4602      	mov	r2, r0
 8000c70:	1b1b      	subs	r3, r3, r4
 8000c72:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c76:	e7a5      	b.n	8000bc4 <__udivmoddi4+0x98>
 8000c78:	f1c1 0620 	rsb	r6, r1, #32
 8000c7c:	408b      	lsls	r3, r1
 8000c7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000c82:	431f      	orrs	r7, r3
 8000c84:	fa0e f401 	lsl.w	r4, lr, r1
 8000c88:	fa20 f306 	lsr.w	r3, r0, r6
 8000c8c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c90:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c94:	4323      	orrs	r3, r4
 8000c96:	fa00 f801 	lsl.w	r8, r0, r1
 8000c9a:	fa1f fc87 	uxth.w	ip, r7
 8000c9e:	fbbe f0f9 	udiv	r0, lr, r9
 8000ca2:	0c1c      	lsrs	r4, r3, #16
 8000ca4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ca8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000cac:	fb00 fe0c 	mul.w	lr, r0, ip
 8000cb0:	45a6      	cmp	lr, r4
 8000cb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000cb6:	d909      	bls.n	8000ccc <__udivmoddi4+0x1a0>
 8000cb8:	193c      	adds	r4, r7, r4
 8000cba:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000cbe:	f080 809c 	bcs.w	8000dfa <__udivmoddi4+0x2ce>
 8000cc2:	45a6      	cmp	lr, r4
 8000cc4:	f240 8099 	bls.w	8000dfa <__udivmoddi4+0x2ce>
 8000cc8:	3802      	subs	r0, #2
 8000cca:	443c      	add	r4, r7
 8000ccc:	eba4 040e 	sub.w	r4, r4, lr
 8000cd0:	fa1f fe83 	uxth.w	lr, r3
 8000cd4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cd8:	fb09 4413 	mls	r4, r9, r3, r4
 8000cdc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ce0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ce4:	45a4      	cmp	ip, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x1ce>
 8000ce8:	193c      	adds	r4, r7, r4
 8000cea:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000cee:	f080 8082 	bcs.w	8000df6 <__udivmoddi4+0x2ca>
 8000cf2:	45a4      	cmp	ip, r4
 8000cf4:	d97f      	bls.n	8000df6 <__udivmoddi4+0x2ca>
 8000cf6:	3b02      	subs	r3, #2
 8000cf8:	443c      	add	r4, r7
 8000cfa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000cfe:	eba4 040c 	sub.w	r4, r4, ip
 8000d02:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d06:	4564      	cmp	r4, ip
 8000d08:	4673      	mov	r3, lr
 8000d0a:	46e1      	mov	r9, ip
 8000d0c:	d362      	bcc.n	8000dd4 <__udivmoddi4+0x2a8>
 8000d0e:	d05f      	beq.n	8000dd0 <__udivmoddi4+0x2a4>
 8000d10:	b15d      	cbz	r5, 8000d2a <__udivmoddi4+0x1fe>
 8000d12:	ebb8 0203 	subs.w	r2, r8, r3
 8000d16:	eb64 0409 	sbc.w	r4, r4, r9
 8000d1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d1e:	fa22 f301 	lsr.w	r3, r2, r1
 8000d22:	431e      	orrs	r6, r3
 8000d24:	40cc      	lsrs	r4, r1
 8000d26:	e9c5 6400 	strd	r6, r4, [r5]
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	e74f      	b.n	8000bce <__udivmoddi4+0xa2>
 8000d2e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d32:	0c01      	lsrs	r1, r0, #16
 8000d34:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d38:	b280      	uxth	r0, r0
 8000d3a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d3e:	463b      	mov	r3, r7
 8000d40:	4638      	mov	r0, r7
 8000d42:	463c      	mov	r4, r7
 8000d44:	46b8      	mov	r8, r7
 8000d46:	46be      	mov	lr, r7
 8000d48:	2620      	movs	r6, #32
 8000d4a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d4e:	eba2 0208 	sub.w	r2, r2, r8
 8000d52:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d56:	e766      	b.n	8000c26 <__udivmoddi4+0xfa>
 8000d58:	4601      	mov	r1, r0
 8000d5a:	e718      	b.n	8000b8e <__udivmoddi4+0x62>
 8000d5c:	4610      	mov	r0, r2
 8000d5e:	e72c      	b.n	8000bba <__udivmoddi4+0x8e>
 8000d60:	f1c6 0220 	rsb	r2, r6, #32
 8000d64:	fa2e f302 	lsr.w	r3, lr, r2
 8000d68:	40b7      	lsls	r7, r6
 8000d6a:	40b1      	lsls	r1, r6
 8000d6c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d70:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d74:	430a      	orrs	r2, r1
 8000d76:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d7a:	b2bc      	uxth	r4, r7
 8000d7c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d80:	0c11      	lsrs	r1, r2, #16
 8000d82:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d86:	fb08 f904 	mul.w	r9, r8, r4
 8000d8a:	40b0      	lsls	r0, r6
 8000d8c:	4589      	cmp	r9, r1
 8000d8e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d92:	b280      	uxth	r0, r0
 8000d94:	d93e      	bls.n	8000e14 <__udivmoddi4+0x2e8>
 8000d96:	1879      	adds	r1, r7, r1
 8000d98:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000d9c:	d201      	bcs.n	8000da2 <__udivmoddi4+0x276>
 8000d9e:	4589      	cmp	r9, r1
 8000da0:	d81f      	bhi.n	8000de2 <__udivmoddi4+0x2b6>
 8000da2:	eba1 0109 	sub.w	r1, r1, r9
 8000da6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000daa:	fb09 f804 	mul.w	r8, r9, r4
 8000dae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000db2:	b292      	uxth	r2, r2
 8000db4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000db8:	4542      	cmp	r2, r8
 8000dba:	d229      	bcs.n	8000e10 <__udivmoddi4+0x2e4>
 8000dbc:	18ba      	adds	r2, r7, r2
 8000dbe:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000dc2:	d2c4      	bcs.n	8000d4e <__udivmoddi4+0x222>
 8000dc4:	4542      	cmp	r2, r8
 8000dc6:	d2c2      	bcs.n	8000d4e <__udivmoddi4+0x222>
 8000dc8:	f1a9 0102 	sub.w	r1, r9, #2
 8000dcc:	443a      	add	r2, r7
 8000dce:	e7be      	b.n	8000d4e <__udivmoddi4+0x222>
 8000dd0:	45f0      	cmp	r8, lr
 8000dd2:	d29d      	bcs.n	8000d10 <__udivmoddi4+0x1e4>
 8000dd4:	ebbe 0302 	subs.w	r3, lr, r2
 8000dd8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ddc:	3801      	subs	r0, #1
 8000dde:	46e1      	mov	r9, ip
 8000de0:	e796      	b.n	8000d10 <__udivmoddi4+0x1e4>
 8000de2:	eba7 0909 	sub.w	r9, r7, r9
 8000de6:	4449      	add	r1, r9
 8000de8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000dec:	fbb1 f9fe 	udiv	r9, r1, lr
 8000df0:	fb09 f804 	mul.w	r8, r9, r4
 8000df4:	e7db      	b.n	8000dae <__udivmoddi4+0x282>
 8000df6:	4673      	mov	r3, lr
 8000df8:	e77f      	b.n	8000cfa <__udivmoddi4+0x1ce>
 8000dfa:	4650      	mov	r0, sl
 8000dfc:	e766      	b.n	8000ccc <__udivmoddi4+0x1a0>
 8000dfe:	4608      	mov	r0, r1
 8000e00:	e6fd      	b.n	8000bfe <__udivmoddi4+0xd2>
 8000e02:	443b      	add	r3, r7
 8000e04:	3a02      	subs	r2, #2
 8000e06:	e733      	b.n	8000c70 <__udivmoddi4+0x144>
 8000e08:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e0c:	443b      	add	r3, r7
 8000e0e:	e71c      	b.n	8000c4a <__udivmoddi4+0x11e>
 8000e10:	4649      	mov	r1, r9
 8000e12:	e79c      	b.n	8000d4e <__udivmoddi4+0x222>
 8000e14:	eba1 0109 	sub.w	r1, r1, r9
 8000e18:	46c4      	mov	ip, r8
 8000e1a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1e:	fb09 f804 	mul.w	r8, r9, r4
 8000e22:	e7c4      	b.n	8000dae <__udivmoddi4+0x282>

08000e24 <__aeabi_idiv0>:
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop

08000e28 <bno055_init>:
  * @param  hi2c: Pointer to I2C handle
  * @param  devAddress: I2C device address
  * @retval true if success, false otherwise
  */
bool bno055_init(bno055_t* sensor, I2C_HandleTypeDef* hi2c, uint16_t devAddress)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	4613      	mov	r3, r2
 8000e34:	80fb      	strh	r3, [r7, #6]
    if (sensor == NULL || hi2c == NULL) return false;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d002      	beq.n	8000e42 <bno055_init+0x1a>
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d101      	bne.n	8000e46 <bno055_init+0x1e>
 8000e42:	2300      	movs	r3, #0
 8000e44:	e053      	b.n	8000eee <bno055_init+0xc6>
    
    sensor->hi2c = hi2c;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	68ba      	ldr	r2, [r7, #8]
 8000e4a:	601a      	str	r2, [r3, #0]
    sensor->device_address = devAddress << 1; // HAL uses 8-bit addresses
 8000e4c:	88fb      	ldrh	r3, [r7, #6]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	b29a      	uxth	r2, r3
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	809a      	strh	r2, [r3, #4]
    
    // Check chip ID
    uint8_t id;
    if (!bno055_getChipID(sensor, &id)) {
 8000e56:	f107 0317 	add.w	r3, r7, #23
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	68f8      	ldr	r0, [r7, #12]
 8000e5e:	f000 f884 	bl	8000f6a <bno055_getChipID>
 8000e62:	4603      	mov	r3, r0
 8000e64:	f083 0301 	eor.w	r3, r3, #1
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <bno055_init+0x4a>
        return false;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	e03d      	b.n	8000eee <bno055_init+0xc6>
    }
    
    if (id != BNO055_ID) {
 8000e72:	7dfb      	ldrb	r3, [r7, #23]
 8000e74:	2ba0      	cmp	r3, #160	@ 0xa0
 8000e76:	d001      	beq.n	8000e7c <bno055_init+0x54>
        return false;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	e038      	b.n	8000eee <bno055_init+0xc6>
    }
    
    // Reset the device
    if (!bno055_reset(sensor)) {
 8000e7c:	68f8      	ldr	r0, [r7, #12]
 8000e7e:	f000 fa89 	bl	8001394 <bno055_reset>
 8000e82:	4603      	mov	r3, r0
 8000e84:	f083 0301 	eor.w	r3, r3, #1
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <bno055_init+0x6a>
        return false;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	e02d      	b.n	8000eee <bno055_init+0xc6>
    }
    
    // Wait for reset to complete
    HAL_Delay(650);
 8000e92:	f240 208a 	movw	r0, #650	@ 0x28a
 8000e96:	f002 fdad 	bl	80039f4 <HAL_Delay>
    
    // Set to normal power mode
    if (!bno055_setPowerMode(sensor, BNO055_POWER_MODE_NORMAL)) {
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	68f8      	ldr	r0, [r7, #12]
 8000e9e:	f000 f84e 	bl	8000f3e <bno055_setPowerMode>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	f083 0301 	eor.w	r3, r3, #1
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <bno055_init+0x8a>
        return false;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	e01d      	b.n	8000eee <bno055_init+0xc6>
    }
    
    HAL_Delay(10);
 8000eb2:	200a      	movs	r0, #10
 8000eb4:	f002 fd9e 	bl	80039f4 <HAL_Delay>
    
    // Get revision info
    if (!bno055_getRevInfo(sensor)) {
 8000eb8:	68f8      	ldr	r0, [r7, #12]
 8000eba:	f000 f879 	bl	8000fb0 <bno055_getRevInfo>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	f083 0301 	eor.w	r3, r3, #1
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <bno055_init+0xa6>
        return false;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	e00f      	b.n	8000eee <bno055_init+0xc6>
    }
    
    // Set operation mode to NDOF
    if (!bno055_setOperationMode(sensor, OPERATION_MODE_NDOF)) {
 8000ece:	210c      	movs	r1, #12
 8000ed0:	68f8      	ldr	r0, [r7, #12]
 8000ed2:	f000 f810 	bl	8000ef6 <bno055_setOperationMode>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	f083 0301 	eor.w	r3, r3, #1
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <bno055_init+0xbe>
        return false;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	e003      	b.n	8000eee <bno055_init+0xc6>
    }
    
    HAL_Delay(20);
 8000ee6:	2014      	movs	r0, #20
 8000ee8:	f002 fd84 	bl	80039f4 <HAL_Delay>
    
    return true;
 8000eec:	2301      	movs	r3, #1
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <bno055_setOperationMode>:
  * @param  sensor: Pointer to BNO055 structure
  * @param  mode: Operation mode
  * @retval true if success, false otherwise
  */
bool bno055_setOperationMode(bno055_t* sensor, bno055_opmode_t mode)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
 8000efe:	460b      	mov	r3, r1
 8000f00:	70fb      	strb	r3, [r7, #3]
    if (sensor == NULL) return false;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d101      	bne.n	8000f0c <bno055_setOperationMode+0x16>
 8000f08:	2300      	movs	r3, #0
 8000f0a:	e014      	b.n	8000f36 <bno055_setOperationMode+0x40>
    
    sensor->mode = mode;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	78fa      	ldrb	r2, [r7, #3]
 8000f10:	719a      	strb	r2, [r3, #6]
    if (!bno055_writeRegister(sensor, BNO055_OPR_MODE_ADDR, mode)) {
 8000f12:	78fb      	ldrb	r3, [r7, #3]
 8000f14:	461a      	mov	r2, r3
 8000f16:	213d      	movs	r1, #61	@ 0x3d
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f000 fa4e 	bl	80013ba <bno055_writeRegister>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	f083 0301 	eor.w	r3, r3, #1
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <bno055_setOperationMode+0x38>
        return false;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	e003      	b.n	8000f36 <bno055_setOperationMode+0x40>
    }
    
    HAL_Delay(30);
 8000f2e:	201e      	movs	r0, #30
 8000f30:	f002 fd60 	bl	80039f4 <HAL_Delay>
    return true;
 8000f34:	2301      	movs	r3, #1
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <bno055_setPowerMode>:
  * @param  sensor: Pointer to BNO055 structure
  * @param  powermode: Power mode
  * @retval true if success, false otherwise
  */
bool bno055_setPowerMode(bno055_t* sensor, bno055_powermode_t powermode)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
 8000f46:	460b      	mov	r3, r1
 8000f48:	70fb      	strb	r3, [r7, #3]
    if (sensor == NULL) return false;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d101      	bne.n	8000f54 <bno055_setPowerMode+0x16>
 8000f50:	2300      	movs	r3, #0
 8000f52:	e006      	b.n	8000f62 <bno055_setPowerMode+0x24>
    
    return bno055_writeRegister(sensor, BNO055_PWR_MODE_ADDR, powermode);
 8000f54:	78fb      	ldrb	r3, [r7, #3]
 8000f56:	461a      	mov	r2, r3
 8000f58:	213e      	movs	r1, #62	@ 0x3e
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f000 fa2d 	bl	80013ba <bno055_writeRegister>
 8000f60:	4603      	mov	r3, r0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <bno055_getChipID>:
  * @param  sensor: Pointer to BNO055 structure
  * @param  id: Pointer to store chip ID
  * @retval true if success, false otherwise
  */
bool bno055_getChipID(bno055_t* sensor, uint8_t* id)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
 8000f72:	6039      	str	r1, [r7, #0]
    if (sensor == NULL || id == NULL) return false;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d002      	beq.n	8000f80 <bno055_getChipID+0x16>
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d101      	bne.n	8000f84 <bno055_getChipID+0x1a>
 8000f80:	2300      	movs	r3, #0
 8000f82:	e011      	b.n	8000fa8 <bno055_getChipID+0x3e>
    
    if (!bno055_readRegister(sensor, BNO055_CHIP_ID_ADDR, id)) {
 8000f84:	683a      	ldr	r2, [r7, #0]
 8000f86:	2100      	movs	r1, #0
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f000 fa3f 	bl	800140c <bno055_readRegister>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	f083 0301 	eor.w	r3, r3, #1
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <bno055_getChipID+0x34>
        return false;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	e004      	b.n	8000fa8 <bno055_getChipID+0x3e>
    }
    
    sensor->chip_id = *id;
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	781a      	ldrb	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	71da      	strb	r2, [r3, #7]
    return true;
 8000fa6:	2301      	movs	r3, #1
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <bno055_getRevInfo>:
  * @brief  Get revision information
  * @param  sensor: Pointer to BNO055 structure
  * @retval true if success, false otherwise
  */
bool bno055_getRevInfo(bno055_t* sensor)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
    if (sensor == NULL) return false;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d101      	bne.n	8000fc2 <bno055_getRevInfo+0x12>
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	e065      	b.n	800108e <bno055_getRevInfo+0xde>
    
    uint8_t a, b;
    
    if (!bno055_readRegister(sensor, BNO055_ACCEL_REV_ID_ADDR, &sensor->accel_rev_id)) {
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3308      	adds	r3, #8
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	2101      	movs	r1, #1
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f000 fa1e 	bl	800140c <bno055_readRegister>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	f083 0301 	eor.w	r3, r3, #1
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <bno055_getRevInfo+0x30>
        return false;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	e056      	b.n	800108e <bno055_getRevInfo+0xde>
    }
    
    if (!bno055_readRegister(sensor, BNO055_MAG_REV_ID_ADDR, &sensor->mag_rev_id)) {
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3309      	adds	r3, #9
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	2102      	movs	r1, #2
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f000 fa0f 	bl	800140c <bno055_readRegister>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	f083 0301 	eor.w	r3, r3, #1
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <bno055_getRevInfo+0x4e>
        return false;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	e047      	b.n	800108e <bno055_getRevInfo+0xde>
    }
    
    if (!bno055_readRegister(sensor, BNO055_GYRO_REV_ID_ADDR, &sensor->gyro_rev_id)) {
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	330a      	adds	r3, #10
 8001002:	461a      	mov	r2, r3
 8001004:	2103      	movs	r1, #3
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f000 fa00 	bl	800140c <bno055_readRegister>
 800100c:	4603      	mov	r3, r0
 800100e:	f083 0301 	eor.w	r3, r3, #1
 8001012:	b2db      	uxtb	r3, r3
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <bno055_getRevInfo+0x6c>
        return false;
 8001018:	2300      	movs	r3, #0
 800101a:	e038      	b.n	800108e <bno055_getRevInfo+0xde>
    }
    
    if (!bno055_readRegister(sensor, BNO055_BL_REV_ID_ADDR, &sensor->bl_rev_id)) {
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	330e      	adds	r3, #14
 8001020:	461a      	mov	r2, r3
 8001022:	2106      	movs	r1, #6
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f000 f9f1 	bl	800140c <bno055_readRegister>
 800102a:	4603      	mov	r3, r0
 800102c:	f083 0301 	eor.w	r3, r3, #1
 8001030:	b2db      	uxtb	r3, r3
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <bno055_getRevInfo+0x8a>
        return false;
 8001036:	2300      	movs	r3, #0
 8001038:	e029      	b.n	800108e <bno055_getRevInfo+0xde>
    }
    
    if (!bno055_readRegister(sensor, BNO055_SW_REV_ID_LSB_ADDR, &a)) {
 800103a:	f107 030f 	add.w	r3, r7, #15
 800103e:	461a      	mov	r2, r3
 8001040:	2104      	movs	r1, #4
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f000 f9e2 	bl	800140c <bno055_readRegister>
 8001048:	4603      	mov	r3, r0
 800104a:	f083 0301 	eor.w	r3, r3, #1
 800104e:	b2db      	uxtb	r3, r3
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <bno055_getRevInfo+0xa8>
        return false;
 8001054:	2300      	movs	r3, #0
 8001056:	e01a      	b.n	800108e <bno055_getRevInfo+0xde>
    }
    
    if (!bno055_readRegister(sensor, BNO055_SW_REV_ID_MSB_ADDR, &b)) {
 8001058:	f107 030e 	add.w	r3, r7, #14
 800105c:	461a      	mov	r2, r3
 800105e:	2105      	movs	r1, #5
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f000 f9d3 	bl	800140c <bno055_readRegister>
 8001066:	4603      	mov	r3, r0
 8001068:	f083 0301 	eor.w	r3, r3, #1
 800106c:	b2db      	uxtb	r3, r3
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <bno055_getRevInfo+0xc6>
        return false;
 8001072:	2300      	movs	r3, #0
 8001074:	e00b      	b.n	800108e <bno055_getRevInfo+0xde>
    }
    
    sensor->sw_rev_id = (((uint16_t)b) << 8) | ((uint16_t)a);
 8001076:	7bbb      	ldrb	r3, [r7, #14]
 8001078:	b21b      	sxth	r3, r3
 800107a:	021b      	lsls	r3, r3, #8
 800107c:	b21a      	sxth	r2, r3
 800107e:	7bfb      	ldrb	r3, [r7, #15]
 8001080:	b21b      	sxth	r3, r3
 8001082:	4313      	orrs	r3, r2
 8001084:	b21b      	sxth	r3, r3
 8001086:	b29a      	uxth	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	819a      	strh	r2, [r3, #12]
    
    return true;
 800108c:	2301      	movs	r3, #1
}
 800108e:	4618      	mov	r0, r3
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <bno055_getVector>:
  * @param  vector_type: Type of vector to read
  * @param  vector: Pointer to store vector data
  * @retval true if success, false otherwise
  */
bool bno055_getVector(bno055_t* sensor, uint8_t vector_type, bno055_vector_t* vector)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b088      	sub	sp, #32
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	460b      	mov	r3, r1
 80010a2:	607a      	str	r2, [r7, #4]
 80010a4:	72fb      	strb	r3, [r7, #11]
    if (sensor == NULL || vector == NULL) return false;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d002      	beq.n	80010b2 <bno055_getVector+0x1a>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d101      	bne.n	80010b6 <bno055_getVector+0x1e>
 80010b2:	2300      	movs	r3, #0
 80010b4:	e165      	b.n	8001382 <bno055_getVector+0x2ea>
    
    uint8_t buffer[6];
    if (!bno055_readData(sensor, vector_type, buffer, 6)) {
 80010b6:	f107 0214 	add.w	r2, r7, #20
 80010ba:	7af9      	ldrb	r1, [r7, #11]
 80010bc:	2306      	movs	r3, #6
 80010be:	68f8      	ldr	r0, [r7, #12]
 80010c0:	f000 f9cf 	bl	8001462 <bno055_readData>
 80010c4:	4603      	mov	r3, r0
 80010c6:	f083 0301 	eor.w	r3, r3, #1
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <bno055_getVector+0x3c>
        return false;
 80010d0:	2300      	movs	r3, #0
 80010d2:	e156      	b.n	8001382 <bno055_getVector+0x2ea>
    }
    
    int16_t x = ((int16_t)buffer[1] << 8) | buffer[0];
 80010d4:	7d7b      	ldrb	r3, [r7, #21]
 80010d6:	b21b      	sxth	r3, r3
 80010d8:	021b      	lsls	r3, r3, #8
 80010da:	b21a      	sxth	r2, r3
 80010dc:	7d3b      	ldrb	r3, [r7, #20]
 80010de:	b21b      	sxth	r3, r3
 80010e0:	4313      	orrs	r3, r2
 80010e2:	83fb      	strh	r3, [r7, #30]
    int16_t y = ((int16_t)buffer[3] << 8) | buffer[2];
 80010e4:	7dfb      	ldrb	r3, [r7, #23]
 80010e6:	b21b      	sxth	r3, r3
 80010e8:	021b      	lsls	r3, r3, #8
 80010ea:	b21a      	sxth	r2, r3
 80010ec:	7dbb      	ldrb	r3, [r7, #22]
 80010ee:	b21b      	sxth	r3, r3
 80010f0:	4313      	orrs	r3, r2
 80010f2:	83bb      	strh	r3, [r7, #28]
    int16_t z = ((int16_t)buffer[5] << 8) | buffer[4];
 80010f4:	7e7b      	ldrb	r3, [r7, #25]
 80010f6:	b21b      	sxth	r3, r3
 80010f8:	021b      	lsls	r3, r3, #8
 80010fa:	b21a      	sxth	r2, r3
 80010fc:	7e3b      	ldrb	r3, [r7, #24]
 80010fe:	b21b      	sxth	r3, r3
 8001100:	4313      	orrs	r3, r2
 8001102:	837b      	strh	r3, [r7, #26]
    
    /* Convert the value to appropriate range (section 3.6.4) */
    /* and assign the value to the Vector type */
    switch(vector_type) {
 8001104:	7afb      	ldrb	r3, [r7, #11]
 8001106:	3b08      	subs	r3, #8
 8001108:	2b26      	cmp	r3, #38	@ 0x26
 800110a:	f200 8139 	bhi.w	8001380 <bno055_getVector+0x2e8>
 800110e:	a201      	add	r2, pc, #4	@ (adr r2, 8001114 <bno055_getVector+0x7c>)
 8001110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001114:	0800130d 	.word	0x0800130d
 8001118:	08001381 	.word	0x08001381
 800111c:	08001381 	.word	0x08001381
 8001120:	08001381 	.word	0x08001381
 8001124:	08001381 	.word	0x08001381
 8001128:	08001381 	.word	0x08001381
 800112c:	080011b1 	.word	0x080011b1
 8001130:	08001381 	.word	0x08001381
 8001134:	08001381 	.word	0x08001381
 8001138:	08001381 	.word	0x08001381
 800113c:	08001381 	.word	0x08001381
 8001140:	08001381 	.word	0x08001381
 8001144:	08001225 	.word	0x08001225
 8001148:	08001381 	.word	0x08001381
 800114c:	08001381 	.word	0x08001381
 8001150:	08001381 	.word	0x08001381
 8001154:	08001381 	.word	0x08001381
 8001158:	08001381 	.word	0x08001381
 800115c:	08001299 	.word	0x08001299
 8001160:	08001381 	.word	0x08001381
 8001164:	08001381 	.word	0x08001381
 8001168:	08001381 	.word	0x08001381
 800116c:	08001381 	.word	0x08001381
 8001170:	08001381 	.word	0x08001381
 8001174:	08001381 	.word	0x08001381
 8001178:	08001381 	.word	0x08001381
 800117c:	08001381 	.word	0x08001381
 8001180:	08001381 	.word	0x08001381
 8001184:	08001381 	.word	0x08001381
 8001188:	08001381 	.word	0x08001381
 800118c:	08001381 	.word	0x08001381
 8001190:	08001381 	.word	0x08001381
 8001194:	0800130d 	.word	0x0800130d
 8001198:	08001381 	.word	0x08001381
 800119c:	08001381 	.word	0x08001381
 80011a0:	08001381 	.word	0x08001381
 80011a4:	08001381 	.word	0x08001381
 80011a8:	08001381 	.word	0x08001381
 80011ac:	0800130d 	.word	0x0800130d
        case VECTOR_MAGNETOMETER:
            /* 1uT = 16 LSB */
            vector->x = ((double)x)/16.0;
 80011b0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff f9d5 	bl	8000564 <__aeabi_i2d>
 80011ba:	f04f 0200 	mov.w	r2, #0
 80011be:	4b73      	ldr	r3, [pc, #460]	@ (800138c <bno055_getVector+0x2f4>)
 80011c0:	f7ff fb64 	bl	800088c <__aeabi_ddiv>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4610      	mov	r0, r2
 80011ca:	4619      	mov	r1, r3
 80011cc:	f7ff fc46 	bl	8000a5c <__aeabi_d2f>
 80011d0:	4602      	mov	r2, r0
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	601a      	str	r2, [r3, #0]
            vector->y = ((double)y)/16.0;
 80011d6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff f9c2 	bl	8000564 <__aeabi_i2d>
 80011e0:	f04f 0200 	mov.w	r2, #0
 80011e4:	4b69      	ldr	r3, [pc, #420]	@ (800138c <bno055_getVector+0x2f4>)
 80011e6:	f7ff fb51 	bl	800088c <__aeabi_ddiv>
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	4610      	mov	r0, r2
 80011f0:	4619      	mov	r1, r3
 80011f2:	f7ff fc33 	bl	8000a5c <__aeabi_d2f>
 80011f6:	4602      	mov	r2, r0
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	605a      	str	r2, [r3, #4]
            vector->z = ((double)z)/16.0;
 80011fc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff f9af 	bl	8000564 <__aeabi_i2d>
 8001206:	f04f 0200 	mov.w	r2, #0
 800120a:	4b60      	ldr	r3, [pc, #384]	@ (800138c <bno055_getVector+0x2f4>)
 800120c:	f7ff fb3e 	bl	800088c <__aeabi_ddiv>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	4610      	mov	r0, r2
 8001216:	4619      	mov	r1, r3
 8001218:	f7ff fc20 	bl	8000a5c <__aeabi_d2f>
 800121c:	4602      	mov	r2, r0
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	609a      	str	r2, [r3, #8]
            break;
 8001222:	e0ad      	b.n	8001380 <bno055_getVector+0x2e8>
        case VECTOR_GYROSCOPE:
            /* 1dps = 16 LSB */
            vector->x = ((double)x)/16.0;
 8001224:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff f99b 	bl	8000564 <__aeabi_i2d>
 800122e:	f04f 0200 	mov.w	r2, #0
 8001232:	4b56      	ldr	r3, [pc, #344]	@ (800138c <bno055_getVector+0x2f4>)
 8001234:	f7ff fb2a 	bl	800088c <__aeabi_ddiv>
 8001238:	4602      	mov	r2, r0
 800123a:	460b      	mov	r3, r1
 800123c:	4610      	mov	r0, r2
 800123e:	4619      	mov	r1, r3
 8001240:	f7ff fc0c 	bl	8000a5c <__aeabi_d2f>
 8001244:	4602      	mov	r2, r0
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	601a      	str	r2, [r3, #0]
            vector->y = ((double)y)/16.0;
 800124a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff f988 	bl	8000564 <__aeabi_i2d>
 8001254:	f04f 0200 	mov.w	r2, #0
 8001258:	4b4c      	ldr	r3, [pc, #304]	@ (800138c <bno055_getVector+0x2f4>)
 800125a:	f7ff fb17 	bl	800088c <__aeabi_ddiv>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	4610      	mov	r0, r2
 8001264:	4619      	mov	r1, r3
 8001266:	f7ff fbf9 	bl	8000a5c <__aeabi_d2f>
 800126a:	4602      	mov	r2, r0
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	605a      	str	r2, [r3, #4]
            vector->z = ((double)z)/16.0;
 8001270:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff f975 	bl	8000564 <__aeabi_i2d>
 800127a:	f04f 0200 	mov.w	r2, #0
 800127e:	4b43      	ldr	r3, [pc, #268]	@ (800138c <bno055_getVector+0x2f4>)
 8001280:	f7ff fb04 	bl	800088c <__aeabi_ddiv>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4610      	mov	r0, r2
 800128a:	4619      	mov	r1, r3
 800128c:	f7ff fbe6 	bl	8000a5c <__aeabi_d2f>
 8001290:	4602      	mov	r2, r0
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	609a      	str	r2, [r3, #8]
            break;
 8001296:	e073      	b.n	8001380 <bno055_getVector+0x2e8>
        case VECTOR_EULER:
            /* 1 degree = 16 LSB */
            vector->x = ((double)x)/16.0;
 8001298:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff f961 	bl	8000564 <__aeabi_i2d>
 80012a2:	f04f 0200 	mov.w	r2, #0
 80012a6:	4b39      	ldr	r3, [pc, #228]	@ (800138c <bno055_getVector+0x2f4>)
 80012a8:	f7ff faf0 	bl	800088c <__aeabi_ddiv>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	4610      	mov	r0, r2
 80012b2:	4619      	mov	r1, r3
 80012b4:	f7ff fbd2 	bl	8000a5c <__aeabi_d2f>
 80012b8:	4602      	mov	r2, r0
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	601a      	str	r2, [r3, #0]
            vector->y = ((double)y)/16.0;
 80012be:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff f94e 	bl	8000564 <__aeabi_i2d>
 80012c8:	f04f 0200 	mov.w	r2, #0
 80012cc:	4b2f      	ldr	r3, [pc, #188]	@ (800138c <bno055_getVector+0x2f4>)
 80012ce:	f7ff fadd 	bl	800088c <__aeabi_ddiv>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	4610      	mov	r0, r2
 80012d8:	4619      	mov	r1, r3
 80012da:	f7ff fbbf 	bl	8000a5c <__aeabi_d2f>
 80012de:	4602      	mov	r2, r0
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	605a      	str	r2, [r3, #4]
            vector->z = ((double)z)/16.0;
 80012e4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff f93b 	bl	8000564 <__aeabi_i2d>
 80012ee:	f04f 0200 	mov.w	r2, #0
 80012f2:	4b26      	ldr	r3, [pc, #152]	@ (800138c <bno055_getVector+0x2f4>)
 80012f4:	f7ff faca 	bl	800088c <__aeabi_ddiv>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4610      	mov	r0, r2
 80012fe:	4619      	mov	r1, r3
 8001300:	f7ff fbac 	bl	8000a5c <__aeabi_d2f>
 8001304:	4602      	mov	r2, r0
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	609a      	str	r2, [r3, #8]
            break;
 800130a:	e039      	b.n	8001380 <bno055_getVector+0x2e8>
        case VECTOR_ACCELEROMETER:
        case VECTOR_LINEARACCEL:
        case VECTOR_GRAVITY:
            /* 1m/s^2 = 100 LSB */
            vector->x = ((double)x)/100.0;
 800130c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff f927 	bl	8000564 <__aeabi_i2d>
 8001316:	f04f 0200 	mov.w	r2, #0
 800131a:	4b1d      	ldr	r3, [pc, #116]	@ (8001390 <bno055_getVector+0x2f8>)
 800131c:	f7ff fab6 	bl	800088c <__aeabi_ddiv>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	4610      	mov	r0, r2
 8001326:	4619      	mov	r1, r3
 8001328:	f7ff fb98 	bl	8000a5c <__aeabi_d2f>
 800132c:	4602      	mov	r2, r0
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	601a      	str	r2, [r3, #0]
            vector->y = ((double)y)/100.0;
 8001332:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff f914 	bl	8000564 <__aeabi_i2d>
 800133c:	f04f 0200 	mov.w	r2, #0
 8001340:	4b13      	ldr	r3, [pc, #76]	@ (8001390 <bno055_getVector+0x2f8>)
 8001342:	f7ff faa3 	bl	800088c <__aeabi_ddiv>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	4610      	mov	r0, r2
 800134c:	4619      	mov	r1, r3
 800134e:	f7ff fb85 	bl	8000a5c <__aeabi_d2f>
 8001352:	4602      	mov	r2, r0
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	605a      	str	r2, [r3, #4]
            vector->z = ((double)z)/100.0;
 8001358:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff f901 	bl	8000564 <__aeabi_i2d>
 8001362:	f04f 0200 	mov.w	r2, #0
 8001366:	4b0a      	ldr	r3, [pc, #40]	@ (8001390 <bno055_getVector+0x2f8>)
 8001368:	f7ff fa90 	bl	800088c <__aeabi_ddiv>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	4610      	mov	r0, r2
 8001372:	4619      	mov	r1, r3
 8001374:	f7ff fb72 	bl	8000a5c <__aeabi_d2f>
 8001378:	4602      	mov	r2, r0
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	609a      	str	r2, [r3, #8]
            break;
 800137e:	bf00      	nop
    }
    
    return true;
 8001380:	2301      	movs	r3, #1
}
 8001382:	4618      	mov	r0, r3
 8001384:	3720      	adds	r7, #32
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40300000 	.word	0x40300000
 8001390:	40590000 	.word	0x40590000

08001394 <bno055_reset>:
  * @brief  Reset BNO055
  * @param  sensor: Pointer to BNO055 structure
  * @retval true if success, false otherwise
  */
bool bno055_reset(bno055_t* sensor)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
    if (sensor == NULL) return false;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d101      	bne.n	80013a6 <bno055_reset+0x12>
 80013a2:	2300      	movs	r3, #0
 80013a4:	e005      	b.n	80013b2 <bno055_reset+0x1e>
    
    return bno055_writeRegister(sensor, BNO055_SYS_RST_ADDR, 0x20);
 80013a6:	2220      	movs	r2, #32
 80013a8:	213f      	movs	r1, #63	@ 0x3f
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f000 f805 	bl	80013ba <bno055_writeRegister>
 80013b0:	4603      	mov	r3, r0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <bno055_writeRegister>:
  * @param  reg: Register address
  * @param  value: Value to write
  * @retval true if success, false otherwise
  */
static bool bno055_writeRegister(bno055_t* sensor, uint8_t reg, uint8_t value)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b088      	sub	sp, #32
 80013be:	af04      	add	r7, sp, #16
 80013c0:	6078      	str	r0, [r7, #4]
 80013c2:	460b      	mov	r3, r1
 80013c4:	70fb      	strb	r3, [r7, #3]
 80013c6:	4613      	mov	r3, r2
 80013c8:	70bb      	strb	r3, [r7, #2]
    if (sensor == NULL) return false;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d101      	bne.n	80013d4 <bno055_writeRegister+0x1a>
 80013d0:	2300      	movs	r3, #0
 80013d2:	e017      	b.n	8001404 <bno055_writeRegister+0x4a>
    
    HAL_StatusTypeDef status = HAL_I2C_Mem_Write(sensor->hi2c, sensor->device_address, 
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6818      	ldr	r0, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	8899      	ldrh	r1, [r3, #4]
 80013dc:	78fb      	ldrb	r3, [r7, #3]
 80013de:	b29a      	uxth	r2, r3
 80013e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013e4:	9302      	str	r3, [sp, #8]
 80013e6:	2301      	movs	r3, #1
 80013e8:	9301      	str	r3, [sp, #4]
 80013ea:	1cbb      	adds	r3, r7, #2
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	2301      	movs	r3, #1
 80013f0:	f004 fc60 	bl	8005cb4 <HAL_I2C_Mem_Write>
 80013f4:	4603      	mov	r3, r0
 80013f6:	73fb      	strb	r3, [r7, #15]
                                                 reg, I2C_MEMADD_SIZE_8BIT, 
                                                 &value, 1, HAL_MAX_DELAY);
    return (status == HAL_OK);
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	bf0c      	ite	eq
 80013fe:	2301      	moveq	r3, #1
 8001400:	2300      	movne	r3, #0
 8001402:	b2db      	uxtb	r3, r3
}
 8001404:	4618      	mov	r0, r3
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <bno055_readRegister>:
  * @param  reg: Register address
  * @param  data: Pointer to store read data
  * @retval true if success, false otherwise
  */
static bool bno055_readRegister(bno055_t* sensor, uint8_t reg, uint8_t* data)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08a      	sub	sp, #40	@ 0x28
 8001410:	af04      	add	r7, sp, #16
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	460b      	mov	r3, r1
 8001416:	607a      	str	r2, [r7, #4]
 8001418:	72fb      	strb	r3, [r7, #11]
    if (sensor == NULL || data == NULL) return false;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d002      	beq.n	8001426 <bno055_readRegister+0x1a>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <bno055_readRegister+0x1e>
 8001426:	2300      	movs	r3, #0
 8001428:	e017      	b.n	800145a <bno055_readRegister+0x4e>
    
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(sensor->hi2c, sensor->device_address, 
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	6818      	ldr	r0, [r3, #0]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	8899      	ldrh	r1, [r3, #4]
 8001432:	7afb      	ldrb	r3, [r7, #11]
 8001434:	b29a      	uxth	r2, r3
 8001436:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800143a:	9302      	str	r3, [sp, #8]
 800143c:	2301      	movs	r3, #1
 800143e:	9301      	str	r3, [sp, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	2301      	movs	r3, #1
 8001446:	f004 fd49 	bl	8005edc <HAL_I2C_Mem_Read>
 800144a:	4603      	mov	r3, r0
 800144c:	75fb      	strb	r3, [r7, #23]
                                                reg, I2C_MEMADD_SIZE_8BIT, 
                                                data, 1, HAL_MAX_DELAY);
    return (status == HAL_OK);
 800144e:	7dfb      	ldrb	r3, [r7, #23]
 8001450:	2b00      	cmp	r3, #0
 8001452:	bf0c      	ite	eq
 8001454:	2301      	moveq	r3, #1
 8001456:	2300      	movne	r3, #0
 8001458:	b2db      	uxtb	r3, r3
}
 800145a:	4618      	mov	r0, r3
 800145c:	3718      	adds	r7, #24
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <bno055_readData>:
  * @param  buffer: Pointer to store read data
  * @param  len: Number of bytes to read
  * @retval true if success, false otherwise
  */
static bool bno055_readData(bno055_t* sensor, uint8_t reg, uint8_t* buffer, uint8_t len)
{
 8001462:	b590      	push	{r4, r7, lr}
 8001464:	b08b      	sub	sp, #44	@ 0x2c
 8001466:	af04      	add	r7, sp, #16
 8001468:	60f8      	str	r0, [r7, #12]
 800146a:	607a      	str	r2, [r7, #4]
 800146c:	461a      	mov	r2, r3
 800146e:	460b      	mov	r3, r1
 8001470:	72fb      	strb	r3, [r7, #11]
 8001472:	4613      	mov	r3, r2
 8001474:	72bb      	strb	r3, [r7, #10]
    if (sensor == NULL || buffer == NULL) return false;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d002      	beq.n	8001482 <bno055_readData+0x20>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d101      	bne.n	8001486 <bno055_readData+0x24>
 8001482:	2300      	movs	r3, #0
 8001484:	e018      	b.n	80014b8 <bno055_readData+0x56>
    
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(sensor->hi2c, sensor->device_address, 
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6818      	ldr	r0, [r3, #0]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	8899      	ldrh	r1, [r3, #4]
 800148e:	7afb      	ldrb	r3, [r7, #11]
 8001490:	b29a      	uxth	r2, r3
 8001492:	7abb      	ldrb	r3, [r7, #10]
 8001494:	b29b      	uxth	r3, r3
 8001496:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800149a:	9402      	str	r4, [sp, #8]
 800149c:	9301      	str	r3, [sp, #4]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	2301      	movs	r3, #1
 80014a4:	f004 fd1a 	bl	8005edc <HAL_I2C_Mem_Read>
 80014a8:	4603      	mov	r3, r0
 80014aa:	75fb      	strb	r3, [r7, #23]
                                                reg, I2C_MEMADD_SIZE_8BIT, 
                                                buffer, len, HAL_MAX_DELAY);
    return (status == HAL_OK);
 80014ac:	7dfb      	ldrb	r3, [r7, #23]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	bf0c      	ite	eq
 80014b2:	2301      	moveq	r3, #1
 80014b4:	2300      	movne	r3, #0
 80014b6:	b2db      	uxtb	r3, r3
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	371c      	adds	r7, #28
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd90      	pop	{r4, r7, pc}

080014c0 <Encoder_Update>:
/**
  * @brief  Update encoder position and calculate distance
  * @param  None
  * @retval None
  */
void Encoder_Update(void) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
    uint32_t current_tick = HAL_GetTick();
 80014c6:	f002 fa89 	bl	80039dc <HAL_GetTick>
 80014ca:	60f8      	str	r0, [r7, #12]
    int32_t count = __HAL_TIM_GET_COUNTER(&htim3);
 80014cc:	4b30      	ldr	r3, [pc, #192]	@ (8001590 <Encoder_Update+0xd0>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d2:	60bb      	str	r3, [r7, #8]

    encoder_velocity = count - encoder_last;
 80014d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001594 <Encoder_Update+0xd4>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	68ba      	ldr	r2, [r7, #8]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	4a2e      	ldr	r2, [pc, #184]	@ (8001598 <Encoder_Update+0xd8>)
 80014de:	6013      	str	r3, [r2, #0]
    encoder_last = count;
 80014e0:	4a2c      	ldr	r2, [pc, #176]	@ (8001594 <Encoder_Update+0xd4>)
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	6013      	str	r3, [r2, #0]

    // Timer sayacı taşması kontrolü
    if (encoder_velocity > 32767)
 80014e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001598 <Encoder_Update+0xd8>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80014ee:	db06      	blt.n	80014fe <Encoder_Update+0x3e>
        encoder_velocity -= 65536;
 80014f0:	4b29      	ldr	r3, [pc, #164]	@ (8001598 <Encoder_Update+0xd8>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 80014f8:	4a27      	ldr	r2, [pc, #156]	@ (8001598 <Encoder_Update+0xd8>)
 80014fa:	6013      	str	r3, [r2, #0]
 80014fc:	e00a      	b.n	8001514 <Encoder_Update+0x54>
    else if (encoder_velocity < -32767)
 80014fe:	4b26      	ldr	r3, [pc, #152]	@ (8001598 <Encoder_Update+0xd8>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8001506:	dc05      	bgt.n	8001514 <Encoder_Update+0x54>
        encoder_velocity += 65536;
 8001508:	4b23      	ldr	r3, [pc, #140]	@ (8001598 <Encoder_Update+0xd8>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001510:	4a21      	ldr	r2, [pc, #132]	@ (8001598 <Encoder_Update+0xd8>)
 8001512:	6013      	str	r3, [r2, #0]

    // Toplam pozisyona ekle
    encoder_position += encoder_velocity;
 8001514:	4b20      	ldr	r3, [pc, #128]	@ (8001598 <Encoder_Update+0xd8>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b20      	ldr	r3, [pc, #128]	@ (800159c <Encoder_Update+0xdc>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4413      	add	r3, r2
 800151e:	4a1f      	ldr	r2, [pc, #124]	@ (800159c <Encoder_Update+0xdc>)
 8001520:	6013      	str	r3, [r2, #0]

    // Toplam mesafe (mm olarak)
    encoder_total_distance = encoder_position * encoder_distance_per_pulse;
 8001522:	4b1e      	ldr	r3, [pc, #120]	@ (800159c <Encoder_Update+0xdc>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	ee07 3a90 	vmov	s15, r3
 800152a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800152e:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80015a0 <Encoder_Update+0xe0>
 8001532:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001536:	4b1b      	ldr	r3, [pc, #108]	@ (80015a4 <Encoder_Update+0xe4>)
 8001538:	edc3 7a00 	vstr	s15, [r3]

    // Anlık hız (mm/s olarak)
    uint32_t delta_time = current_tick - last_tick;
 800153c:	4b1a      	ldr	r3, [pc, #104]	@ (80015a8 <Encoder_Update+0xe8>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	68fa      	ldr	r2, [r7, #12]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	607b      	str	r3, [r7, #4]
    if (delta_time > 0) {
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d01a      	beq.n	8001582 <Encoder_Update+0xc2>
        encoder_speed = (encoder_velocity * encoder_distance_per_pulse * 1000.0f) / delta_time;
 800154c:	4b12      	ldr	r3, [pc, #72]	@ (8001598 <Encoder_Update+0xd8>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	ee07 3a90 	vmov	s15, r3
 8001554:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001558:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80015a0 <Encoder_Update+0xe0>
 800155c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001560:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80015ac <Encoder_Update+0xec>
 8001564:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	ee07 3a90 	vmov	s15, r3
 800156e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001572:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001576:	4b0e      	ldr	r3, [pc, #56]	@ (80015b0 <Encoder_Update+0xf0>)
 8001578:	edc3 7a00 	vstr	s15, [r3]
        last_tick = current_tick;
 800157c:	4a0a      	ldr	r2, [pc, #40]	@ (80015a8 <Encoder_Update+0xe8>)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6013      	str	r3, [r2, #0]
    }
    
    // MESAFE İÇİN LED KONTROLÜ BURADA ÇAĞRILIYOR
    DistanceLedControl();
 8001582:	f000 f817 	bl	80015b4 <DistanceLedControl>
}
 8001586:	bf00      	nop
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	2000037c 	.word	0x2000037c
 8001594:	200001e4 	.word	0x200001e4
 8001598:	200001e8 	.word	0x200001e8
 800159c:	200001e0 	.word	0x200001e0
 80015a0:	3c66bdc8 	.word	0x3c66bdc8
 80015a4:	200001f0 	.word	0x200001f0
 80015a8:	200001f4 	.word	0x200001f4
 80015ac:	447a0000 	.word	0x447a0000
 80015b0:	200001ec 	.word	0x200001ec

080015b4 <DistanceLedControl>:
  * @brief  Control LEDs based on distance measurement
  * @param  None
  * @retval None
  */
void DistanceLedControl(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
    static uint8_t tunnel_end_alerted = 0;
    static uint8_t direction = 1; // 1: ileri, 0: geri
    static float prev_distance = 0.0f;

    // Yön tespiti (ileri mi gidiyor geri mi)
    if (encoder_total_distance > prev_distance)
 80015b8:	4b7d      	ldr	r3, [pc, #500]	@ (80017b0 <DistanceLedControl+0x1fc>)
 80015ba:	ed93 7a00 	vldr	s14, [r3]
 80015be:	4b7d      	ldr	r3, [pc, #500]	@ (80017b4 <DistanceLedControl+0x200>)
 80015c0:	edd3 7a00 	vldr	s15, [r3]
 80015c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015cc:	dd03      	ble.n	80015d6 <DistanceLedControl+0x22>
        direction = 1; // ileri
 80015ce:	4b7a      	ldr	r3, [pc, #488]	@ (80017b8 <DistanceLedControl+0x204>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	701a      	strb	r2, [r3, #0]
 80015d4:	e00d      	b.n	80015f2 <DistanceLedControl+0x3e>
    else if (encoder_total_distance < prev_distance)
 80015d6:	4b76      	ldr	r3, [pc, #472]	@ (80017b0 <DistanceLedControl+0x1fc>)
 80015d8:	ed93 7a00 	vldr	s14, [r3]
 80015dc:	4b75      	ldr	r3, [pc, #468]	@ (80017b4 <DistanceLedControl+0x200>)
 80015de:	edd3 7a00 	vldr	s15, [r3]
 80015e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ea:	d502      	bpl.n	80015f2 <DistanceLedControl+0x3e>
        direction = 0; // geri
 80015ec:	4b72      	ldr	r3, [pc, #456]	@ (80017b8 <DistanceLedControl+0x204>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	701a      	strb	r2, [r3, #0]
    prev_distance = encoder_total_distance;
 80015f2:	4b6f      	ldr	r3, [pc, #444]	@ (80017b0 <DistanceLedControl+0x1fc>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a6f      	ldr	r2, [pc, #444]	@ (80017b4 <DistanceLedControl+0x200>)
 80015f8:	6013      	str	r3, [r2, #0]

    // Önce tüm ledleri kapatıyoruz
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // Kırmızı
 80015fa:	2200      	movs	r2, #0
 80015fc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001600:	486e      	ldr	r0, [pc, #440]	@ (80017bc <DistanceLedControl+0x208>)
 8001602:	f004 faa1 	bl	8005b48 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);  // Mavi
 8001606:	2200      	movs	r2, #0
 8001608:	2180      	movs	r1, #128	@ 0x80
 800160a:	486c      	ldr	r0, [pc, #432]	@ (80017bc <DistanceLedControl+0x208>)
 800160c:	f004 fa9c 	bl	8005b48 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);  // Yeşil
 8001610:	2200      	movs	r2, #0
 8001612:	2101      	movs	r1, #1
 8001614:	4869      	ldr	r0, [pc, #420]	@ (80017bc <DistanceLedControl+0x208>)
 8001616:	f004 fa97 	bl	8005b48 <HAL_GPIO_WritePin>

    // Tünel sonuna geldiyse, bütün ledleri kısa süreyle yakıp söndür
    if (!tunnel_end_alerted && encoder_total_distance >= 1860.0f) // 186 metre, mm cinsinden
 800161a:	4b69      	ldr	r3, [pc, #420]	@ (80017c0 <DistanceLedControl+0x20c>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d131      	bne.n	8001686 <DistanceLedControl+0xd2>
 8001622:	4b63      	ldr	r3, [pc, #396]	@ (80017b0 <DistanceLedControl+0x1fc>)
 8001624:	edd3 7a00 	vldr	s15, [r3]
 8001628:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 80017c4 <DistanceLedControl+0x210>
 800162c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001634:	db27      	blt.n	8001686 <DistanceLedControl+0xd2>
    {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001636:	2201      	movs	r2, #1
 8001638:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800163c:	485f      	ldr	r0, [pc, #380]	@ (80017bc <DistanceLedControl+0x208>)
 800163e:	f004 fa83 	bl	8005b48 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8001642:	2201      	movs	r2, #1
 8001644:	2180      	movs	r1, #128	@ 0x80
 8001646:	485d      	ldr	r0, [pc, #372]	@ (80017bc <DistanceLedControl+0x208>)
 8001648:	f004 fa7e 	bl	8005b48 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800164c:	2201      	movs	r2, #1
 800164e:	2101      	movs	r1, #1
 8001650:	485a      	ldr	r0, [pc, #360]	@ (80017bc <DistanceLedControl+0x208>)
 8001652:	f004 fa79 	bl	8005b48 <HAL_GPIO_WritePin>
        HAL_Delay(1000); // 1 saniye yakıp söndür
 8001656:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800165a:	f002 f9cb 	bl	80039f4 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800165e:	2200      	movs	r2, #0
 8001660:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001664:	4855      	ldr	r0, [pc, #340]	@ (80017bc <DistanceLedControl+0x208>)
 8001666:	f004 fa6f 	bl	8005b48 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800166a:	2200      	movs	r2, #0
 800166c:	2180      	movs	r1, #128	@ 0x80
 800166e:	4853      	ldr	r0, [pc, #332]	@ (80017bc <DistanceLedControl+0x208>)
 8001670:	f004 fa6a 	bl	8005b48 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001674:	2200      	movs	r2, #0
 8001676:	2101      	movs	r1, #1
 8001678:	4850      	ldr	r0, [pc, #320]	@ (80017bc <DistanceLedControl+0x208>)
 800167a:	f004 fa65 	bl	8005b48 <HAL_GPIO_WritePin>
        tunnel_end_alerted = 1;
 800167e:	4b50      	ldr	r3, [pc, #320]	@ (80017c0 <DistanceLedControl+0x20c>)
 8001680:	2201      	movs	r2, #1
 8001682:	701a      	strb	r2, [r3, #0]
 8001684:	e092      	b.n	80017ac <DistanceLedControl+0x1f8>
    }
    // Normal aralık kontrolü:
    else if (encoder_total_distance < 1860.0f)
 8001686:	4b4a      	ldr	r3, [pc, #296]	@ (80017b0 <DistanceLedControl+0x1fc>)
 8001688:	edd3 7a00 	vldr	s15, [r3]
 800168c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80017c4 <DistanceLedControl+0x210>
 8001690:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001698:	d400      	bmi.n	800169c <DistanceLedControl+0xe8>
            else if (encoder_total_distance <= 1200.0f && encoder_total_distance > 3000.0f)
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // Yeşil
            // değilse ledler kapalı
        }
    }
}
 800169a:	e087      	b.n	80017ac <DistanceLedControl+0x1f8>
        tunnel_end_alerted = 0; // geri dönerken tekrar yanabilmesi için resetle
 800169c:	4b48      	ldr	r3, [pc, #288]	@ (80017c0 <DistanceLedControl+0x20c>)
 800169e:	2200      	movs	r2, #0
 80016a0:	701a      	strb	r2, [r3, #0]
        if (direction) // ileri gidiyor
 80016a2:	4b45      	ldr	r3, [pc, #276]	@ (80017b8 <DistanceLedControl+0x204>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d031      	beq.n	800170e <DistanceLedControl+0x15a>
            if (encoder_total_distance >= 1200.0f)
 80016aa:	4b41      	ldr	r3, [pc, #260]	@ (80017b0 <DistanceLedControl+0x1fc>)
 80016ac:	edd3 7a00 	vldr	s15, [r3]
 80016b0:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 80017c8 <DistanceLedControl+0x214>
 80016b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016bc:	db05      	blt.n	80016ca <DistanceLedControl+0x116>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // Yeşil 5 m ve üstü
 80016be:	2201      	movs	r2, #1
 80016c0:	2101      	movs	r1, #1
 80016c2:	483e      	ldr	r0, [pc, #248]	@ (80017bc <DistanceLedControl+0x208>)
 80016c4:	f004 fa40 	bl	8005b48 <HAL_GPIO_WritePin>
}
 80016c8:	e070      	b.n	80017ac <DistanceLedControl+0x1f8>
            else if (encoder_total_distance >= 600.0f)
 80016ca:	4b39      	ldr	r3, [pc, #228]	@ (80017b0 <DistanceLedControl+0x1fc>)
 80016cc:	edd3 7a00 	vldr	s15, [r3]
 80016d0:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 80017cc <DistanceLedControl+0x218>
 80016d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016dc:	db05      	blt.n	80016ea <DistanceLedControl+0x136>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET); // Mavi 3 m ve üstü
 80016de:	2201      	movs	r2, #1
 80016e0:	2180      	movs	r1, #128	@ 0x80
 80016e2:	4836      	ldr	r0, [pc, #216]	@ (80017bc <DistanceLedControl+0x208>)
 80016e4:	f004 fa30 	bl	8005b48 <HAL_GPIO_WritePin>
}
 80016e8:	e060      	b.n	80017ac <DistanceLedControl+0x1f8>
            else if (encoder_total_distance >= 100.0f)
 80016ea:	4b31      	ldr	r3, [pc, #196]	@ (80017b0 <DistanceLedControl+0x1fc>)
 80016ec:	edd3 7a00 	vldr	s15, [r3]
 80016f0:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80017d0 <DistanceLedControl+0x21c>
 80016f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016fc:	da00      	bge.n	8001700 <DistanceLedControl+0x14c>
}
 80016fe:	e055      	b.n	80017ac <DistanceLedControl+0x1f8>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // Kırmızı 1 m ve üstü
 8001700:	2201      	movs	r2, #1
 8001702:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001706:	482d      	ldr	r0, [pc, #180]	@ (80017bc <DistanceLedControl+0x208>)
 8001708:	f004 fa1e 	bl	8005b48 <HAL_GPIO_WritePin>
}
 800170c:	e04e      	b.n	80017ac <DistanceLedControl+0x1f8>
            if (encoder_total_distance <= 100.0f && encoder_total_distance > 0.0f)
 800170e:	4b28      	ldr	r3, [pc, #160]	@ (80017b0 <DistanceLedControl+0x1fc>)
 8001710:	edd3 7a00 	vldr	s15, [r3]
 8001714:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 80017d0 <DistanceLedControl+0x21c>
 8001718:	eef4 7ac7 	vcmpe.f32	s15, s14
 800171c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001720:	d80e      	bhi.n	8001740 <DistanceLedControl+0x18c>
 8001722:	4b23      	ldr	r3, [pc, #140]	@ (80017b0 <DistanceLedControl+0x1fc>)
 8001724:	edd3 7a00 	vldr	s15, [r3]
 8001728:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800172c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001730:	dd06      	ble.n	8001740 <DistanceLedControl+0x18c>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // Kırmızı
 8001732:	2201      	movs	r2, #1
 8001734:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001738:	4820      	ldr	r0, [pc, #128]	@ (80017bc <DistanceLedControl+0x208>)
 800173a:	f004 fa05 	bl	8005b48 <HAL_GPIO_WritePin>
 800173e:	e035      	b.n	80017ac <DistanceLedControl+0x1f8>
            else if (encoder_total_distance <= 600.0f && encoder_total_distance > 1000.0f)
 8001740:	4b1b      	ldr	r3, [pc, #108]	@ (80017b0 <DistanceLedControl+0x1fc>)
 8001742:	edd3 7a00 	vldr	s15, [r3]
 8001746:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80017cc <DistanceLedControl+0x218>
 800174a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800174e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001752:	d80f      	bhi.n	8001774 <DistanceLedControl+0x1c0>
 8001754:	4b16      	ldr	r3, [pc, #88]	@ (80017b0 <DistanceLedControl+0x1fc>)
 8001756:	edd3 7a00 	vldr	s15, [r3]
 800175a:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80017d4 <DistanceLedControl+0x220>
 800175e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001766:	dd05      	ble.n	8001774 <DistanceLedControl+0x1c0>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET); // Mavi
 8001768:	2201      	movs	r2, #1
 800176a:	2180      	movs	r1, #128	@ 0x80
 800176c:	4813      	ldr	r0, [pc, #76]	@ (80017bc <DistanceLedControl+0x208>)
 800176e:	f004 f9eb 	bl	8005b48 <HAL_GPIO_WritePin>
 8001772:	e01b      	b.n	80017ac <DistanceLedControl+0x1f8>
            else if (encoder_total_distance <= 1200.0f && encoder_total_distance > 3000.0f)
 8001774:	4b0e      	ldr	r3, [pc, #56]	@ (80017b0 <DistanceLedControl+0x1fc>)
 8001776:	edd3 7a00 	vldr	s15, [r3]
 800177a:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80017c8 <DistanceLedControl+0x214>
 800177e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001786:	d900      	bls.n	800178a <DistanceLedControl+0x1d6>
}
 8001788:	e010      	b.n	80017ac <DistanceLedControl+0x1f8>
            else if (encoder_total_distance <= 1200.0f && encoder_total_distance > 3000.0f)
 800178a:	4b09      	ldr	r3, [pc, #36]	@ (80017b0 <DistanceLedControl+0x1fc>)
 800178c:	edd3 7a00 	vldr	s15, [r3]
 8001790:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80017d8 <DistanceLedControl+0x224>
 8001794:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800179c:	dc00      	bgt.n	80017a0 <DistanceLedControl+0x1ec>
}
 800179e:	e005      	b.n	80017ac <DistanceLedControl+0x1f8>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // Yeşil
 80017a0:	2201      	movs	r2, #1
 80017a2:	2101      	movs	r1, #1
 80017a4:	4805      	ldr	r0, [pc, #20]	@ (80017bc <DistanceLedControl+0x208>)
 80017a6:	f004 f9cf 	bl	8005b48 <HAL_GPIO_WritePin>
}
 80017aa:	e7ff      	b.n	80017ac <DistanceLedControl+0x1f8>
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	200001f0 	.word	0x200001f0
 80017b4:	200001f8 	.word	0x200001f8
 80017b8:	20000000 	.word	0x20000000
 80017bc:	40020400 	.word	0x40020400
 80017c0:	200001fc 	.word	0x200001fc
 80017c4:	44e88000 	.word	0x44e88000
 80017c8:	44960000 	.word	0x44960000
 80017cc:	44160000 	.word	0x44160000
 80017d0:	42c80000 	.word	0x42c80000
 80017d4:	447a0000 	.word	0x447a0000
 80017d8:	453b8000 	.word	0x453b8000

080017dc <get_total_distance>:
/**
  * @brief  Get total distance in centimeters
  * @param  None
  * @retval Total distance in centimeters
  */
float get_total_distance(void) {
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
    return encoder_total_distance * 10.0f;  // mm'den cm'ye çevir
 80017e0:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <get_total_distance+0x20>)
 80017e2:	edd3 7a00 	vldr	s15, [r3]
 80017e6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80017ea:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80017ee:	eeb0 0a67 	vmov.f32	s0, s15
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	200001f0 	.word	0x200001f0

08001800 <ir_sensor_init>:
/* USER CODE END Header */

#include "ir_sensor.h"
#include "main.h"

bool ir_sensor_init(ir_sensor_t* sensor, GPIO_TypeDef* gpio_port, uint16_t gpio_pin) {
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	4613      	mov	r3, r2
 800180c:	80fb      	strh	r3, [r7, #6]
    if (sensor == NULL) {
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d101      	bne.n	8001818 <ir_sensor_init+0x18>
        return false;
 8001814:	2300      	movs	r3, #0
 8001816:	e015      	b.n	8001844 <ir_sensor_init+0x44>
    }
    
    sensor->gpio_port = gpio_port;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	68ba      	ldr	r2, [r7, #8]
 800181c:	601a      	str	r2, [r3, #0]
    sensor->gpio_pin = gpio_pin;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	88fa      	ldrh	r2, [r7, #6]
 8001822:	809a      	strh	r2, [r3, #4]
    sensor->state = IR_SENSOR_STATE_NO_OBJECT;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2200      	movs	r2, #0
 8001828:	719a      	strb	r2, [r3, #6]
    sensor->previous_state = IR_SENSOR_STATE_NO_OBJECT;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2200      	movs	r2, #0
 800182e:	71da      	strb	r2, [r3, #7]
    sensor->last_change_time = 0;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
    sensor->detection_count = 0;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2200      	movs	r2, #0
 800183a:	60da      	str	r2, [r3, #12]
    sensor->last_detection_time = 0;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2200      	movs	r2, #0
 8001840:	611a      	str	r2, [r3, #16]
    
    return true;
 8001842:	2301      	movs	r3, #1
}
 8001844:	4618      	mov	r0, r3
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <ir_sensor_update>:

void ir_sensor_update(ir_sensor_t* sensor) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
    if (sensor == NULL) {
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d030      	beq.n	80018c0 <ir_sensor_update+0x70>
        return;
    }
    
    // Read GPIO state (0 = object detected, 1 = no object)
    uint8_t gpio_state = HAL_GPIO_ReadPin(sensor->gpio_port, sensor->gpio_pin);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	889b      	ldrh	r3, [r3, #4]
 8001866:	4619      	mov	r1, r3
 8001868:	4610      	mov	r0, r2
 800186a:	f004 f955 	bl	8005b18 <HAL_GPIO_ReadPin>
 800186e:	4603      	mov	r3, r0
 8001870:	73fb      	strb	r3, [r7, #15]
    
    // Update sensor state
    sensor->previous_state = sensor->state;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	799a      	ldrb	r2, [r3, #6]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	71da      	strb	r2, [r3, #7]
    sensor->state = (gpio_state == 0) ? IR_SENSOR_STATE_OBJECT_DETECTED : IR_SENSOR_STATE_NO_OBJECT;
 800187a:	7bfb      	ldrb	r3, [r7, #15]
 800187c:	2b00      	cmp	r3, #0
 800187e:	bf0c      	ite	eq
 8001880:	2301      	moveq	r3, #1
 8001882:	2300      	movne	r3, #0
 8001884:	b2db      	uxtb	r3, r3
 8001886:	461a      	mov	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	719a      	strb	r2, [r3, #6]
    
    // Count object detections on state change
    if (sensor->previous_state != sensor->state && sensor->state == IR_SENSOR_STATE_OBJECT_DETECTED) {
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	79da      	ldrb	r2, [r3, #7]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	799b      	ldrb	r3, [r3, #6]
 8001894:	429a      	cmp	r2, r3
 8001896:	d00d      	beq.n	80018b4 <ir_sensor_update+0x64>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	799b      	ldrb	r3, [r3, #6]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d109      	bne.n	80018b4 <ir_sensor_update+0x64>
        sensor->detection_count++;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	1c5a      	adds	r2, r3, #1
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	60da      	str	r2, [r3, #12]
        sensor->last_detection_time = HAL_GetTick();
 80018aa:	f002 f897 	bl	80039dc <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	611a      	str	r2, [r3, #16]
    }
    
    sensor->last_change_time = HAL_GetTick();
 80018b4:	f002 f892 	bl	80039dc <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	609a      	str	r2, [r3, #8]
 80018be:	e000      	b.n	80018c2 <ir_sensor_update+0x72>
        return;
 80018c0:	bf00      	nop
}
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <ir_sensor_get_state>:
    }
    
    return (HAL_GPIO_ReadPin(sensor->gpio_port, sensor->gpio_pin) == 0);
}

ir_sensor_state_t ir_sensor_get_state(ir_sensor_t* sensor) {
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
    if (sensor == NULL) {
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <ir_sensor_get_state+0x12>
        return IR_SENSOR_STATE_NO_OBJECT;
 80018d6:	2300      	movs	r3, #0
 80018d8:	e001      	b.n	80018de <ir_sensor_get_state+0x16>
    }
    
    return sensor->state;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	799b      	ldrb	r3, [r3, #6]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
	...

080018ec <CalibrateESC>:
static const uint32_t ESC_MAX_PULSE = 1940;     // Maximum pulse (Futaba standard)
static const uint32_t ESC_START_PULSE = 1050;   // Başlangıç pulse değeri
static uint8_t esc_calibrated = 0;              // Kalibrasyon durumu

// ESC başlangıç kalibrasyonu
void CalibrateESC(void) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
    // Önce minimum sinyal gönder ve bekle
    __HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_PULSE);
 80018f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001920 <CalibrateESC+0x34>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f240 421a 	movw	r2, #1050	@ 0x41a
 80018f8:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_Delay(2000);  // 2 saniye bekle
 80018fa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80018fe:	f002 f879 	bl	80039f4 <HAL_Delay>
    
    // Başlangıç sinyalini gönder
    __HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_START_PULSE);
 8001902:	4b07      	ldr	r3, [pc, #28]	@ (8001920 <CalibrateESC+0x34>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f240 421a 	movw	r2, #1050	@ 0x41a
 800190a:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_Delay(2000);  // 2 saniye bekle
 800190c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001910:	f002 f870 	bl	80039f4 <HAL_Delay>
    
    esc_calibrated = 1;  // Kalibrasyon tamamlandı
 8001914:	4b03      	ldr	r3, [pc, #12]	@ (8001924 <CalibrateESC+0x38>)
 8001916:	2201      	movs	r2, #1
 8001918:	701a      	strb	r2, [r3, #0]
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	200003c8 	.word	0x200003c8
 8001924:	20000730 	.word	0x20000730

08001928 <IncreaseMotorSpeed>:
void IncreaseMotorSpeed(void) {
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
    if (current_speed < 100) {
 800192c:	4b08      	ldr	r3, [pc, #32]	@ (8001950 <IncreaseMotorSpeed+0x28>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b63      	cmp	r3, #99	@ 0x63
 8001932:	d80a      	bhi.n	800194a <IncreaseMotorSpeed+0x22>
        current_speed += 1;  // %0.5'lik artış
 8001934:	4b06      	ldr	r3, [pc, #24]	@ (8001950 <IncreaseMotorSpeed+0x28>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	3301      	adds	r3, #1
 800193a:	b2da      	uxtb	r2, r3
 800193c:	4b04      	ldr	r3, [pc, #16]	@ (8001950 <IncreaseMotorSpeed+0x28>)
 800193e:	701a      	strb	r2, [r3, #0]
        SetMotorSpeed(current_speed);
 8001940:	4b03      	ldr	r3, [pc, #12]	@ (8001950 <IncreaseMotorSpeed+0x28>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f000 f817 	bl	8001978 <SetMotorSpeed>
    }
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	2000079c 	.word	0x2000079c

08001954 <DecreaseMotorSpeed>:

void DecreaseMotorSpeed(void) {
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
    if (current_speed > 0) {
 8001958:	4b06      	ldr	r3, [pc, #24]	@ (8001974 <DecreaseMotorSpeed+0x20>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d007      	beq.n	8001970 <DecreaseMotorSpeed+0x1c>
        current_speed  = 0;  // direkt sıfırlama
 8001960:	4b04      	ldr	r3, [pc, #16]	@ (8001974 <DecreaseMotorSpeed+0x20>)
 8001962:	2200      	movs	r2, #0
 8001964:	701a      	strb	r2, [r3, #0]
        SetMotorSpeed(current_speed);
 8001966:	4b03      	ldr	r3, [pc, #12]	@ (8001974 <DecreaseMotorSpeed+0x20>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f000 f804 	bl	8001978 <SetMotorSpeed>
    }
}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}
 8001974:	2000079c 	.word	0x2000079c

08001978 <SetMotorSpeed>:

// ESC hız kontrolü için fonksiyon (0-100 yüzde)
void SetMotorSpeed(uint8_t speed_percent) {
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	71fb      	strb	r3, [r7, #7]
    if (!esc_calibrated) return;
 8001982:	4b1b      	ldr	r3, [pc, #108]	@ (80019f0 <SetMotorSpeed+0x78>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d02b      	beq.n	80019e2 <SetMotorSpeed+0x6a>
    
    if (speed_percent > 100) speed_percent = 100;
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	2b64      	cmp	r3, #100	@ 0x64
 800198e:	d901      	bls.n	8001994 <SetMotorSpeed+0x1c>
 8001990:	2364      	movs	r3, #100	@ 0x64
 8001992:	71fb      	strb	r3, [r7, #7]
    
    uint32_t pulse;
    if (speed_percent == 0) {
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d103      	bne.n	80019a2 <SetMotorSpeed+0x2a>
        pulse = ESC_MIN_PULSE;
 800199a:	f240 431a 	movw	r3, #1050	@ 0x41a
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	e00f      	b.n	80019c2 <SetMotorSpeed+0x4a>
    } else {
        pulse = ESC_MIN_PULSE + (((uint32_t)(ESC_MAX_PULSE - ESC_MIN_PULSE) * speed_percent) / 100);
 80019a2:	f240 7294 	movw	r2, #1940	@ 0x794
 80019a6:	f240 431a 	movw	r3, #1050	@ 0x41a
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	79fa      	ldrb	r2, [r7, #7]
 80019ae:	fb02 f303 	mul.w	r3, r2, r3
 80019b2:	4a10      	ldr	r2, [pc, #64]	@ (80019f4 <SetMotorSpeed+0x7c>)
 80019b4:	fba2 2303 	umull	r2, r3, r2, r3
 80019b8:	095b      	lsrs	r3, r3, #5
 80019ba:	f240 421a 	movw	r2, #1050	@ 0x41a
 80019be:	4413      	add	r3, r2
 80019c0:	60fb      	str	r3, [r7, #12]
    }
    
    // Timer değerlerine ölçekle
    uint32_t timer_value = (pulse * (htim10.Init.Period + 1)) / 20000;
 80019c2:	4b0d      	ldr	r3, [pc, #52]	@ (80019f8 <SetMotorSpeed+0x80>)
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	3301      	adds	r3, #1
 80019c8:	68fa      	ldr	r2, [r7, #12]
 80019ca:	fb02 f303 	mul.w	r3, r2, r3
 80019ce:	4a0b      	ldr	r2, [pc, #44]	@ (80019fc <SetMotorSpeed+0x84>)
 80019d0:	fba2 2303 	umull	r2, r3, r2, r3
 80019d4:	0b9b      	lsrs	r3, r3, #14
 80019d6:	60bb      	str	r3, [r7, #8]
    __HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, timer_value);
 80019d8:	4b07      	ldr	r3, [pc, #28]	@ (80019f8 <SetMotorSpeed+0x80>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	68ba      	ldr	r2, [r7, #8]
 80019de:	635a      	str	r2, [r3, #52]	@ 0x34
 80019e0:	e000      	b.n	80019e4 <SetMotorSpeed+0x6c>
    if (!esc_calibrated) return;
 80019e2:	bf00      	nop
}
 80019e4:	3714      	adds	r7, #20
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	20000730 	.word	0x20000730
 80019f4:	51eb851f 	.word	0x51eb851f
 80019f8:	200003c8 	.word	0x200003c8
 80019fc:	d1b71759 	.word	0xd1b71759

08001a00 <ADC_Read_Average>:

uint32_t ADC_Read_Average(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
    uint32_t total = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
    uint32_t valid_samples = 0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60bb      	str	r3, [r7, #8]

    for(int i = 0; i < SAMPLE_COUNT; i++)
 8001a0e:	2300      	movs	r3, #0
 8001a10:	607b      	str	r3, [r7, #4]
 8001a12:	e01d      	b.n	8001a50 <ADC_Read_Average+0x50>
    {
        HAL_ADC_Start(&hadc1);
 8001a14:	4816      	ldr	r0, [pc, #88]	@ (8001a70 <ADC_Read_Average+0x70>)
 8001a16:	f002 f855 	bl	8003ac4 <HAL_ADC_Start>
        if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 8001a1a:	2164      	movs	r1, #100	@ 0x64
 8001a1c:	4814      	ldr	r0, [pc, #80]	@ (8001a70 <ADC_Read_Average+0x70>)
 8001a1e:	f002 f953 	bl	8003cc8 <HAL_ADC_PollForConversion>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d10a      	bne.n	8001a3e <ADC_Read_Average+0x3e>
        {
            uint32_t val = HAL_ADC_GetValue(&hadc1);
 8001a28:	4811      	ldr	r0, [pc, #68]	@ (8001a70 <ADC_Read_Average+0x70>)
 8001a2a:	f002 f9d8 	bl	8003dde <HAL_ADC_GetValue>
 8001a2e:	6038      	str	r0, [r7, #0]
            total += val;
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	4413      	add	r3, r2
 8001a36:	60fb      	str	r3, [r7, #12]
            valid_samples++;
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	60bb      	str	r3, [r7, #8]
        }
        HAL_ADC_Stop(&hadc1);
 8001a3e:	480c      	ldr	r0, [pc, #48]	@ (8001a70 <ADC_Read_Average+0x70>)
 8001a40:	f002 f90e 	bl	8003c60 <HAL_ADC_Stop>
        HAL_Delay(1);  // Örnekler arası kısa bekleme
 8001a44:	2001      	movs	r0, #1
 8001a46:	f001 ffd5 	bl	80039f4 <HAL_Delay>
    for(int i = 0; i < SAMPLE_COUNT; i++)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	607b      	str	r3, [r7, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b31      	cmp	r3, #49	@ 0x31
 8001a54:	ddde      	ble.n	8001a14 <ADC_Read_Average+0x14>
    }

    if(valid_samples > 0)
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d004      	beq.n	8001a66 <ADC_Read_Average+0x66>
        return total / valid_samples;
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a64:	e000      	b.n	8001a68 <ADC_Read_Average+0x68>
    else
        return 0;
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20000238 	.word	0x20000238

08001a74 <lowPassFilter>:

// Low-pass filtre fonksiyonu
float lowPassFilter(float newValue, float oldValue)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001a7e:	edc7 0a00 	vstr	s1, [r7]
    return (ALPHA * newValue) + ((1.0f - ALPHA) * oldValue);
 8001a82:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a86:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001aac <lowPassFilter+0x38>
 8001a8a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a8e:	edd7 7a00 	vldr	s15, [r7]
 8001a92:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8001ab0 <lowPassFilter+0x3c>
 8001a96:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a9a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001a9e:	eeb0 0a67 	vmov.f32	s0, s15
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	3dcccccd 	.word	0x3dcccccd
 8001ab0:	3f666666 	.word	0x3f666666

08001ab4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ab4:	b590      	push	{r4, r7, lr}
 8001ab6:	f2ad 4d94 	subw	sp, sp, #1172	@ 0x494
 8001aba:	af0c      	add	r7, sp, #48	@ 0x30
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001abc:	f000 fea4 	bl	8002808 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ac0:	f001 ff3b 	bl	800393a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ac4:	f000 fb8c 	bl	80021e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ac8:	f000 fddc 	bl	8002684 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001acc:	f000 fdaa 	bl	8002624 <MX_USART3_UART_Init>
  MX_LWIP_Init();
 8001ad0:	f007 fd00 	bl	80094d4 <MX_LWIP_Init>
  MX_TIM10_Init();
 8001ad4:	f000 fd58 	bl	8002588 <MX_TIM10_Init>
  MX_I2C1_Init();
 8001ad8:	f000 fc40 	bl	800235c <MX_I2C1_Init>
  MX_I2C2_Init();
 8001adc:	f000 fc7e 	bl	80023dc <MX_I2C2_Init>
  MX_I2C3_Init();
 8001ae0:	f000 fcbc 	bl	800245c <MX_I2C3_Init>
  MX_TIM3_Init();
 8001ae4:	f000 fcfa 	bl	80024dc <MX_TIM3_Init>
  MX_ADC1_Init();
 8001ae8:	f000 fbe6 	bl	80022b8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
    // MLX90614 sensor instance initialization
  mlx90614_init(&mlx90614_sensor_instance, &hi2c1, 0xB4);
 8001aec:	22b4      	movs	r2, #180	@ 0xb4
 8001aee:	4972      	ldr	r1, [pc, #456]	@ (8001cb8 <main+0x204>)
 8001af0:	4872      	ldr	r0, [pc, #456]	@ (8001cbc <main+0x208>)
 8001af2:	f000 ff37 	bl	8002964 <mlx90614_init>

  // IR sensor'ü başlat
  ir_sensor_init(&ir_sensor, IR_SENSOR_GPIO_Port, IR_SENSOR_Pin);
 8001af6:	2220      	movs	r2, #32
 8001af8:	4971      	ldr	r1, [pc, #452]	@ (8001cc0 <main+0x20c>)
 8001afa:	4872      	ldr	r0, [pc, #456]	@ (8001cc4 <main+0x210>)
 8001afc:	f7ff fe80 	bl	8001800 <ir_sensor_init>

    // İKİNCİ IR SENSOR'Ü BAŞLAT - PF4 PİNİ (YENİ!)
  ir_sensor_init(&ir_sensor2, IR_SENSOR2_GPIO_Port, IR_SENSOR2_Pin);
 8001b00:	2202      	movs	r2, #2
 8001b02:	4971      	ldr	r1, [pc, #452]	@ (8001cc8 <main+0x214>)
 8001b04:	4871      	ldr	r0, [pc, #452]	@ (8001ccc <main+0x218>)
 8001b06:	f7ff fe7b 	bl	8001800 <ir_sensor_init>

    // BNO055 initialization (I2C2) - using existing library
  if(bno055_init(&bno055_sensor, &hi2c2, BNO055_ADDRESS_A)) {
 8001b0a:	2228      	movs	r2, #40	@ 0x28
 8001b0c:	4970      	ldr	r1, [pc, #448]	@ (8001cd0 <main+0x21c>)
 8001b0e:	4871      	ldr	r0, [pc, #452]	@ (8001cd4 <main+0x220>)
 8001b10:	f7ff f98a 	bl	8000e28 <bno055_init>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d00b      	beq.n	8001b32 <main+0x7e>
      bno055_setOperationMode(&bno055_sensor, OPERATION_MODE_ACCONLY);
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	486d      	ldr	r0, [pc, #436]	@ (8001cd4 <main+0x220>)
 8001b1e:	f7ff f9ea 	bl	8000ef6 <bno055_setOperationMode>
      HAL_Delay(100);
 8001b22:	2064      	movs	r0, #100	@ 0x64
 8001b24:	f001 ff66 	bl	80039f4 <HAL_Delay>
      sprintf(uart_buffer, "BNO055 initialized successfully.\r\n");
 8001b28:	496b      	ldr	r1, [pc, #428]	@ (8001cd8 <main+0x224>)
 8001b2a:	486c      	ldr	r0, [pc, #432]	@ (8001cdc <main+0x228>)
 8001b2c:	f00c fffe 	bl	800eb2c <siprintf>
 8001b30:	e003      	b.n	8001b3a <main+0x86>
  } else {
      sprintf(uart_buffer, "BNO055 initialization failed.\r\n");
 8001b32:	496b      	ldr	r1, [pc, #428]	@ (8001ce0 <main+0x22c>)
 8001b34:	4869      	ldr	r0, [pc, #420]	@ (8001cdc <main+0x228>)
 8001b36:	f00c fff9 	bl	800eb2c <siprintf>
  }
  HAL_UART_Transmit(&huart3,(uint8_t*)uart_buffer,strlen(uart_buffer),10);
 8001b3a:	4868      	ldr	r0, [pc, #416]	@ (8001cdc <main+0x228>)
 8001b3c:	f7fe fb68 	bl	8000210 <strlen>
 8001b40:	4603      	mov	r3, r0
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	230a      	movs	r3, #10
 8001b46:	4965      	ldr	r1, [pc, #404]	@ (8001cdc <main+0x228>)
 8001b48:	4866      	ldr	r0, [pc, #408]	@ (8001ce4 <main+0x230>)
 8001b4a:	f007 f80b 	bl	8008b64 <HAL_UART_Transmit>

    // Encoder initialization (TIM3) - NOT TOUCHING
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001b4e:	213c      	movs	r1, #60	@ 0x3c
 8001b50:	4865      	ldr	r0, [pc, #404]	@ (8001ce8 <main+0x234>)
 8001b52:	f006 fa5f 	bl	8008014 <HAL_TIM_Encoder_Start>
  HAL_GPIO_WritePin(ENCODER_PIN_GPIO_Port, ENCODER_PIN, GPIO_PIN_SET);
 8001b56:	2201      	movs	r2, #1
 8001b58:	2104      	movs	r1, #4
 8001b5a:	4859      	ldr	r0, [pc, #356]	@ (8001cc0 <main+0x20c>)
 8001b5c:	f003 fff4 	bl	8005b48 <HAL_GPIO_WritePin>
  
  // Başlangıçta her iki pini HIGH yaparak aracı durdur
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_SET);    // PG3 HIGH
 8001b60:	2201      	movs	r2, #1
 8001b62:	2108      	movs	r1, #8
 8001b64:	4858      	ldr	r0, [pc, #352]	@ (8001cc8 <main+0x214>)
 8001b66:	f003 ffef 	bl	8005b48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);   // PD10 HIGH
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001b70:	485e      	ldr	r0, [pc, #376]	@ (8001cec <main+0x238>)
 8001b72:	f003 ffe9 	bl	8005b48 <HAL_GPIO_WritePin>
  
  // PWM çıkışını başlat ve ESC için güvenli başlangıç değerini ayarla
  HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001b76:	2100      	movs	r1, #0
 8001b78:	485d      	ldr	r0, [pc, #372]	@ (8001cf0 <main+0x23c>)
 8001b7a:	f006 f8ab 	bl	8007cd4 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_PULSE); // Minimum pulse değeri
 8001b7e:	4b5c      	ldr	r3, [pc, #368]	@ (8001cf0 <main+0x23c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f240 421a 	movw	r2, #1050	@ 0x41a
 8001b86:	635a      	str	r2, [r3, #52]	@ 0x34
  
  // ESC kalibrasyonunu yap
  CalibrateESC();
 8001b88:	f7ff feb0 	bl	80018ec <CalibrateESC>
  
  // Initialize UDP echo server
  __udp_echoserver_init_oo();
 8001b8c:	f001 fbd2 	bl	8003334 <__udp_echoserver_init_oo>
  
  // Setup the UDP socket
  udp_socket = udp_new();
 8001b90:	f00a fc92 	bl	800c4b8 <udp_new>
 8001b94:	4603      	mov	r3, r0
 8001b96:	4a57      	ldr	r2, [pc, #348]	@ (8001cf4 <main+0x240>)
 8001b98:	6013      	str	r3, [r2, #0]
  if (udp_socket == NULL)
 8001b9a:	4b56      	ldr	r3, [pc, #344]	@ (8001cf4 <main+0x240>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d104      	bne.n	8001bac <main+0xf8>
  {
    printf("Error creating UDP socket\n");
 8001ba2:	4855      	ldr	r0, [pc, #340]	@ (8001cf8 <main+0x244>)
 8001ba4:	f00d f94c 	bl	800ee40 <puts>
    return 1;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e303      	b.n	80021b4 <main+0x700>
  }

  // Set packet headers informations
  IP4_ADDR(&dest_ip, 192, 168, 1, 255);
 8001bac:	4b53      	ldr	r3, [pc, #332]	@ (8001cfc <main+0x248>)
 8001bae:	4a54      	ldr	r2, [pc, #336]	@ (8001d00 <main+0x24c>)
 8001bb0:	601a      	str	r2, [r3, #0]
  uint16_t dest_port = 8080;
 8001bb2:	f641 7390 	movw	r3, #8080	@ 0x1f90
 8001bb6:	f8a7 345e 	strh.w	r3, [r7, #1118]	@ 0x45e
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // Process incoming packet and let LwIP stack handle it
    MX_LWIP_Process();
 8001bba:	f007 fdcb 	bl	8009754 <MX_LWIP_Process>
    //Levitasyon motorunun hızını istediğimiz zaman durdurmamızı sağlayan fonksiyon 
    ProcessLevitation();
 8001bbe:	f001 fd5b 	bl	8003678 <ProcessLevitation>
    // Ortalama ADC okuması
    uint32_t adc_val = ADC_Read_Average();
 8001bc2:	f7ff ff1d 	bl	8001a00 <ADC_Read_Average>
 8001bc6:	f8c7 0458 	str.w	r0, [r7, #1112]	@ 0x458

    // Ham voltaj hesaplama
    voltage = ((float)adc_val * VCC) / 4095.0f;
 8001bca:	f8d7 3458 	ldr.w	r3, [r7, #1112]	@ 0x458
 8001bce:	ee07 3a90 	vmov	s15, r3
 8001bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bd6:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8001d04 <main+0x250>
 8001bda:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bde:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 8001d08 <main+0x254>
 8001be2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001be6:	4b49      	ldr	r3, [pc, #292]	@ (8001d0c <main+0x258>)
 8001be8:	edc3 7a00 	vstr	s15, [r3]
    current = (SIFIR_NOKTA - voltage) / HASSASIYET;
 8001bec:	4b47      	ldr	r3, [pc, #284]	@ (8001d0c <main+0x258>)
 8001bee:	edd3 7a00 	vldr	s15, [r3]
 8001bf2:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 8001bf6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bfa:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8001d10 <main+0x25c>
 8001bfe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c02:	4b44      	ldr	r3, [pc, #272]	@ (8001d14 <main+0x260>)
 8001c04:	edc3 7a00 	vstr	s15, [r3]

    // Low-pass filtre uygula
    filtered_voltage = lowPassFilter(voltage, filtered_voltage);
 8001c08:	4b40      	ldr	r3, [pc, #256]	@ (8001d0c <main+0x258>)
 8001c0a:	edd3 7a00 	vldr	s15, [r3]
 8001c0e:	4b42      	ldr	r3, [pc, #264]	@ (8001d18 <main+0x264>)
 8001c10:	ed93 7a00 	vldr	s14, [r3]
 8001c14:	eef0 0a47 	vmov.f32	s1, s14
 8001c18:	eeb0 0a67 	vmov.f32	s0, s15
 8001c1c:	f7ff ff2a 	bl	8001a74 <lowPassFilter>
 8001c20:	eef0 7a40 	vmov.f32	s15, s0
 8001c24:	4b3c      	ldr	r3, [pc, #240]	@ (8001d18 <main+0x264>)
 8001c26:	edc3 7a00 	vstr	s15, [r3]
    filtered_current = lowPassFilter(current, filtered_current);
 8001c2a:	4b3a      	ldr	r3, [pc, #232]	@ (8001d14 <main+0x260>)
 8001c2c:	edd3 7a00 	vldr	s15, [r3]
 8001c30:	4b3a      	ldr	r3, [pc, #232]	@ (8001d1c <main+0x268>)
 8001c32:	ed93 7a00 	vldr	s14, [r3]
 8001c36:	eef0 0a47 	vmov.f32	s1, s14
 8001c3a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c3e:	f7ff ff19 	bl	8001a74 <lowPassFilter>
 8001c42:	eef0 7a40 	vmov.f32	s15, s0
 8001c46:	4b35      	ldr	r3, [pc, #212]	@ (8001d1c <main+0x268>)
 8001c48:	edc3 7a00 	vstr	s15, [r3]
// MLX90614 Temperature readings - Güvenli okuma
    float ambient=0.0f, object=0.0f;
 8001c4c:	f04f 0300 	mov.w	r3, #0
 8001c50:	f207 421c 	addw	r2, r7, #1052	@ 0x41c
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	f04f 0300 	mov.w	r3, #0
 8001c5a:	f507 6283 	add.w	r2, r7, #1048	@ 0x418
 8001c5e:	6013      	str	r3, [r2, #0]
    if(mlx90614_getAmbient(&mlx90614_sensor_instance, &ambient)) {
 8001c60:	f207 431c 	addw	r3, r7, #1052	@ 0x41c
 8001c64:	4619      	mov	r1, r3
 8001c66:	4815      	ldr	r0, [pc, #84]	@ (8001cbc <main+0x208>)
 8001c68:	f000 ff92 	bl	8002b90 <mlx90614_getAmbient>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d008      	beq.n	8001c84 <main+0x1d0>
        ambient_temp_C = ambient;
 8001c72:	f207 431c 	addw	r3, r7, #1052	@ 0x41c
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a29      	ldr	r2, [pc, #164]	@ (8001d20 <main+0x26c>)
 8001c7a:	6013      	str	r3, [r2, #0]
        mlx_connection_status = 1;
 8001c7c:	4b29      	ldr	r3, [pc, #164]	@ (8001d24 <main+0x270>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	701a      	strb	r2, [r3, #0]
 8001c82:	e00a      	b.n	8001c9a <main+0x1e6>
    } else { 
        ambient_error_count++; 
 8001c84:	4b28      	ldr	r3, [pc, #160]	@ (8001d28 <main+0x274>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	4a27      	ldr	r2, [pc, #156]	@ (8001d28 <main+0x274>)
 8001c8c:	6013      	str	r3, [r2, #0]
        mlx_connection_status = 0;
 8001c8e:	4b25      	ldr	r3, [pc, #148]	@ (8001d24 <main+0x270>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	701a      	strb	r2, [r3, #0]
        ambient_temp_C = 25.0f; // Varsayılan sıcaklık
 8001c94:	4b22      	ldr	r3, [pc, #136]	@ (8001d20 <main+0x26c>)
 8001c96:	4a25      	ldr	r2, [pc, #148]	@ (8001d2c <main+0x278>)
 8001c98:	601a      	str	r2, [r3, #0]
    }
    if(mlx90614_getObject1(&mlx90614_sensor_instance, &object)) {
 8001c9a:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4806      	ldr	r0, [pc, #24]	@ (8001cbc <main+0x208>)
 8001ca2:	f000 ff9a 	bl	8002bda <mlx90614_getObject1>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d043      	beq.n	8001d34 <main+0x280>
        object_temp_C = object;
 8001cac:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a1f      	ldr	r2, [pc, #124]	@ (8001d30 <main+0x27c>)
 8001cb4:	6013      	str	r3, [r2, #0]
 8001cb6:	e045      	b.n	8001d44 <main+0x290>
 8001cb8:	20000280 	.word	0x20000280
 8001cbc:	200004f4 	.word	0x200004f4
 8001cc0:	40021400 	.word	0x40021400
 8001cc4:	20000210 	.word	0x20000210
 8001cc8:	40021800 	.word	0x40021800
 8001ccc:	20000224 	.word	0x20000224
 8001cd0:	200002d4 	.word	0x200002d4
 8001cd4:	20000200 	.word	0x20000200
 8001cd8:	0800fff8 	.word	0x0800fff8
 8001cdc:	20000530 	.word	0x20000530
 8001ce0:	0801001c 	.word	0x0801001c
 8001ce4:	20000414 	.word	0x20000414
 8001ce8:	2000037c 	.word	0x2000037c
 8001cec:	40020c00 	.word	0x40020c00
 8001cf0:	200003c8 	.word	0x200003c8
 8001cf4:	200004a0 	.word	0x200004a0
 8001cf8:	0801003c 	.word	0x0801003c
 8001cfc:	200004a4 	.word	0x200004a4
 8001d00:	ff01a8c0 	.word	0xff01a8c0
 8001d04:	4053d70a 	.word	0x4053d70a
 8001d08:	457ff000 	.word	0x457ff000
 8001d0c:	200004d4 	.word	0x200004d4
 8001d10:	3d23d70a 	.word	0x3d23d70a
 8001d14:	200004d8 	.word	0x200004d8
 8001d18:	200004dc 	.word	0x200004dc
 8001d1c:	200004e0 	.word	0x200004e0
 8001d20:	200004a8 	.word	0x200004a8
 8001d24:	200004b0 	.word	0x200004b0
 8001d28:	200004b4 	.word	0x200004b4
 8001d2c:	41c80000 	.word	0x41c80000
 8001d30:	200004ac 	.word	0x200004ac
    } else { 
        object_error_count++;
 8001d34:	4bc7      	ldr	r3, [pc, #796]	@ (8002054 <main+0x5a0>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	4ac6      	ldr	r2, [pc, #792]	@ (8002054 <main+0x5a0>)
 8001d3c:	6013      	str	r3, [r2, #0]
        object_temp_C = 30.0f; // Varsayılan nesne sıcaklığı
 8001d3e:	4bc6      	ldr	r3, [pc, #792]	@ (8002058 <main+0x5a4>)
 8001d40:	4ac6      	ldr	r2, [pc, #792]	@ (800205c <main+0x5a8>)
 8001d42:	601a      	str	r2, [r3, #0]
    }
    
        // BNO055 Accelerometer readings using existing library
    bno055_vector_t accel_vector;
    if(bno055_getVector(&bno055_sensor, VECTOR_ACCELEROMETER, &accel_vector)) {
 8001d44:	f207 430c 	addw	r3, r7, #1036	@ 0x40c
 8001d48:	461a      	mov	r2, r3
 8001d4a:	2108      	movs	r1, #8
 8001d4c:	48c4      	ldr	r0, [pc, #784]	@ (8002060 <main+0x5ac>)
 8001d4e:	f7ff f9a3 	bl	8001098 <bno055_getVector>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d00e      	beq.n	8001d76 <main+0x2c2>
        accel_x = accel_vector.x;
 8001d58:	f207 430c 	addw	r3, r7, #1036	@ 0x40c
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4ac1      	ldr	r2, [pc, #772]	@ (8002064 <main+0x5b0>)
 8001d60:	6013      	str	r3, [r2, #0]
        accel_y = accel_vector.y;
 8001d62:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4abf      	ldr	r2, [pc, #764]	@ (8002068 <main+0x5b4>)
 8001d6a:	6013      	str	r3, [r2, #0]
        accel_z = accel_vector.z;
 8001d6c:	f207 4314 	addw	r3, r7, #1044	@ 0x414
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4abe      	ldr	r2, [pc, #760]	@ (800206c <main+0x5b8>)
 8001d74:	6013      	str	r3, [r2, #0]
    }
    
    // BNO055 Gyroscope readings using existing library
    bno055_vector_t gyro_vector;
    if(bno055_getVector(&bno055_sensor, VECTOR_GYROSCOPE, &gyro_vector)) {
 8001d76:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	2114      	movs	r1, #20
 8001d7e:	48b8      	ldr	r0, [pc, #736]	@ (8002060 <main+0x5ac>)
 8001d80:	f7ff f98a 	bl	8001098 <bno055_getVector>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00e      	beq.n	8001da8 <main+0x2f4>
        gyro_x = gyro_vector.x;
 8001d8a:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4ab7      	ldr	r2, [pc, #732]	@ (8002070 <main+0x5bc>)
 8001d92:	6013      	str	r3, [r2, #0]
        gyro_y = gyro_vector.y;
 8001d94:	f207 4304 	addw	r3, r7, #1028	@ 0x404
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4ab6      	ldr	r2, [pc, #728]	@ (8002074 <main+0x5c0>)
 8001d9c:	6013      	str	r3, [r2, #0]
        gyro_z = gyro_vector.z;
 8001d9e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4ab4      	ldr	r2, [pc, #720]	@ (8002078 <main+0x5c4>)
 8001da6:	6013      	str	r3, [r2, #0]
    }

        // Encoder readings (external function)
    Encoder_Update();
 8001da8:	f7ff fb8a 	bl	80014c0 <Encoder_Update>

        // IR Sensor readings using existing library
    ir_sensor_update(&ir_sensor);
 8001dac:	48b3      	ldr	r0, [pc, #716]	@ (800207c <main+0x5c8>)
 8001dae:	f7ff fd4f 	bl	8001850 <ir_sensor_update>
    ir_sensor_state = ir_sensor_get_state(&ir_sensor);
 8001db2:	48b2      	ldr	r0, [pc, #712]	@ (800207c <main+0x5c8>)
 8001db4:	f7ff fd88 	bl	80018c8 <ir_sensor_get_state>
 8001db8:	4603      	mov	r3, r0
 8001dba:	461a      	mov	r2, r3
 8001dbc:	4bb0      	ldr	r3, [pc, #704]	@ (8002080 <main+0x5cc>)
 8001dbe:	701a      	strb	r2, [r3, #0]
    if(last_ir_sensor_state != ir_sensor_state){
 8001dc0:	4bb0      	ldr	r3, [pc, #704]	@ (8002084 <main+0x5d0>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	4bae      	ldr	r3, [pc, #696]	@ (8002080 <main+0x5cc>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d009      	beq.n	8001de4 <main+0x330>
        if(ir_sensor_state == 0) ir_object_count++;
 8001dd0:	4bab      	ldr	r3, [pc, #684]	@ (8002080 <main+0x5cc>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d104      	bne.n	8001de4 <main+0x330>
 8001dda:	4bab      	ldr	r3, [pc, #684]	@ (8002088 <main+0x5d4>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	3301      	adds	r3, #1
 8001de0:	4aa9      	ldr	r2, [pc, #676]	@ (8002088 <main+0x5d4>)
 8001de2:	6013      	str	r3, [r2, #0]
    }
    last_ir_sensor_state = ir_sensor_state;
 8001de4:	4ba6      	ldr	r3, [pc, #664]	@ (8002080 <main+0x5cc>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	4ba6      	ldr	r3, [pc, #664]	@ (8002084 <main+0x5d0>)
 8001dec:	701a      	strb	r2, [r3, #0]
    
    // İKİNCİ IR SENSOR OKUMA - PF4 PİNİ (YENİ!)
    ir_sensor_update(&ir_sensor2);
 8001dee:	48a7      	ldr	r0, [pc, #668]	@ (800208c <main+0x5d8>)
 8001df0:	f7ff fd2e 	bl	8001850 <ir_sensor_update>
    ir_sensor2_state = ir_sensor_get_state(&ir_sensor2);
 8001df4:	48a5      	ldr	r0, [pc, #660]	@ (800208c <main+0x5d8>)
 8001df6:	f7ff fd67 	bl	80018c8 <ir_sensor_get_state>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4ba4      	ldr	r3, [pc, #656]	@ (8002090 <main+0x5dc>)
 8001e00:	701a      	strb	r2, [r3, #0]
    if(last_ir_sensor2_state != ir_sensor2_state){
 8001e02:	4ba4      	ldr	r3, [pc, #656]	@ (8002094 <main+0x5e0>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	4ba1      	ldr	r3, [pc, #644]	@ (8002090 <main+0x5dc>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d009      	beq.n	8001e26 <main+0x372>
        if(ir_sensor2_state == 0) ir_object2_count++;
 8001e12:	4b9f      	ldr	r3, [pc, #636]	@ (8002090 <main+0x5dc>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d104      	bne.n	8001e26 <main+0x372>
 8001e1c:	4b9e      	ldr	r3, [pc, #632]	@ (8002098 <main+0x5e4>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	3301      	adds	r3, #1
 8001e22:	4a9d      	ldr	r2, [pc, #628]	@ (8002098 <main+0x5e4>)
 8001e24:	6013      	str	r3, [r2, #0]
    }
    last_ir_sensor2_state = ir_sensor2_state;
 8001e26:	4b9a      	ldr	r3, [pc, #616]	@ (8002090 <main+0x5dc>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	b2da      	uxtb	r2, r3
 8001e2c:	4b99      	ldr	r3, [pc, #612]	@ (8002094 <main+0x5e0>)
 8001e2e:	701a      	strb	r2, [r3, #0]

    // Sensör verilerini integer'a çevir
    int temp_int = (int)(ambient_temp_C * 100);
 8001e30:	4b9a      	ldr	r3, [pc, #616]	@ (800209c <main+0x5e8>)
 8001e32:	edd3 7a00 	vldr	s15, [r3]
 8001e36:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 80020a0 <main+0x5ec>
 8001e3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e42:	ee17 3a90 	vmov	r3, s15
 8001e46:	f8c7 3454 	str.w	r3, [r7, #1108]	@ 0x454
    int obj_temp_int = (int)(object_temp_C * 100);
 8001e4a:	4b83      	ldr	r3, [pc, #524]	@ (8002058 <main+0x5a4>)
 8001e4c:	edd3 7a00 	vldr	s15, [r3]
 8001e50:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 80020a0 <main+0x5ec>
 8001e54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e5c:	ee17 3a90 	vmov	r3, s15
 8001e60:	f8c7 3450 	str.w	r3, [r7, #1104]	@ 0x450
    int ax_int = (int)(accel_x * 100);
 8001e64:	4b7f      	ldr	r3, [pc, #508]	@ (8002064 <main+0x5b0>)
 8001e66:	edd3 7a00 	vldr	s15, [r3]
 8001e6a:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 80020a0 <main+0x5ec>
 8001e6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e76:	ee17 3a90 	vmov	r3, s15
 8001e7a:	f8c7 344c 	str.w	r3, [r7, #1100]	@ 0x44c
    int ay_int = (int)(accel_y * 100);
 8001e7e:	4b7a      	ldr	r3, [pc, #488]	@ (8002068 <main+0x5b4>)
 8001e80:	edd3 7a00 	vldr	s15, [r3]
 8001e84:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 80020a0 <main+0x5ec>
 8001e88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e90:	ee17 3a90 	vmov	r3, s15
 8001e94:	f8c7 3448 	str.w	r3, [r7, #1096]	@ 0x448
    int az_int = (int)(accel_z * 100);
 8001e98:	4b74      	ldr	r3, [pc, #464]	@ (800206c <main+0x5b8>)
 8001e9a:	edd3 7a00 	vldr	s15, [r3]
 8001e9e:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80020a0 <main+0x5ec>
 8001ea2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ea6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eaa:	ee17 3a90 	vmov	r3, s15
 8001eae:	f8c7 3444 	str.w	r3, [r7, #1092]	@ 0x444
    int gx_int = (int)(gyro_x * 100);
 8001eb2:	4b6f      	ldr	r3, [pc, #444]	@ (8002070 <main+0x5bc>)
 8001eb4:	edd3 7a00 	vldr	s15, [r3]
 8001eb8:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 80020a0 <main+0x5ec>
 8001ebc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ec0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ec4:	ee17 3a90 	vmov	r3, s15
 8001ec8:	f8c7 3440 	str.w	r3, [r7, #1088]	@ 0x440
    int gy_int = (int)(gyro_y * 100);
 8001ecc:	4b69      	ldr	r3, [pc, #420]	@ (8002074 <main+0x5c0>)
 8001ece:	edd3 7a00 	vldr	s15, [r3]
 8001ed2:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 80020a0 <main+0x5ec>
 8001ed6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ede:	ee17 3a90 	vmov	r3, s15
 8001ee2:	f8c7 343c 	str.w	r3, [r7, #1084]	@ 0x43c
    int gz_int = (int)(gyro_z * 100);
 8001ee6:	4b64      	ldr	r3, [pc, #400]	@ (8002078 <main+0x5c4>)
 8001ee8:	edd3 7a00 	vldr	s15, [r3]
 8001eec:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 80020a0 <main+0x5ec>
 8001ef0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ef4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ef8:	ee17 3a90 	vmov	r3, s15
 8001efc:	f8c7 3438 	str.w	r3, [r7, #1080]	@ 0x438
    
    // Encoder verilerini metreye çevir (cm -> m)
    float total_distance_m = get_total_distance() / 100.0f;  // cm'den metreye çevir
 8001f00:	f7ff fc6c 	bl	80017dc <get_total_distance>
 8001f04:	eeb0 7a40 	vmov.f32	s14, s0
 8001f08:	eddf 6a65 	vldr	s13, [pc, #404]	@ 80020a0 <main+0x5ec>
 8001f0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f10:	f207 4334 	addw	r3, r7, #1076	@ 0x434
 8001f14:	edc3 7a00 	vstr	s15, [r3]
    long enc_pos_int = (long)(total_distance_m * 1000);  // Metreyi milimetreye çevir ve long olarak sakla
 8001f18:	f207 4334 	addw	r3, r7, #1076	@ 0x434
 8001f1c:	edd3 7a00 	vldr	s15, [r3]
 8001f20:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 80020a4 <main+0x5f0>
 8001f24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f2c:	ee17 3a90 	vmov	r3, s15
 8001f30:	f8c7 3430 	str.w	r3, [r7, #1072]	@ 0x430
    long enc_spd_int = (long)(encoder_speed * 1000);    // Hızı da aynı şekilde
 8001f34:	4b5c      	ldr	r3, [pc, #368]	@ (80020a8 <main+0x5f4>)
 8001f36:	edd3 7a00 	vldr	s15, [r3]
 8001f3a:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 80020a4 <main+0x5f0>
 8001f3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f46:	ee17 3a90 	vmov	r3, s15
 8001f4a:	f8c7 342c 	str.w	r3, [r7, #1068]	@ 0x42c

    //Akım Sensörü verilerini integer'a çevir

    int current_int = (int)(filtered_current * 100);
 8001f4e:	4b57      	ldr	r3, [pc, #348]	@ (80020ac <main+0x5f8>)
 8001f50:	edd3 7a00 	vldr	s15, [r3]
 8001f54:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80020a0 <main+0x5ec>
 8001f58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f60:	ee17 3a90 	vmov	r3, s15
 8001f64:	f8c7 3428 	str.w	r3, [r7, #1064]	@ 0x428

    // Sıcaklık ve IMU verilerini 0-9999 aralığında sınırla
    temp_int = temp_int < 0 ? 0 : (temp_int > 9999 ? 9999 : temp_int);
 8001f68:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	db07      	blt.n	8001f80 <main+0x4cc>
 8001f70:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8001f74:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	bfa8      	it	ge
 8001f7c:	4613      	movge	r3, r2
 8001f7e:	e000      	b.n	8001f82 <main+0x4ce>
 8001f80:	2300      	movs	r3, #0
 8001f82:	f8c7 3454 	str.w	r3, [r7, #1108]	@ 0x454
    obj_temp_int = obj_temp_int < 0 ? 0 : (obj_temp_int > 9999 ? 9999 : obj_temp_int);
 8001f86:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	db07      	blt.n	8001f9e <main+0x4ea>
 8001f8e:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8001f92:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001f96:	4293      	cmp	r3, r2
 8001f98:	bfa8      	it	ge
 8001f9a:	4613      	movge	r3, r2
 8001f9c:	e000      	b.n	8001fa0 <main+0x4ec>
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	f8c7 3450 	str.w	r3, [r7, #1104]	@ 0x450
    ax_int = ax_int < 0 ? 0 : (ax_int > 9999 ? 9999 : ax_int);
 8001fa4:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	db07      	blt.n	8001fbc <main+0x508>
 8001fac:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 8001fb0:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	bfa8      	it	ge
 8001fb8:	4613      	movge	r3, r2
 8001fba:	e000      	b.n	8001fbe <main+0x50a>
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	f8c7 344c 	str.w	r3, [r7, #1100]	@ 0x44c
    ay_int = ay_int < 0 ? 0 : (ay_int > 9999 ? 9999 : ay_int);
 8001fc2:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	db07      	blt.n	8001fda <main+0x526>
 8001fca:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 8001fce:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	bfa8      	it	ge
 8001fd6:	4613      	movge	r3, r2
 8001fd8:	e000      	b.n	8001fdc <main+0x528>
 8001fda:	2300      	movs	r3, #0
 8001fdc:	f8c7 3448 	str.w	r3, [r7, #1096]	@ 0x448
    az_int = az_int < 0 ? 0 : (az_int > 9999 ? 9999 : az_int);
 8001fe0:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	db07      	blt.n	8001ff8 <main+0x544>
 8001fe8:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 8001fec:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	bfa8      	it	ge
 8001ff4:	4613      	movge	r3, r2
 8001ff6:	e000      	b.n	8001ffa <main+0x546>
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	f8c7 3444 	str.w	r3, [r7, #1092]	@ 0x444
    gx_int = gx_int < 0 ? 0 : (gx_int > 9999 ? 9999 : gx_int);
 8001ffe:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 8002002:	2b00      	cmp	r3, #0
 8002004:	db07      	blt.n	8002016 <main+0x562>
 8002006:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 800200a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800200e:	4293      	cmp	r3, r2
 8002010:	bfa8      	it	ge
 8002012:	4613      	movge	r3, r2
 8002014:	e000      	b.n	8002018 <main+0x564>
 8002016:	2300      	movs	r3, #0
 8002018:	f8c7 3440 	str.w	r3, [r7, #1088]	@ 0x440
    gy_int = gy_int < 0 ? 0 : (gy_int > 9999 ? 9999 : gy_int);
 800201c:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8002020:	2b00      	cmp	r3, #0
 8002022:	db07      	blt.n	8002034 <main+0x580>
 8002024:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8002028:	f242 720f 	movw	r2, #9999	@ 0x270f
 800202c:	4293      	cmp	r3, r2
 800202e:	bfa8      	it	ge
 8002030:	4613      	movge	r3, r2
 8002032:	e000      	b.n	8002036 <main+0x582>
 8002034:	2300      	movs	r3, #0
 8002036:	f8c7 343c 	str.w	r3, [r7, #1084]	@ 0x43c
    gz_int = gz_int < 0 ? 0 : (gz_int > 9999 ? 9999 : gz_int);
 800203a:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 800203e:	2b00      	cmp	r3, #0
 8002040:	db36      	blt.n	80020b0 <main+0x5fc>
 8002042:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 8002046:	f242 720f 	movw	r2, #9999	@ 0x270f
 800204a:	4293      	cmp	r3, r2
 800204c:	bfa8      	it	ge
 800204e:	4613      	movge	r3, r2
 8002050:	e02f      	b.n	80020b2 <main+0x5fe>
 8002052:	bf00      	nop
 8002054:	200004b8 	.word	0x200004b8
 8002058:	200004ac 	.word	0x200004ac
 800205c:	41f00000 	.word	0x41f00000
 8002060:	20000200 	.word	0x20000200
 8002064:	200004bc 	.word	0x200004bc
 8002068:	200004c0 	.word	0x200004c0
 800206c:	200004c4 	.word	0x200004c4
 8002070:	200004c8 	.word	0x200004c8
 8002074:	200004cc 	.word	0x200004cc
 8002078:	200004d0 	.word	0x200004d0
 800207c:	20000210 	.word	0x20000210
 8002080:	200004e4 	.word	0x200004e4
 8002084:	20000001 	.word	0x20000001
 8002088:	200004e8 	.word	0x200004e8
 800208c:	20000224 	.word	0x20000224
 8002090:	200004ec 	.word	0x200004ec
 8002094:	20000002 	.word	0x20000002
 8002098:	200004f0 	.word	0x200004f0
 800209c:	200004a8 	.word	0x200004a8
 80020a0:	42c80000 	.word	0x42c80000
 80020a4:	447a0000 	.word	0x447a0000
 80020a8:	200001ec 	.word	0x200001ec
 80020ac:	200004e0 	.word	0x200004e0
 80020b0:	2300      	movs	r3, #0
 80020b2:	f8c7 3438 	str.w	r3, [r7, #1080]	@ 0x438


    // JSON formatında birleştir
    char message[1024];  // Buffer boyutunu artırdık
    snprintf(message, sizeof(message), 
 80020b6:	4b42      	ldr	r3, [pc, #264]	@ (80021c0 <main+0x70c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a42      	ldr	r2, [pc, #264]	@ (80021c4 <main+0x710>)
 80020bc:	6812      	ldr	r2, [r2, #0]
 80020be:	4638      	mov	r0, r7
 80020c0:	f8d7 1428 	ldr.w	r1, [r7, #1064]	@ 0x428
 80020c4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80020c6:	920a      	str	r2, [sp, #40]	@ 0x28
 80020c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80020ca:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 80020ce:	9308      	str	r3, [sp, #32]
 80020d0:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 80020d4:	9307      	str	r3, [sp, #28]
 80020d6:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 80020da:	9306      	str	r3, [sp, #24]
 80020dc:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 80020e0:	9305      	str	r3, [sp, #20]
 80020e2:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 80020e6:	9304      	str	r3, [sp, #16]
 80020e8:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 80020ec:	9303      	str	r3, [sp, #12]
 80020ee:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 80020f2:	9302      	str	r3, [sp, #8]
 80020f4:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 80020f8:	9301      	str	r3, [sp, #4]
 80020fa:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8002104:	4a30      	ldr	r2, [pc, #192]	@ (80021c8 <main+0x714>)
 8002106:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800210a:	f00c fcd9 	bl	800eac0 <sniprintf>
        temp_int, obj_temp_int, ax_int, ay_int, az_int, gx_int, gy_int, gz_int,
        enc_pos_int, enc_spd_int, ir_object_count, ir_object2_count,current_int);

    // Set the structure to handle the packet
    struct pbuf *p;
    p = pbuf_alloc(PBUF_TRANSPORT, strlen(message) + 1, PBUF_RAM);
 800210e:	463b      	mov	r3, r7
 8002110:	4618      	mov	r0, r3
 8002112:	f7fe f87d 	bl	8000210 <strlen>
 8002116:	4603      	mov	r3, r0
 8002118:	b29b      	uxth	r3, r3
 800211a:	3301      	adds	r3, #1
 800211c:	b29b      	uxth	r3, r3
 800211e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8002122:	4619      	mov	r1, r3
 8002124:	2036      	movs	r0, #54	@ 0x36
 8002126:	f008 ff35 	bl	800af94 <pbuf_alloc>
 800212a:	f8c7 0424 	str.w	r0, [r7, #1060]	@ 0x424
    if (p == NULL)
 800212e:	f8d7 3424 	ldr.w	r3, [r7, #1060]	@ 0x424
 8002132:	2b00      	cmp	r3, #0
 8002134:	d109      	bne.n	800214a <main+0x696>
    {
        printf("Error allocating pbuf\n");
 8002136:	4825      	ldr	r0, [pc, #148]	@ (80021cc <main+0x718>)
 8002138:	f00c fe82 	bl	800ee40 <puts>
    HAL_Delay(15);

  }

  // This point shall not be reached
  udp_remove(udp_socket);
 800213c:	4b24      	ldr	r3, [pc, #144]	@ (80021d0 <main+0x71c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f00a f977 	bl	800c434 <udp_remove>
 8002146:	2300      	movs	r3, #0
 8002148:	e034      	b.n	80021b4 <main+0x700>
    memcpy(p->payload, message, strlen(message) + 1);
 800214a:	f8d7 3424 	ldr.w	r3, [r7, #1060]	@ 0x424
 800214e:	685c      	ldr	r4, [r3, #4]
 8002150:	463b      	mov	r3, r7
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe f85c 	bl	8000210 <strlen>
 8002158:	4603      	mov	r3, r0
 800215a:	1c5a      	adds	r2, r3, #1
 800215c:	463b      	mov	r3, r7
 800215e:	4619      	mov	r1, r3
 8002160:	4620      	mov	r0, r4
 8002162:	f00c fef8 	bl	800ef56 <memcpy>
    err_t err = udp_sendto(udp_socket, p, &dest_ip, dest_port);
 8002166:	4b1a      	ldr	r3, [pc, #104]	@ (80021d0 <main+0x71c>)
 8002168:	6818      	ldr	r0, [r3, #0]
 800216a:	f8b7 345e 	ldrh.w	r3, [r7, #1118]	@ 0x45e
 800216e:	4a19      	ldr	r2, [pc, #100]	@ (80021d4 <main+0x720>)
 8002170:	f8d7 1424 	ldr.w	r1, [r7, #1060]	@ 0x424
 8002174:	f009 ff00 	bl	800bf78 <udp_sendto>
 8002178:	4603      	mov	r3, r0
 800217a:	f887 3423 	strb.w	r3, [r7, #1059]	@ 0x423
    if (err != ERR_OK)
 800217e:	f997 3423 	ldrsb.w	r3, [r7, #1059]	@ 0x423
 8002182:	2b00      	cmp	r3, #0
 8002184:	d002      	beq.n	800218c <main+0x6d8>
        printf("Error while sending UDP packet\n");
 8002186:	4814      	ldr	r0, [pc, #80]	@ (80021d8 <main+0x724>)
 8002188:	f00c fe5a 	bl	800ee40 <puts>
    pbuf_free(p);
 800218c:	f8d7 0424 	ldr.w	r0, [r7, #1060]	@ 0x424
 8002190:	f009 f9e2 	bl	800b558 <pbuf_free>
    counter++;
 8002194:	4b11      	ldr	r3, [pc, #68]	@ (80021dc <main+0x728>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	3301      	adds	r3, #1
 800219a:	4a10      	ldr	r2, [pc, #64]	@ (80021dc <main+0x728>)
 800219c:	6013      	str	r3, [r2, #0]
    if (counter == 10)
 800219e:	4b0f      	ldr	r3, [pc, #60]	@ (80021dc <main+0x728>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2b0a      	cmp	r3, #10
 80021a4:	d102      	bne.n	80021ac <main+0x6f8>
        counter = 0;
 80021a6:	4b0d      	ldr	r3, [pc, #52]	@ (80021dc <main+0x728>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
    HAL_Delay(15);
 80021ac:	200f      	movs	r0, #15
 80021ae:	f001 fc21 	bl	80039f4 <HAL_Delay>
  {
 80021b2:	e502      	b.n	8001bba <main+0x106>
  /* USER CODE END 3 */
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	f207 4764 	addw	r7, r7, #1124	@ 0x464
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd90      	pop	{r4, r7, pc}
 80021be:	bf00      	nop
 80021c0:	200004e8 	.word	0x200004e8
 80021c4:	200004f0 	.word	0x200004f0
 80021c8:	08010058 	.word	0x08010058
 80021cc:	0801011c 	.word	0x0801011c
 80021d0:	200004a0 	.word	0x200004a0
 80021d4:	200004a4 	.word	0x200004a4
 80021d8:	08010134 	.word	0x08010134
 80021dc:	2000049c 	.word	0x2000049c

080021e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b094      	sub	sp, #80	@ 0x50
 80021e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021e6:	f107 0320 	add.w	r3, r7, #32
 80021ea:	2230      	movs	r2, #48	@ 0x30
 80021ec:	2100      	movs	r1, #0
 80021ee:	4618      	mov	r0, r3
 80021f0:	f00c fe58 	bl	800eea4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021f4:	f107 030c 	add.w	r3, r7, #12
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	609a      	str	r2, [r3, #8]
 8002200:	60da      	str	r2, [r3, #12]
 8002202:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002204:	4b2a      	ldr	r3, [pc, #168]	@ (80022b0 <SystemClock_Config+0xd0>)
 8002206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002208:	4a29      	ldr	r2, [pc, #164]	@ (80022b0 <SystemClock_Config+0xd0>)
 800220a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800220e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002210:	4b27      	ldr	r3, [pc, #156]	@ (80022b0 <SystemClock_Config+0xd0>)
 8002212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002214:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002218:	60bb      	str	r3, [r7, #8]
 800221a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800221c:	4b25      	ldr	r3, [pc, #148]	@ (80022b4 <SystemClock_Config+0xd4>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a24      	ldr	r2, [pc, #144]	@ (80022b4 <SystemClock_Config+0xd4>)
 8002222:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002226:	6013      	str	r3, [r2, #0]
 8002228:	4b22      	ldr	r3, [pc, #136]	@ (80022b4 <SystemClock_Config+0xd4>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002230:	607b      	str	r3, [r7, #4]
 8002232:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002234:	2302      	movs	r3, #2
 8002236:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002238:	2301      	movs	r3, #1
 800223a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800223c:	2310      	movs	r3, #16
 800223e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002240:	2302      	movs	r3, #2
 8002242:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002244:	2300      	movs	r3, #0
 8002246:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002248:	2308      	movs	r3, #8
 800224a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 800224c:	23d8      	movs	r3, #216	@ 0xd8
 800224e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002250:	2302      	movs	r3, #2
 8002252:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002254:	2302      	movs	r3, #2
 8002256:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002258:	f107 0320 	add.w	r3, r7, #32
 800225c:	4618      	mov	r0, r3
 800225e:	f004 fc07 	bl	8006a70 <HAL_RCC_OscConfig>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002268:	f000 fafa 	bl	8002860 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800226c:	f004 fbb0 	bl	80069d0 <HAL_PWREx_EnableOverDrive>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002276:	f000 faf3 	bl	8002860 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800227a:	230f      	movs	r3, #15
 800227c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800227e:	2302      	movs	r3, #2
 8002280:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002286:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800228a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800228c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002290:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002292:	f107 030c 	add.w	r3, r7, #12
 8002296:	2107      	movs	r1, #7
 8002298:	4618      	mov	r0, r3
 800229a:	f004 fe8d 	bl	8006fb8 <HAL_RCC_ClockConfig>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80022a4:	f000 fadc 	bl	8002860 <Error_Handler>
  }
}
 80022a8:	bf00      	nop
 80022aa:	3750      	adds	r7, #80	@ 0x50
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40007000 	.word	0x40007000

080022b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80022be:	463b      	mov	r3, r7
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80022ca:	4b21      	ldr	r3, [pc, #132]	@ (8002350 <MX_ADC1_Init+0x98>)
 80022cc:	4a21      	ldr	r2, [pc, #132]	@ (8002354 <MX_ADC1_Init+0x9c>)
 80022ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80022d0:	4b1f      	ldr	r3, [pc, #124]	@ (8002350 <MX_ADC1_Init+0x98>)
 80022d2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80022d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80022d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002350 <MX_ADC1_Init+0x98>)
 80022da:	2200      	movs	r2, #0
 80022dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80022de:	4b1c      	ldr	r3, [pc, #112]	@ (8002350 <MX_ADC1_Init+0x98>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80022e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002350 <MX_ADC1_Init+0x98>)
 80022e6:	2201      	movs	r2, #1
 80022e8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022ea:	4b19      	ldr	r3, [pc, #100]	@ (8002350 <MX_ADC1_Init+0x98>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022f2:	4b17      	ldr	r3, [pc, #92]	@ (8002350 <MX_ADC1_Init+0x98>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022f8:	4b15      	ldr	r3, [pc, #84]	@ (8002350 <MX_ADC1_Init+0x98>)
 80022fa:	4a17      	ldr	r2, [pc, #92]	@ (8002358 <MX_ADC1_Init+0xa0>)
 80022fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022fe:	4b14      	ldr	r3, [pc, #80]	@ (8002350 <MX_ADC1_Init+0x98>)
 8002300:	2200      	movs	r2, #0
 8002302:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002304:	4b12      	ldr	r3, [pc, #72]	@ (8002350 <MX_ADC1_Init+0x98>)
 8002306:	2201      	movs	r2, #1
 8002308:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800230a:	4b11      	ldr	r3, [pc, #68]	@ (8002350 <MX_ADC1_Init+0x98>)
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002312:	4b0f      	ldr	r3, [pc, #60]	@ (8002350 <MX_ADC1_Init+0x98>)
 8002314:	2201      	movs	r2, #1
 8002316:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002318:	480d      	ldr	r0, [pc, #52]	@ (8002350 <MX_ADC1_Init+0x98>)
 800231a:	f001 fb8f 	bl	8003a3c <HAL_ADC_Init>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002324:	f000 fa9c 	bl	8002860 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002328:	2304      	movs	r3, #4
 800232a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800232c:	2301      	movs	r3, #1
 800232e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002330:	2307      	movs	r3, #7
 8002332:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002334:	463b      	mov	r3, r7
 8002336:	4619      	mov	r1, r3
 8002338:	4805      	ldr	r0, [pc, #20]	@ (8002350 <MX_ADC1_Init+0x98>)
 800233a:	f001 fd5d 	bl	8003df8 <HAL_ADC_ConfigChannel>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002344:	f000 fa8c 	bl	8002860 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002348:	bf00      	nop
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	20000238 	.word	0x20000238
 8002354:	40012000 	.word	0x40012000
 8002358:	0f000001 	.word	0x0f000001

0800235c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002360:	4b1b      	ldr	r3, [pc, #108]	@ (80023d0 <MX_I2C1_Init+0x74>)
 8002362:	4a1c      	ldr	r2, [pc, #112]	@ (80023d4 <MX_I2C1_Init+0x78>)
 8002364:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8002366:	4b1a      	ldr	r3, [pc, #104]	@ (80023d0 <MX_I2C1_Init+0x74>)
 8002368:	4a1b      	ldr	r2, [pc, #108]	@ (80023d8 <MX_I2C1_Init+0x7c>)
 800236a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800236c:	4b18      	ldr	r3, [pc, #96]	@ (80023d0 <MX_I2C1_Init+0x74>)
 800236e:	2200      	movs	r2, #0
 8002370:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002372:	4b17      	ldr	r3, [pc, #92]	@ (80023d0 <MX_I2C1_Init+0x74>)
 8002374:	2201      	movs	r2, #1
 8002376:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002378:	4b15      	ldr	r3, [pc, #84]	@ (80023d0 <MX_I2C1_Init+0x74>)
 800237a:	2200      	movs	r2, #0
 800237c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800237e:	4b14      	ldr	r3, [pc, #80]	@ (80023d0 <MX_I2C1_Init+0x74>)
 8002380:	2200      	movs	r2, #0
 8002382:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002384:	4b12      	ldr	r3, [pc, #72]	@ (80023d0 <MX_I2C1_Init+0x74>)
 8002386:	2200      	movs	r2, #0
 8002388:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800238a:	4b11      	ldr	r3, [pc, #68]	@ (80023d0 <MX_I2C1_Init+0x74>)
 800238c:	2200      	movs	r2, #0
 800238e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002390:	4b0f      	ldr	r3, [pc, #60]	@ (80023d0 <MX_I2C1_Init+0x74>)
 8002392:	2200      	movs	r2, #0
 8002394:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002396:	480e      	ldr	r0, [pc, #56]	@ (80023d0 <MX_I2C1_Init+0x74>)
 8002398:	f003 fbf0 	bl	8005b7c <HAL_I2C_Init>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80023a2:	f000 fa5d 	bl	8002860 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80023a6:	2100      	movs	r1, #0
 80023a8:	4809      	ldr	r0, [pc, #36]	@ (80023d0 <MX_I2C1_Init+0x74>)
 80023aa:	f004 fa79 	bl	80068a0 <HAL_I2CEx_ConfigAnalogFilter>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80023b4:	f000 fa54 	bl	8002860 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80023b8:	2100      	movs	r1, #0
 80023ba:	4805      	ldr	r0, [pc, #20]	@ (80023d0 <MX_I2C1_Init+0x74>)
 80023bc:	f004 fabb 	bl	8006936 <HAL_I2CEx_ConfigDigitalFilter>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80023c6:	f000 fa4b 	bl	8002860 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20000280 	.word	0x20000280
 80023d4:	40005400 	.word	0x40005400
 80023d8:	20404768 	.word	0x20404768

080023dc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80023e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002450 <MX_I2C2_Init+0x74>)
 80023e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002454 <MX_I2C2_Init+0x78>)
 80023e4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 80023e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002450 <MX_I2C2_Init+0x74>)
 80023e8:	4a1b      	ldr	r2, [pc, #108]	@ (8002458 <MX_I2C2_Init+0x7c>)
 80023ea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80023ec:	4b18      	ldr	r3, [pc, #96]	@ (8002450 <MX_I2C2_Init+0x74>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023f2:	4b17      	ldr	r3, [pc, #92]	@ (8002450 <MX_I2C2_Init+0x74>)
 80023f4:	2201      	movs	r2, #1
 80023f6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023f8:	4b15      	ldr	r3, [pc, #84]	@ (8002450 <MX_I2C2_Init+0x74>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80023fe:	4b14      	ldr	r3, [pc, #80]	@ (8002450 <MX_I2C2_Init+0x74>)
 8002400:	2200      	movs	r2, #0
 8002402:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002404:	4b12      	ldr	r3, [pc, #72]	@ (8002450 <MX_I2C2_Init+0x74>)
 8002406:	2200      	movs	r2, #0
 8002408:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800240a:	4b11      	ldr	r3, [pc, #68]	@ (8002450 <MX_I2C2_Init+0x74>)
 800240c:	2200      	movs	r2, #0
 800240e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002410:	4b0f      	ldr	r3, [pc, #60]	@ (8002450 <MX_I2C2_Init+0x74>)
 8002412:	2200      	movs	r2, #0
 8002414:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002416:	480e      	ldr	r0, [pc, #56]	@ (8002450 <MX_I2C2_Init+0x74>)
 8002418:	f003 fbb0 	bl	8005b7c <HAL_I2C_Init>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002422:	f000 fa1d 	bl	8002860 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002426:	2100      	movs	r1, #0
 8002428:	4809      	ldr	r0, [pc, #36]	@ (8002450 <MX_I2C2_Init+0x74>)
 800242a:	f004 fa39 	bl	80068a0 <HAL_I2CEx_ConfigAnalogFilter>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002434:	f000 fa14 	bl	8002860 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002438:	2100      	movs	r1, #0
 800243a:	4805      	ldr	r0, [pc, #20]	@ (8002450 <MX_I2C2_Init+0x74>)
 800243c:	f004 fa7b 	bl	8006936 <HAL_I2CEx_ConfigDigitalFilter>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002446:	f000 fa0b 	bl	8002860 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	200002d4 	.word	0x200002d4
 8002454:	40005800 	.word	0x40005800
 8002458:	20404768 	.word	0x20404768

0800245c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002460:	4b1b      	ldr	r3, [pc, #108]	@ (80024d0 <MX_I2C3_Init+0x74>)
 8002462:	4a1c      	ldr	r2, [pc, #112]	@ (80024d4 <MX_I2C3_Init+0x78>)
 8002464:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20404768;
 8002466:	4b1a      	ldr	r3, [pc, #104]	@ (80024d0 <MX_I2C3_Init+0x74>)
 8002468:	4a1b      	ldr	r2, [pc, #108]	@ (80024d8 <MX_I2C3_Init+0x7c>)
 800246a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800246c:	4b18      	ldr	r3, [pc, #96]	@ (80024d0 <MX_I2C3_Init+0x74>)
 800246e:	2200      	movs	r2, #0
 8002470:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002472:	4b17      	ldr	r3, [pc, #92]	@ (80024d0 <MX_I2C3_Init+0x74>)
 8002474:	2201      	movs	r2, #1
 8002476:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002478:	4b15      	ldr	r3, [pc, #84]	@ (80024d0 <MX_I2C3_Init+0x74>)
 800247a:	2200      	movs	r2, #0
 800247c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800247e:	4b14      	ldr	r3, [pc, #80]	@ (80024d0 <MX_I2C3_Init+0x74>)
 8002480:	2200      	movs	r2, #0
 8002482:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002484:	4b12      	ldr	r3, [pc, #72]	@ (80024d0 <MX_I2C3_Init+0x74>)
 8002486:	2200      	movs	r2, #0
 8002488:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800248a:	4b11      	ldr	r3, [pc, #68]	@ (80024d0 <MX_I2C3_Init+0x74>)
 800248c:	2200      	movs	r2, #0
 800248e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002490:	4b0f      	ldr	r3, [pc, #60]	@ (80024d0 <MX_I2C3_Init+0x74>)
 8002492:	2200      	movs	r2, #0
 8002494:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002496:	480e      	ldr	r0, [pc, #56]	@ (80024d0 <MX_I2C3_Init+0x74>)
 8002498:	f003 fb70 	bl	8005b7c <HAL_I2C_Init>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80024a2:	f000 f9dd 	bl	8002860 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80024a6:	2100      	movs	r1, #0
 80024a8:	4809      	ldr	r0, [pc, #36]	@ (80024d0 <MX_I2C3_Init+0x74>)
 80024aa:	f004 f9f9 	bl	80068a0 <HAL_I2CEx_ConfigAnalogFilter>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80024b4:	f000 f9d4 	bl	8002860 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80024b8:	2100      	movs	r1, #0
 80024ba:	4805      	ldr	r0, [pc, #20]	@ (80024d0 <MX_I2C3_Init+0x74>)
 80024bc:	f004 fa3b 	bl	8006936 <HAL_I2CEx_ConfigDigitalFilter>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80024c6:	f000 f9cb 	bl	8002860 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80024ca:	bf00      	nop
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	20000328 	.word	0x20000328
 80024d4:	40005c00 	.word	0x40005c00
 80024d8:	20404768 	.word	0x20404768

080024dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08c      	sub	sp, #48	@ 0x30
 80024e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80024e2:	f107 030c 	add.w	r3, r7, #12
 80024e6:	2224      	movs	r2, #36	@ 0x24
 80024e8:	2100      	movs	r1, #0
 80024ea:	4618      	mov	r0, r3
 80024ec:	f00c fcda 	bl	800eea4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024f0:	463b      	mov	r3, r7
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	605a      	str	r2, [r3, #4]
 80024f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024fa:	4b21      	ldr	r3, [pc, #132]	@ (8002580 <MX_TIM3_Init+0xa4>)
 80024fc:	4a21      	ldr	r2, [pc, #132]	@ (8002584 <MX_TIM3_Init+0xa8>)
 80024fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002500:	4b1f      	ldr	r3, [pc, #124]	@ (8002580 <MX_TIM3_Init+0xa4>)
 8002502:	2200      	movs	r2, #0
 8002504:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002506:	4b1e      	ldr	r3, [pc, #120]	@ (8002580 <MX_TIM3_Init+0xa4>)
 8002508:	2200      	movs	r2, #0
 800250a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800250c:	4b1c      	ldr	r3, [pc, #112]	@ (8002580 <MX_TIM3_Init+0xa4>)
 800250e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002512:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002514:	4b1a      	ldr	r3, [pc, #104]	@ (8002580 <MX_TIM3_Init+0xa4>)
 8002516:	2200      	movs	r2, #0
 8002518:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800251a:	4b19      	ldr	r3, [pc, #100]	@ (8002580 <MX_TIM3_Init+0xa4>)
 800251c:	2200      	movs	r2, #0
 800251e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002520:	2303      	movs	r3, #3
 8002522:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002524:	2300      	movs	r3, #0
 8002526:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002528:	2301      	movs	r3, #1
 800252a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800252c:	2300      	movs	r3, #0
 800252e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002530:	2300      	movs	r3, #0
 8002532:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002534:	2300      	movs	r3, #0
 8002536:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002538:	2301      	movs	r3, #1
 800253a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800253c:	2300      	movs	r3, #0
 800253e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002540:	2300      	movs	r3, #0
 8002542:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002544:	f107 030c 	add.w	r3, r7, #12
 8002548:	4619      	mov	r1, r3
 800254a:	480d      	ldr	r0, [pc, #52]	@ (8002580 <MX_TIM3_Init+0xa4>)
 800254c:	f005 fcbc 	bl	8007ec8 <HAL_TIM_Encoder_Init>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002556:	f000 f983 	bl	8002860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800255a:	2300      	movs	r3, #0
 800255c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800255e:	2300      	movs	r3, #0
 8002560:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002562:	463b      	mov	r3, r7
 8002564:	4619      	mov	r1, r3
 8002566:	4806      	ldr	r0, [pc, #24]	@ (8002580 <MX_TIM3_Init+0xa4>)
 8002568:	f006 fa20 	bl	80089ac <HAL_TIMEx_MasterConfigSynchronization>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002572:	f000 f975 	bl	8002860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002576:	bf00      	nop
 8002578:	3730      	adds	r7, #48	@ 0x30
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	2000037c 	.word	0x2000037c
 8002584:	40000400 	.word	0x40000400

08002588 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b088      	sub	sp, #32
 800258c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800258e:	1d3b      	adds	r3, r7, #4
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	605a      	str	r2, [r3, #4]
 8002596:	609a      	str	r2, [r3, #8]
 8002598:	60da      	str	r2, [r3, #12]
 800259a:	611a      	str	r2, [r3, #16]
 800259c:	615a      	str	r2, [r3, #20]
 800259e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80025a0:	4b1e      	ldr	r3, [pc, #120]	@ (800261c <MX_TIM10_Init+0x94>)
 80025a2:	4a1f      	ldr	r2, [pc, #124]	@ (8002620 <MX_TIM10_Init+0x98>)
 80025a4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 216-1;     // APB2 timer clock = 216MHz
 80025a6:	4b1d      	ldr	r3, [pc, #116]	@ (800261c <MX_TIM10_Init+0x94>)
 80025a8:	22d7      	movs	r2, #215	@ 0xd7
 80025aa:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ac:	4b1b      	ldr	r3, [pc, #108]	@ (800261c <MX_TIM10_Init+0x94>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 20000-1;      // 20ms period for servo (50Hz)
 80025b2:	4b1a      	ldr	r3, [pc, #104]	@ (800261c <MX_TIM10_Init+0x94>)
 80025b4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80025b8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025ba:	4b18      	ldr	r3, [pc, #96]	@ (800261c <MX_TIM10_Init+0x94>)
 80025bc:	2200      	movs	r2, #0
 80025be:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025c0:	4b16      	ldr	r3, [pc, #88]	@ (800261c <MX_TIM10_Init+0x94>)
 80025c2:	2280      	movs	r2, #128	@ 0x80
 80025c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80025c6:	4815      	ldr	r0, [pc, #84]	@ (800261c <MX_TIM10_Init+0x94>)
 80025c8:	f005 facc 	bl	8007b64 <HAL_TIM_Base_Init>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80025d2:	f000 f945 	bl	8002860 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80025d6:	4811      	ldr	r0, [pc, #68]	@ (800261c <MX_TIM10_Init+0x94>)
 80025d8:	f005 fb1b 	bl	8007c12 <HAL_TIM_PWM_Init>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80025e2:	f000 f93d 	bl	8002860 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025e6:	2360      	movs	r3, #96	@ 0x60
 80025e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;            // Başlangıç: Motor kapalı
 80025ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025f0:	2300      	movs	r3, #0
 80025f2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025f8:	1d3b      	adds	r3, r7, #4
 80025fa:	2200      	movs	r2, #0
 80025fc:	4619      	mov	r1, r3
 80025fe:	4807      	ldr	r0, [pc, #28]	@ (800261c <MX_TIM10_Init+0x94>)
 8002600:	f005 fd96 	bl	8008130 <HAL_TIM_PWM_ConfigChannel>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 800260a:	f000 f929 	bl	8002860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 800260e:	4803      	ldr	r0, [pc, #12]	@ (800261c <MX_TIM10_Init+0x94>)
 8002610:	f000 fcec 	bl	8002fec <HAL_TIM_MspPostInit>

}
 8002614:	bf00      	nop
 8002616:	3720      	adds	r7, #32
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	200003c8 	.word	0x200003c8
 8002620:	40014400 	.word	0x40014400

08002624 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002628:	4b14      	ldr	r3, [pc, #80]	@ (800267c <MX_USART3_UART_Init+0x58>)
 800262a:	4a15      	ldr	r2, [pc, #84]	@ (8002680 <MX_USART3_UART_Init+0x5c>)
 800262c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800262e:	4b13      	ldr	r3, [pc, #76]	@ (800267c <MX_USART3_UART_Init+0x58>)
 8002630:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002634:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002636:	4b11      	ldr	r3, [pc, #68]	@ (800267c <MX_USART3_UART_Init+0x58>)
 8002638:	2200      	movs	r2, #0
 800263a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800263c:	4b0f      	ldr	r3, [pc, #60]	@ (800267c <MX_USART3_UART_Init+0x58>)
 800263e:	2200      	movs	r2, #0
 8002640:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002642:	4b0e      	ldr	r3, [pc, #56]	@ (800267c <MX_USART3_UART_Init+0x58>)
 8002644:	2200      	movs	r2, #0
 8002646:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002648:	4b0c      	ldr	r3, [pc, #48]	@ (800267c <MX_USART3_UART_Init+0x58>)
 800264a:	220c      	movs	r2, #12
 800264c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800264e:	4b0b      	ldr	r3, [pc, #44]	@ (800267c <MX_USART3_UART_Init+0x58>)
 8002650:	2200      	movs	r2, #0
 8002652:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002654:	4b09      	ldr	r3, [pc, #36]	@ (800267c <MX_USART3_UART_Init+0x58>)
 8002656:	2200      	movs	r2, #0
 8002658:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800265a:	4b08      	ldr	r3, [pc, #32]	@ (800267c <MX_USART3_UART_Init+0x58>)
 800265c:	2200      	movs	r2, #0
 800265e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002660:	4b06      	ldr	r3, [pc, #24]	@ (800267c <MX_USART3_UART_Init+0x58>)
 8002662:	2200      	movs	r2, #0
 8002664:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002666:	4805      	ldr	r0, [pc, #20]	@ (800267c <MX_USART3_UART_Init+0x58>)
 8002668:	f006 fa2e 	bl	8008ac8 <HAL_UART_Init>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002672:	f000 f8f5 	bl	8002860 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002676:	bf00      	nop
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20000414 	.word	0x20000414
 8002680:	40004800 	.word	0x40004800

08002684 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08c      	sub	sp, #48	@ 0x30
 8002688:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268a:	f107 031c 	add.w	r3, r7, #28
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	605a      	str	r2, [r3, #4]
 8002694:	609a      	str	r2, [r3, #8]
 8002696:	60da      	str	r2, [r3, #12]
 8002698:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800269a:	4b57      	ldr	r3, [pc, #348]	@ (80027f8 <MX_GPIO_Init+0x174>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269e:	4a56      	ldr	r2, [pc, #344]	@ (80027f8 <MX_GPIO_Init+0x174>)
 80026a0:	f043 0320 	orr.w	r3, r3, #32
 80026a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026a6:	4b54      	ldr	r3, [pc, #336]	@ (80027f8 <MX_GPIO_Init+0x174>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026aa:	f003 0320 	and.w	r3, r3, #32
 80026ae:	61bb      	str	r3, [r7, #24]
 80026b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026b2:	4b51      	ldr	r3, [pc, #324]	@ (80027f8 <MX_GPIO_Init+0x174>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b6:	4a50      	ldr	r2, [pc, #320]	@ (80027f8 <MX_GPIO_Init+0x174>)
 80026b8:	f043 0304 	orr.w	r3, r3, #4
 80026bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80026be:	4b4e      	ldr	r3, [pc, #312]	@ (80027f8 <MX_GPIO_Init+0x174>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c2:	f003 0304 	and.w	r3, r3, #4
 80026c6:	617b      	str	r3, [r7, #20]
 80026c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ca:	4b4b      	ldr	r3, [pc, #300]	@ (80027f8 <MX_GPIO_Init+0x174>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ce:	4a4a      	ldr	r2, [pc, #296]	@ (80027f8 <MX_GPIO_Init+0x174>)
 80026d0:	f043 0301 	orr.w	r3, r3, #1
 80026d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026d6:	4b48      	ldr	r3, [pc, #288]	@ (80027f8 <MX_GPIO_Init+0x174>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	613b      	str	r3, [r7, #16]
 80026e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80026e2:	4b45      	ldr	r3, [pc, #276]	@ (80027f8 <MX_GPIO_Init+0x174>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e6:	4a44      	ldr	r2, [pc, #272]	@ (80027f8 <MX_GPIO_Init+0x174>)
 80026e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ee:	4b42      	ldr	r3, [pc, #264]	@ (80027f8 <MX_GPIO_Init+0x174>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026fa:	4b3f      	ldr	r3, [pc, #252]	@ (80027f8 <MX_GPIO_Init+0x174>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fe:	4a3e      	ldr	r2, [pc, #248]	@ (80027f8 <MX_GPIO_Init+0x174>)
 8002700:	f043 0302 	orr.w	r3, r3, #2
 8002704:	6313      	str	r3, [r2, #48]	@ 0x30
 8002706:	4b3c      	ldr	r3, [pc, #240]	@ (80027f8 <MX_GPIO_Init+0x174>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	60bb      	str	r3, [r7, #8]
 8002710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002712:	4b39      	ldr	r3, [pc, #228]	@ (80027f8 <MX_GPIO_Init+0x174>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002716:	4a38      	ldr	r2, [pc, #224]	@ (80027f8 <MX_GPIO_Init+0x174>)
 8002718:	f043 0308 	orr.w	r3, r3, #8
 800271c:	6313      	str	r3, [r2, #48]	@ 0x30
 800271e:	4b36      	ldr	r3, [pc, #216]	@ (80027f8 <MX_GPIO_Init+0x174>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002722:	f003 0308 	and.w	r3, r3, #8
 8002726:	607b      	str	r3, [r7, #4]
 8002728:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 800272a:	2200      	movs	r2, #0
 800272c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002730:	4832      	ldr	r0, [pc, #200]	@ (80027fc <MX_GPIO_Init+0x178>)
 8002732:	f003 fa09 	bl	8005b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8002736:	2200      	movs	r2, #0
 8002738:	2168      	movs	r1, #104	@ 0x68
 800273a:	4831      	ldr	r0, [pc, #196]	@ (8002800 <MX_GPIO_Init+0x17c>)
 800273c:	f003 fa04 	bl	8005b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF2 PF5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 8002740:	2324      	movs	r3, #36	@ 0x24
 8002742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002744:	2300      	movs	r3, #0
 8002746:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002748:	2300      	movs	r3, #0
 800274a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800274c:	f107 031c 	add.w	r3, r7, #28
 8002750:	4619      	mov	r1, r3
 8002752:	482c      	ldr	r0, [pc, #176]	@ (8002804 <MX_GPIO_Init+0x180>)
 8002754:	f003 f834 	bl	80057c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002758:	2302      	movs	r3, #2
 800275a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800275c:	2300      	movs	r3, #0
 800275e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002760:	2300      	movs	r3, #0
 8002762:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002764:	f107 031c 	add.w	r3, r7, #28
 8002768:	4619      	mov	r1, r3
 800276a:	4825      	ldr	r0, [pc, #148]	@ (8002800 <MX_GPIO_Init+0x17c>)
 800276c:	f003 f828 	bl	80057c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002770:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002776:	2301      	movs	r3, #1
 8002778:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277a:	2300      	movs	r3, #0
 800277c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277e:	2300      	movs	r3, #0
 8002780:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002782:	f107 031c 	add.w	r3, r7, #28
 8002786:	4619      	mov	r1, r3
 8002788:	481c      	ldr	r0, [pc, #112]	@ (80027fc <MX_GPIO_Init+0x178>)
 800278a:	f003 f819 	bl	80057c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG5 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6;
 800278e:	2368      	movs	r3, #104	@ 0x68
 8002790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002792:	2301      	movs	r3, #1
 8002794:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002796:	2300      	movs	r3, #0
 8002798:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279a:	2300      	movs	r3, #0
 800279c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800279e:	f107 031c 	add.w	r3, r7, #28
 80027a2:	4619      	mov	r1, r3
 80027a4:	4816      	ldr	r0, [pc, #88]	@ (8002800 <MX_GPIO_Init+0x17c>)
 80027a6:	f003 f80b 	bl	80057c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* Configure GPIO pins */
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027aa:	2301      	movs	r3, #1
 80027ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ae:	2300      	movs	r3, #0
 80027b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b2:	2300      	movs	r3, #0
 80027b4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Configure PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80027b6:	2308      	movs	r3, #8
 80027b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80027ba:	f107 031c 	add.w	r3, r7, #28
 80027be:	4619      	mov	r1, r3
 80027c0:	480f      	ldr	r0, [pc, #60]	@ (8002800 <MX_GPIO_Init+0x17c>)
 80027c2:	f002 fffd 	bl	80057c0 <HAL_GPIO_Init>

  /* Configure PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80027c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027cc:	f107 031c 	add.w	r3, r7, #28
 80027d0:	4619      	mov	r1, r3
 80027d2:	480a      	ldr	r0, [pc, #40]	@ (80027fc <MX_GPIO_Init+0x178>)
 80027d4:	f002 fff4 	bl	80057c0 <HAL_GPIO_Init>

  /* Set initial pin states to HIGH */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_SET);
 80027d8:	2201      	movs	r2, #1
 80027da:	2108      	movs	r1, #8
 80027dc:	4808      	ldr	r0, [pc, #32]	@ (8002800 <MX_GPIO_Init+0x17c>)
 80027de:	f003 f9b3 	bl	8005b48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 80027e2:	2201      	movs	r2, #1
 80027e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80027e8:	4804      	ldr	r0, [pc, #16]	@ (80027fc <MX_GPIO_Init+0x178>)
 80027ea:	f003 f9ad 	bl	8005b48 <HAL_GPIO_WritePin>

  /* USER CODE END MX_GPIO_Init_2 */
}
 80027ee:	bf00      	nop
 80027f0:	3730      	adds	r7, #48	@ 0x30
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40023800 	.word	0x40023800
 80027fc:	40020c00 	.word	0x40020c00
 8002800:	40021800 	.word	0x40021800
 8002804:	40021400 	.word	0x40021400

08002808 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800280e:	463b      	mov	r3, r7
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	605a      	str	r2, [r3, #4]
 8002816:	609a      	str	r2, [r3, #8]
 8002818:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800281a:	f001 fe27 	bl	800446c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800281e:	2301      	movs	r3, #1
 8002820:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002822:	2300      	movs	r3, #0
 8002824:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8002826:	2300      	movs	r3, #0
 8002828:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800282a:	231f      	movs	r3, #31
 800282c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800282e:	2387      	movs	r3, #135	@ 0x87
 8002830:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002832:	2300      	movs	r3, #0
 8002834:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8002836:	2300      	movs	r3, #0
 8002838:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800283a:	2301      	movs	r3, #1
 800283c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800283e:	2301      	movs	r3, #1
 8002840:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002842:	2300      	movs	r3, #0
 8002844:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002846:	2300      	movs	r3, #0
 8002848:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800284a:	463b      	mov	r3, r7
 800284c:	4618      	mov	r0, r3
 800284e:	f001 fe45 	bl	80044dc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002852:	2004      	movs	r0, #4
 8002854:	f001 fe22 	bl	800449c <HAL_MPU_Enable>

}
 8002858:	bf00      	nop
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002864:	b672      	cpsid	i
}
 8002866:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002868:	bf00      	nop
 800286a:	e7fd      	b.n	8002868 <Error_Handler+0x8>

0800286c <mlx90614_read16_internal>:
    return crc;
}


static bool mlx90614_read16_internal(MLX90614_t* sensor, uint8_t address, int16_t *data)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b08a      	sub	sp, #40	@ 0x28
 8002870:	af04      	add	r7, sp, #16
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	460b      	mov	r3, r1
 8002876:	607a      	str	r2, [r7, #4]
 8002878:	72fb      	strb	r3, [r7, #11]
    uint8_t d[3];
    if(HAL_I2C_Mem_Read(sensor->hi2c, sensor->device_address, address, I2C_MEMADD_SIZE_8BIT, d, 3, 100) != HAL_OK)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
 8002882:	7afb      	ldrb	r3, [r7, #11]
 8002884:	b29a      	uxth	r2, r3
 8002886:	2364      	movs	r3, #100	@ 0x64
 8002888:	9302      	str	r3, [sp, #8]
 800288a:	2303      	movs	r3, #3
 800288c:	9301      	str	r3, [sp, #4]
 800288e:	f107 0314 	add.w	r3, r7, #20
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	2301      	movs	r3, #1
 8002896:	f003 fb21 	bl	8005edc <HAL_I2C_Mem_Read>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <mlx90614_read16_internal+0x38>
        return false;
 80028a0:	2300      	movs	r3, #0
 80028a2:	e00a      	b.n	80028ba <mlx90614_read16_internal+0x4e>
    *data = d[0] | (d[1] << 8);
 80028a4:	7d3b      	ldrb	r3, [r7, #20]
 80028a6:	b21a      	sxth	r2, r3
 80028a8:	7d7b      	ldrb	r3, [r7, #21]
 80028aa:	b21b      	sxth	r3, r3
 80028ac:	021b      	lsls	r3, r3, #8
 80028ae:	b21b      	sxth	r3, r3
 80028b0:	4313      	orrs	r3, r2
 80028b2:	b21a      	sxth	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	801a      	strh	r2, [r3, #0]
    return true;
 80028b8:	2301      	movs	r3, #1
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3718      	adds	r7, #24
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
	...

080028c4 <mlx90614_calcTemperature>:
    }
    return rawTemp;
}

float mlx90614_calcTemperature(MLX90614_t* sensor, int16_t rawTemp)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	460b      	mov	r3, r1
 80028ce:	807b      	strh	r3, [r7, #2]
    float retTemp;
    if(sensor->unit == MLX90614_UNIT_RAW)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d108      	bne.n	80028ea <mlx90614_calcTemperature+0x26>
    {
        retTemp = (float)rawTemp;
 80028d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80028dc:	ee07 3a90 	vmov	s15, r3
 80028e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028e4:	edc7 7a03 	vstr	s15, [r7, #12]
 80028e8:	e02b      	b.n	8002942 <mlx90614_calcTemperature+0x7e>
    }
    else
    {
        retTemp = (float)(rawTemp) * 0.02f;
 80028ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80028ee:	ee07 3a90 	vmov	s15, r3
 80028f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028f6:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8002958 <mlx90614_calcTemperature+0x94>
 80028fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028fe:	edc7 7a03 	vstr	s15, [r7, #12]
        if(sensor->unit != MLX90614_UNIT_K)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d007      	beq.n	800291a <mlx90614_calcTemperature+0x56>
            retTemp -= 273.15f;
 800290a:	edd7 7a03 	vldr	s15, [r7, #12]
 800290e:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800295c <mlx90614_calcTemperature+0x98>
 8002912:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002916:	edc7 7a03 	vstr	s15, [r7, #12]
        if(sensor->unit == MLX90614_UNIT_F)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	2b03      	cmp	r3, #3
 8002920:	d10f      	bne.n	8002942 <mlx90614_calcTemperature+0x7e>
            retTemp = retTemp * 9.0f / 5.0f + 32.0f;
 8002922:	edd7 7a03 	vldr	s15, [r7, #12]
 8002926:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 800292a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800292e:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8002932:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002936:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8002960 <mlx90614_calcTemperature+0x9c>
 800293a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800293e:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    return retTemp;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	ee07 3a90 	vmov	s15, r3
}
 8002948:	eeb0 0a67 	vmov.f32	s0, s15
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	3ca3d70a 	.word	0x3ca3d70a
 800295c:	43889333 	.word	0x43889333
 8002960:	42000000 	.word	0x42000000

08002964 <mlx90614_init>:

bool mlx90614_init(MLX90614_t* sensor, I2C_HandleTypeDef* hi2c, uint16_t devAddress)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	4613      	mov	r3, r2
 8002970:	80fb      	strh	r3, [r7, #6]
    memset(sensor, 0, sizeof(MLX90614_t));
 8002972:	223c      	movs	r2, #60	@ 0x3c
 8002974:	2100      	movs	r1, #0
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f00c fa94 	bl	800eea4 <memset>
    sensor->unit = MLX90614_UNIT_C;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2202      	movs	r2, #2
 8002980:	701a      	strb	r2, [r3, #0]
    sensor->hi2c = hi2c;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	68ba      	ldr	r2, [r7, #8]
 8002986:	635a      	str	r2, [r3, #52]	@ 0x34
    sensor->device_address = devAddress;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	88fa      	ldrh	r2, [r7, #6]
 800298c:	871a      	strh	r2, [r3, #56]	@ 0x38
    if(HAL_I2C_IsDeviceReady(hi2c, devAddress, 1, 100) != HAL_OK)
 800298e:	88f9      	ldrh	r1, [r7, #6]
 8002990:	2364      	movs	r3, #100	@ 0x64
 8002992:	2201      	movs	r2, #1
 8002994:	68b8      	ldr	r0, [r7, #8]
 8002996:	f003 fbbb 	bl	8006110 <HAL_I2C_IsDeviceReady>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <mlx90614_init+0x40>
        return false;
 80029a0:	2300      	movs	r3, #0
 80029a2:	e03f      	b.n	8002a24 <mlx90614_init+0xc0>
    if(!mlx90614_read16_internal(sensor, MLX90614_REGISTER_CONFIG, (int16_t*)&sensor->configReg)) return false;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	3330      	adds	r3, #48	@ 0x30
 80029a8:	461a      	mov	r2, r3
 80029aa:	2125      	movs	r1, #37	@ 0x25
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f7ff ff5d 	bl	800286c <mlx90614_read16_internal>
 80029b2:	4603      	mov	r3, r0
 80029b4:	f083 0301 	eor.w	r3, r3, #1
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <mlx90614_init+0x5e>
 80029be:	2300      	movs	r3, #0
 80029c0:	e030      	b.n	8002a24 <mlx90614_init+0xc0>
    if(!mlx90614_readID(sensor, NULL)) return false;
 80029c2:	2100      	movs	r1, #0
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f000 f831 	bl	8002a2c <mlx90614_readID>
 80029ca:	4603      	mov	r3, r0
 80029cc:	f083 0301 	eor.w	r3, r3, #1
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <mlx90614_init+0x76>
 80029d6:	2300      	movs	r3, #0
 80029d8:	e024      	b.n	8002a24 <mlx90614_init+0xc0>
    if(!mlx90614_getEmissivity(sensor, NULL)) return false;
 80029da:	2100      	movs	r1, #0
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f000 f85f 	bl	8002aa0 <mlx90614_getEmissivity>
 80029e2:	4603      	mov	r3, r0
 80029e4:	f083 0301 	eor.w	r3, r3, #1
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <mlx90614_init+0x8e>
 80029ee:	2300      	movs	r3, #0
 80029f0:	e018      	b.n	8002a24 <mlx90614_init+0xc0>
    if(!mlx90614_getMax(sensor, NULL)) return false;
 80029f2:	2100      	movs	r1, #0
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f000 f881 	bl	8002afc <mlx90614_getMax>
 80029fa:	4603      	mov	r3, r0
 80029fc:	f083 0301 	eor.w	r3, r3, #1
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <mlx90614_init+0xa6>
 8002a06:	2300      	movs	r3, #0
 8002a08:	e00c      	b.n	8002a24 <mlx90614_init+0xc0>
    if(!mlx90614_getMin(sensor, NULL)) return false;
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f000 f89a 	bl	8002b46 <mlx90614_getMin>
 8002a12:	4603      	mov	r3, r0
 8002a14:	f083 0301 	eor.w	r3, r3, #1
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <mlx90614_init+0xbe>
 8002a1e:	2300      	movs	r3, #0
 8002a20:	e000      	b.n	8002a24 <mlx90614_init+0xc0>
    return true;
 8002a22:	2301      	movs	r3, #1
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <mlx90614_readID>:
{
    sensor->unit = MLX90614_UNIT_;
}

bool mlx90614_readID(MLX90614_t* sensor, int16_t *id)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
    for(int i=0; i<4; i++)
 8002a36:	2300      	movs	r3, #0
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	e028      	b.n	8002a8e <mlx90614_readID+0x62>
    {
        int16_t temp = 0;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	817b      	strh	r3, [r7, #10]
        if(!mlx90614_read16_internal(sensor, MLX90614_REGISTER_ID0 + i, &temp))
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	333c      	adds	r3, #60	@ 0x3c
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	f107 020a 	add.w	r2, r7, #10
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7ff ff0c 	bl	800286c <mlx90614_read16_internal>
 8002a54:	4603      	mov	r3, r0
 8002a56:	f083 0301 	eor.w	r3, r3, #1
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <mlx90614_readID+0x38>
            return false;
 8002a60:	2300      	movs	r3, #0
 8002a62:	e018      	b.n	8002a96 <mlx90614_readID+0x6a>
        if(id != NULL)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d006      	beq.n	8002a78 <mlx90614_readID+0x4c>
            id[i] = (uint16_t)temp;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	4413      	add	r3, r2
 8002a72:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002a76:	801a      	strh	r2, [r3, #0]
        sensor->id[i] = (uint16_t)temp;
 8002a78:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002a7c:	b299      	uxth	r1, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	3214      	adds	r2, #20
 8002a84:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(int i=0; i<4; i++)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2b03      	cmp	r3, #3
 8002a92:	ddd3      	ble.n	8002a3c <mlx90614_readID+0x10>
    }
    return true;
 8002a94:	2301      	movs	r3, #1
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
	...

08002aa0 <mlx90614_getEmissivity>:

bool mlx90614_getEmissivity(MLX90614_t* sensor, float *emissivity)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
    if(mlx90614_read16_internal(sensor, MLX90614_REGISTER_KE, &sensor->rawEmissivity))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	3302      	adds	r3, #2
 8002aae:	461a      	mov	r2, r3
 8002ab0:	2124      	movs	r1, #36	@ 0x24
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f7ff feda 	bl	800286c <mlx90614_read16_internal>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d017      	beq.n	8002aee <mlx90614_getEmissivity+0x4e>
    {
        sensor->emissivity = ((float)((uint16_t)sensor->rawEmissivity)) / 65535.0f;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	ee07 3a90 	vmov	s15, r3
 8002aca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ace:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8002af8 <mlx90614_getEmissivity+0x58>
 8002ad2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	edc3 7a04 	vstr	s15, [r3, #16]
        if(emissivity != NULL)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <mlx90614_getEmissivity+0x4a>
            *emissivity = sensor->emissivity;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	691a      	ldr	r2, [r3, #16]
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	601a      	str	r2, [r3, #0]
        return true;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e000      	b.n	8002af0 <mlx90614_getEmissivity+0x50>
    }
    return false;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3708      	adds	r7, #8
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	477fff00 	.word	0x477fff00

08002afc <mlx90614_getMax>:
    sensor->rawMin = mlx90614_calcRawTemp(sensor, minTemp);
    return mlx90614_write16_internal(sensor, MLX90614_REGISTER_TOMIN, sensor->rawMin);
}

bool mlx90614_getMax(MLX90614_t* sensor, float *maxTemp)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
    if(mlx90614_read16_internal(sensor, MLX90614_REGISTER_TOMAX, &sensor->rawMax))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	330a      	adds	r3, #10
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	2120      	movs	r1, #32
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7ff feac 	bl	800286c <mlx90614_read16_internal>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d010      	beq.n	8002b3c <mlx90614_getMax+0x40>
    {
        if(maxTemp != NULL)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00b      	beq.n	8002b38 <mlx90614_getMax+0x3c>
            *maxTemp = mlx90614_calcTemperature(sensor, sensor->rawMax);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002b26:	4619      	mov	r1, r3
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f7ff fecb 	bl	80028c4 <mlx90614_calcTemperature>
 8002b2e:	eef0 7a40 	vmov.f32	s15, s0
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	edc3 7a00 	vstr	s15, [r3]
        return true;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e000      	b.n	8002b3e <mlx90614_getMax+0x42>
    }
    return false;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <mlx90614_getMin>:

bool mlx90614_getMin(MLX90614_t* sensor, float *minTemp)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b082      	sub	sp, #8
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
 8002b4e:	6039      	str	r1, [r7, #0]
    if(mlx90614_read16_internal(sensor, MLX90614_REGISTER_TOMIN, &sensor->rawMin))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	330c      	adds	r3, #12
 8002b54:	461a      	mov	r2, r3
 8002b56:	2121      	movs	r1, #33	@ 0x21
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f7ff fe87 	bl	800286c <mlx90614_read16_internal>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d010      	beq.n	8002b86 <mlx90614_getMin+0x40>
    {
        if(minTemp != NULL)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00b      	beq.n	8002b82 <mlx90614_getMin+0x3c>
            *minTemp = mlx90614_calcTemperature(sensor, sensor->rawMin);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002b70:	4619      	mov	r1, r3
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7ff fea6 	bl	80028c4 <mlx90614_calcTemperature>
 8002b78:	eef0 7a40 	vmov.f32	s15, s0
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	edc3 7a00 	vstr	s15, [r3]
        return true;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e000      	b.n	8002b88 <mlx90614_getMin+0x42>
    }
    return false;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <mlx90614_getAmbient>:

bool mlx90614_getAmbient(MLX90614_t* sensor, float *ambientTemp)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
    if(mlx90614_read16_internal(sensor, MLX90614_REGISTER_TA, &sensor->rawAmbient))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	2106      	movs	r1, #6
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7ff fe62 	bl	800286c <mlx90614_read16_internal>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d010      	beq.n	8002bd0 <mlx90614_getAmbient+0x40>
    {
        if(ambientTemp != NULL)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00b      	beq.n	8002bcc <mlx90614_getAmbient+0x3c>
            *ambientTemp = mlx90614_calcTemperature(sensor, sensor->rawAmbient);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002bba:	4619      	mov	r1, r3
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7ff fe81 	bl	80028c4 <mlx90614_calcTemperature>
 8002bc2:	eef0 7a40 	vmov.f32	s15, s0
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	edc3 7a00 	vstr	s15, [r3]
        return true;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e000      	b.n	8002bd2 <mlx90614_getAmbient+0x42>
    }
    return false;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <mlx90614_getObject1>:

bool mlx90614_getObject1(MLX90614_t* sensor, float *objectTemp)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b082      	sub	sp, #8
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
 8002be2:	6039      	str	r1, [r7, #0]
    if(mlx90614_read16_internal(sensor, MLX90614_REGISTER_TOBJ1, &sensor->rawObject1))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	3306      	adds	r3, #6
 8002be8:	461a      	mov	r2, r3
 8002bea:	2107      	movs	r1, #7
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f7ff fe3d 	bl	800286c <mlx90614_read16_internal>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d017      	beq.n	8002c28 <mlx90614_getObject1+0x4e>
    {
        if(sensor->rawObject1 & 0x8000) return false;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	da01      	bge.n	8002c06 <mlx90614_getObject1+0x2c>
 8002c02:	2300      	movs	r3, #0
 8002c04:	e011      	b.n	8002c2a <mlx90614_getObject1+0x50>
        if(objectTemp != NULL)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00b      	beq.n	8002c24 <mlx90614_getObject1+0x4a>
            *objectTemp = mlx90614_calcTemperature(sensor, sensor->rawObject1);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002c12:	4619      	mov	r1, r3
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f7ff fe55 	bl	80028c4 <mlx90614_calcTemperature>
 8002c1a:	eef0 7a40 	vmov.f32	s15, s0
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	edc3 7a00 	vstr	s15, [r3]
        return true;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e000      	b.n	8002c2a <mlx90614_getObject1+0x50>
    }
    return false;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
	...

08002c34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8002c78 <HAL_MspInit+0x44>)
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3e:	4a0e      	ldr	r2, [pc, #56]	@ (8002c78 <HAL_MspInit+0x44>)
 8002c40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c44:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c46:	4b0c      	ldr	r3, [pc, #48]	@ (8002c78 <HAL_MspInit+0x44>)
 8002c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c4e:	607b      	str	r3, [r7, #4]
 8002c50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c52:	4b09      	ldr	r3, [pc, #36]	@ (8002c78 <HAL_MspInit+0x44>)
 8002c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c56:	4a08      	ldr	r2, [pc, #32]	@ (8002c78 <HAL_MspInit+0x44>)
 8002c58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c5e:	4b06      	ldr	r3, [pc, #24]	@ (8002c78 <HAL_MspInit+0x44>)
 8002c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c66:	603b      	str	r3, [r7, #0]
 8002c68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	40023800 	.word	0x40023800

08002c7c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b08a      	sub	sp, #40	@ 0x28
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c84:	f107 0314 	add.w	r3, r7, #20
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	605a      	str	r2, [r3, #4]
 8002c8e:	609a      	str	r2, [r3, #8]
 8002c90:	60da      	str	r2, [r3, #12]
 8002c92:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a15      	ldr	r2, [pc, #84]	@ (8002cf0 <HAL_ADC_MspInit+0x74>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d123      	bne.n	8002ce6 <HAL_ADC_MspInit+0x6a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c9e:	4b15      	ldr	r3, [pc, #84]	@ (8002cf4 <HAL_ADC_MspInit+0x78>)
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ca2:	4a14      	ldr	r2, [pc, #80]	@ (8002cf4 <HAL_ADC_MspInit+0x78>)
 8002ca4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ca8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002caa:	4b12      	ldr	r3, [pc, #72]	@ (8002cf4 <HAL_ADC_MspInit+0x78>)
 8002cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cb2:	613b      	str	r3, [r7, #16]
 8002cb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cb6:	4b0f      	ldr	r3, [pc, #60]	@ (8002cf4 <HAL_ADC_MspInit+0x78>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cba:	4a0e      	ldr	r2, [pc, #56]	@ (8002cf4 <HAL_ADC_MspInit+0x78>)
 8002cbc:	f043 0301 	orr.w	r3, r3, #1
 8002cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8002cf4 <HAL_ADC_MspInit+0x78>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002cce:	2310      	movs	r3, #16
 8002cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cda:	f107 0314 	add.w	r3, r7, #20
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4805      	ldr	r0, [pc, #20]	@ (8002cf8 <HAL_ADC_MspInit+0x7c>)
 8002ce2:	f002 fd6d 	bl	80057c0 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002ce6:	bf00      	nop
 8002ce8:	3728      	adds	r7, #40	@ 0x28
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40012000 	.word	0x40012000
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	40020000 	.word	0x40020000

08002cfc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b0b0      	sub	sp, #192	@ 0xc0
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d04:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	605a      	str	r2, [r3, #4]
 8002d0e:	609a      	str	r2, [r3, #8]
 8002d10:	60da      	str	r2, [r3, #12]
 8002d12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d14:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d18:	2284      	movs	r2, #132	@ 0x84
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f00c f8c1 	bl	800eea4 <memset>
  if(hi2c->Instance==I2C1)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a77      	ldr	r2, [pc, #476]	@ (8002f04 <HAL_I2C_MspInit+0x208>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d13e      	bne.n	8002daa <HAL_I2C_MspInit+0xae>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002d2c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002d30:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002d32:	2300      	movs	r3, #0
 8002d34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d38:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f004 fb21 	bl	8007384 <HAL_RCCEx_PeriphCLKConfig>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8002d48:	f7ff fd8a 	bl	8002860 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d4c:	4b6e      	ldr	r3, [pc, #440]	@ (8002f08 <HAL_I2C_MspInit+0x20c>)
 8002d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d50:	4a6d      	ldr	r2, [pc, #436]	@ (8002f08 <HAL_I2C_MspInit+0x20c>)
 8002d52:	f043 0302 	orr.w	r3, r3, #2
 8002d56:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d58:	4b6b      	ldr	r3, [pc, #428]	@ (8002f08 <HAL_I2C_MspInit+0x20c>)
 8002d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002d64:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002d68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d6c:	2312      	movs	r3, #18
 8002d6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d72:	2300      	movs	r3, #0
 8002d74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d7e:	2304      	movs	r3, #4
 8002d80:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d84:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4860      	ldr	r0, [pc, #384]	@ (8002f0c <HAL_I2C_MspInit+0x210>)
 8002d8c:	f002 fd18 	bl	80057c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d90:	4b5d      	ldr	r3, [pc, #372]	@ (8002f08 <HAL_I2C_MspInit+0x20c>)
 8002d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d94:	4a5c      	ldr	r2, [pc, #368]	@ (8002f08 <HAL_I2C_MspInit+0x20c>)
 8002d96:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002d9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d9c:	4b5a      	ldr	r3, [pc, #360]	@ (8002f08 <HAL_I2C_MspInit+0x20c>)
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002da4:	623b      	str	r3, [r7, #32]
 8002da6:	6a3b      	ldr	r3, [r7, #32]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002da8:	e0a7      	b.n	8002efa <HAL_I2C_MspInit+0x1fe>
  else if(hi2c->Instance==I2C2)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a58      	ldr	r2, [pc, #352]	@ (8002f10 <HAL_I2C_MspInit+0x214>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d13d      	bne.n	8002e30 <HAL_I2C_MspInit+0x134>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002db4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002db8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002dc0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f004 fadd 	bl	8007384 <HAL_RCCEx_PeriphCLKConfig>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8002dd0:	f7ff fd46 	bl	8002860 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002dd4:	4b4c      	ldr	r3, [pc, #304]	@ (8002f08 <HAL_I2C_MspInit+0x20c>)
 8002dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd8:	4a4b      	ldr	r2, [pc, #300]	@ (8002f08 <HAL_I2C_MspInit+0x20c>)
 8002dda:	f043 0320 	orr.w	r3, r3, #32
 8002dde:	6313      	str	r3, [r2, #48]	@ 0x30
 8002de0:	4b49      	ldr	r3, [pc, #292]	@ (8002f08 <HAL_I2C_MspInit+0x20c>)
 8002de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de4:	f003 0320 	and.w	r3, r3, #32
 8002de8:	61fb      	str	r3, [r7, #28]
 8002dea:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002dec:	2303      	movs	r3, #3
 8002dee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002df2:	2312      	movs	r3, #18
 8002df4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002e04:	2304      	movs	r3, #4
 8002e06:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e0a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002e0e:	4619      	mov	r1, r3
 8002e10:	4840      	ldr	r0, [pc, #256]	@ (8002f14 <HAL_I2C_MspInit+0x218>)
 8002e12:	f002 fcd5 	bl	80057c0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002e16:	4b3c      	ldr	r3, [pc, #240]	@ (8002f08 <HAL_I2C_MspInit+0x20c>)
 8002e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1a:	4a3b      	ldr	r2, [pc, #236]	@ (8002f08 <HAL_I2C_MspInit+0x20c>)
 8002e1c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e20:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e22:	4b39      	ldr	r3, [pc, #228]	@ (8002f08 <HAL_I2C_MspInit+0x20c>)
 8002e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e2a:	61bb      	str	r3, [r7, #24]
 8002e2c:	69bb      	ldr	r3, [r7, #24]
}
 8002e2e:	e064      	b.n	8002efa <HAL_I2C_MspInit+0x1fe>
  else if(hi2c->Instance==I2C3)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a38      	ldr	r2, [pc, #224]	@ (8002f18 <HAL_I2C_MspInit+0x21c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d15f      	bne.n	8002efa <HAL_I2C_MspInit+0x1fe>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002e3a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002e40:	2300      	movs	r3, #0
 8002e42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e46:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f004 fa9a 	bl	8007384 <HAL_RCCEx_PeriphCLKConfig>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <HAL_I2C_MspInit+0x15e>
      Error_Handler();
 8002e56:	f7ff fd03 	bl	8002860 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e5a:	4b2b      	ldr	r3, [pc, #172]	@ (8002f08 <HAL_I2C_MspInit+0x20c>)
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5e:	4a2a      	ldr	r2, [pc, #168]	@ (8002f08 <HAL_I2C_MspInit+0x20c>)
 8002e60:	f043 0304 	orr.w	r3, r3, #4
 8002e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e66:	4b28      	ldr	r3, [pc, #160]	@ (8002f08 <HAL_I2C_MspInit+0x20c>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6a:	f003 0304 	and.w	r3, r3, #4
 8002e6e:	617b      	str	r3, [r7, #20]
 8002e70:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e72:	4b25      	ldr	r3, [pc, #148]	@ (8002f08 <HAL_I2C_MspInit+0x20c>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e76:	4a24      	ldr	r2, [pc, #144]	@ (8002f08 <HAL_I2C_MspInit+0x20c>)
 8002e78:	f043 0301 	orr.w	r3, r3, #1
 8002e7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e7e:	4b22      	ldr	r3, [pc, #136]	@ (8002f08 <HAL_I2C_MspInit+0x20c>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	613b      	str	r3, [r7, #16]
 8002e88:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e92:	2312      	movs	r3, #18
 8002e94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002ea4:	2304      	movs	r3, #4
 8002ea6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eaa:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002eae:	4619      	mov	r1, r3
 8002eb0:	481a      	ldr	r0, [pc, #104]	@ (8002f1c <HAL_I2C_MspInit+0x220>)
 8002eb2:	f002 fc85 	bl	80057c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002eb6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002eba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ebe:	2312      	movs	r3, #18
 8002ec0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002ed0:	2304      	movs	r3, #4
 8002ed2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ed6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002eda:	4619      	mov	r1, r3
 8002edc:	4810      	ldr	r0, [pc, #64]	@ (8002f20 <HAL_I2C_MspInit+0x224>)
 8002ede:	f002 fc6f 	bl	80057c0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002ee2:	4b09      	ldr	r3, [pc, #36]	@ (8002f08 <HAL_I2C_MspInit+0x20c>)
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee6:	4a08      	ldr	r2, [pc, #32]	@ (8002f08 <HAL_I2C_MspInit+0x20c>)
 8002ee8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002eec:	6413      	str	r3, [r2, #64]	@ 0x40
 8002eee:	4b06      	ldr	r3, [pc, #24]	@ (8002f08 <HAL_I2C_MspInit+0x20c>)
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ef6:	60fb      	str	r3, [r7, #12]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
}
 8002efa:	bf00      	nop
 8002efc:	37c0      	adds	r7, #192	@ 0xc0
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40005400 	.word	0x40005400
 8002f08:	40023800 	.word	0x40023800
 8002f0c:	40020400 	.word	0x40020400
 8002f10:	40005800 	.word	0x40005800
 8002f14:	40021400 	.word	0x40021400
 8002f18:	40005c00 	.word	0x40005c00
 8002f1c:	40020800 	.word	0x40020800
 8002f20:	40020000 	.word	0x40020000

08002f24 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b08a      	sub	sp, #40	@ 0x28
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f2c:	f107 0314 	add.w	r3, r7, #20
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	605a      	str	r2, [r3, #4]
 8002f36:	609a      	str	r2, [r3, #8]
 8002f38:	60da      	str	r2, [r3, #12]
 8002f3a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a17      	ldr	r2, [pc, #92]	@ (8002fa0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d127      	bne.n	8002f96 <HAL_TIM_Encoder_MspInit+0x72>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f46:	4b17      	ldr	r3, [pc, #92]	@ (8002fa4 <HAL_TIM_Encoder_MspInit+0x80>)
 8002f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4a:	4a16      	ldr	r2, [pc, #88]	@ (8002fa4 <HAL_TIM_Encoder_MspInit+0x80>)
 8002f4c:	f043 0302 	orr.w	r3, r3, #2
 8002f50:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f52:	4b14      	ldr	r3, [pc, #80]	@ (8002fa4 <HAL_TIM_Encoder_MspInit+0x80>)
 8002f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	613b      	str	r3, [r7, #16]
 8002f5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f5e:	4b11      	ldr	r3, [pc, #68]	@ (8002fa4 <HAL_TIM_Encoder_MspInit+0x80>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f62:	4a10      	ldr	r2, [pc, #64]	@ (8002fa4 <HAL_TIM_Encoder_MspInit+0x80>)
 8002f64:	f043 0304 	orr.w	r3, r3, #4
 8002f68:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8002fa4 <HAL_TIM_Encoder_MspInit+0x80>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f6e:	f003 0304 	and.w	r3, r3, #4
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f76:	23c0      	movs	r3, #192	@ 0xc0
 8002f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f82:	2300      	movs	r3, #0
 8002f84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002f86:	2302      	movs	r3, #2
 8002f88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f8a:	f107 0314 	add.w	r3, r7, #20
 8002f8e:	4619      	mov	r1, r3
 8002f90:	4805      	ldr	r0, [pc, #20]	@ (8002fa8 <HAL_TIM_Encoder_MspInit+0x84>)
 8002f92:	f002 fc15 	bl	80057c0 <HAL_GPIO_Init>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002f96:	bf00      	nop
 8002f98:	3728      	adds	r7, #40	@ 0x28
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40000400 	.word	0x40000400
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	40020800 	.word	0x40020800

08002fac <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a0a      	ldr	r2, [pc, #40]	@ (8002fe4 <HAL_TIM_Base_MspInit+0x38>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d10b      	bne.n	8002fd6 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM10_MspInit 0 */

    /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8002fe8 <HAL_TIM_Base_MspInit+0x3c>)
 8002fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fc2:	4a09      	ldr	r2, [pc, #36]	@ (8002fe8 <HAL_TIM_Base_MspInit+0x3c>)
 8002fc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fca:	4b07      	ldr	r3, [pc, #28]	@ (8002fe8 <HAL_TIM_Base_MspInit+0x3c>)
 8002fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fd2:	60fb      	str	r3, [r7, #12]
 8002fd4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM10_MspInit 1 */

  }

}
 8002fd6:	bf00      	nop
 8002fd8:	3714      	adds	r7, #20
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	40014400 	.word	0x40014400
 8002fe8:	40023800 	.word	0x40023800

08002fec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b088      	sub	sp, #32
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff4:	f107 030c 	add.w	r3, r7, #12
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	605a      	str	r2, [r3, #4]
 8002ffe:	609a      	str	r2, [r3, #8]
 8003000:	60da      	str	r2, [r3, #12]
 8003002:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM10)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a11      	ldr	r2, [pc, #68]	@ (8003050 <HAL_TIM_MspPostInit+0x64>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d11b      	bne.n	8003046 <HAL_TIM_MspPostInit+0x5a>
  {
    /* USER CODE BEGIN TIM10_MspPostInit 0 */

    /* USER CODE END TIM10_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800300e:	4b11      	ldr	r3, [pc, #68]	@ (8003054 <HAL_TIM_MspPostInit+0x68>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003012:	4a10      	ldr	r2, [pc, #64]	@ (8003054 <HAL_TIM_MspPostInit+0x68>)
 8003014:	f043 0320 	orr.w	r3, r3, #32
 8003018:	6313      	str	r3, [r2, #48]	@ 0x30
 800301a:	4b0e      	ldr	r3, [pc, #56]	@ (8003054 <HAL_TIM_MspPostInit+0x68>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301e:	f003 0320 	and.w	r3, r3, #32
 8003022:	60bb      	str	r3, [r7, #8]
 8003024:	68bb      	ldr	r3, [r7, #8]
    /**TIM10 GPIO Configuration
    PF6     ------> TIM10_CH1
    */
    GPIO_InitStruct.Pin = levitasyon_motoru_Pin;
 8003026:	2340      	movs	r3, #64	@ 0x40
 8003028:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800302a:	2302      	movs	r3, #2
 800302c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302e:	2300      	movs	r3, #0
 8003030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003032:	2300      	movs	r3, #0
 8003034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8003036:	2303      	movs	r3, #3
 8003038:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(levitasyon_motoru_GPIO_Port, &GPIO_InitStruct);
 800303a:	f107 030c 	add.w	r3, r7, #12
 800303e:	4619      	mov	r1, r3
 8003040:	4805      	ldr	r0, [pc, #20]	@ (8003058 <HAL_TIM_MspPostInit+0x6c>)
 8003042:	f002 fbbd 	bl	80057c0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM10_MspPostInit 1 */

    /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8003046:	bf00      	nop
 8003048:	3720      	adds	r7, #32
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40014400 	.word	0x40014400
 8003054:	40023800 	.word	0x40023800
 8003058:	40021400 	.word	0x40021400

0800305c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b0aa      	sub	sp, #168	@ 0xa8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003064:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	605a      	str	r2, [r3, #4]
 800306e:	609a      	str	r2, [r3, #8]
 8003070:	60da      	str	r2, [r3, #12]
 8003072:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003074:	f107 0310 	add.w	r3, r7, #16
 8003078:	2284      	movs	r2, #132	@ 0x84
 800307a:	2100      	movs	r1, #0
 800307c:	4618      	mov	r0, r3
 800307e:	f00b ff11 	bl	800eea4 <memset>
  if(huart->Instance==USART3)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a22      	ldr	r2, [pc, #136]	@ (8003110 <HAL_UART_MspInit+0xb4>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d13c      	bne.n	8003106 <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800308c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003090:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003092:	2300      	movs	r3, #0
 8003094:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003096:	f107 0310 	add.w	r3, r7, #16
 800309a:	4618      	mov	r0, r3
 800309c:	f004 f972 	bl	8007384 <HAL_RCCEx_PeriphCLKConfig>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80030a6:	f7ff fbdb 	bl	8002860 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80030aa:	4b1a      	ldr	r3, [pc, #104]	@ (8003114 <HAL_UART_MspInit+0xb8>)
 80030ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ae:	4a19      	ldr	r2, [pc, #100]	@ (8003114 <HAL_UART_MspInit+0xb8>)
 80030b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80030b6:	4b17      	ldr	r3, [pc, #92]	@ (8003114 <HAL_UART_MspInit+0xb8>)
 80030b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030be:	60fb      	str	r3, [r7, #12]
 80030c0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030c2:	4b14      	ldr	r3, [pc, #80]	@ (8003114 <HAL_UART_MspInit+0xb8>)
 80030c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c6:	4a13      	ldr	r2, [pc, #76]	@ (8003114 <HAL_UART_MspInit+0xb8>)
 80030c8:	f043 0308 	orr.w	r3, r3, #8
 80030cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80030ce:	4b11      	ldr	r3, [pc, #68]	@ (8003114 <HAL_UART_MspInit+0xb8>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d2:	f003 0308 	and.w	r3, r3, #8
 80030d6:	60bb      	str	r3, [r7, #8]
 80030d8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80030da:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80030de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e2:	2302      	movs	r3, #2
 80030e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e8:	2300      	movs	r3, #0
 80030ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ee:	2303      	movs	r3, #3
 80030f0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80030f4:	2307      	movs	r3, #7
 80030f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030fa:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80030fe:	4619      	mov	r1, r3
 8003100:	4805      	ldr	r0, [pc, #20]	@ (8003118 <HAL_UART_MspInit+0xbc>)
 8003102:	f002 fb5d 	bl	80057c0 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8003106:	bf00      	nop
 8003108:	37a8      	adds	r7, #168	@ 0xa8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40004800 	.word	0x40004800
 8003114:	40023800 	.word	0x40023800
 8003118:	40020c00 	.word	0x40020c00

0800311c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003120:	bf00      	nop
 8003122:	e7fd      	b.n	8003120 <NMI_Handler+0x4>

08003124 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003128:	bf00      	nop
 800312a:	e7fd      	b.n	8003128 <HardFault_Handler+0x4>

0800312c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003130:	bf00      	nop
 8003132:	e7fd      	b.n	8003130 <MemManage_Handler+0x4>

08003134 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003138:	bf00      	nop
 800313a:	e7fd      	b.n	8003138 <BusFault_Handler+0x4>

0800313c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003140:	bf00      	nop
 8003142:	e7fd      	b.n	8003140 <UsageFault_Handler+0x4>

08003144 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003148:	bf00      	nop
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr

08003152 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003152:	b480      	push	{r7}
 8003154:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003156:	bf00      	nop
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003164:	bf00      	nop
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr

0800316e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003172:	f000 fc1f 	bl	80039b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003176:	bf00      	nop
 8003178:	bd80      	pop	{r7, pc}

0800317a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800317a:	b480      	push	{r7}
 800317c:	af00      	add	r7, sp, #0
  return 1;
 800317e:	2301      	movs	r3, #1
}
 8003180:	4618      	mov	r0, r3
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
	...

0800318c <_kill>:

int _kill(int pid, int sig)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003196:	4b05      	ldr	r3, [pc, #20]	@ (80031ac <_kill+0x20>)
 8003198:	2216      	movs	r2, #22
 800319a:	601a      	str	r2, [r3, #0]
  return -1;
 800319c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr
 80031ac:	20007edc 	.word	0x20007edc

080031b0 <_exit>:

void _exit (int status)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80031b8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f7ff ffe5 	bl	800318c <_kill>
  while (1) {}    /* Make sure we hang here */
 80031c2:	bf00      	nop
 80031c4:	e7fd      	b.n	80031c2 <_exit+0x12>

080031c6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b086      	sub	sp, #24
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	60f8      	str	r0, [r7, #12]
 80031ce:	60b9      	str	r1, [r7, #8]
 80031d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031d2:	2300      	movs	r3, #0
 80031d4:	617b      	str	r3, [r7, #20]
 80031d6:	e00a      	b.n	80031ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80031d8:	f3af 8000 	nop.w
 80031dc:	4601      	mov	r1, r0
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	1c5a      	adds	r2, r3, #1
 80031e2:	60ba      	str	r2, [r7, #8]
 80031e4:	b2ca      	uxtb	r2, r1
 80031e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	3301      	adds	r3, #1
 80031ec:	617b      	str	r3, [r7, #20]
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	dbf0      	blt.n	80031d8 <_read+0x12>
  }

  return len;
 80031f6:	687b      	ldr	r3, [r7, #4]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3718      	adds	r7, #24
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800320c:	2300      	movs	r3, #0
 800320e:	617b      	str	r3, [r7, #20]
 8003210:	e009      	b.n	8003226 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	1c5a      	adds	r2, r3, #1
 8003216:	60ba      	str	r2, [r7, #8]
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	4618      	mov	r0, r3
 800321c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	3301      	adds	r3, #1
 8003224:	617b      	str	r3, [r7, #20]
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	429a      	cmp	r2, r3
 800322c:	dbf1      	blt.n	8003212 <_write+0x12>
  }
  return len;
 800322e:	687b      	ldr	r3, [r7, #4]
}
 8003230:	4618      	mov	r0, r3
 8003232:	3718      	adds	r7, #24
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <_close>:

int _close(int file)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003240:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003244:	4618      	mov	r0, r3
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003260:	605a      	str	r2, [r3, #4]
  return 0;
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <_isatty>:

int _isatty(int file)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003278:	2301      	movs	r3, #1
}
 800327a:	4618      	mov	r0, r3
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003286:	b480      	push	{r7}
 8003288:	b085      	sub	sp, #20
 800328a:	af00      	add	r7, sp, #0
 800328c:	60f8      	str	r0, [r7, #12]
 800328e:	60b9      	str	r1, [r7, #8]
 8003290:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3714      	adds	r7, #20
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b087      	sub	sp, #28
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032a8:	4a14      	ldr	r2, [pc, #80]	@ (80032fc <_sbrk+0x5c>)
 80032aa:	4b15      	ldr	r3, [pc, #84]	@ (8003300 <_sbrk+0x60>)
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032b4:	4b13      	ldr	r3, [pc, #76]	@ (8003304 <_sbrk+0x64>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d102      	bne.n	80032c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032bc:	4b11      	ldr	r3, [pc, #68]	@ (8003304 <_sbrk+0x64>)
 80032be:	4a12      	ldr	r2, [pc, #72]	@ (8003308 <_sbrk+0x68>)
 80032c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032c2:	4b10      	ldr	r3, [pc, #64]	@ (8003304 <_sbrk+0x64>)
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4413      	add	r3, r2
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d205      	bcs.n	80032dc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80032d0:	4b0e      	ldr	r3, [pc, #56]	@ (800330c <_sbrk+0x6c>)
 80032d2:	220c      	movs	r2, #12
 80032d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80032da:	e009      	b.n	80032f0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80032dc:	4b09      	ldr	r3, [pc, #36]	@ (8003304 <_sbrk+0x64>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032e2:	4b08      	ldr	r3, [pc, #32]	@ (8003304 <_sbrk+0x64>)
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4413      	add	r3, r2
 80032ea:	4a06      	ldr	r2, [pc, #24]	@ (8003304 <_sbrk+0x64>)
 80032ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032ee:	68fb      	ldr	r3, [r7, #12]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	371c      	adds	r7, #28
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	20050000 	.word	0x20050000
 8003300:	00000400 	.word	0x00000400
 8003304:	20000734 	.word	0x20000734
 8003308:	20007ee8 	.word	0x20007ee8
 800330c:	20007edc 	.word	0x20007edc

08003310 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003314:	4b06      	ldr	r3, [pc, #24]	@ (8003330 <SystemInit+0x20>)
 8003316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800331a:	4a05      	ldr	r2, [pc, #20]	@ (8003330 <SystemInit+0x20>)
 800331c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003320:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003324:	bf00      	nop
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	e000ed00 	.word	0xe000ed00

08003334 <__udp_echoserver_init_oo>:

void __udp_echoserver_receive_callback_oo(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port);
void CheckLevitationStop(void);  // Levitasyon durdurmayı kontrol et

void __udp_echoserver_init_oo(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
	struct udp_pcb *upcb;

	/* Create a new UDP control block  */
	upcb = udp_new();
 800333a:	f009 f8bd 	bl	800c4b8 <udp_new>
 800333e:	6078      	str	r0, [r7, #4]

	if (upcb)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00a      	beq.n	800335c <__udp_echoserver_init_oo+0x28>
	{
		/* Bind the upcb to the UDP_PORT port */
		/* Using IP_ADDR_ANY allow the upcb to be used by any local interface */
		udp_bind(upcb, IP_ADDR_ANY, 8080);
 8003346:	f641 7290 	movw	r2, #8080	@ 0x1f90
 800334a:	4906      	ldr	r1, [pc, #24]	@ (8003364 <__udp_echoserver_init_oo+0x30>)
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f008 ffc9 	bl	800c2e4 <udp_bind>
		udp_recv(upcb, __udp_echoserver_receive_callback_oo, NULL);
 8003352:	2200      	movs	r2, #0
 8003354:	4904      	ldr	r1, [pc, #16]	@ (8003368 <__udp_echoserver_init_oo+0x34>)
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f009 f84c 	bl	800c3f4 <udp_recv>
	}
}
 800335c:	bf00      	nop
 800335e:	3708      	adds	r7, #8
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	08011940 	.word	0x08011940
 8003368:	0800336d 	.word	0x0800336d

0800336c <__udp_echoserver_receive_callback_oo>:
void __udp_echoserver_receive_callback_oo( void* arg,
                           struct udp_pcb* upcb,
                           struct pbuf* p,
                           const ip_addr_t* addr,
                           u16_t port )
{
 800336c:	b590      	push	{r4, r7, lr}
 800336e:	b0ad      	sub	sp, #180	@ 0xb4
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
 8003378:	603b      	str	r3, [r7, #0]
    // Gelen string'i kopyala
    memset(received_string, 0, MAX_STRING_LENGTH);  // Önce buffer'ı temizle
 800337a:	2264      	movs	r2, #100	@ 0x64
 800337c:	2100      	movs	r1, #0
 800337e:	489f      	ldr	r0, [pc, #636]	@ (80035fc <__udp_echoserver_receive_callback_oo+0x290>)
 8003380:	f00b fd90 	bl	800eea4 <memset>
    strncpy(received_string, (char *)p->payload, p->len < MAX_STRING_LENGTH ? p->len : MAX_STRING_LENGTH - 1);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6859      	ldr	r1, [r3, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	895b      	ldrh	r3, [r3, #10]
 800338c:	2b63      	cmp	r3, #99	@ 0x63
 800338e:	bf28      	it	cs
 8003390:	2363      	movcs	r3, #99	@ 0x63
 8003392:	b29b      	uxth	r3, r3
 8003394:	461a      	mov	r2, r3
 8003396:	4899      	ldr	r0, [pc, #612]	@ (80035fc <__udp_echoserver_receive_callback_oo+0x290>)
 8003398:	f00b fd8c 	bl	800eeb4 <strncpy>

    // Yanıt mesajı için buffer
    char response[150];

    // JSON komutunu ayrıştır
    if (strstr(received_string, "acil_durum")) {
 800339c:	4998      	ldr	r1, [pc, #608]	@ (8003600 <__udp_echoserver_receive_callback_oo+0x294>)
 800339e:	4897      	ldr	r0, [pc, #604]	@ (80035fc <__udp_echoserver_receive_callback_oo+0x290>)
 80033a0:	f00b fd9b 	bl	800eeda <strstr>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d01d      	beq.n	80033e6 <__udp_echoserver_receive_callback_oo+0x7a>
        levitation_stop_request = 1;
 80033aa:	4b96      	ldr	r3, [pc, #600]	@ (8003604 <__udp_echoserver_receive_callback_oo+0x298>)
 80033ac:	2201      	movs	r2, #1
 80033ae:	701a      	strb	r2, [r3, #0]
        levitation_active = 0;        // Levitasyon artık aktif değil
 80033b0:	4b95      	ldr	r3, [pc, #596]	@ (8003608 <__udp_echoserver_receive_callback_oo+0x29c>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	701a      	strb	r2, [r3, #0]
        DecreaseMotorSpeed();         // Hızı sıfırla
 80033b6:	f7fe facd 	bl	8001954 <DecreaseMotorSpeed>
                // Aktüvatörü durdur (PG5 = HIGH, PG6 = HIGH)
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_SET);   // PG5 HIGH
 80033ba:	2201      	movs	r2, #1
 80033bc:	2120      	movs	r1, #32
 80033be:	4893      	ldr	r0, [pc, #588]	@ (800360c <__udp_echoserver_receive_callback_oo+0x2a0>)
 80033c0:	f002 fbc2 	bl	8005b48 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);   // PG6 HIGH
 80033c4:	2201      	movs	r2, #1
 80033c6:	2140      	movs	r1, #64	@ 0x40
 80033c8:	4890      	ldr	r0, [pc, #576]	@ (800360c <__udp_echoserver_receive_callback_oo+0x2a0>)
 80033ca:	f002 fbbd 	bl	8005b48 <HAL_GPIO_WritePin>
        // Levitasyon durdur - durdurma talebi oluştur
        // Dur durumu: INPUT1=HIGH, INPUT2=HIGH
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_SET);    // PG3 HIGH
 80033ce:	2201      	movs	r2, #1
 80033d0:	2108      	movs	r1, #8
 80033d2:	488e      	ldr	r0, [pc, #568]	@ (800360c <__udp_echoserver_receive_callback_oo+0x2a0>)
 80033d4:	f002 fbb8 	bl	8005b48 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);   // PD10 HIGH
 80033d8:	2201      	movs	r2, #1
 80033da:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80033de:	488c      	ldr	r0, [pc, #560]	@ (8003610 <__udp_echoserver_receive_callback_oo+0x2a4>)
 80033e0:	f002 fbb2 	bl	8005b48 <HAL_GPIO_WritePin>
 80033e4:	e0d1      	b.n	800358a <__udp_echoserver_receive_callback_oo+0x21e>
    }
    else if (strstr(received_string, "sistem_baslat")) {
 80033e6:	498b      	ldr	r1, [pc, #556]	@ (8003614 <__udp_echoserver_receive_callback_oo+0x2a8>)
 80033e8:	4884      	ldr	r0, [pc, #528]	@ (80035fc <__udp_echoserver_receive_callback_oo+0x290>)
 80033ea:	f00b fd76 	bl	800eeda <strstr>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d018      	beq.n	8003426 <__udp_echoserver_receive_callback_oo+0xba>

        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_RESET); // PG5 LOW
 80033f4:	2200      	movs	r2, #0
 80033f6:	2120      	movs	r1, #32
 80033f8:	4884      	ldr	r0, [pc, #528]	@ (800360c <__udp_echoserver_receive_callback_oo+0x2a0>)
 80033fa:	f002 fba5 	bl	8005b48 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);   // PG6 HIGH
 80033fe:	2201      	movs	r2, #1
 8003400:	2140      	movs	r1, #64	@ 0x40
 8003402:	4882      	ldr	r0, [pc, #520]	@ (800360c <__udp_echoserver_receive_callback_oo+0x2a0>)
 8003404:	f002 fba0 	bl	8005b48 <HAL_GPIO_WritePin>
        HAL_Delay(6655);
 8003408:	f641 10ff 	movw	r0, #6655	@ 0x19ff
 800340c:	f000 faf2 	bl	80039f4 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_SET);   // PG5 HIGH
 8003410:	2201      	movs	r2, #1
 8003412:	2120      	movs	r1, #32
 8003414:	487d      	ldr	r0, [pc, #500]	@ (800360c <__udp_echoserver_receive_callback_oo+0x2a0>)
 8003416:	f002 fb97 	bl	8005b48 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);   // PG6 HIGH
 800341a:	2201      	movs	r2, #1
 800341c:	2140      	movs	r1, #64	@ 0x40
 800341e:	487b      	ldr	r0, [pc, #492]	@ (800360c <__udp_echoserver_receive_callback_oo+0x2a0>)
 8003420:	f002 fb92 	bl	8005b48 <HAL_GPIO_WritePin>
 8003424:	e0b1      	b.n	800358a <__udp_echoserver_receive_callback_oo+0x21e>
    }
    else if (strstr(received_string, "ileri_al")) {
 8003426:	497c      	ldr	r1, [pc, #496]	@ (8003618 <__udp_echoserver_receive_callback_oo+0x2ac>)
 8003428:	4874      	ldr	r0, [pc, #464]	@ (80035fc <__udp_echoserver_receive_callback_oo+0x290>)
 800342a:	f00b fd56 	bl	800eeda <strstr>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d012      	beq.n	800345a <__udp_echoserver_receive_callback_oo+0xee>
        // İleri: INPUT1=LOW, INPUT2=HIGH
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_RESET);  // PG3 LOW
 8003434:	2200      	movs	r2, #0
 8003436:	2108      	movs	r1, #8
 8003438:	4874      	ldr	r0, [pc, #464]	@ (800360c <__udp_echoserver_receive_callback_oo+0x2a0>)
 800343a:	f002 fb85 	bl	8005b48 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);   // PD10 HIGH
 800343e:	2201      	movs	r2, #1
 8003440:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003444:	4872      	ldr	r0, [pc, #456]	@ (8003610 <__udp_echoserver_receive_callback_oo+0x2a4>)
 8003446:	f002 fb7f 	bl	8005b48 <HAL_GPIO_WritePin>
        snprintf(response, sizeof(response), "Arac ileri gidiyor - PG3:LOW, PD10:HIGH");
 800344a:	f107 0314 	add.w	r3, r7, #20
 800344e:	4a73      	ldr	r2, [pc, #460]	@ (800361c <__udp_echoserver_receive_callback_oo+0x2b0>)
 8003450:	2196      	movs	r1, #150	@ 0x96
 8003452:	4618      	mov	r0, r3
 8003454:	f00b fb34 	bl	800eac0 <sniprintf>
 8003458:	e097      	b.n	800358a <__udp_echoserver_receive_callback_oo+0x21e>
    }
    else if (strstr(received_string, "geri_al")) {
 800345a:	4971      	ldr	r1, [pc, #452]	@ (8003620 <__udp_echoserver_receive_callback_oo+0x2b4>)
 800345c:	4867      	ldr	r0, [pc, #412]	@ (80035fc <__udp_echoserver_receive_callback_oo+0x290>)
 800345e:	f00b fd3c 	bl	800eeda <strstr>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d012      	beq.n	800348e <__udp_echoserver_receive_callback_oo+0x122>
        // Geri: INPUT1=LOW, INPUT2=LOW
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_RESET);  // PG3 LOW
 8003468:	2200      	movs	r2, #0
 800346a:	2108      	movs	r1, #8
 800346c:	4867      	ldr	r0, [pc, #412]	@ (800360c <__udp_echoserver_receive_callback_oo+0x2a0>)
 800346e:	f002 fb6b 	bl	8005b48 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET); // PD10 LOW
 8003472:	2200      	movs	r2, #0
 8003474:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003478:	4865      	ldr	r0, [pc, #404]	@ (8003610 <__udp_echoserver_receive_callback_oo+0x2a4>)
 800347a:	f002 fb65 	bl	8005b48 <HAL_GPIO_WritePin>
        snprintf(response, sizeof(response), "Arac geri gidiyor - PG3:LOW, PD10:LOW");
 800347e:	f107 0314 	add.w	r3, r7, #20
 8003482:	4a68      	ldr	r2, [pc, #416]	@ (8003624 <__udp_echoserver_receive_callback_oo+0x2b8>)
 8003484:	2196      	movs	r1, #150	@ 0x96
 8003486:	4618      	mov	r0, r3
 8003488:	f00b fb1a 	bl	800eac0 <sniprintf>
 800348c:	e07d      	b.n	800358a <__udp_echoserver_receive_callback_oo+0x21e>
    }
    else if (strstr(received_string, "aktuator_yukari")) {
 800348e:	4966      	ldr	r1, [pc, #408]	@ (8003628 <__udp_echoserver_receive_callback_oo+0x2bc>)
 8003490:	485a      	ldr	r0, [pc, #360]	@ (80035fc <__udp_echoserver_receive_callback_oo+0x290>)
 8003492:	f00b fd22 	bl	800eeda <strstr>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d011      	beq.n	80034c0 <__udp_echoserver_receive_callback_oo+0x154>
        // Aktüvatörü yukarı hareket ettir (PG5 = HIGH, PG6 = LOW)
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_SET);   // PG5 HIGH
 800349c:	2201      	movs	r2, #1
 800349e:	2120      	movs	r1, #32
 80034a0:	485a      	ldr	r0, [pc, #360]	@ (800360c <__udp_echoserver_receive_callback_oo+0x2a0>)
 80034a2:	f002 fb51 	bl	8005b48 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // PG6 LOW
 80034a6:	2200      	movs	r2, #0
 80034a8:	2140      	movs	r1, #64	@ 0x40
 80034aa:	4858      	ldr	r0, [pc, #352]	@ (800360c <__udp_echoserver_receive_callback_oo+0x2a0>)
 80034ac:	f002 fb4c 	bl	8005b48 <HAL_GPIO_WritePin>
        snprintf(response, sizeof(response), "Aktüvatör yukarı gidiyor - PG5:HIGH, PG6:LOW");
 80034b0:	f107 0314 	add.w	r3, r7, #20
 80034b4:	4a5d      	ldr	r2, [pc, #372]	@ (800362c <__udp_echoserver_receive_callback_oo+0x2c0>)
 80034b6:	2196      	movs	r1, #150	@ 0x96
 80034b8:	4618      	mov	r0, r3
 80034ba:	f00b fb01 	bl	800eac0 <sniprintf>
 80034be:	e064      	b.n	800358a <__udp_echoserver_receive_callback_oo+0x21e>
    }
    else if (strstr(received_string, "aktuator_asagi")) {
 80034c0:	495b      	ldr	r1, [pc, #364]	@ (8003630 <__udp_echoserver_receive_callback_oo+0x2c4>)
 80034c2:	484e      	ldr	r0, [pc, #312]	@ (80035fc <__udp_echoserver_receive_callback_oo+0x290>)
 80034c4:	f00b fd09 	bl	800eeda <strstr>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d011      	beq.n	80034f2 <__udp_echoserver_receive_callback_oo+0x186>
        // Aktüvatörü aşağı hareket ettir (PG5 = LOW, PG6 = HIGH)
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_RESET); // PG5 LOW
 80034ce:	2200      	movs	r2, #0
 80034d0:	2120      	movs	r1, #32
 80034d2:	484e      	ldr	r0, [pc, #312]	@ (800360c <__udp_echoserver_receive_callback_oo+0x2a0>)
 80034d4:	f002 fb38 	bl	8005b48 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);   // PG6 HIGH
 80034d8:	2201      	movs	r2, #1
 80034da:	2140      	movs	r1, #64	@ 0x40
 80034dc:	484b      	ldr	r0, [pc, #300]	@ (800360c <__udp_echoserver_receive_callback_oo+0x2a0>)
 80034de:	f002 fb33 	bl	8005b48 <HAL_GPIO_WritePin>
        snprintf(response, sizeof(response), "Aktüvatör aşağı gidiyor - PG5:LOW, PG6:HIGH");
 80034e2:	f107 0314 	add.w	r3, r7, #20
 80034e6:	4a53      	ldr	r2, [pc, #332]	@ (8003634 <__udp_echoserver_receive_callback_oo+0x2c8>)
 80034e8:	2196      	movs	r1, #150	@ 0x96
 80034ea:	4618      	mov	r0, r3
 80034ec:	f00b fae8 	bl	800eac0 <sniprintf>
 80034f0:	e04b      	b.n	800358a <__udp_echoserver_receive_callback_oo+0x21e>
    }
    else if (strstr(received_string, "aktuator_durdur")) {
 80034f2:	4951      	ldr	r1, [pc, #324]	@ (8003638 <__udp_echoserver_receive_callback_oo+0x2cc>)
 80034f4:	4841      	ldr	r0, [pc, #260]	@ (80035fc <__udp_echoserver_receive_callback_oo+0x290>)
 80034f6:	f00b fcf0 	bl	800eeda <strstr>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d011      	beq.n	8003524 <__udp_echoserver_receive_callback_oo+0x1b8>
        // Aktüvatörü durdur (PG5 = HIGH, PG6 = HIGH)
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_SET);   // PG5 HIGH
 8003500:	2201      	movs	r2, #1
 8003502:	2120      	movs	r1, #32
 8003504:	4841      	ldr	r0, [pc, #260]	@ (800360c <__udp_echoserver_receive_callback_oo+0x2a0>)
 8003506:	f002 fb1f 	bl	8005b48 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);   // PG6 HIGH
 800350a:	2201      	movs	r2, #1
 800350c:	2140      	movs	r1, #64	@ 0x40
 800350e:	483f      	ldr	r0, [pc, #252]	@ (800360c <__udp_echoserver_receive_callback_oo+0x2a0>)
 8003510:	f002 fb1a 	bl	8005b48 <HAL_GPIO_WritePin>
        snprintf(response, sizeof(response), "Aktüvatör durdu - PG5:HIGH, PG6:HIGH");
 8003514:	f107 0314 	add.w	r3, r7, #20
 8003518:	4a48      	ldr	r2, [pc, #288]	@ (800363c <__udp_echoserver_receive_callback_oo+0x2d0>)
 800351a:	2196      	movs	r1, #150	@ 0x96
 800351c:	4618      	mov	r0, r3
 800351e:	f00b facf 	bl	800eac0 <sniprintf>
 8003522:	e032      	b.n	800358a <__udp_echoserver_receive_callback_oo+0x21e>
    }
    else if (strstr(received_string, "levitasyon_baslat")) {
 8003524:	4946      	ldr	r1, [pc, #280]	@ (8003640 <__udp_echoserver_receive_callback_oo+0x2d4>)
 8003526:	4835      	ldr	r0, [pc, #212]	@ (80035fc <__udp_echoserver_receive_callback_oo+0x290>)
 8003528:	f00b fcd7 	bl	800eeda <strstr>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00d      	beq.n	800354e <__udp_echoserver_receive_callback_oo+0x1e2>
        // Levitasyon başlat - yeni yavaş hızlanma mantığı
        levitation_stop_request = 0;  // Durdurma talebini sıfırla
 8003532:	4b34      	ldr	r3, [pc, #208]	@ (8003604 <__udp_echoserver_receive_callback_oo+0x298>)
 8003534:	2200      	movs	r2, #0
 8003536:	701a      	strb	r2, [r3, #0]
        levitation_active = 1;        // Levitasyon aktif
 8003538:	4b33      	ldr	r3, [pc, #204]	@ (8003608 <__udp_echoserver_receive_callback_oo+0x29c>)
 800353a:	2201      	movs	r2, #1
 800353c:	701a      	strb	r2, [r3, #0]

        snprintf(response, sizeof(response), "Levitasyon başlatıldı - Yavaş hızlanma modunda");
 800353e:	f107 0314 	add.w	r3, r7, #20
 8003542:	4a40      	ldr	r2, [pc, #256]	@ (8003644 <__udp_echoserver_receive_callback_oo+0x2d8>)
 8003544:	2196      	movs	r1, #150	@ 0x96
 8003546:	4618      	mov	r0, r3
 8003548:	f00b faba 	bl	800eac0 <sniprintf>
 800354c:	e01d      	b.n	800358a <__udp_echoserver_receive_callback_oo+0x21e>
    }
    else if (strstr(received_string, "levitasyon_durdur")) {
 800354e:	493e      	ldr	r1, [pc, #248]	@ (8003648 <__udp_echoserver_receive_callback_oo+0x2dc>)
 8003550:	482a      	ldr	r0, [pc, #168]	@ (80035fc <__udp_echoserver_receive_callback_oo+0x290>)
 8003552:	f00b fcc2 	bl	800eeda <strstr>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00f      	beq.n	800357c <__udp_echoserver_receive_callback_oo+0x210>
        // Levitasyon durdur - durdurma talebi oluştur
        levitation_stop_request = 1;
 800355c:	4b29      	ldr	r3, [pc, #164]	@ (8003604 <__udp_echoserver_receive_callback_oo+0x298>)
 800355e:	2201      	movs	r2, #1
 8003560:	701a      	strb	r2, [r3, #0]
        levitation_active = 0;        // Levitasyon artık aktif değil
 8003562:	4b29      	ldr	r3, [pc, #164]	@ (8003608 <__udp_echoserver_receive_callback_oo+0x29c>)
 8003564:	2200      	movs	r2, #0
 8003566:	701a      	strb	r2, [r3, #0]
        DecreaseMotorSpeed();         // Hızı sıfırla
 8003568:	f7fe f9f4 	bl	8001954 <DecreaseMotorSpeed>
        snprintf(response, sizeof(response), "Levitasyon durdurma talebi gönderildi - Motor hızı sıfırlandı");
 800356c:	f107 0314 	add.w	r3, r7, #20
 8003570:	4a36      	ldr	r2, [pc, #216]	@ (800364c <__udp_echoserver_receive_callback_oo+0x2e0>)
 8003572:	2196      	movs	r1, #150	@ 0x96
 8003574:	4618      	mov	r0, r3
 8003576:	f00b faa3 	bl	800eac0 <sniprintf>
 800357a:	e006      	b.n	800358a <__udp_echoserver_receive_callback_oo+0x21e>
    }
    else {
        snprintf(response, sizeof(response), "Bilinmeyen komut: %s", received_string);
 800357c:	f107 0014 	add.w	r0, r7, #20
 8003580:	4b1e      	ldr	r3, [pc, #120]	@ (80035fc <__udp_echoserver_receive_callback_oo+0x290>)
 8003582:	4a33      	ldr	r2, [pc, #204]	@ (8003650 <__udp_echoserver_receive_callback_oo+0x2e4>)
 8003584:	2196      	movs	r1, #150	@ 0x96
 8003586:	f00b fa9b 	bl	800eac0 <sniprintf>
    }

    // Yanıt için yeni pbuf oluştur
    struct pbuf* p_reply = pbuf_alloc(PBUF_TRANSPORT, strlen(response) + 1, PBUF_RAM);
 800358a:	f107 0314 	add.w	r3, r7, #20
 800358e:	4618      	mov	r0, r3
 8003590:	f7fc fe3e 	bl	8000210 <strlen>
 8003594:	4603      	mov	r3, r0
 8003596:	b29b      	uxth	r3, r3
 8003598:	3301      	adds	r3, #1
 800359a:	b29b      	uxth	r3, r3
 800359c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80035a0:	4619      	mov	r1, r3
 80035a2:	2036      	movs	r0, #54	@ 0x36
 80035a4:	f007 fcf6 	bl	800af94 <pbuf_alloc>
 80035a8:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
    if (p_reply != NULL) {
 80035ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d01b      	beq.n	80035ec <__udp_echoserver_receive_callback_oo+0x280>
        memcpy(p_reply->payload, response, strlen(response) + 1);
 80035b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80035b8:	685c      	ldr	r4, [r3, #4]
 80035ba:	f107 0314 	add.w	r3, r7, #20
 80035be:	4618      	mov	r0, r3
 80035c0:	f7fc fe26 	bl	8000210 <strlen>
 80035c4:	4603      	mov	r3, r0
 80035c6:	1c5a      	adds	r2, r3, #1
 80035c8:	f107 0314 	add.w	r3, r7, #20
 80035cc:	4619      	mov	r1, r3
 80035ce:	4620      	mov	r0, r4
 80035d0:	f00b fcc1 	bl	800ef56 <memcpy>

        // Yanıtı gönder
        udp_sendto(upcb, p_reply, addr, port);
 80035d4:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	@ 0xc0
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 80035de:	68b8      	ldr	r0, [r7, #8]
 80035e0:	f008 fcca 	bl	800bf78 <udp_sendto>

        // Yanıt pbuf'ını serbest bırak
        pbuf_free(p_reply);
 80035e4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 80035e8:	f007 ffb6 	bl	800b558 <pbuf_free>
    }

    // Gelen veri pbuf'ını serbest bırak
    pbuf_free(p);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f007 ffb3 	bl	800b558 <pbuf_free>
}
 80035f2:	bf00      	nop
 80035f4:	37b4      	adds	r7, #180	@ 0xb4
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd90      	pop	{r4, r7, pc}
 80035fa:	bf00      	nop
 80035fc:	20000738 	.word	0x20000738
 8003600:	08010154 	.word	0x08010154
 8003604:	2000079d 	.word	0x2000079d
 8003608:	2000079e 	.word	0x2000079e
 800360c:	40021800 	.word	0x40021800
 8003610:	40020c00 	.word	0x40020c00
 8003614:	08010160 	.word	0x08010160
 8003618:	08010170 	.word	0x08010170
 800361c:	0801017c 	.word	0x0801017c
 8003620:	080101a4 	.word	0x080101a4
 8003624:	080101ac 	.word	0x080101ac
 8003628:	080101d4 	.word	0x080101d4
 800362c:	080101e4 	.word	0x080101e4
 8003630:	08010214 	.word	0x08010214
 8003634:	08010224 	.word	0x08010224
 8003638:	08010258 	.word	0x08010258
 800363c:	08010268 	.word	0x08010268
 8003640:	08010290 	.word	0x08010290
 8003644:	080102a4 	.word	0x080102a4
 8003648:	080102d8 	.word	0x080102d8
 800364c:	080102ec 	.word	0x080102ec
 8003650:	08010330 	.word	0x08010330

08003654 <CheckLevitationStop>:

// Bu fonksiyonu interrupt veya başka bir thread'den çağırabilirsiniz
void CheckLevitationStop(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
    // Eğer durdurma talebi varsa hızı sıfırla ve çık
    if (levitation_stop_request) {
 8003658:	4b05      	ldr	r3, [pc, #20]	@ (8003670 <CheckLevitationStop+0x1c>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d004      	beq.n	800366c <CheckLevitationStop+0x18>
        levitation_active = 0;  // Levitasyon artık aktif değil
 8003662:	4b04      	ldr	r3, [pc, #16]	@ (8003674 <CheckLevitationStop+0x20>)
 8003664:	2200      	movs	r2, #0
 8003666:	701a      	strb	r2, [r3, #0]
        DecreaseMotorSpeed();
 8003668:	f7fe f974 	bl	8001954 <DecreaseMotorSpeed>
    }
}
 800366c:	bf00      	nop
 800366e:	bd80      	pop	{r7, pc}
 8003670:	2000079d 	.word	0x2000079d
 8003674:	2000079e 	.word	0x2000079e

08003678 <ProcessLevitation>:

// Yeni fonksiyon: Levitasyon sürecini yönet (main loop'ta çağrılacak)
void ProcessLevitation(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
    static uint32_t last_speed_update = 0;
    uint32_t current_time = HAL_GetTick();
 800367e:	f000 f9ad 	bl	80039dc <HAL_GetTick>
 8003682:	6078      	str	r0, [r7, #4]




    // Levitasyon aktifse ve durdurma talebi yoksa
    if (levitation_active && !levitation_stop_request) {
 8003684:	4b11      	ldr	r3, [pc, #68]	@ (80036cc <ProcessLevitation+0x54>)
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d017      	beq.n	80036be <ProcessLevitation+0x46>
 800368e:	4b10      	ldr	r3, [pc, #64]	@ (80036d0 <ProcessLevitation+0x58>)
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b00      	cmp	r3, #0
 8003696:	d112      	bne.n	80036be <ProcessLevitation+0x46>
        // Her 200ms'de bir hız artışı (eskiden 50ms idi - 4 kat daha yavaş)
        if (current_time - last_speed_update >= 200) {
 8003698:	4b0e      	ldr	r3, [pc, #56]	@ (80036d4 <ProcessLevitation+0x5c>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2bc7      	cmp	r3, #199	@ 0xc7
 80036a2:	d90c      	bls.n	80036be <ProcessLevitation+0x46>
            if (current_speed < 100) {
 80036a4:	4b0c      	ldr	r3, [pc, #48]	@ (80036d8 <ProcessLevitation+0x60>)
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	2b63      	cmp	r3, #99	@ 0x63
 80036aa:	d805      	bhi.n	80036b8 <ProcessLevitation+0x40>
                IncreaseMotorSpeed();  // Hızı artır
 80036ac:	f7fe f93c 	bl	8001928 <IncreaseMotorSpeed>
                last_speed_update = current_time;
 80036b0:	4a08      	ldr	r2, [pc, #32]	@ (80036d4 <ProcessLevitation+0x5c>)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	e002      	b.n	80036be <ProcessLevitation+0x46>
            } else {
                // %100'e ulaştık, levitasyon tamamlandı
                levitation_active = 0;
 80036b8:	4b04      	ldr	r3, [pc, #16]	@ (80036cc <ProcessLevitation+0x54>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    // Her durumda durdurma talebini kontrol et
    CheckLevitationStop();
 80036be:	f7ff ffc9 	bl	8003654 <CheckLevitationStop>
}
 80036c2:	bf00      	nop
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	2000079e 	.word	0x2000079e
 80036d0:	2000079d 	.word	0x2000079d
 80036d4:	200007a0 	.word	0x200007a0
 80036d8:	2000079c 	.word	0x2000079c

080036dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80036dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003714 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80036e0:	f7ff fe16 	bl	8003310 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80036e4:	480c      	ldr	r0, [pc, #48]	@ (8003718 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80036e6:	490d      	ldr	r1, [pc, #52]	@ (800371c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80036e8:	4a0d      	ldr	r2, [pc, #52]	@ (8003720 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80036ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036ec:	e002      	b.n	80036f4 <LoopCopyDataInit>

080036ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036f2:	3304      	adds	r3, #4

080036f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036f8:	d3f9      	bcc.n	80036ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003724 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80036fc:	4c0a      	ldr	r4, [pc, #40]	@ (8003728 <LoopFillZerobss+0x22>)
  movs r3, #0
 80036fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003700:	e001      	b.n	8003706 <LoopFillZerobss>

08003702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003704:	3204      	adds	r2, #4

08003706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003708:	d3fb      	bcc.n	8003702 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 800370a:	f00b fbfd 	bl	800ef08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800370e:	f7fe f9d1 	bl	8001ab4 <main>
  bx  lr    
 8003712:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003714:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003718:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800371c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8003720:	08011a40 	.word	0x08011a40
  ldr r2, =_sbss
 8003724:	200001c4 	.word	0x200001c4
  ldr r4, =_ebss
 8003728:	20007ee8 	.word	0x20007ee8

0800372c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800372c:	e7fe      	b.n	800372c <ADC_IRQHandler>

0800372e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
 8003736:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00b      	beq.n	8003756 <LAN8742_RegisterBusIO+0x28>
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d007      	beq.n	8003756 <LAN8742_RegisterBusIO+0x28>
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <LAN8742_RegisterBusIO+0x28>
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d102      	bne.n	800375c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8003756:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800375a:	e014      	b.n	8003786 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	68da      	ldr	r2, [r3, #12]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	691a      	ldr	r2, [r3, #16]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8003792:	b580      	push	{r7, lr}
 8003794:	b086      	sub	sp, #24
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 800379a:	2300      	movs	r3, #0
 800379c:	60fb      	str	r3, [r7, #12]
 800379e:	2300      	movs	r3, #0
 80037a0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80037a2:	2300      	movs	r3, #0
 80037a4:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d139      	bne.n	8003822 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d002      	beq.n	80037bc <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2220      	movs	r2, #32
 80037c0:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80037c2:	2300      	movs	r3, #0
 80037c4:	617b      	str	r3, [r7, #20]
 80037c6:	e01c      	b.n	8003802 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	f107 020c 	add.w	r2, r7, #12
 80037d0:	2112      	movs	r1, #18
 80037d2:	6978      	ldr	r0, [r7, #20]
 80037d4:	4798      	blx	r3
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	da03      	bge.n	80037e4 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 80037dc:	f06f 0304 	mvn.w	r3, #4
 80037e0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80037e2:	e00b      	b.n	80037fc <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f003 031f 	and.w	r3, r3, #31
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d105      	bne.n	80037fc <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80037f6:	2300      	movs	r3, #0
 80037f8:	613b      	str	r3, [r7, #16]
         break;
 80037fa:	e005      	b.n	8003808 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	3301      	adds	r3, #1
 8003800:	617b      	str	r3, [r7, #20]
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	2b1f      	cmp	r3, #31
 8003806:	d9df      	bls.n	80037c8 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2b1f      	cmp	r3, #31
 800380e:	d902      	bls.n	8003816 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8003810:	f06f 0302 	mvn.w	r3, #2
 8003814:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d102      	bne.n	8003822 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8003822:	693b      	ldr	r3, [r7, #16]
 }
 8003824:	4618      	mov	r0, r3
 8003826:	3718      	adds	r7, #24
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8003834:	2300      	movs	r3, #0
 8003836:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	6810      	ldr	r0, [r2, #0]
 8003840:	f107 020c 	add.w	r2, r7, #12
 8003844:	2101      	movs	r1, #1
 8003846:	4798      	blx	r3
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	da02      	bge.n	8003854 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800384e:	f06f 0304 	mvn.w	r3, #4
 8003852:	e06e      	b.n	8003932 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	6810      	ldr	r0, [r2, #0]
 800385c:	f107 020c 	add.w	r2, r7, #12
 8003860:	2101      	movs	r1, #1
 8003862:	4798      	blx	r3
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	da02      	bge.n	8003870 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800386a:	f06f 0304 	mvn.w	r3, #4
 800386e:	e060      	b.n	8003932 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f003 0304 	and.w	r3, r3, #4
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 800387a:	2301      	movs	r3, #1
 800387c:	e059      	b.n	8003932 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6810      	ldr	r0, [r2, #0]
 8003886:	f107 020c 	add.w	r2, r7, #12
 800388a:	2100      	movs	r1, #0
 800388c:	4798      	blx	r3
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	da02      	bge.n	800389a <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003894:	f06f 0304 	mvn.w	r3, #4
 8003898:	e04b      	b.n	8003932 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d11b      	bne.n	80038dc <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d006      	beq.n	80038bc <LAN8742_GetLinkState+0x90>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80038b8:	2302      	movs	r3, #2
 80038ba:	e03a      	b.n	8003932 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e033      	b.n	8003932 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80038d4:	2304      	movs	r3, #4
 80038d6:	e02c      	b.n	8003932 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80038d8:	2305      	movs	r3, #5
 80038da:	e02a      	b.n	8003932 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	6810      	ldr	r0, [r2, #0]
 80038e4:	f107 020c 	add.w	r2, r7, #12
 80038e8:	211f      	movs	r1, #31
 80038ea:	4798      	blx	r3
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	da02      	bge.n	80038f8 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80038f2:	f06f 0304 	mvn.w	r3, #4
 80038f6:	e01c      	b.n	8003932 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8003902:	2306      	movs	r3, #6
 8003904:	e015      	b.n	8003932 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f003 031c 	and.w	r3, r3, #28
 800390c:	2b18      	cmp	r3, #24
 800390e:	d101      	bne.n	8003914 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8003910:	2302      	movs	r3, #2
 8003912:	e00e      	b.n	8003932 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f003 031c 	and.w	r3, r3, #28
 800391a:	2b08      	cmp	r3, #8
 800391c:	d101      	bne.n	8003922 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800391e:	2303      	movs	r3, #3
 8003920:	e007      	b.n	8003932 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f003 031c 	and.w	r3, r3, #28
 8003928:	2b14      	cmp	r3, #20
 800392a:	d101      	bne.n	8003930 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800392c:	2304      	movs	r3, #4
 800392e:	e000      	b.n	8003932 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8003930:	2305      	movs	r3, #5
    }
  }
}
 8003932:	4618      	mov	r0, r3
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800393e:	2003      	movs	r0, #3
 8003940:	f000 fd60 	bl	8004404 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003944:	200f      	movs	r0, #15
 8003946:	f000 f805 	bl	8003954 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800394a:	f7ff f973 	bl	8002c34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	bd80      	pop	{r7, pc}

08003954 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800395c:	4b12      	ldr	r3, [pc, #72]	@ (80039a8 <HAL_InitTick+0x54>)
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	4b12      	ldr	r3, [pc, #72]	@ (80039ac <HAL_InitTick+0x58>)
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	4619      	mov	r1, r3
 8003966:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800396a:	fbb3 f3f1 	udiv	r3, r3, r1
 800396e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003972:	4618      	mov	r0, r3
 8003974:	f000 fd6d 	bl	8004452 <HAL_SYSTICK_Config>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e00e      	b.n	80039a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b0f      	cmp	r3, #15
 8003986:	d80a      	bhi.n	800399e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003988:	2200      	movs	r2, #0
 800398a:	6879      	ldr	r1, [r7, #4]
 800398c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003990:	f000 fd43 	bl	800441a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003994:	4a06      	ldr	r2, [pc, #24]	@ (80039b0 <HAL_InitTick+0x5c>)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800399a:	2300      	movs	r3, #0
 800399c:	e000      	b.n	80039a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	20000004 	.word	0x20000004
 80039ac:	2000000c 	.word	0x2000000c
 80039b0:	20000008 	.word	0x20000008

080039b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039b8:	4b06      	ldr	r3, [pc, #24]	@ (80039d4 <HAL_IncTick+0x20>)
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	461a      	mov	r2, r3
 80039be:	4b06      	ldr	r3, [pc, #24]	@ (80039d8 <HAL_IncTick+0x24>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4413      	add	r3, r2
 80039c4:	4a04      	ldr	r2, [pc, #16]	@ (80039d8 <HAL_IncTick+0x24>)
 80039c6:	6013      	str	r3, [r2, #0]
}
 80039c8:	bf00      	nop
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	2000000c 	.word	0x2000000c
 80039d8:	200007a4 	.word	0x200007a4

080039dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
  return uwTick;
 80039e0:	4b03      	ldr	r3, [pc, #12]	@ (80039f0 <HAL_GetTick+0x14>)
 80039e2:	681b      	ldr	r3, [r3, #0]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	200007a4 	.word	0x200007a4

080039f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039fc:	f7ff ffee 	bl	80039dc <HAL_GetTick>
 8003a00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a0c:	d005      	beq.n	8003a1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8003a38 <HAL_Delay+0x44>)
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	461a      	mov	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	4413      	add	r3, r2
 8003a18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a1a:	bf00      	nop
 8003a1c:	f7ff ffde 	bl	80039dc <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d8f7      	bhi.n	8003a1c <HAL_Delay+0x28>
  {
  }
}
 8003a2c:	bf00      	nop
 8003a2e:	bf00      	nop
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	2000000c 	.word	0x2000000c

08003a3c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a44:	2300      	movs	r3, #0
 8003a46:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e031      	b.n	8003ab6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d109      	bne.n	8003a6e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7ff f90e 	bl	8002c7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a72:	f003 0310 	and.w	r3, r3, #16
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d116      	bne.n	8003aa8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a7e:	4b10      	ldr	r3, [pc, #64]	@ (8003ac0 <HAL_ADC_Init+0x84>)
 8003a80:	4013      	ands	r3, r2
 8003a82:	f043 0202 	orr.w	r2, r3, #2
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 fb0e 	bl	80040ac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9a:	f023 0303 	bic.w	r3, r3, #3
 8003a9e:	f043 0201 	orr.w	r2, r3, #1
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	641a      	str	r2, [r3, #64]	@ 0x40
 8003aa6:	e001      	b.n	8003aac <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	ffffeefd 	.word	0xffffeefd

08003ac4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8003acc:	2300      	movs	r3, #0
 8003ace:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d101      	bne.n	8003ade <HAL_ADC_Start+0x1a>
 8003ada:	2302      	movs	r3, #2
 8003adc:	e0ad      	b.n	8003c3a <HAL_ADC_Start+0x176>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d018      	beq.n	8003b26 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	689a      	ldr	r2, [r3, #8]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f042 0201 	orr.w	r2, r2, #1
 8003b02:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003b04:	4b50      	ldr	r3, [pc, #320]	@ (8003c48 <HAL_ADC_Start+0x184>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a50      	ldr	r2, [pc, #320]	@ (8003c4c <HAL_ADC_Start+0x188>)
 8003b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0e:	0c9a      	lsrs	r2, r3, #18
 8003b10:	4613      	mov	r3, r2
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	4413      	add	r3, r2
 8003b16:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003b18:	e002      	b.n	8003b20 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1f9      	bne.n	8003b1a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f003 0301 	and.w	r3, r3, #1
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d175      	bne.n	8003c20 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b38:	4b45      	ldr	r3, [pc, #276]	@ (8003c50 <HAL_ADC_Start+0x18c>)
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d007      	beq.n	8003b62 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b56:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003b5a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b66:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b6e:	d106      	bne.n	8003b7e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b74:	f023 0206 	bic.w	r2, r3, #6
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	645a      	str	r2, [r3, #68]	@ 0x44
 8003b7c:	e002      	b.n	8003b84 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003b94:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003b96:	4b2f      	ldr	r3, [pc, #188]	@ (8003c54 <HAL_ADC_Start+0x190>)
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f003 031f 	and.w	r3, r3, #31
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10f      	bne.n	8003bc2 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d143      	bne.n	8003c38 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	689a      	ldr	r2, [r3, #8]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003bbe:	609a      	str	r2, [r3, #8]
 8003bc0:	e03a      	b.n	8003c38 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a24      	ldr	r2, [pc, #144]	@ (8003c58 <HAL_ADC_Start+0x194>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d10e      	bne.n	8003bea <HAL_ADC_Start+0x126>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d107      	bne.n	8003bea <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003be8:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003bea:	4b1a      	ldr	r3, [pc, #104]	@ (8003c54 <HAL_ADC_Start+0x190>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f003 0310 	and.w	r3, r3, #16
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d120      	bne.n	8003c38 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a18      	ldr	r2, [pc, #96]	@ (8003c5c <HAL_ADC_Start+0x198>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d11b      	bne.n	8003c38 <HAL_ADC_Start+0x174>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d114      	bne.n	8003c38 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	689a      	ldr	r2, [r3, #8]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003c1c:	609a      	str	r2, [r3, #8]
 8003c1e:	e00b      	b.n	8003c38 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c24:	f043 0210 	orr.w	r2, r3, #16
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c30:	f043 0201 	orr.w	r2, r3, #1
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3714      	adds	r7, #20
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	20000004 	.word	0x20000004
 8003c4c:	431bde83 	.word	0x431bde83
 8003c50:	fffff8fe 	.word	0xfffff8fe
 8003c54:	40012300 	.word	0x40012300
 8003c58:	40012000 	.word	0x40012000
 8003c5c:	40012200 	.word	0x40012200

08003c60 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d101      	bne.n	8003c76 <HAL_ADC_Stop+0x16>
 8003c72:	2302      	movs	r3, #2
 8003c74:	e01f      	b.n	8003cb6 <HAL_ADC_Stop+0x56>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	689a      	ldr	r2, [r3, #8]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 0201 	bic.w	r2, r2, #1
 8003c8c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d107      	bne.n	8003cac <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ca0:	4b08      	ldr	r3, [pc, #32]	@ (8003cc4 <HAL_ADC_Stop+0x64>)
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	f043 0201 	orr.w	r2, r3, #1
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	ffffeefe 	.word	0xffffeefe

08003cc8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ce0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ce4:	d113      	bne.n	8003d0e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003cf0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cf4:	d10b      	bne.n	8003d0e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfa:	f043 0220 	orr.w	r2, r3, #32
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e063      	b.n	8003dd6 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003d0e:	f7ff fe65 	bl	80039dc <HAL_GetTick>
 8003d12:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003d14:	e021      	b.n	8003d5a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d1c:	d01d      	beq.n	8003d5a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d007      	beq.n	8003d34 <HAL_ADC_PollForConversion+0x6c>
 8003d24:	f7ff fe5a 	bl	80039dc <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d212      	bcs.n	8003d5a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d00b      	beq.n	8003d5a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d46:	f043 0204 	orr.w	r2, r3, #4
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e03d      	b.n	8003dd6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d1d6      	bne.n	8003d16 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f06f 0212 	mvn.w	r2, #18
 8003d70:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d76:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d123      	bne.n	8003dd4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d11f      	bne.n	8003dd4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d006      	beq.n	8003db0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d111      	bne.n	8003dd4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d105      	bne.n	8003dd4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dcc:	f043 0201 	orr.w	r2, r3, #1
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003dde:	b480      	push	{r7}
 8003de0:	b083      	sub	sp, #12
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003e02:	2300      	movs	r3, #0
 8003e04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d101      	bne.n	8003e14 <HAL_ADC_ConfigChannel+0x1c>
 8003e10:	2302      	movs	r3, #2
 8003e12:	e13a      	b.n	800408a <HAL_ADC_ConfigChannel+0x292>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2b09      	cmp	r3, #9
 8003e22:	d93a      	bls.n	8003e9a <HAL_ADC_ConfigChannel+0xa2>
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e2c:	d035      	beq.n	8003e9a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68d9      	ldr	r1, [r3, #12]
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	4413      	add	r3, r2
 8003e42:	3b1e      	subs	r3, #30
 8003e44:	2207      	movs	r2, #7
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	43da      	mvns	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	400a      	ands	r2, r1
 8003e52:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a8f      	ldr	r2, [pc, #572]	@ (8004098 <HAL_ADC_ConfigChannel+0x2a0>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d10a      	bne.n	8003e74 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68d9      	ldr	r1, [r3, #12]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	061a      	lsls	r2, r3, #24
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e72:	e039      	b.n	8003ee8 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68d9      	ldr	r1, [r3, #12]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	689a      	ldr	r2, [r3, #8]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	4618      	mov	r0, r3
 8003e86:	4603      	mov	r3, r0
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	4403      	add	r3, r0
 8003e8c:	3b1e      	subs	r3, #30
 8003e8e:	409a      	lsls	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	430a      	orrs	r2, r1
 8003e96:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e98:	e026      	b.n	8003ee8 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	6919      	ldr	r1, [r3, #16]
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	005b      	lsls	r3, r3, #1
 8003eac:	4413      	add	r3, r2
 8003eae:	f003 031f 	and.w	r3, r3, #31
 8003eb2:	2207      	movs	r2, #7
 8003eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb8:	43da      	mvns	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	400a      	ands	r2, r1
 8003ec0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6919      	ldr	r1, [r3, #16]
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	689a      	ldr	r2, [r3, #8]
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	4403      	add	r3, r0
 8003eda:	f003 031f 	and.w	r3, r3, #31
 8003ede:	409a      	lsls	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	2b06      	cmp	r3, #6
 8003eee:	d824      	bhi.n	8003f3a <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	4613      	mov	r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4413      	add	r3, r2
 8003f00:	3b05      	subs	r3, #5
 8003f02:	221f      	movs	r2, #31
 8003f04:	fa02 f303 	lsl.w	r3, r2, r3
 8003f08:	43da      	mvns	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	400a      	ands	r2, r1
 8003f10:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	4618      	mov	r0, r3
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	4613      	mov	r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	4413      	add	r3, r2
 8003f2a:	3b05      	subs	r3, #5
 8003f2c:	fa00 f203 	lsl.w	r2, r0, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	430a      	orrs	r2, r1
 8003f36:	635a      	str	r2, [r3, #52]	@ 0x34
 8003f38:	e04c      	b.n	8003fd4 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2b0c      	cmp	r3, #12
 8003f40:	d824      	bhi.n	8003f8c <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4413      	add	r3, r2
 8003f52:	3b23      	subs	r3, #35	@ 0x23
 8003f54:	221f      	movs	r2, #31
 8003f56:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5a:	43da      	mvns	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	400a      	ands	r2, r1
 8003f62:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	4618      	mov	r0, r3
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	4613      	mov	r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	4413      	add	r3, r2
 8003f7c:	3b23      	subs	r3, #35	@ 0x23
 8003f7e:	fa00 f203 	lsl.w	r2, r0, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f8a:	e023      	b.n	8003fd4 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	4613      	mov	r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	4413      	add	r3, r2
 8003f9c:	3b41      	subs	r3, #65	@ 0x41
 8003f9e:	221f      	movs	r2, #31
 8003fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa4:	43da      	mvns	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	400a      	ands	r2, r1
 8003fac:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	4618      	mov	r0, r3
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	4413      	add	r3, r2
 8003fc6:	3b41      	subs	r3, #65	@ 0x41
 8003fc8:	fa00 f203 	lsl.w	r2, r0, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a30      	ldr	r2, [pc, #192]	@ (800409c <HAL_ADC_ConfigChannel+0x2a4>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d10a      	bne.n	8003ff4 <HAL_ADC_ConfigChannel+0x1fc>
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003fe6:	d105      	bne.n	8003ff4 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003fe8:	4b2d      	ldr	r3, [pc, #180]	@ (80040a0 <HAL_ADC_ConfigChannel+0x2a8>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	4a2c      	ldr	r2, [pc, #176]	@ (80040a0 <HAL_ADC_ConfigChannel+0x2a8>)
 8003fee:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003ff2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a28      	ldr	r2, [pc, #160]	@ (800409c <HAL_ADC_ConfigChannel+0x2a4>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d10f      	bne.n	800401e <HAL_ADC_ConfigChannel+0x226>
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2b12      	cmp	r3, #18
 8004004:	d10b      	bne.n	800401e <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8004006:	4b26      	ldr	r3, [pc, #152]	@ (80040a0 <HAL_ADC_ConfigChannel+0x2a8>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	4a25      	ldr	r2, [pc, #148]	@ (80040a0 <HAL_ADC_ConfigChannel+0x2a8>)
 800400c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004010:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004012:	4b23      	ldr	r3, [pc, #140]	@ (80040a0 <HAL_ADC_ConfigChannel+0x2a8>)
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	4a22      	ldr	r2, [pc, #136]	@ (80040a0 <HAL_ADC_ConfigChannel+0x2a8>)
 8004018:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800401c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a1e      	ldr	r2, [pc, #120]	@ (800409c <HAL_ADC_ConfigChannel+0x2a4>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d12b      	bne.n	8004080 <HAL_ADC_ConfigChannel+0x288>
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a1a      	ldr	r2, [pc, #104]	@ (8004098 <HAL_ADC_ConfigChannel+0x2a0>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d003      	beq.n	800403a <HAL_ADC_ConfigChannel+0x242>
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2b11      	cmp	r3, #17
 8004038:	d122      	bne.n	8004080 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800403a:	4b19      	ldr	r3, [pc, #100]	@ (80040a0 <HAL_ADC_ConfigChannel+0x2a8>)
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	4a18      	ldr	r2, [pc, #96]	@ (80040a0 <HAL_ADC_ConfigChannel+0x2a8>)
 8004040:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004044:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004046:	4b16      	ldr	r3, [pc, #88]	@ (80040a0 <HAL_ADC_ConfigChannel+0x2a8>)
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	4a15      	ldr	r2, [pc, #84]	@ (80040a0 <HAL_ADC_ConfigChannel+0x2a8>)
 800404c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004050:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a10      	ldr	r2, [pc, #64]	@ (8004098 <HAL_ADC_ConfigChannel+0x2a0>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d111      	bne.n	8004080 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800405c:	4b11      	ldr	r3, [pc, #68]	@ (80040a4 <HAL_ADC_ConfigChannel+0x2ac>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a11      	ldr	r2, [pc, #68]	@ (80040a8 <HAL_ADC_ConfigChannel+0x2b0>)
 8004062:	fba2 2303 	umull	r2, r3, r2, r3
 8004066:	0c9a      	lsrs	r2, r3, #18
 8004068:	4613      	mov	r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4413      	add	r3, r2
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004072:	e002      	b.n	800407a <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	3b01      	subs	r3, #1
 8004078:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1f9      	bne.n	8004074 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3714      	adds	r7, #20
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	10000012 	.word	0x10000012
 800409c:	40012000 	.word	0x40012000
 80040a0:	40012300 	.word	0x40012300
 80040a4:	20000004 	.word	0x20000004
 80040a8:	431bde83 	.word	0x431bde83

080040ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80040b4:	4b78      	ldr	r3, [pc, #480]	@ (8004298 <ADC_Init+0x1ec>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	4a77      	ldr	r2, [pc, #476]	@ (8004298 <ADC_Init+0x1ec>)
 80040ba:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80040be:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80040c0:	4b75      	ldr	r3, [pc, #468]	@ (8004298 <ADC_Init+0x1ec>)
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	4973      	ldr	r1, [pc, #460]	@ (8004298 <ADC_Init+0x1ec>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	685a      	ldr	r2, [r3, #4]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80040dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	6859      	ldr	r1, [r3, #4]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	021a      	lsls	r2, r3, #8
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004100:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	6859      	ldr	r1, [r3, #4]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689a      	ldr	r2, [r3, #8]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	430a      	orrs	r2, r1
 8004112:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689a      	ldr	r2, [r3, #8]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004122:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	6899      	ldr	r1, [r3, #8]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68da      	ldr	r2, [r3, #12]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800413a:	4a58      	ldr	r2, [pc, #352]	@ (800429c <ADC_Init+0x1f0>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d022      	beq.n	8004186 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689a      	ldr	r2, [r3, #8]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800414e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6899      	ldr	r1, [r3, #8]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	430a      	orrs	r2, r1
 8004160:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	689a      	ldr	r2, [r3, #8]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004170:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	6899      	ldr	r1, [r3, #8]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	430a      	orrs	r2, r1
 8004182:	609a      	str	r2, [r3, #8]
 8004184:	e00f      	b.n	80041a6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	689a      	ldr	r2, [r3, #8]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004194:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	689a      	ldr	r2, [r3, #8]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80041a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	689a      	ldr	r2, [r3, #8]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 0202 	bic.w	r2, r2, #2
 80041b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	6899      	ldr	r1, [r3, #8]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	005a      	lsls	r2, r3, #1
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	430a      	orrs	r2, r1
 80041c8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d01b      	beq.n	800420c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041e2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80041f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6859      	ldr	r1, [r3, #4]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fe:	3b01      	subs	r3, #1
 8004200:	035a      	lsls	r2, r3, #13
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	605a      	str	r2, [r3, #4]
 800420a:	e007      	b.n	800421c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	685a      	ldr	r2, [r3, #4]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800421a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800422a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	3b01      	subs	r3, #1
 8004238:	051a      	lsls	r2, r3, #20
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	430a      	orrs	r2, r1
 8004240:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689a      	ldr	r2, [r3, #8]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004250:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	6899      	ldr	r1, [r3, #8]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800425e:	025a      	lsls	r2, r3, #9
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	430a      	orrs	r2, r1
 8004266:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689a      	ldr	r2, [r3, #8]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004276:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	6899      	ldr	r1, [r3, #8]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	029a      	lsls	r2, r3, #10
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	430a      	orrs	r2, r1
 800428a:	609a      	str	r2, [r3, #8]
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr
 8004298:	40012300 	.word	0x40012300
 800429c:	0f000001 	.word	0x0f000001

080042a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f003 0307 	and.w	r3, r3, #7
 80042ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042b0:	4b0b      	ldr	r3, [pc, #44]	@ (80042e0 <__NVIC_SetPriorityGrouping+0x40>)
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80042bc:	4013      	ands	r3, r2
 80042be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80042c8:	4b06      	ldr	r3, [pc, #24]	@ (80042e4 <__NVIC_SetPriorityGrouping+0x44>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042ce:	4a04      	ldr	r2, [pc, #16]	@ (80042e0 <__NVIC_SetPriorityGrouping+0x40>)
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	60d3      	str	r3, [r2, #12]
}
 80042d4:	bf00      	nop
 80042d6:	3714      	adds	r7, #20
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr
 80042e0:	e000ed00 	.word	0xe000ed00
 80042e4:	05fa0000 	.word	0x05fa0000

080042e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042e8:	b480      	push	{r7}
 80042ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042ec:	4b04      	ldr	r3, [pc, #16]	@ (8004300 <__NVIC_GetPriorityGrouping+0x18>)
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	0a1b      	lsrs	r3, r3, #8
 80042f2:	f003 0307 	and.w	r3, r3, #7
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr
 8004300:	e000ed00 	.word	0xe000ed00

08004304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	4603      	mov	r3, r0
 800430c:	6039      	str	r1, [r7, #0]
 800430e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004314:	2b00      	cmp	r3, #0
 8004316:	db0a      	blt.n	800432e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	b2da      	uxtb	r2, r3
 800431c:	490c      	ldr	r1, [pc, #48]	@ (8004350 <__NVIC_SetPriority+0x4c>)
 800431e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004322:	0112      	lsls	r2, r2, #4
 8004324:	b2d2      	uxtb	r2, r2
 8004326:	440b      	add	r3, r1
 8004328:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800432c:	e00a      	b.n	8004344 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	b2da      	uxtb	r2, r3
 8004332:	4908      	ldr	r1, [pc, #32]	@ (8004354 <__NVIC_SetPriority+0x50>)
 8004334:	79fb      	ldrb	r3, [r7, #7]
 8004336:	f003 030f 	and.w	r3, r3, #15
 800433a:	3b04      	subs	r3, #4
 800433c:	0112      	lsls	r2, r2, #4
 800433e:	b2d2      	uxtb	r2, r2
 8004340:	440b      	add	r3, r1
 8004342:	761a      	strb	r2, [r3, #24]
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	e000e100 	.word	0xe000e100
 8004354:	e000ed00 	.word	0xe000ed00

08004358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004358:	b480      	push	{r7}
 800435a:	b089      	sub	sp, #36	@ 0x24
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f003 0307 	and.w	r3, r3, #7
 800436a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	f1c3 0307 	rsb	r3, r3, #7
 8004372:	2b04      	cmp	r3, #4
 8004374:	bf28      	it	cs
 8004376:	2304      	movcs	r3, #4
 8004378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	3304      	adds	r3, #4
 800437e:	2b06      	cmp	r3, #6
 8004380:	d902      	bls.n	8004388 <NVIC_EncodePriority+0x30>
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	3b03      	subs	r3, #3
 8004386:	e000      	b.n	800438a <NVIC_EncodePriority+0x32>
 8004388:	2300      	movs	r3, #0
 800438a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800438c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	fa02 f303 	lsl.w	r3, r2, r3
 8004396:	43da      	mvns	r2, r3
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	401a      	ands	r2, r3
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043a0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	fa01 f303 	lsl.w	r3, r1, r3
 80043aa:	43d9      	mvns	r1, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043b0:	4313      	orrs	r3, r2
         );
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3724      	adds	r7, #36	@ 0x24
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
	...

080043c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	3b01      	subs	r3, #1
 80043cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043d0:	d301      	bcc.n	80043d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043d2:	2301      	movs	r3, #1
 80043d4:	e00f      	b.n	80043f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043d6:	4a0a      	ldr	r2, [pc, #40]	@ (8004400 <SysTick_Config+0x40>)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	3b01      	subs	r3, #1
 80043dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043de:	210f      	movs	r1, #15
 80043e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80043e4:	f7ff ff8e 	bl	8004304 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043e8:	4b05      	ldr	r3, [pc, #20]	@ (8004400 <SysTick_Config+0x40>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043ee:	4b04      	ldr	r3, [pc, #16]	@ (8004400 <SysTick_Config+0x40>)
 80043f0:	2207      	movs	r2, #7
 80043f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	e000e010 	.word	0xe000e010

08004404 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f7ff ff47 	bl	80042a0 <__NVIC_SetPriorityGrouping>
}
 8004412:	bf00      	nop
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800441a:	b580      	push	{r7, lr}
 800441c:	b086      	sub	sp, #24
 800441e:	af00      	add	r7, sp, #0
 8004420:	4603      	mov	r3, r0
 8004422:	60b9      	str	r1, [r7, #8]
 8004424:	607a      	str	r2, [r7, #4]
 8004426:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004428:	2300      	movs	r3, #0
 800442a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800442c:	f7ff ff5c 	bl	80042e8 <__NVIC_GetPriorityGrouping>
 8004430:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	68b9      	ldr	r1, [r7, #8]
 8004436:	6978      	ldr	r0, [r7, #20]
 8004438:	f7ff ff8e 	bl	8004358 <NVIC_EncodePriority>
 800443c:	4602      	mov	r2, r0
 800443e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004442:	4611      	mov	r1, r2
 8004444:	4618      	mov	r0, r3
 8004446:	f7ff ff5d 	bl	8004304 <__NVIC_SetPriority>
}
 800444a:	bf00      	nop
 800444c:	3718      	adds	r7, #24
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b082      	sub	sp, #8
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f7ff ffb0 	bl	80043c0 <SysTick_Config>
 8004460:	4603      	mov	r3, r0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3708      	adds	r7, #8
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
	...

0800446c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800446c:	b480      	push	{r7}
 800446e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8004470:	f3bf 8f5f 	dmb	sy
}
 8004474:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004476:	4b07      	ldr	r3, [pc, #28]	@ (8004494 <HAL_MPU_Disable+0x28>)
 8004478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800447a:	4a06      	ldr	r2, [pc, #24]	@ (8004494 <HAL_MPU_Disable+0x28>)
 800447c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004480:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004482:	4b05      	ldr	r3, [pc, #20]	@ (8004498 <HAL_MPU_Disable+0x2c>)
 8004484:	2200      	movs	r2, #0
 8004486:	605a      	str	r2, [r3, #4]
}
 8004488:	bf00      	nop
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	e000ed00 	.word	0xe000ed00
 8004498:	e000ed90 	.word	0xe000ed90

0800449c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80044a4:	4a0b      	ldr	r2, [pc, #44]	@ (80044d4 <HAL_MPU_Enable+0x38>)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f043 0301 	orr.w	r3, r3, #1
 80044ac:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80044ae:	4b0a      	ldr	r3, [pc, #40]	@ (80044d8 <HAL_MPU_Enable+0x3c>)
 80044b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b2:	4a09      	ldr	r2, [pc, #36]	@ (80044d8 <HAL_MPU_Enable+0x3c>)
 80044b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044b8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80044ba:	f3bf 8f4f 	dsb	sy
}
 80044be:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80044c0:	f3bf 8f6f 	isb	sy
}
 80044c4:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80044c6:	bf00      	nop
 80044c8:	370c      	adds	r7, #12
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	e000ed90 	.word	0xe000ed90
 80044d8:	e000ed00 	.word	0xe000ed00

080044dc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	785a      	ldrb	r2, [r3, #1]
 80044e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004558 <HAL_MPU_ConfigRegion+0x7c>)
 80044ea:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80044ec:	4b1a      	ldr	r3, [pc, #104]	@ (8004558 <HAL_MPU_ConfigRegion+0x7c>)
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	4a19      	ldr	r2, [pc, #100]	@ (8004558 <HAL_MPU_ConfigRegion+0x7c>)
 80044f2:	f023 0301 	bic.w	r3, r3, #1
 80044f6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80044f8:	4a17      	ldr	r2, [pc, #92]	@ (8004558 <HAL_MPU_ConfigRegion+0x7c>)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	7b1b      	ldrb	r3, [r3, #12]
 8004504:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	7adb      	ldrb	r3, [r3, #11]
 800450a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800450c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	7a9b      	ldrb	r3, [r3, #10]
 8004512:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004514:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	7b5b      	ldrb	r3, [r3, #13]
 800451a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800451c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	7b9b      	ldrb	r3, [r3, #14]
 8004522:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004524:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	7bdb      	ldrb	r3, [r3, #15]
 800452a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800452c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	7a5b      	ldrb	r3, [r3, #9]
 8004532:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004534:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	7a1b      	ldrb	r3, [r3, #8]
 800453a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800453c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	7812      	ldrb	r2, [r2, #0]
 8004542:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004544:	4a04      	ldr	r2, [pc, #16]	@ (8004558 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004546:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004548:	6113      	str	r3, [r2, #16]
}
 800454a:	bf00      	nop
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	e000ed90 	.word	0xe000ed90

0800455c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e086      	b.n	800467c <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004574:	2b00      	cmp	r3, #0
 8004576:	d106      	bne.n	8004586 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2220      	movs	r2, #32
 800457c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f005 fad7 	bl	8009b34 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004586:	4b3f      	ldr	r3, [pc, #252]	@ (8004684 <HAL_ETH_Init+0x128>)
 8004588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800458a:	4a3e      	ldr	r2, [pc, #248]	@ (8004684 <HAL_ETH_Init+0x128>)
 800458c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004590:	6453      	str	r3, [r2, #68]	@ 0x44
 8004592:	4b3c      	ldr	r3, [pc, #240]	@ (8004684 <HAL_ETH_Init+0x128>)
 8004594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004596:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800459a:	60bb      	str	r3, [r7, #8]
 800459c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800459e:	4b3a      	ldr	r3, [pc, #232]	@ (8004688 <HAL_ETH_Init+0x12c>)
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	4a39      	ldr	r2, [pc, #228]	@ (8004688 <HAL_ETH_Init+0x12c>)
 80045a4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80045a8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80045aa:	4b37      	ldr	r3, [pc, #220]	@ (8004688 <HAL_ETH_Init+0x12c>)
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	4935      	ldr	r1, [pc, #212]	@ (8004688 <HAL_ETH_Init+0x12c>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80045b8:	4b33      	ldr	r3, [pc, #204]	@ (8004688 <HAL_ETH_Init+0x12c>)
 80045ba:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	6812      	ldr	r2, [r2, #0]
 80045ca:	f043 0301 	orr.w	r3, r3, #1
 80045ce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80045d2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80045d4:	f7ff fa02 	bl	80039dc <HAL_GetTick>
 80045d8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80045da:	e011      	b.n	8004600 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80045dc:	f7ff f9fe 	bl	80039dc <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80045ea:	d909      	bls.n	8004600 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2204      	movs	r2, #4
 80045f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	22e0      	movs	r2, #224	@ 0xe0
 80045f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e03d      	b.n	800467c <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1e4      	bne.n	80045dc <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 fe18 	bl	8005248 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 fec3 	bl	80053a4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 ff19 	bl	8005456 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	461a      	mov	r2, r3
 800462a:	2100      	movs	r1, #0
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 fe81 	bl	8005334 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8004640:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	4b0f      	ldr	r3, [pc, #60]	@ (800468c <HAL_ETH_Init+0x130>)
 8004650:	430b      	orrs	r3, r1
 8004652:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8004666:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2210      	movs	r2, #16
 8004676:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3710      	adds	r7, #16
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	40023800 	.word	0x40023800
 8004688:	40013800 	.word	0x40013800
 800468c:	00020060 	.word	0x00020060

08004690 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800469e:	2b10      	cmp	r3, #16
 80046a0:	d150      	bne.n	8004744 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2220      	movs	r2, #32
 80046a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2204      	movs	r2, #4
 80046ae:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 f9f9 	bl	8004aa8 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f042 0208 	orr.w	r2, r2, #8
 80046c4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80046ce:	2001      	movs	r0, #1
 80046d0:	f7ff f990 	bl	80039f4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f042 0204 	orr.w	r2, r2, #4
 80046ea:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80046f4:	2001      	movs	r0, #1
 80046f6:	f7ff f97d 	bl	80039f4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 fc3c 	bl	8004f80 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	6812      	ldr	r2, [r2, #0]
 8004716:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800471a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800471e:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	6812      	ldr	r2, [r2, #0]
 800472e:	f043 0302 	orr.w	r3, r3, #2
 8004732:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004736:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2240      	movs	r2, #64	@ 0x40
 800473c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8004740:	2300      	movs	r3, #0
 8004742:	e000      	b.n	8004746 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
  }
}
 8004746:	4618      	mov	r0, r3
 8004748:	3710      	adds	r7, #16
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b084      	sub	sp, #16
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800475c:	2b40      	cmp	r3, #64	@ 0x40
 800475e:	d14a      	bne.n	80047f6 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2220      	movs	r2, #32
 8004764:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	6812      	ldr	r2, [r2, #0]
 8004776:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800477a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800477e:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	6812      	ldr	r2, [r2, #0]
 800478e:	f023 0302 	bic.w	r3, r3, #2
 8004792:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004796:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f022 0204 	bic.w	r2, r2, #4
 80047a6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80047b0:	2001      	movs	r0, #1
 80047b2:	f7ff f91f 	bl	80039f4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 fbde 	bl	8004f80 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 0208 	bic.w	r2, r2, #8
 80047d2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80047dc:	2001      	movs	r0, #1
 80047de:	f7ff f909 	bl	80039f4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2210      	movs	r2, #16
 80047ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80047f2:	2300      	movs	r3, #0
 80047f4:	e000      	b.n	80047f8 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
  }
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d109      	bne.n	8004826 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004818:	f043 0201 	orr.w	r2, r3, #1
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e07c      	b.n	8004920 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800482c:	2b40      	cmp	r3, #64	@ 0x40
 800482e:	d176      	bne.n	800491e <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8004830:	2200      	movs	r2, #0
 8004832:	68b9      	ldr	r1, [r7, #8]
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f000 fe7d 	bl	8005534 <ETH_Prepare_Tx_Descriptors>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d009      	beq.n	8004854 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004846:	f043 0202 	orr.w	r2, r3, #2
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e065      	b.n	8004920 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8004854:	f3bf 8f4f 	dsb	sy
}
 8004858:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	3206      	adds	r2, #6
 8004862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004866:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800486c:	1c5a      	adds	r2, r3, #1
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	629a      	str	r2, [r3, #40]	@ 0x28
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004876:	2b03      	cmp	r3, #3
 8004878:	d904      	bls.n	8004884 <HAL_ETH_Transmit+0x84>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800487e:	1f1a      	subs	r2, r3, #4
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	3106      	adds	r1, #6
 8004890:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004894:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004898:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 800489a:	f7ff f89f 	bl	80039dc <HAL_GetTick>
 800489e:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80048a0:	e037      	b.n	8004912 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d011      	beq.n	80048d8 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ba:	f043 0208 	orr.w	r2, r3, #8
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048cc:	695a      	ldr	r2, [r3, #20]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e023      	b.n	8004920 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048de:	d018      	beq.n	8004912 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80048e0:	f7ff f87c 	bl	80039dc <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d302      	bcc.n	80048f6 <HAL_ETH_Transmit+0xf6>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10d      	bne.n	8004912 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048fc:	f043 0204 	orr.w	r2, r3, #4
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 800490c:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e006      	b.n	8004920 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	dbc3      	blt.n	80048a2 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800491a:	2300      	movs	r3, #0
 800491c:	e000      	b.n	8004920 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
  }
}
 8004920:	4618      	mov	r0, r3
 8004922:	3718      	adds	r7, #24
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b088      	sub	sp, #32
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8004932:	2300      	movs	r3, #0
 8004934:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8004936:	2300      	movs	r3, #0
 8004938:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d109      	bne.n	8004954 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004946:	f043 0201 	orr.w	r2, r3, #1
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e0a4      	b.n	8004a9e <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800495a:	2b40      	cmp	r3, #64	@ 0x40
 800495c:	d001      	beq.n	8004962 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e09d      	b.n	8004a9e <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004966:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	69fa      	ldr	r2, [r7, #28]
 800496c:	3212      	adds	r2, #18
 800496e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004972:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004978:	f1c3 0304 	rsb	r3, r3, #4
 800497c:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800497e:	e066      	b.n	8004a4e <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004988:	2b00      	cmp	r3, #0
 800498a:	d007      	beq.n	800499c <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	69da      	ldr	r2, [r3, #28]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	699a      	ldr	r2, [r3, #24]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d103      	bne.n	80049b0 <HAL_ETH_ReadData+0x88>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d03c      	beq.n	8004a2a <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d005      	beq.n	80049c8 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	0c1b      	lsrs	r3, r3, #16
 80049ce:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80049d2:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d005      	beq.n	80049ec <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80049e8:	2301      	movs	r3, #1
 80049ea:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	689a      	ldr	r2, [r3, #8]
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004a04:	461a      	mov	r2, r3
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	f005 fa55 	bl	8009eb8 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a12:	1c5a      	adds	r2, r3, #1
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	441a      	add	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	2200      	movs	r2, #0
 8004a28:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	61fb      	str	r3, [r7, #28]
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	2b03      	cmp	r3, #3
 8004a34:	d902      	bls.n	8004a3c <HAL_ETH_ReadData+0x114>
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	3b04      	subs	r3, #4
 8004a3a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	69fa      	ldr	r2, [r7, #28]
 8004a40:	3212      	adds	r2, #18
 8004a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a46:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	db06      	blt.n	8004a64 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004a56:	697a      	ldr	r2, [r7, #20]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d202      	bcs.n	8004a64 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8004a5e:	7cfb      	ldrb	r3, [r7, #19]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d08d      	beq.n	8004980 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	441a      	add	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d002      	beq.n	8004a7e <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 f815 	bl	8004aa8 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	69fa      	ldr	r2, [r7, #28]
 8004a82:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8004a84:	7cfb      	ldrb	r3, [r7, #19]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d108      	bne.n	8004a9c <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	e000      	b.n	8004a9e <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3720      	adds	r7, #32
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
	...

08004aa8 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b088      	sub	sp, #32
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004abc:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	69fa      	ldr	r2, [r7, #28]
 8004ac2:	3212      	adds	r2, #18
 8004ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ac8:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ace:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8004ad0:	e042      	b.n	8004b58 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d112      	bne.n	8004b00 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8004ada:	f107 0308 	add.w	r3, r7, #8
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f005 f9ba 	bl	8009e58 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d102      	bne.n	8004af0 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8004aea:	2300      	movs	r3, #0
 8004aec:	74fb      	strb	r3, [r7, #19]
 8004aee:	e007      	b.n	8004b00 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	461a      	mov	r2, r3
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	461a      	mov	r2, r3
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8004b00:	7cfb      	ldrb	r3, [r7, #19]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d028      	beq.n	8004b58 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d106      	bne.n	8004b1c <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	695a      	ldr	r2, [r3, #20]
 8004b12:	4b26      	ldr	r3, [pc, #152]	@ (8004bac <ETH_UpdateDescriptor+0x104>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	6053      	str	r3, [r2, #4]
 8004b1a:	e005      	b.n	8004b28 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	695b      	ldr	r3, [r3, #20]
 8004b20:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	3301      	adds	r3, #1
 8004b38:	61fb      	str	r3, [r7, #28]
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	2b03      	cmp	r3, #3
 8004b3e:	d902      	bls.n	8004b46 <ETH_UpdateDescriptor+0x9e>
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	3b04      	subs	r3, #4
 8004b44:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	69fa      	ldr	r2, [r7, #28]
 8004b4a:	3212      	adds	r2, #18
 8004b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b50:	617b      	str	r3, [r7, #20]
      desccount--;
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	3b01      	subs	r3, #1
 8004b56:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d002      	beq.n	8004b64 <ETH_UpdateDescriptor+0xbc>
 8004b5e:	7cfb      	ldrb	r3, [r7, #19]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1b6      	bne.n	8004ad2 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b68:	69ba      	ldr	r2, [r7, #24]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d01a      	beq.n	8004ba4 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	3303      	adds	r3, #3
 8004b72:	f003 0303 	and.w	r3, r3, #3
 8004b76:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8004b78:	f3bf 8f5f 	dmb	sy
}
 8004b7c:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6919      	ldr	r1, [r3, #16]
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	4613      	mov	r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	4413      	add	r3, r2
 8004b8a:	00db      	lsls	r3, r3, #3
 8004b8c:	18ca      	adds	r2, r1, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b96:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	69fa      	ldr	r2, [r7, #28]
 8004b9c:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	69ba      	ldr	r2, [r7, #24]
 8004ba2:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8004ba4:	bf00      	nop
 8004ba6:	3720      	adds	r7, #32
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	80004000 	.word	0x80004000

08004bb0 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
 8004bbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	f003 031c 	and.w	r3, r3, #28
 8004bcc:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	02db      	lsls	r3, r3, #11
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	019b      	lsls	r3, r3, #6
 8004bde:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	f023 0302 	bic.w	r3, r3, #2
 8004bee:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	f043 0301 	orr.w	r3, r3, #1
 8004bf6:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	697a      	ldr	r2, [r7, #20]
 8004bfe:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8004c00:	f7fe feec 	bl	80039dc <HAL_GetTick>
 8004c04:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004c06:	e00d      	b.n	8004c24 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8004c08:	f7fe fee8 	bl	80039dc <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c16:	d301      	bcc.n	8004c1c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e010      	b.n	8004c3e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1ec      	bne.n	8004c08 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	461a      	mov	r2, r3
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3718      	adds	r7, #24
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b086      	sub	sp, #24
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	60f8      	str	r0, [r7, #12]
 8004c4e:	60b9      	str	r1, [r7, #8]
 8004c50:	607a      	str	r2, [r7, #4]
 8004c52:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	f003 031c 	and.w	r3, r3, #28
 8004c62:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	02db      	lsls	r3, r3, #11
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	019b      	lsls	r3, r3, #6
 8004c74:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	f043 0302 	orr.w	r3, r3, #2
 8004c84:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	f043 0301 	orr.w	r3, r3, #1
 8004c8c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ca0:	f7fe fe9c 	bl	80039dc <HAL_GetTick>
 8004ca4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004ca6:	e00d      	b.n	8004cc4 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8004ca8:	f7fe fe98 	bl	80039dc <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cb6:	d301      	bcc.n	8004cbc <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e009      	b.n	8004cd0 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1ec      	bne.n	8004ca8 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3718      	adds	r7, #24
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d101      	bne.n	8004cec <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e0e6      	b.n	8004eba <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0310 	and.w	r3, r3, #16
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	bf14      	ite	ne
 8004cfa:	2301      	movne	r3, #1
 8004cfc:	2300      	moveq	r3, #0
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	461a      	mov	r2, r3
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	bf0c      	ite	eq
 8004d24:	2301      	moveq	r3, #1
 8004d26:	2300      	movne	r3, #0
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	bf14      	ite	ne
 8004d40:	2301      	movne	r3, #1
 8004d42:	2300      	moveq	r3, #0
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	bf0c      	ite	eq
 8004d5a:	2301      	moveq	r3, #1
 8004d5c:	2300      	movne	r3, #0
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	461a      	mov	r2, r3
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	bf14      	ite	ne
 8004d74:	2301      	movne	r3, #1
 8004d76:	2300      	moveq	r3, #0
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	bf0c      	ite	eq
 8004daa:	2301      	moveq	r3, #1
 8004dac:	2300      	movne	r3, #0
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	461a      	mov	r2, r3
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	bf0c      	ite	eq
 8004dc4:	2301      	moveq	r3, #1
 8004dc6:	2300      	movne	r3, #0
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	461a      	mov	r2, r3
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	bf14      	ite	ne
 8004dde:	2301      	movne	r3, #1
 8004de0:	2300      	moveq	r3, #0
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	461a      	mov	r2, r3
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	bf14      	ite	ne
 8004e06:	2301      	movne	r3, #1
 8004e08:	2300      	moveq	r3, #0
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	bf14      	ite	ne
 8004e20:	2301      	movne	r3, #1
 8004e22:	2300      	moveq	r3, #0
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	461a      	mov	r2, r3
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	bf14      	ite	ne
 8004e3a:	2301      	movne	r3, #1
 8004e3c:	2300      	moveq	r3, #0
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	461a      	mov	r2, r3
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	bf0c      	ite	eq
 8004e56:	2301      	moveq	r3, #1
 8004e58:	2300      	movne	r3, #0
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	0c1b      	lsrs	r3, r3, #16
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	f003 0304 	and.w	r3, r3, #4
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	bf14      	ite	ne
 8004e8e:	2301      	movne	r3, #1
 8004e90:	2300      	moveq	r3, #0
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	461a      	mov	r2, r3
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	bf14      	ite	ne
 8004eaa:	2301      	movne	r3, #1
 8004eac:	2300      	moveq	r3, #0
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	370c      	adds	r7, #12
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b082      	sub	sp, #8
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
 8004ece:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e00b      	b.n	8004ef2 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ee0:	2b10      	cmp	r3, #16
 8004ee2:	d105      	bne.n	8004ef0 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8004ee4:	6839      	ldr	r1, [r7, #0]
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 f870 	bl	8004fcc <ETH_SetMACConfig>

    return HAL_OK;
 8004eec:	2300      	movs	r3, #0
 8004eee:	e000      	b.n	8004ef2 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
  }
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
	...

08004efc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f023 031c 	bic.w	r3, r3, #28
 8004f12:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004f14:	f002 fa02 	bl	800731c <HAL_RCC_GetHCLKFreq>
 8004f18:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	4a14      	ldr	r2, [pc, #80]	@ (8004f70 <HAL_ETH_SetMDIOClockRange+0x74>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d804      	bhi.n	8004f2c <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f043 0308 	orr.w	r3, r3, #8
 8004f28:	60fb      	str	r3, [r7, #12]
 8004f2a:	e019      	b.n	8004f60 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	4a11      	ldr	r2, [pc, #68]	@ (8004f74 <HAL_ETH_SetMDIOClockRange+0x78>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d204      	bcs.n	8004f3e <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f043 030c 	orr.w	r3, r3, #12
 8004f3a:	60fb      	str	r3, [r7, #12]
 8004f3c:	e010      	b.n	8004f60 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	4a0d      	ldr	r2, [pc, #52]	@ (8004f78 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d90c      	bls.n	8004f60 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	4a0c      	ldr	r2, [pc, #48]	@ (8004f7c <HAL_ETH_SetMDIOClockRange+0x80>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d804      	bhi.n	8004f58 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f043 0304 	orr.w	r3, r3, #4
 8004f54:	60fb      	str	r3, [r7, #12]
 8004f56:	e003      	b.n	8004f60 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f043 0310 	orr.w	r3, r3, #16
 8004f5e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	611a      	str	r2, [r3, #16]
}
 8004f68:	bf00      	nop
 8004f6a:	3710      	adds	r7, #16
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	02160ebf 	.word	0x02160ebf
 8004f74:	03938700 	.word	0x03938700
 8004f78:	05f5e0ff 	.word	0x05f5e0ff
 8004f7c:	08f0d17f 	.word	0x08f0d17f

08004f80 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	6812      	ldr	r2, [r2, #0]
 8004f9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f9e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004fa2:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004fb0:	2001      	movs	r0, #1
 8004fb2:	f7fe fd1f 	bl	80039f4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004fc0:	6193      	str	r3, [r2, #24]
}
 8004fc2:	bf00      	nop
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
	...

08004fcc <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	4b53      	ldr	r3, [pc, #332]	@ (8005130 <ETH_SetMACConfig+0x164>)
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	7b9b      	ldrb	r3, [r3, #14]
 8004fea:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004fec:	683a      	ldr	r2, [r7, #0]
 8004fee:	7c12      	ldrb	r2, [r2, #16]
 8004ff0:	2a00      	cmp	r2, #0
 8004ff2:	d102      	bne.n	8004ffa <ETH_SetMACConfig+0x2e>
 8004ff4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004ff8:	e000      	b.n	8004ffc <ETH_SetMACConfig+0x30>
 8004ffa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004ffc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004ffe:	683a      	ldr	r2, [r7, #0]
 8005000:	7c52      	ldrb	r2, [r2, #17]
 8005002:	2a00      	cmp	r2, #0
 8005004:	d102      	bne.n	800500c <ETH_SetMACConfig+0x40>
 8005006:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800500a:	e000      	b.n	800500e <ETH_SetMACConfig+0x42>
 800500c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800500e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8005014:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	7fdb      	ldrb	r3, [r3, #31]
 800501a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800501c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8005022:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8005024:	683a      	ldr	r2, [r7, #0]
 8005026:	7f92      	ldrb	r2, [r2, #30]
 8005028:	2a00      	cmp	r2, #0
 800502a:	d102      	bne.n	8005032 <ETH_SetMACConfig+0x66>
 800502c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005030:	e000      	b.n	8005034 <ETH_SetMACConfig+0x68>
 8005032:	2200      	movs	r2, #0
                        macconf->Speed |
 8005034:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	7f1b      	ldrb	r3, [r3, #28]
 800503a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800503c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8005042:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	791b      	ldrb	r3, [r3, #4]
 8005048:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800504a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800504c:	683a      	ldr	r2, [r7, #0]
 800504e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005052:	2a00      	cmp	r2, #0
 8005054:	d102      	bne.n	800505c <ETH_SetMACConfig+0x90>
 8005056:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800505a:	e000      	b.n	800505e <ETH_SetMACConfig+0x92>
 800505c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800505e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	7bdb      	ldrb	r3, [r3, #15]
 8005064:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8005066:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800506c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005074:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8005076:	4313      	orrs	r3, r2
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	4313      	orrs	r3, r2
 800507c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800508e:	2001      	movs	r0, #1
 8005090:	f7fe fcb0 	bl	80039f4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80050aa:	4013      	ands	r3, r2
 80050ac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050b2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80050b4:	683a      	ldr	r2, [r7, #0]
 80050b6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80050ba:	2a00      	cmp	r2, #0
 80050bc:	d101      	bne.n	80050c2 <ETH_SetMACConfig+0xf6>
 80050be:	2280      	movs	r2, #128	@ 0x80
 80050c0:	e000      	b.n	80050c4 <ETH_SetMACConfig+0xf8>
 80050c2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80050c4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80050ca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80050cc:	683a      	ldr	r2, [r7, #0]
 80050ce:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80050d2:	2a01      	cmp	r2, #1
 80050d4:	d101      	bne.n	80050da <ETH_SetMACConfig+0x10e>
 80050d6:	2208      	movs	r2, #8
 80050d8:	e000      	b.n	80050dc <ETH_SetMACConfig+0x110>
 80050da:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80050dc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80050de:	683a      	ldr	r2, [r7, #0]
 80050e0:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80050e4:	2a01      	cmp	r2, #1
 80050e6:	d101      	bne.n	80050ec <ETH_SetMACConfig+0x120>
 80050e8:	2204      	movs	r2, #4
 80050ea:	e000      	b.n	80050ee <ETH_SetMACConfig+0x122>
 80050ec:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80050ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80050f0:	683a      	ldr	r2, [r7, #0]
 80050f2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80050f6:	2a01      	cmp	r2, #1
 80050f8:	d101      	bne.n	80050fe <ETH_SetMACConfig+0x132>
 80050fa:	2202      	movs	r2, #2
 80050fc:	e000      	b.n	8005100 <ETH_SetMACConfig+0x134>
 80050fe:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005100:	4313      	orrs	r3, r2
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	4313      	orrs	r3, r2
 8005106:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005118:	2001      	movs	r0, #1
 800511a:	f7fe fc6b 	bl	80039f4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	619a      	str	r2, [r3, #24]
}
 8005126:	bf00      	nop
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	fd20810f 	.word	0xfd20810f

08005134 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005146:	699b      	ldr	r3, [r3, #24]
 8005148:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	4b3d      	ldr	r3, [pc, #244]	@ (8005244 <ETH_SetDMAConfig+0x110>)
 800514e:	4013      	ands	r3, r2
 8005150:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	7b1b      	ldrb	r3, [r3, #12]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d102      	bne.n	8005160 <ETH_SetDMAConfig+0x2c>
 800515a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800515e:	e000      	b.n	8005162 <ETH_SetDMAConfig+0x2e>
 8005160:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	7b5b      	ldrb	r3, [r3, #13]
 8005166:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005168:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800516a:	683a      	ldr	r2, [r7, #0]
 800516c:	7f52      	ldrb	r2, [r2, #29]
 800516e:	2a00      	cmp	r2, #0
 8005170:	d102      	bne.n	8005178 <ETH_SetDMAConfig+0x44>
 8005172:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005176:	e000      	b.n	800517a <ETH_SetDMAConfig+0x46>
 8005178:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800517a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	7b9b      	ldrb	r3, [r3, #14]
 8005180:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8005182:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005188:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	7f1b      	ldrb	r3, [r3, #28]
 800518e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8005190:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	7f9b      	ldrb	r3, [r3, #30]
 8005196:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8005198:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800519e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80051a6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80051a8:	4313      	orrs	r3, r2
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051b8:	461a      	mov	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80051ca:	2001      	movs	r0, #1
 80051cc:	f7fe fc12 	bl	80039f4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051d8:	461a      	mov	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	791b      	ldrb	r3, [r3, #4]
 80051e2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80051e8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80051ee:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80051f4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80051fc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80051fe:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005204:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005206:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800520c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	6812      	ldr	r2, [r2, #0]
 8005212:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005216:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800521a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005228:	2001      	movs	r0, #1
 800522a:	f7fe fbe3 	bl	80039f4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005236:	461a      	mov	r2, r3
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6013      	str	r3, [r2, #0]
}
 800523c:	bf00      	nop
 800523e:	3710      	adds	r7, #16
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	f8de3f23 	.word	0xf8de3f23

08005248 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b0a6      	sub	sp, #152	@ 0x98
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8005250:	2301      	movs	r3, #1
 8005252:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8005256:	2301      	movs	r3, #1
 8005258:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800525c:	2300      	movs	r3, #0
 800525e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005260:	2300      	movs	r3, #0
 8005262:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8005266:	2301      	movs	r3, #1
 8005268:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800526c:	2300      	movs	r3, #0
 800526e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005272:	2301      	movs	r3, #1
 8005274:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8005278:	2301      	movs	r3, #1
 800527a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800527e:	2300      	movs	r3, #0
 8005280:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8005284:	2300      	movs	r3, #0
 8005286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800528a:	2300      	movs	r3, #0
 800528c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800528e:	2300      	movs	r3, #0
 8005290:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8005294:	2300      	movs	r3, #0
 8005296:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8005298:	2300      	movs	r3, #0
 800529a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800529e:	2300      	movs	r3, #0
 80052a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80052a4:	2300      	movs	r3, #0
 80052a6:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80052aa:	2300      	movs	r3, #0
 80052ac:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80052b0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80052b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80052b6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80052ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80052bc:	2300      	movs	r3, #0
 80052be:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80052c2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80052c6:	4619      	mov	r1, r3
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f7ff fe7f 	bl	8004fcc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80052ce:	2301      	movs	r3, #1
 80052d0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80052d2:	2301      	movs	r3, #1
 80052d4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80052d6:	2301      	movs	r3, #1
 80052d8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80052dc:	2301      	movs	r3, #1
 80052de:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80052e0:	2300      	movs	r3, #0
 80052e2:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80052e4:	2300      	movs	r3, #0
 80052e6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80052ea:	2300      	movs	r3, #0
 80052ec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80052f0:	2300      	movs	r3, #0
 80052f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80052f4:	2301      	movs	r3, #1
 80052f6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80052fa:	2301      	movs	r3, #1
 80052fc:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80052fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005302:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005304:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005308:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800530a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800530e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8005310:	2301      	movs	r3, #1
 8005312:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8005316:	2300      	movs	r3, #0
 8005318:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800531a:	2300      	movs	r3, #0
 800531c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800531e:	f107 0308 	add.w	r3, r7, #8
 8005322:	4619      	mov	r1, r3
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f7ff ff05 	bl	8005134 <ETH_SetDMAConfig>
}
 800532a:	bf00      	nop
 800532c:	3798      	adds	r7, #152	@ 0x98
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
	...

08005334 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005334:	b480      	push	{r7}
 8005336:	b087      	sub	sp, #28
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	3305      	adds	r3, #5
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	021b      	lsls	r3, r3, #8
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	3204      	adds	r2, #4
 800534c:	7812      	ldrb	r2, [r2, #0]
 800534e:	4313      	orrs	r3, r2
 8005350:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8005352:	68ba      	ldr	r2, [r7, #8]
 8005354:	4b11      	ldr	r3, [pc, #68]	@ (800539c <ETH_MACAddressConfig+0x68>)
 8005356:	4413      	add	r3, r2
 8005358:	461a      	mov	r2, r3
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	3303      	adds	r3, #3
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	061a      	lsls	r2, r3, #24
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	3302      	adds	r3, #2
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	041b      	lsls	r3, r3, #16
 800536e:	431a      	orrs	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	3301      	adds	r3, #1
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	021b      	lsls	r3, r3, #8
 8005378:	4313      	orrs	r3, r2
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	7812      	ldrb	r2, [r2, #0]
 800537e:	4313      	orrs	r3, r2
 8005380:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8005382:	68ba      	ldr	r2, [r7, #8]
 8005384:	4b06      	ldr	r3, [pc, #24]	@ (80053a0 <ETH_MACAddressConfig+0x6c>)
 8005386:	4413      	add	r3, r2
 8005388:	461a      	mov	r2, r3
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	6013      	str	r3, [r2, #0]
}
 800538e:	bf00      	nop
 8005390:	371c      	adds	r7, #28
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	40028040 	.word	0x40028040
 80053a0:	40028044 	.word	0x40028044

080053a4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80053ac:	2300      	movs	r3, #0
 80053ae:	60fb      	str	r3, [r7, #12]
 80053b0:	e03e      	b.n	8005430 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68d9      	ldr	r1, [r3, #12]
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	4613      	mov	r3, r2
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	4413      	add	r3, r2
 80053be:	00db      	lsls	r3, r3, #3
 80053c0:	440b      	add	r3, r1
 80053c2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	2200      	movs	r2, #0
 80053c8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	2200      	movs	r2, #0
 80053ce:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	2200      	movs	r2, #0
 80053d4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	2200      	movs	r2, #0
 80053da:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80053dc:	68b9      	ldr	r1, [r7, #8]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68fa      	ldr	r2, [r7, #12]
 80053e2:	3206      	adds	r2, #6
 80053e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d80c      	bhi.n	8005414 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	68d9      	ldr	r1, [r3, #12]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	1c5a      	adds	r2, r3, #1
 8005402:	4613      	mov	r3, r2
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	4413      	add	r3, r2
 8005408:	00db      	lsls	r3, r3, #3
 800540a:	440b      	add	r3, r1
 800540c:	461a      	mov	r2, r3
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	60da      	str	r2, [r3, #12]
 8005412:	e004      	b.n	800541e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	461a      	mov	r2, r3
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	3301      	adds	r3, #1
 800542e:	60fb      	str	r3, [r7, #12]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2b03      	cmp	r3, #3
 8005434:	d9bd      	bls.n	80053b2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	68da      	ldr	r2, [r3, #12]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005448:	611a      	str	r2, [r3, #16]
}
 800544a:	bf00      	nop
 800544c:	3714      	adds	r7, #20
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr

08005456 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005456:	b480      	push	{r7}
 8005458:	b085      	sub	sp, #20
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800545e:	2300      	movs	r3, #0
 8005460:	60fb      	str	r3, [r7, #12]
 8005462:	e048      	b.n	80054f6 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6919      	ldr	r1, [r3, #16]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	4613      	mov	r3, r2
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	4413      	add	r3, r2
 8005470:	00db      	lsls	r3, r3, #3
 8005472:	440b      	add	r3, r1
 8005474:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	2200      	movs	r2, #0
 800547a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	2200      	movs	r2, #0
 8005480:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	2200      	movs	r2, #0
 8005486:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	2200      	movs	r2, #0
 800548c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	2200      	movs	r2, #0
 8005492:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	2200      	movs	r2, #0
 8005498:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80054a0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80054ba:	68b9      	ldr	r1, [r7, #8]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	3212      	adds	r2, #18
 80054c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d80c      	bhi.n	80054e6 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6919      	ldr	r1, [r3, #16]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	1c5a      	adds	r2, r3, #1
 80054d4:	4613      	mov	r3, r2
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4413      	add	r3, r2
 80054da:	00db      	lsls	r3, r3, #3
 80054dc:	440b      	add	r3, r1
 80054de:	461a      	mov	r2, r3
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	60da      	str	r2, [r3, #12]
 80054e4:	e004      	b.n	80054f0 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	461a      	mov	r2, r3
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	3301      	adds	r3, #1
 80054f4:	60fb      	str	r3, [r7, #12]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2b03      	cmp	r3, #3
 80054fa:	d9b3      	bls.n	8005464 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	691a      	ldr	r2, [r3, #16]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005526:	60da      	str	r2, [r3, #12]
}
 8005528:	bf00      	nop
 800552a:	3714      	adds	r7, #20
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8005534:	b480      	push	{r7}
 8005536:	b091      	sub	sp, #68	@ 0x44
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	3318      	adds	r3, #24
 8005544:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8005546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800554c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8005552:	2300      	movs	r3, #0
 8005554:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005558:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800555a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800555e:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8005566:	2300      	movs	r3, #0
 8005568:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800556a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005572:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005576:	d007      	beq.n	8005588 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005578:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800557a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800557c:	3304      	adds	r3, #4
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	4413      	add	r3, r2
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d001      	beq.n	800558c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8005588:	2302      	movs	r3, #2
 800558a:	e111      	b.n	80057b0 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 800558c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800558e:	3301      	adds	r3, #1
 8005590:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8005592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	461a      	mov	r2, r3
 8005598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800559a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800559c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800559e:	685a      	ldr	r2, [r3, #4]
 80055a0:	4b86      	ldr	r3, [pc, #536]	@ (80057bc <ETH_Prepare_Tx_Descriptors+0x288>)
 80055a2:	4013      	ands	r3, r2
 80055a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055a6:	6852      	ldr	r2, [r2, #4]
 80055a8:	431a      	orrs	r2, r3
 80055aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ac:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d008      	beq.n	80055cc <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80055ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	431a      	orrs	r2, r3
 80055c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ca:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0320 	and.w	r3, r3, #32
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d008      	beq.n	80055ea <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80055d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	431a      	orrs	r2, r3
 80055e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e8:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0304 	and.w	r3, r3, #4
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d005      	beq.n	8005602 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80055f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80055fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005600:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8005602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800560a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800560c:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800560e:	e082      	b.n	8005716 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8005610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800561a:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d006      	beq.n	8005630 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800562a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800562c:	601a      	str	r2, [r3, #0]
 800562e:	e005      	b.n	800563c <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800563a:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800563c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800563e:	3301      	adds	r3, #1
 8005640:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005642:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005644:	2b03      	cmp	r3, #3
 8005646:	d902      	bls.n	800564e <ETH_Prepare_Tx_Descriptors+0x11a>
 8005648:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800564a:	3b04      	subs	r3, #4
 800564c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800564e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005650:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005656:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8005658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005660:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005664:	d007      	beq.n	8005676 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005666:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005668:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800566a:	3304      	adds	r3, #4
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4413      	add	r3, r2
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d029      	beq.n	80056ca <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8005676:	6a3b      	ldr	r3, [r7, #32]
 8005678:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800567a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800567c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800567e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005682:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8005684:	2300      	movs	r3, #0
 8005686:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005688:	e019      	b.n	80056be <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 800568a:	f3bf 8f5f 	dmb	sy
}
 800568e:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800569a:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800569c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800569e:	3301      	adds	r3, #1
 80056a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056a4:	2b03      	cmp	r3, #3
 80056a6:	d902      	bls.n	80056ae <ETH_Prepare_Tx_Descriptors+0x17a>
 80056a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056aa:	3b04      	subs	r3, #4
 80056ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80056ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80056b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056b6:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 80056b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ba:	3301      	adds	r3, #1
 80056bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80056be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80056c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d3e1      	bcc.n	800568a <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 80056c6:	2302      	movs	r3, #2
 80056c8:	e072      	b.n	80057b0 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80056ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80056d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d4:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 80056d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056d8:	3301      	adds	r3, #1
 80056da:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80056dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80056e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	461a      	mov	r2, r3
 80056e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ea:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80056ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	4b32      	ldr	r3, [pc, #200]	@ (80057bc <ETH_Prepare_Tx_Descriptors+0x288>)
 80056f2:	4013      	ands	r3, r2
 80056f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056f6:	6852      	ldr	r2, [r2, #4]
 80056f8:	431a      	orrs	r2, r3
 80056fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056fc:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80056fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005700:	3301      	adds	r3, #1
 8005702:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8005704:	f3bf 8f5f 	dmb	sy
}
 8005708:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800570a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005714:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8005716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	2b00      	cmp	r3, #0
 800571c:	f47f af78 	bne.w	8005610 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d006      	beq.n	8005734 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800572e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005730:	601a      	str	r2, [r3, #0]
 8005732:	e005      	b.n	8005740 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800573c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800573e:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8005740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800574a:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800574c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574e:	6a3a      	ldr	r2, [r7, #32]
 8005750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005754:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8005756:	f3bf 8f5f 	dmb	sy
}
 800575a:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800575c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005766:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8005768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800576a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800576c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800576e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005770:	3304      	adds	r3, #4
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	440b      	add	r3, r1
 8005776:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8005778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800577a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800577c:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800577e:	f3ef 8310 	mrs	r3, PRIMASK
 8005782:	613b      	str	r3, [r7, #16]
  return(result);
 8005784:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8005786:	61fb      	str	r3, [r7, #28]
 8005788:	2301      	movs	r3, #1
 800578a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	f383 8810 	msr	PRIMASK, r3
}
 8005792:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8005794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005796:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800579a:	4413      	add	r3, r2
 800579c:	1c5a      	adds	r2, r3, #1
 800579e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	f383 8810 	msr	PRIMASK, r3
}
 80057ac:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3744      	adds	r7, #68	@ 0x44
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr
 80057bc:	ffffe000 	.word	0xffffe000

080057c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b089      	sub	sp, #36	@ 0x24
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80057ca:	2300      	movs	r3, #0
 80057cc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80057ce:	2300      	movs	r3, #0
 80057d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80057d2:	2300      	movs	r3, #0
 80057d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80057d6:	2300      	movs	r3, #0
 80057d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80057da:	2300      	movs	r3, #0
 80057dc:	61fb      	str	r3, [r7, #28]
 80057de:	e175      	b.n	8005acc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80057e0:	2201      	movs	r2, #1
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	fa02 f303 	lsl.w	r3, r2, r3
 80057e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	4013      	ands	r3, r2
 80057f2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	f040 8164 	bne.w	8005ac6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	f003 0303 	and.w	r3, r3, #3
 8005806:	2b01      	cmp	r3, #1
 8005808:	d005      	beq.n	8005816 <HAL_GPIO_Init+0x56>
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f003 0303 	and.w	r3, r3, #3
 8005812:	2b02      	cmp	r3, #2
 8005814:	d130      	bne.n	8005878 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	005b      	lsls	r3, r3, #1
 8005820:	2203      	movs	r2, #3
 8005822:	fa02 f303 	lsl.w	r3, r2, r3
 8005826:	43db      	mvns	r3, r3
 8005828:	69ba      	ldr	r2, [r7, #24]
 800582a:	4013      	ands	r3, r2
 800582c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	68da      	ldr	r2, [r3, #12]
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	005b      	lsls	r3, r3, #1
 8005836:	fa02 f303 	lsl.w	r3, r2, r3
 800583a:	69ba      	ldr	r2, [r7, #24]
 800583c:	4313      	orrs	r3, r2
 800583e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800584c:	2201      	movs	r2, #1
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	fa02 f303 	lsl.w	r3, r2, r3
 8005854:	43db      	mvns	r3, r3
 8005856:	69ba      	ldr	r2, [r7, #24]
 8005858:	4013      	ands	r3, r2
 800585a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	091b      	lsrs	r3, r3, #4
 8005862:	f003 0201 	and.w	r2, r3, #1
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	fa02 f303 	lsl.w	r3, r2, r3
 800586c:	69ba      	ldr	r2, [r7, #24]
 800586e:	4313      	orrs	r3, r2
 8005870:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	69ba      	ldr	r2, [r7, #24]
 8005876:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	f003 0303 	and.w	r3, r3, #3
 8005880:	2b03      	cmp	r3, #3
 8005882:	d017      	beq.n	80058b4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	005b      	lsls	r3, r3, #1
 800588e:	2203      	movs	r2, #3
 8005890:	fa02 f303 	lsl.w	r3, r2, r3
 8005894:	43db      	mvns	r3, r3
 8005896:	69ba      	ldr	r2, [r7, #24]
 8005898:	4013      	ands	r3, r2
 800589a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	689a      	ldr	r2, [r3, #8]
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	005b      	lsls	r3, r3, #1
 80058a4:	fa02 f303 	lsl.w	r3, r2, r3
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	69ba      	ldr	r2, [r7, #24]
 80058b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f003 0303 	and.w	r3, r3, #3
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d123      	bne.n	8005908 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	08da      	lsrs	r2, r3, #3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	3208      	adds	r2, #8
 80058c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	f003 0307 	and.w	r3, r3, #7
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	220f      	movs	r2, #15
 80058d8:	fa02 f303 	lsl.w	r3, r2, r3
 80058dc:	43db      	mvns	r3, r3
 80058de:	69ba      	ldr	r2, [r7, #24]
 80058e0:	4013      	ands	r3, r2
 80058e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	691a      	ldr	r2, [r3, #16]
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	f003 0307 	and.w	r3, r3, #7
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	fa02 f303 	lsl.w	r3, r2, r3
 80058f4:	69ba      	ldr	r2, [r7, #24]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	08da      	lsrs	r2, r3, #3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	3208      	adds	r2, #8
 8005902:	69b9      	ldr	r1, [r7, #24]
 8005904:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	005b      	lsls	r3, r3, #1
 8005912:	2203      	movs	r2, #3
 8005914:	fa02 f303 	lsl.w	r3, r2, r3
 8005918:	43db      	mvns	r3, r3
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	4013      	ands	r3, r2
 800591e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f003 0203 	and.w	r2, r3, #3
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	005b      	lsls	r3, r3, #1
 800592c:	fa02 f303 	lsl.w	r3, r2, r3
 8005930:	69ba      	ldr	r2, [r7, #24]
 8005932:	4313      	orrs	r3, r2
 8005934:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	69ba      	ldr	r2, [r7, #24]
 800593a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005944:	2b00      	cmp	r3, #0
 8005946:	f000 80be 	beq.w	8005ac6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800594a:	4b66      	ldr	r3, [pc, #408]	@ (8005ae4 <HAL_GPIO_Init+0x324>)
 800594c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800594e:	4a65      	ldr	r2, [pc, #404]	@ (8005ae4 <HAL_GPIO_Init+0x324>)
 8005950:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005954:	6453      	str	r3, [r2, #68]	@ 0x44
 8005956:	4b63      	ldr	r3, [pc, #396]	@ (8005ae4 <HAL_GPIO_Init+0x324>)
 8005958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800595a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800595e:	60fb      	str	r3, [r7, #12]
 8005960:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005962:	4a61      	ldr	r2, [pc, #388]	@ (8005ae8 <HAL_GPIO_Init+0x328>)
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	089b      	lsrs	r3, r3, #2
 8005968:	3302      	adds	r3, #2
 800596a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800596e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	f003 0303 	and.w	r3, r3, #3
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	220f      	movs	r2, #15
 800597a:	fa02 f303 	lsl.w	r3, r2, r3
 800597e:	43db      	mvns	r3, r3
 8005980:	69ba      	ldr	r2, [r7, #24]
 8005982:	4013      	ands	r3, r2
 8005984:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a58      	ldr	r2, [pc, #352]	@ (8005aec <HAL_GPIO_Init+0x32c>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d037      	beq.n	80059fe <HAL_GPIO_Init+0x23e>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a57      	ldr	r2, [pc, #348]	@ (8005af0 <HAL_GPIO_Init+0x330>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d031      	beq.n	80059fa <HAL_GPIO_Init+0x23a>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a56      	ldr	r2, [pc, #344]	@ (8005af4 <HAL_GPIO_Init+0x334>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d02b      	beq.n	80059f6 <HAL_GPIO_Init+0x236>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a55      	ldr	r2, [pc, #340]	@ (8005af8 <HAL_GPIO_Init+0x338>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d025      	beq.n	80059f2 <HAL_GPIO_Init+0x232>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a54      	ldr	r2, [pc, #336]	@ (8005afc <HAL_GPIO_Init+0x33c>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d01f      	beq.n	80059ee <HAL_GPIO_Init+0x22e>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a53      	ldr	r2, [pc, #332]	@ (8005b00 <HAL_GPIO_Init+0x340>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d019      	beq.n	80059ea <HAL_GPIO_Init+0x22a>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a52      	ldr	r2, [pc, #328]	@ (8005b04 <HAL_GPIO_Init+0x344>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d013      	beq.n	80059e6 <HAL_GPIO_Init+0x226>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a51      	ldr	r2, [pc, #324]	@ (8005b08 <HAL_GPIO_Init+0x348>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d00d      	beq.n	80059e2 <HAL_GPIO_Init+0x222>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a50      	ldr	r2, [pc, #320]	@ (8005b0c <HAL_GPIO_Init+0x34c>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d007      	beq.n	80059de <HAL_GPIO_Init+0x21e>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a4f      	ldr	r2, [pc, #316]	@ (8005b10 <HAL_GPIO_Init+0x350>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d101      	bne.n	80059da <HAL_GPIO_Init+0x21a>
 80059d6:	2309      	movs	r3, #9
 80059d8:	e012      	b.n	8005a00 <HAL_GPIO_Init+0x240>
 80059da:	230a      	movs	r3, #10
 80059dc:	e010      	b.n	8005a00 <HAL_GPIO_Init+0x240>
 80059de:	2308      	movs	r3, #8
 80059e0:	e00e      	b.n	8005a00 <HAL_GPIO_Init+0x240>
 80059e2:	2307      	movs	r3, #7
 80059e4:	e00c      	b.n	8005a00 <HAL_GPIO_Init+0x240>
 80059e6:	2306      	movs	r3, #6
 80059e8:	e00a      	b.n	8005a00 <HAL_GPIO_Init+0x240>
 80059ea:	2305      	movs	r3, #5
 80059ec:	e008      	b.n	8005a00 <HAL_GPIO_Init+0x240>
 80059ee:	2304      	movs	r3, #4
 80059f0:	e006      	b.n	8005a00 <HAL_GPIO_Init+0x240>
 80059f2:	2303      	movs	r3, #3
 80059f4:	e004      	b.n	8005a00 <HAL_GPIO_Init+0x240>
 80059f6:	2302      	movs	r3, #2
 80059f8:	e002      	b.n	8005a00 <HAL_GPIO_Init+0x240>
 80059fa:	2301      	movs	r3, #1
 80059fc:	e000      	b.n	8005a00 <HAL_GPIO_Init+0x240>
 80059fe:	2300      	movs	r3, #0
 8005a00:	69fa      	ldr	r2, [r7, #28]
 8005a02:	f002 0203 	and.w	r2, r2, #3
 8005a06:	0092      	lsls	r2, r2, #2
 8005a08:	4093      	lsls	r3, r2
 8005a0a:	69ba      	ldr	r2, [r7, #24]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005a10:	4935      	ldr	r1, [pc, #212]	@ (8005ae8 <HAL_GPIO_Init+0x328>)
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	089b      	lsrs	r3, r3, #2
 8005a16:	3302      	adds	r3, #2
 8005a18:	69ba      	ldr	r2, [r7, #24]
 8005a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a1e:	4b3d      	ldr	r3, [pc, #244]	@ (8005b14 <HAL_GPIO_Init+0x354>)
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	43db      	mvns	r3, r3
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d003      	beq.n	8005a42 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005a3a:	69ba      	ldr	r2, [r7, #24]
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a42:	4a34      	ldr	r2, [pc, #208]	@ (8005b14 <HAL_GPIO_Init+0x354>)
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a48:	4b32      	ldr	r3, [pc, #200]	@ (8005b14 <HAL_GPIO_Init+0x354>)
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	43db      	mvns	r3, r3
 8005a52:	69ba      	ldr	r2, [r7, #24]
 8005a54:	4013      	ands	r3, r2
 8005a56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d003      	beq.n	8005a6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a6c:	4a29      	ldr	r2, [pc, #164]	@ (8005b14 <HAL_GPIO_Init+0x354>)
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005a72:	4b28      	ldr	r3, [pc, #160]	@ (8005b14 <HAL_GPIO_Init+0x354>)
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	43db      	mvns	r3, r3
 8005a7c:	69ba      	ldr	r2, [r7, #24]
 8005a7e:	4013      	ands	r3, r2
 8005a80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d003      	beq.n	8005a96 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005a8e:	69ba      	ldr	r2, [r7, #24]
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005a96:	4a1f      	ldr	r2, [pc, #124]	@ (8005b14 <HAL_GPIO_Init+0x354>)
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8005b14 <HAL_GPIO_Init+0x354>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	43db      	mvns	r3, r3
 8005aa6:	69ba      	ldr	r2, [r7, #24]
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d003      	beq.n	8005ac0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005ab8:	69ba      	ldr	r2, [r7, #24]
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005ac0:	4a14      	ldr	r2, [pc, #80]	@ (8005b14 <HAL_GPIO_Init+0x354>)
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	3301      	adds	r3, #1
 8005aca:	61fb      	str	r3, [r7, #28]
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	2b0f      	cmp	r3, #15
 8005ad0:	f67f ae86 	bls.w	80057e0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005ad4:	bf00      	nop
 8005ad6:	bf00      	nop
 8005ad8:	3724      	adds	r7, #36	@ 0x24
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop
 8005ae4:	40023800 	.word	0x40023800
 8005ae8:	40013800 	.word	0x40013800
 8005aec:	40020000 	.word	0x40020000
 8005af0:	40020400 	.word	0x40020400
 8005af4:	40020800 	.word	0x40020800
 8005af8:	40020c00 	.word	0x40020c00
 8005afc:	40021000 	.word	0x40021000
 8005b00:	40021400 	.word	0x40021400
 8005b04:	40021800 	.word	0x40021800
 8005b08:	40021c00 	.word	0x40021c00
 8005b0c:	40022000 	.word	0x40022000
 8005b10:	40022400 	.word	0x40022400
 8005b14:	40013c00 	.word	0x40013c00

08005b18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	460b      	mov	r3, r1
 8005b22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	691a      	ldr	r2, [r3, #16]
 8005b28:	887b      	ldrh	r3, [r7, #2]
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d002      	beq.n	8005b36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005b30:	2301      	movs	r3, #1
 8005b32:	73fb      	strb	r3, [r7, #15]
 8005b34:	e001      	b.n	8005b3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005b36:	2300      	movs	r3, #0
 8005b38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3714      	adds	r7, #20
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	460b      	mov	r3, r1
 8005b52:	807b      	strh	r3, [r7, #2]
 8005b54:	4613      	mov	r3, r2
 8005b56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005b58:	787b      	ldrb	r3, [r7, #1]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d003      	beq.n	8005b66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b5e:	887a      	ldrh	r2, [r7, #2]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005b64:	e003      	b.n	8005b6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005b66:	887b      	ldrh	r3, [r7, #2]
 8005b68:	041a      	lsls	r2, r3, #16
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	619a      	str	r2, [r3, #24]
}
 8005b6e:	bf00      	nop
 8005b70:	370c      	adds	r7, #12
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
	...

08005b7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d101      	bne.n	8005b8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e08b      	b.n	8005ca6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d106      	bne.n	8005ba8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f7fd f8aa 	bl	8002cfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2224      	movs	r2, #36	@ 0x24
 8005bac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f022 0201 	bic.w	r2, r2, #1
 8005bbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685a      	ldr	r2, [r3, #4]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005bcc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	689a      	ldr	r2, [r3, #8]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005bdc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d107      	bne.n	8005bf6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	689a      	ldr	r2, [r3, #8]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005bf2:	609a      	str	r2, [r3, #8]
 8005bf4:	e006      	b.n	8005c04 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	689a      	ldr	r2, [r3, #8]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005c02:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	d108      	bne.n	8005c1e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	685a      	ldr	r2, [r3, #4]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c1a:	605a      	str	r2, [r3, #4]
 8005c1c:	e007      	b.n	8005c2e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	685a      	ldr	r2, [r3, #4]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c2c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	6859      	ldr	r1, [r3, #4]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	4b1d      	ldr	r3, [pc, #116]	@ (8005cb0 <HAL_I2C_Init+0x134>)
 8005c3a:	430b      	orrs	r3, r1
 8005c3c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68da      	ldr	r2, [r3, #12]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005c4c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	691a      	ldr	r2, [r3, #16]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	430a      	orrs	r2, r1
 8005c66:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	69d9      	ldr	r1, [r3, #28]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a1a      	ldr	r2, [r3, #32]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	430a      	orrs	r2, r1
 8005c76:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f042 0201 	orr.w	r2, r2, #1
 8005c86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2220      	movs	r2, #32
 8005c92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3708      	adds	r7, #8
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	02008000 	.word	0x02008000

08005cb4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b088      	sub	sp, #32
 8005cb8:	af02      	add	r7, sp, #8
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	4608      	mov	r0, r1
 8005cbe:	4611      	mov	r1, r2
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	817b      	strh	r3, [r7, #10]
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	813b      	strh	r3, [r7, #8]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	2b20      	cmp	r3, #32
 8005cd8:	f040 80f9 	bne.w	8005ece <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cdc:	6a3b      	ldr	r3, [r7, #32]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d002      	beq.n	8005ce8 <HAL_I2C_Mem_Write+0x34>
 8005ce2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d105      	bne.n	8005cf4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cee:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e0ed      	b.n	8005ed0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d101      	bne.n	8005d02 <HAL_I2C_Mem_Write+0x4e>
 8005cfe:	2302      	movs	r3, #2
 8005d00:	e0e6      	b.n	8005ed0 <HAL_I2C_Mem_Write+0x21c>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005d0a:	f7fd fe67 	bl	80039dc <HAL_GetTick>
 8005d0e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	9300      	str	r3, [sp, #0]
 8005d14:	2319      	movs	r3, #25
 8005d16:	2201      	movs	r2, #1
 8005d18:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f000 fbc9 	bl	80064b4 <I2C_WaitOnFlagUntilTimeout>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d001      	beq.n	8005d2c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e0d1      	b.n	8005ed0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2221      	movs	r2, #33	@ 0x21
 8005d30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2240      	movs	r2, #64	@ 0x40
 8005d38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6a3a      	ldr	r2, [r7, #32]
 8005d46:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005d4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d54:	88f8      	ldrh	r0, [r7, #6]
 8005d56:	893a      	ldrh	r2, [r7, #8]
 8005d58:	8979      	ldrh	r1, [r7, #10]
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	9301      	str	r3, [sp, #4]
 8005d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d60:	9300      	str	r3, [sp, #0]
 8005d62:	4603      	mov	r3, r0
 8005d64:	68f8      	ldr	r0, [r7, #12]
 8005d66:	f000 fad9 	bl	800631c <I2C_RequestMemoryWrite>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d005      	beq.n	8005d7c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e0a9      	b.n	8005ed0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	2bff      	cmp	r3, #255	@ 0xff
 8005d84:	d90e      	bls.n	8005da4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	22ff      	movs	r2, #255	@ 0xff
 8005d8a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d90:	b2da      	uxtb	r2, r3
 8005d92:	8979      	ldrh	r1, [r7, #10]
 8005d94:	2300      	movs	r3, #0
 8005d96:	9300      	str	r3, [sp, #0]
 8005d98:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	f000 fd4d 	bl	800683c <I2C_TransferConfig>
 8005da2:	e00f      	b.n	8005dc4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005db2:	b2da      	uxtb	r2, r3
 8005db4:	8979      	ldrh	r1, [r7, #10]
 8005db6:	2300      	movs	r3, #0
 8005db8:	9300      	str	r3, [sp, #0]
 8005dba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005dbe:	68f8      	ldr	r0, [r7, #12]
 8005dc0:	f000 fd3c 	bl	800683c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005dc8:	68f8      	ldr	r0, [r7, #12]
 8005dca:	f000 fbcc 	bl	8006566 <I2C_WaitOnTXISFlagUntilTimeout>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d001      	beq.n	8005dd8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e07b      	b.n	8005ed0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ddc:	781a      	ldrb	r2, [r3, #0]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005de8:	1c5a      	adds	r2, r3, #1
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	3b01      	subs	r3, #1
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e00:	3b01      	subs	r3, #1
 8005e02:	b29a      	uxth	r2, r3
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d034      	beq.n	8005e7c <HAL_I2C_Mem_Write+0x1c8>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d130      	bne.n	8005e7c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	9300      	str	r3, [sp, #0]
 8005e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e20:	2200      	movs	r2, #0
 8005e22:	2180      	movs	r1, #128	@ 0x80
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f000 fb45 	bl	80064b4 <I2C_WaitOnFlagUntilTimeout>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d001      	beq.n	8005e34 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e04d      	b.n	8005ed0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	2bff      	cmp	r3, #255	@ 0xff
 8005e3c:	d90e      	bls.n	8005e5c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	22ff      	movs	r2, #255	@ 0xff
 8005e42:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e48:	b2da      	uxtb	r2, r3
 8005e4a:	8979      	ldrh	r1, [r7, #10]
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	9300      	str	r3, [sp, #0]
 8005e50:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f000 fcf1 	bl	800683c <I2C_TransferConfig>
 8005e5a:	e00f      	b.n	8005e7c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e6a:	b2da      	uxtb	r2, r3
 8005e6c:	8979      	ldrh	r1, [r7, #10]
 8005e6e:	2300      	movs	r3, #0
 8005e70:	9300      	str	r3, [sp, #0]
 8005e72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f000 fce0 	bl	800683c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d19e      	bne.n	8005dc4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e86:	697a      	ldr	r2, [r7, #20]
 8005e88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e8a:	68f8      	ldr	r0, [r7, #12]
 8005e8c:	f000 fbb2 	bl	80065f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d001      	beq.n	8005e9a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e01a      	b.n	8005ed0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2220      	movs	r2, #32
 8005ea0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	6859      	ldr	r1, [r3, #4]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	4b0a      	ldr	r3, [pc, #40]	@ (8005ed8 <HAL_I2C_Mem_Write+0x224>)
 8005eae:	400b      	ands	r3, r1
 8005eb0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2220      	movs	r2, #32
 8005eb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	e000      	b.n	8005ed0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005ece:	2302      	movs	r3, #2
  }
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3718      	adds	r7, #24
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	fe00e800 	.word	0xfe00e800

08005edc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b088      	sub	sp, #32
 8005ee0:	af02      	add	r7, sp, #8
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	4608      	mov	r0, r1
 8005ee6:	4611      	mov	r1, r2
 8005ee8:	461a      	mov	r2, r3
 8005eea:	4603      	mov	r3, r0
 8005eec:	817b      	strh	r3, [r7, #10]
 8005eee:	460b      	mov	r3, r1
 8005ef0:	813b      	strh	r3, [r7, #8]
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	2b20      	cmp	r3, #32
 8005f00:	f040 80fd 	bne.w	80060fe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f04:	6a3b      	ldr	r3, [r7, #32]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d002      	beq.n	8005f10 <HAL_I2C_Mem_Read+0x34>
 8005f0a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d105      	bne.n	8005f1c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f16:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e0f1      	b.n	8006100 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d101      	bne.n	8005f2a <HAL_I2C_Mem_Read+0x4e>
 8005f26:	2302      	movs	r3, #2
 8005f28:	e0ea      	b.n	8006100 <HAL_I2C_Mem_Read+0x224>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005f32:	f7fd fd53 	bl	80039dc <HAL_GetTick>
 8005f36:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	9300      	str	r3, [sp, #0]
 8005f3c:	2319      	movs	r3, #25
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	f000 fab5 	bl	80064b4 <I2C_WaitOnFlagUntilTimeout>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d001      	beq.n	8005f54 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e0d5      	b.n	8006100 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2222      	movs	r2, #34	@ 0x22
 8005f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2240      	movs	r2, #64	@ 0x40
 8005f60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6a3a      	ldr	r2, [r7, #32]
 8005f6e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005f74:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f7c:	88f8      	ldrh	r0, [r7, #6]
 8005f7e:	893a      	ldrh	r2, [r7, #8]
 8005f80:	8979      	ldrh	r1, [r7, #10]
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	9301      	str	r3, [sp, #4]
 8005f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f000 fa19 	bl	80063c4 <I2C_RequestMemoryRead>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d005      	beq.n	8005fa4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e0ad      	b.n	8006100 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	2bff      	cmp	r3, #255	@ 0xff
 8005fac:	d90e      	bls.n	8005fcc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fb8:	b2da      	uxtb	r2, r3
 8005fba:	8979      	ldrh	r1, [r7, #10]
 8005fbc:	4b52      	ldr	r3, [pc, #328]	@ (8006108 <HAL_I2C_Mem_Read+0x22c>)
 8005fbe:	9300      	str	r3, [sp, #0]
 8005fc0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f000 fc39 	bl	800683c <I2C_TransferConfig>
 8005fca:	e00f      	b.n	8005fec <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fd0:	b29a      	uxth	r2, r3
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fda:	b2da      	uxtb	r2, r3
 8005fdc:	8979      	ldrh	r1, [r7, #10]
 8005fde:	4b4a      	ldr	r3, [pc, #296]	@ (8006108 <HAL_I2C_Mem_Read+0x22c>)
 8005fe0:	9300      	str	r3, [sp, #0]
 8005fe2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f000 fc28 	bl	800683c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	9300      	str	r3, [sp, #0]
 8005ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	2104      	movs	r1, #4
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f000 fa5c 	bl	80064b4 <I2C_WaitOnFlagUntilTimeout>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d001      	beq.n	8006006 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e07c      	b.n	8006100 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006010:	b2d2      	uxtb	r2, r2
 8006012:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006018:	1c5a      	adds	r2, r3, #1
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006022:	3b01      	subs	r3, #1
 8006024:	b29a      	uxth	r2, r3
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800602e:	b29b      	uxth	r3, r3
 8006030:	3b01      	subs	r3, #1
 8006032:	b29a      	uxth	r2, r3
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800603c:	b29b      	uxth	r3, r3
 800603e:	2b00      	cmp	r3, #0
 8006040:	d034      	beq.n	80060ac <HAL_I2C_Mem_Read+0x1d0>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006046:	2b00      	cmp	r3, #0
 8006048:	d130      	bne.n	80060ac <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	9300      	str	r3, [sp, #0]
 800604e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006050:	2200      	movs	r2, #0
 8006052:	2180      	movs	r1, #128	@ 0x80
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	f000 fa2d 	bl	80064b4 <I2C_WaitOnFlagUntilTimeout>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d001      	beq.n	8006064 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	e04d      	b.n	8006100 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006068:	b29b      	uxth	r3, r3
 800606a:	2bff      	cmp	r3, #255	@ 0xff
 800606c:	d90e      	bls.n	800608c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2201      	movs	r2, #1
 8006072:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006078:	b2da      	uxtb	r2, r3
 800607a:	8979      	ldrh	r1, [r7, #10]
 800607c:	2300      	movs	r3, #0
 800607e:	9300      	str	r3, [sp, #0]
 8006080:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f000 fbd9 	bl	800683c <I2C_TransferConfig>
 800608a:	e00f      	b.n	80060ac <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006090:	b29a      	uxth	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800609a:	b2da      	uxtb	r2, r3
 800609c:	8979      	ldrh	r1, [r7, #10]
 800609e:	2300      	movs	r3, #0
 80060a0:	9300      	str	r3, [sp, #0]
 80060a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f000 fbc8 	bl	800683c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d19a      	bne.n	8005fec <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060ba:	68f8      	ldr	r0, [r7, #12]
 80060bc:	f000 fa9a 	bl	80065f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d001      	beq.n	80060ca <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e01a      	b.n	8006100 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2220      	movs	r2, #32
 80060d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	6859      	ldr	r1, [r3, #4]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	4b0b      	ldr	r3, [pc, #44]	@ (800610c <HAL_I2C_Mem_Read+0x230>)
 80060de:	400b      	ands	r3, r1
 80060e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2220      	movs	r2, #32
 80060e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80060fa:	2300      	movs	r3, #0
 80060fc:	e000      	b.n	8006100 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80060fe:	2302      	movs	r3, #2
  }
}
 8006100:	4618      	mov	r0, r3
 8006102:	3718      	adds	r7, #24
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	80002400 	.word	0x80002400
 800610c:	fe00e800 	.word	0xfe00e800

08006110 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b08a      	sub	sp, #40	@ 0x28
 8006114:	af02      	add	r7, sp, #8
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	607a      	str	r2, [r7, #4]
 800611a:	603b      	str	r3, [r7, #0]
 800611c:	460b      	mov	r3, r1
 800611e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8006120:	2300      	movs	r3, #0
 8006122:	617b      	str	r3, [r7, #20]

  HAL_StatusTypeDef status = HAL_OK;
 8006124:	2300      	movs	r3, #0
 8006126:	77fb      	strb	r3, [r7, #31]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800612e:	b2db      	uxtb	r3, r3
 8006130:	2b20      	cmp	r3, #32
 8006132:	f040 80e9 	bne.w	8006308 <HAL_I2C_IsDeviceReady+0x1f8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006140:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006144:	d101      	bne.n	800614a <HAL_I2C_IsDeviceReady+0x3a>
    {
      return HAL_BUSY;
 8006146:	2302      	movs	r3, #2
 8006148:	e0df      	b.n	800630a <HAL_I2C_IsDeviceReady+0x1fa>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006150:	2b01      	cmp	r3, #1
 8006152:	d101      	bne.n	8006158 <HAL_I2C_IsDeviceReady+0x48>
 8006154:	2302      	movs	r3, #2
 8006156:	e0d8      	b.n	800630a <HAL_I2C_IsDeviceReady+0x1fa>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2224      	movs	r2, #36	@ 0x24
 8006164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	2b01      	cmp	r3, #1
 8006174:	d105      	bne.n	8006182 <HAL_I2C_IsDeviceReady+0x72>
 8006176:	897b      	ldrh	r3, [r7, #10]
 8006178:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800617c:	4b65      	ldr	r3, [pc, #404]	@ (8006314 <HAL_I2C_IsDeviceReady+0x204>)
 800617e:	4313      	orrs	r3, r2
 8006180:	e004      	b.n	800618c <HAL_I2C_IsDeviceReady+0x7c>
 8006182:	897b      	ldrh	r3, [r7, #10]
 8006184:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006188:	4b63      	ldr	r3, [pc, #396]	@ (8006318 <HAL_I2C_IsDeviceReady+0x208>)
 800618a:	4313      	orrs	r3, r2
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	6812      	ldr	r2, [r2, #0]
 8006190:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8006192:	f7fd fc23 	bl	80039dc <HAL_GetTick>
 8006196:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	699b      	ldr	r3, [r3, #24]
 800619e:	f003 0320 	and.w	r3, r3, #32
 80061a2:	2b20      	cmp	r3, #32
 80061a4:	bf0c      	ite	eq
 80061a6:	2301      	moveq	r3, #1
 80061a8:	2300      	movne	r3, #0
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	77bb      	strb	r3, [r7, #30]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	699b      	ldr	r3, [r3, #24]
 80061b4:	f003 0310 	and.w	r3, r3, #16
 80061b8:	2b10      	cmp	r3, #16
 80061ba:	bf0c      	ite	eq
 80061bc:	2301      	moveq	r3, #1
 80061be:	2300      	movne	r3, #0
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	777b      	strb	r3, [r7, #29]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80061c4:	e034      	b.n	8006230 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80061cc:	d01a      	beq.n	8006204 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80061ce:	f7fd fc05 	bl	80039dc <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	683a      	ldr	r2, [r7, #0]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d302      	bcc.n	80061e4 <HAL_I2C_IsDeviceReady+0xd4>
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d10f      	bne.n	8006204 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2220      	movs	r2, #32
 80061e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061f0:	f043 0220 	orr.w	r2, r3, #32
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e082      	b.n	800630a <HAL_I2C_IsDeviceReady+0x1fa>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	699b      	ldr	r3, [r3, #24]
 800620a:	f003 0320 	and.w	r3, r3, #32
 800620e:	2b20      	cmp	r3, #32
 8006210:	bf0c      	ite	eq
 8006212:	2301      	moveq	r3, #1
 8006214:	2300      	movne	r3, #0
 8006216:	b2db      	uxtb	r3, r3
 8006218:	77bb      	strb	r3, [r7, #30]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	f003 0310 	and.w	r3, r3, #16
 8006224:	2b10      	cmp	r3, #16
 8006226:	bf0c      	ite	eq
 8006228:	2301      	moveq	r3, #1
 800622a:	2300      	movne	r3, #0
 800622c:	b2db      	uxtb	r3, r3
 800622e:	777b      	strb	r3, [r7, #29]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006230:	7fbb      	ldrb	r3, [r7, #30]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d102      	bne.n	800623c <HAL_I2C_IsDeviceReady+0x12c>
 8006236:	7f7b      	ldrb	r3, [r7, #29]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d0c4      	beq.n	80061c6 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	f003 0310 	and.w	r3, r3, #16
 8006246:	2b10      	cmp	r3, #16
 8006248:	d027      	beq.n	800629a <HAL_I2C_IsDeviceReady+0x18a>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	9300      	str	r3, [sp, #0]
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	2200      	movs	r2, #0
 8006252:	2120      	movs	r1, #32
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f000 f92d 	bl	80064b4 <I2C_WaitOnFlagUntilTimeout>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00e      	beq.n	800627e <HAL_I2C_IsDeviceReady+0x16e>
        {
          /* A non acknowledge appear during STOP Flag waiting process, a new trial must be performed */
          if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006264:	2b04      	cmp	r3, #4
 8006266:	d107      	bne.n	8006278 <HAL_I2C_IsDeviceReady+0x168>
          {
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2220      	movs	r2, #32
 800626e:	61da      	str	r2, [r3, #28]

            /* Reset the error code for next trial */
            hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2200      	movs	r2, #0
 8006274:	645a      	str	r2, [r3, #68]	@ 0x44
 8006276:	e026      	b.n	80062c6 <HAL_I2C_IsDeviceReady+0x1b6>
          }
          else
          {
            status = HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	77fb      	strb	r3, [r7, #31]
 800627c:	e023      	b.n	80062c6 <HAL_I2C_IsDeviceReady+0x1b6>
        else
        {
          /* A acknowledge appear during STOP Flag waiting process, this mean that device respond to its address */

          /* Clear STOP Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2220      	movs	r2, #32
 8006284:	61da      	str	r2, [r3, #28]

          /* Device is ready */
          hi2c->State = HAL_I2C_STATE_READY;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2220      	movs	r2, #32
 800628a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_OK;
 8006296:	2300      	movs	r3, #0
 8006298:	e037      	b.n	800630a <HAL_I2C_IsDeviceReady+0x1fa>
      {
        /* A non acknowledge is detected, this mean that device not respond to its address,
           a new trial must be performed */

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2210      	movs	r2, #16
 80062a0:	61da      	str	r2, [r3, #28]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	9300      	str	r3, [sp, #0]
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	2200      	movs	r2, #0
 80062aa:	2120      	movs	r1, #32
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f000 f901 	bl	80064b4 <I2C_WaitOnFlagUntilTimeout>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d002      	beq.n	80062be <HAL_I2C_IsDeviceReady+0x1ae>
        {
          status = HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	77fb      	strb	r3, [r7, #31]
 80062bc:	e003      	b.n	80062c6 <HAL_I2C_IsDeviceReady+0x1b6>
        }
        else
        {
          /* Clear STOP Flag, auto generated with autoend*/
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2220      	movs	r2, #32
 80062c4:	61da      	str	r2, [r3, #28]
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	3301      	adds	r3, #1
 80062ca:	617b      	str	r3, [r7, #20]

      if ((I2C_Trials < Trials) && (status == HAL_ERROR))
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d904      	bls.n	80062de <HAL_I2C_IsDeviceReady+0x1ce>
 80062d4:	7ffb      	ldrb	r3, [r7, #31]
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d101      	bne.n	80062de <HAL_I2C_IsDeviceReady+0x1ce>
      {
        status = HAL_OK;
 80062da:	2300      	movs	r3, #0
 80062dc:	77fb      	strb	r3, [r7, #31]
      }

    } while (I2C_Trials < Trials);
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	f63f af43 	bhi.w	800616e <HAL_I2C_IsDeviceReady+0x5e>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2220      	movs	r2, #32
 80062ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062f4:	f043 0220 	orr.w	r2, r3, #32
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	e000      	b.n	800630a <HAL_I2C_IsDeviceReady+0x1fa>
  }
  else
  {
    return HAL_BUSY;
 8006308:	2302      	movs	r3, #2
  }
}
 800630a:	4618      	mov	r0, r3
 800630c:	3720      	adds	r7, #32
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	02002000 	.word	0x02002000
 8006318:	02002800 	.word	0x02002800

0800631c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b086      	sub	sp, #24
 8006320:	af02      	add	r7, sp, #8
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	4608      	mov	r0, r1
 8006326:	4611      	mov	r1, r2
 8006328:	461a      	mov	r2, r3
 800632a:	4603      	mov	r3, r0
 800632c:	817b      	strh	r3, [r7, #10]
 800632e:	460b      	mov	r3, r1
 8006330:	813b      	strh	r3, [r7, #8]
 8006332:	4613      	mov	r3, r2
 8006334:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006336:	88fb      	ldrh	r3, [r7, #6]
 8006338:	b2da      	uxtb	r2, r3
 800633a:	8979      	ldrh	r1, [r7, #10]
 800633c:	4b20      	ldr	r3, [pc, #128]	@ (80063c0 <I2C_RequestMemoryWrite+0xa4>)
 800633e:	9300      	str	r3, [sp, #0]
 8006340:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f000 fa79 	bl	800683c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800634a:	69fa      	ldr	r2, [r7, #28]
 800634c:	69b9      	ldr	r1, [r7, #24]
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	f000 f909 	bl	8006566 <I2C_WaitOnTXISFlagUntilTimeout>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d001      	beq.n	800635e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e02c      	b.n	80063b8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800635e:	88fb      	ldrh	r3, [r7, #6]
 8006360:	2b01      	cmp	r3, #1
 8006362:	d105      	bne.n	8006370 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006364:	893b      	ldrh	r3, [r7, #8]
 8006366:	b2da      	uxtb	r2, r3
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	629a      	str	r2, [r3, #40]	@ 0x28
 800636e:	e015      	b.n	800639c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006370:	893b      	ldrh	r3, [r7, #8]
 8006372:	0a1b      	lsrs	r3, r3, #8
 8006374:	b29b      	uxth	r3, r3
 8006376:	b2da      	uxtb	r2, r3
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800637e:	69fa      	ldr	r2, [r7, #28]
 8006380:	69b9      	ldr	r1, [r7, #24]
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f000 f8ef 	bl	8006566 <I2C_WaitOnTXISFlagUntilTimeout>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d001      	beq.n	8006392 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e012      	b.n	80063b8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006392:	893b      	ldrh	r3, [r7, #8]
 8006394:	b2da      	uxtb	r2, r3
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	9300      	str	r3, [sp, #0]
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	2200      	movs	r2, #0
 80063a4:	2180      	movs	r1, #128	@ 0x80
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f000 f884 	bl	80064b4 <I2C_WaitOnFlagUntilTimeout>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d001      	beq.n	80063b6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e000      	b.n	80063b8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3710      	adds	r7, #16
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	80002000 	.word	0x80002000

080063c4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b086      	sub	sp, #24
 80063c8:	af02      	add	r7, sp, #8
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	4608      	mov	r0, r1
 80063ce:	4611      	mov	r1, r2
 80063d0:	461a      	mov	r2, r3
 80063d2:	4603      	mov	r3, r0
 80063d4:	817b      	strh	r3, [r7, #10]
 80063d6:	460b      	mov	r3, r1
 80063d8:	813b      	strh	r3, [r7, #8]
 80063da:	4613      	mov	r3, r2
 80063dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80063de:	88fb      	ldrh	r3, [r7, #6]
 80063e0:	b2da      	uxtb	r2, r3
 80063e2:	8979      	ldrh	r1, [r7, #10]
 80063e4:	4b20      	ldr	r3, [pc, #128]	@ (8006468 <I2C_RequestMemoryRead+0xa4>)
 80063e6:	9300      	str	r3, [sp, #0]
 80063e8:	2300      	movs	r3, #0
 80063ea:	68f8      	ldr	r0, [r7, #12]
 80063ec:	f000 fa26 	bl	800683c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063f0:	69fa      	ldr	r2, [r7, #28]
 80063f2:	69b9      	ldr	r1, [r7, #24]
 80063f4:	68f8      	ldr	r0, [r7, #12]
 80063f6:	f000 f8b6 	bl	8006566 <I2C_WaitOnTXISFlagUntilTimeout>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d001      	beq.n	8006404 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e02c      	b.n	800645e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006404:	88fb      	ldrh	r3, [r7, #6]
 8006406:	2b01      	cmp	r3, #1
 8006408:	d105      	bne.n	8006416 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800640a:	893b      	ldrh	r3, [r7, #8]
 800640c:	b2da      	uxtb	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	629a      	str	r2, [r3, #40]	@ 0x28
 8006414:	e015      	b.n	8006442 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006416:	893b      	ldrh	r3, [r7, #8]
 8006418:	0a1b      	lsrs	r3, r3, #8
 800641a:	b29b      	uxth	r3, r3
 800641c:	b2da      	uxtb	r2, r3
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006424:	69fa      	ldr	r2, [r7, #28]
 8006426:	69b9      	ldr	r1, [r7, #24]
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f000 f89c 	bl	8006566 <I2C_WaitOnTXISFlagUntilTimeout>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d001      	beq.n	8006438 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e012      	b.n	800645e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006438:	893b      	ldrh	r3, [r7, #8]
 800643a:	b2da      	uxtb	r2, r3
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	9300      	str	r3, [sp, #0]
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	2200      	movs	r2, #0
 800644a:	2140      	movs	r1, #64	@ 0x40
 800644c:	68f8      	ldr	r0, [r7, #12]
 800644e:	f000 f831 	bl	80064b4 <I2C_WaitOnFlagUntilTimeout>
 8006452:	4603      	mov	r3, r0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d001      	beq.n	800645c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e000      	b.n	800645e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	3710      	adds	r7, #16
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	80002000 	.word	0x80002000

0800646c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	f003 0302 	and.w	r3, r3, #2
 800647e:	2b02      	cmp	r3, #2
 8006480:	d103      	bne.n	800648a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2200      	movs	r2, #0
 8006488:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	699b      	ldr	r3, [r3, #24]
 8006490:	f003 0301 	and.w	r3, r3, #1
 8006494:	2b01      	cmp	r3, #1
 8006496:	d007      	beq.n	80064a8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	699a      	ldr	r2, [r3, #24]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f042 0201 	orr.w	r2, r2, #1
 80064a6:	619a      	str	r2, [r3, #24]
  }
}
 80064a8:	bf00      	nop
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	603b      	str	r3, [r7, #0]
 80064c0:	4613      	mov	r3, r2
 80064c2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064c4:	e03b      	b.n	800653e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80064c6:	69ba      	ldr	r2, [r7, #24]
 80064c8:	6839      	ldr	r1, [r7, #0]
 80064ca:	68f8      	ldr	r0, [r7, #12]
 80064cc:	f000 f8d6 	bl	800667c <I2C_IsErrorOccurred>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d001      	beq.n	80064da <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e041      	b.n	800655e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80064e0:	d02d      	beq.n	800653e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064e2:	f7fd fa7b 	bl	80039dc <HAL_GetTick>
 80064e6:	4602      	mov	r2, r0
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	1ad3      	subs	r3, r2, r3
 80064ec:	683a      	ldr	r2, [r7, #0]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d302      	bcc.n	80064f8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d122      	bne.n	800653e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	699a      	ldr	r2, [r3, #24]
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	4013      	ands	r3, r2
 8006502:	68ba      	ldr	r2, [r7, #8]
 8006504:	429a      	cmp	r2, r3
 8006506:	bf0c      	ite	eq
 8006508:	2301      	moveq	r3, #1
 800650a:	2300      	movne	r3, #0
 800650c:	b2db      	uxtb	r3, r3
 800650e:	461a      	mov	r2, r3
 8006510:	79fb      	ldrb	r3, [r7, #7]
 8006512:	429a      	cmp	r2, r3
 8006514:	d113      	bne.n	800653e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800651a:	f043 0220 	orr.w	r2, r3, #32
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2220      	movs	r2, #32
 8006526:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2200      	movs	r2, #0
 8006536:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e00f      	b.n	800655e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	699a      	ldr	r2, [r3, #24]
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	4013      	ands	r3, r2
 8006548:	68ba      	ldr	r2, [r7, #8]
 800654a:	429a      	cmp	r2, r3
 800654c:	bf0c      	ite	eq
 800654e:	2301      	moveq	r3, #1
 8006550:	2300      	movne	r3, #0
 8006552:	b2db      	uxtb	r3, r3
 8006554:	461a      	mov	r2, r3
 8006556:	79fb      	ldrb	r3, [r7, #7]
 8006558:	429a      	cmp	r2, r3
 800655a:	d0b4      	beq.n	80064c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b084      	sub	sp, #16
 800656a:	af00      	add	r7, sp, #0
 800656c:	60f8      	str	r0, [r7, #12]
 800656e:	60b9      	str	r1, [r7, #8]
 8006570:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006572:	e033      	b.n	80065dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	68b9      	ldr	r1, [r7, #8]
 8006578:	68f8      	ldr	r0, [r7, #12]
 800657a:	f000 f87f 	bl	800667c <I2C_IsErrorOccurred>
 800657e:	4603      	mov	r3, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d001      	beq.n	8006588 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	e031      	b.n	80065ec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800658e:	d025      	beq.n	80065dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006590:	f7fd fa24 	bl	80039dc <HAL_GetTick>
 8006594:	4602      	mov	r2, r0
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	68ba      	ldr	r2, [r7, #8]
 800659c:	429a      	cmp	r2, r3
 800659e:	d302      	bcc.n	80065a6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d11a      	bne.n	80065dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	699b      	ldr	r3, [r3, #24]
 80065ac:	f003 0302 	and.w	r3, r3, #2
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	d013      	beq.n	80065dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065b8:	f043 0220 	orr.w	r2, r3, #32
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2220      	movs	r2, #32
 80065c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	e007      	b.n	80065ec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	f003 0302 	and.w	r3, r3, #2
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	d1c4      	bne.n	8006574 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80065ea:	2300      	movs	r3, #0
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3710      	adds	r7, #16
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006600:	e02f      	b.n	8006662 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	68b9      	ldr	r1, [r7, #8]
 8006606:	68f8      	ldr	r0, [r7, #12]
 8006608:	f000 f838 	bl	800667c <I2C_IsErrorOccurred>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d001      	beq.n	8006616 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e02d      	b.n	8006672 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006616:	f7fd f9e1 	bl	80039dc <HAL_GetTick>
 800661a:	4602      	mov	r2, r0
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	68ba      	ldr	r2, [r7, #8]
 8006622:	429a      	cmp	r2, r3
 8006624:	d302      	bcc.n	800662c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d11a      	bne.n	8006662 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	699b      	ldr	r3, [r3, #24]
 8006632:	f003 0320 	and.w	r3, r3, #32
 8006636:	2b20      	cmp	r3, #32
 8006638:	d013      	beq.n	8006662 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800663e:	f043 0220 	orr.w	r2, r3, #32
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2220      	movs	r2, #32
 800664a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2200      	movs	r2, #0
 8006652:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2200      	movs	r2, #0
 800665a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e007      	b.n	8006672 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	699b      	ldr	r3, [r3, #24]
 8006668:	f003 0320 	and.w	r3, r3, #32
 800666c:	2b20      	cmp	r3, #32
 800666e:	d1c8      	bne.n	8006602 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	3710      	adds	r7, #16
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
	...

0800667c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b08a      	sub	sp, #40	@ 0x28
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006688:	2300      	movs	r3, #0
 800668a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006696:	2300      	movs	r3, #0
 8006698:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	f003 0310 	and.w	r3, r3, #16
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d068      	beq.n	800677a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2210      	movs	r2, #16
 80066ae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80066b0:	e049      	b.n	8006746 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80066b8:	d045      	beq.n	8006746 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80066ba:	f7fd f98f 	bl	80039dc <HAL_GetTick>
 80066be:	4602      	mov	r2, r0
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	68ba      	ldr	r2, [r7, #8]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d302      	bcc.n	80066d0 <I2C_IsErrorOccurred+0x54>
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d13a      	bne.n	8006746 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066da:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80066e2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	699b      	ldr	r3, [r3, #24]
 80066ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80066ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066f2:	d121      	bne.n	8006738 <I2C_IsErrorOccurred+0xbc>
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066fa:	d01d      	beq.n	8006738 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80066fc:	7cfb      	ldrb	r3, [r7, #19]
 80066fe:	2b20      	cmp	r3, #32
 8006700:	d01a      	beq.n	8006738 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	685a      	ldr	r2, [r3, #4]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006710:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006712:	f7fd f963 	bl	80039dc <HAL_GetTick>
 8006716:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006718:	e00e      	b.n	8006738 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800671a:	f7fd f95f 	bl	80039dc <HAL_GetTick>
 800671e:	4602      	mov	r2, r0
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	1ad3      	subs	r3, r2, r3
 8006724:	2b19      	cmp	r3, #25
 8006726:	d907      	bls.n	8006738 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006728:	6a3b      	ldr	r3, [r7, #32]
 800672a:	f043 0320 	orr.w	r3, r3, #32
 800672e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006736:	e006      	b.n	8006746 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	699b      	ldr	r3, [r3, #24]
 800673e:	f003 0320 	and.w	r3, r3, #32
 8006742:	2b20      	cmp	r3, #32
 8006744:	d1e9      	bne.n	800671a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	699b      	ldr	r3, [r3, #24]
 800674c:	f003 0320 	and.w	r3, r3, #32
 8006750:	2b20      	cmp	r3, #32
 8006752:	d003      	beq.n	800675c <I2C_IsErrorOccurred+0xe0>
 8006754:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006758:	2b00      	cmp	r3, #0
 800675a:	d0aa      	beq.n	80066b2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800675c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006760:	2b00      	cmp	r3, #0
 8006762:	d103      	bne.n	800676c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2220      	movs	r2, #32
 800676a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800676c:	6a3b      	ldr	r3, [r7, #32]
 800676e:	f043 0304 	orr.w	r3, r3, #4
 8006772:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00b      	beq.n	80067a4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800678c:	6a3b      	ldr	r3, [r7, #32]
 800678e:	f043 0301 	orr.w	r3, r3, #1
 8006792:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800679c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00b      	beq.n	80067c6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80067ae:	6a3b      	ldr	r3, [r7, #32]
 80067b0:	f043 0308 	orr.w	r3, r3, #8
 80067b4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80067be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d00b      	beq.n	80067e8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80067d0:	6a3b      	ldr	r3, [r7, #32]
 80067d2:	f043 0302 	orr.w	r3, r3, #2
 80067d6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80067e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80067e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d01c      	beq.n	800682a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f7ff fe3b 	bl	800646c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	6859      	ldr	r1, [r3, #4]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	4b0d      	ldr	r3, [pc, #52]	@ (8006838 <I2C_IsErrorOccurred+0x1bc>)
 8006802:	400b      	ands	r3, r1
 8006804:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800680a:	6a3b      	ldr	r3, [r7, #32]
 800680c:	431a      	orrs	r2, r3
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2220      	movs	r2, #32
 8006816:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800682a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800682e:	4618      	mov	r0, r3
 8006830:	3728      	adds	r7, #40	@ 0x28
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	fe00e800 	.word	0xfe00e800

0800683c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800683c:	b480      	push	{r7}
 800683e:	b087      	sub	sp, #28
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	607b      	str	r3, [r7, #4]
 8006846:	460b      	mov	r3, r1
 8006848:	817b      	strh	r3, [r7, #10]
 800684a:	4613      	mov	r3, r2
 800684c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800684e:	897b      	ldrh	r3, [r7, #10]
 8006850:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006854:	7a7b      	ldrb	r3, [r7, #9]
 8006856:	041b      	lsls	r3, r3, #16
 8006858:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800685c:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006862:	6a3b      	ldr	r3, [r7, #32]
 8006864:	4313      	orrs	r3, r2
 8006866:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800686a:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	685a      	ldr	r2, [r3, #4]
 8006872:	6a3b      	ldr	r3, [r7, #32]
 8006874:	0d5b      	lsrs	r3, r3, #21
 8006876:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800687a:	4b08      	ldr	r3, [pc, #32]	@ (800689c <I2C_TransferConfig+0x60>)
 800687c:	430b      	orrs	r3, r1
 800687e:	43db      	mvns	r3, r3
 8006880:	ea02 0103 	and.w	r1, r2, r3
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	697a      	ldr	r2, [r7, #20]
 800688a:	430a      	orrs	r2, r1
 800688c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800688e:	bf00      	nop
 8006890:	371c      	adds	r7, #28
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop
 800689c:	03ff63ff 	.word	0x03ff63ff

080068a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	2b20      	cmp	r3, #32
 80068b4:	d138      	bne.n	8006928 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d101      	bne.n	80068c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80068c0:	2302      	movs	r3, #2
 80068c2:	e032      	b.n	800692a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2224      	movs	r2, #36	@ 0x24
 80068d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f022 0201 	bic.w	r2, r2, #1
 80068e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80068f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	6819      	ldr	r1, [r3, #0]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	683a      	ldr	r2, [r7, #0]
 8006900:	430a      	orrs	r2, r1
 8006902:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f042 0201 	orr.w	r2, r2, #1
 8006912:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2220      	movs	r2, #32
 8006918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006924:	2300      	movs	r3, #0
 8006926:	e000      	b.n	800692a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006928:	2302      	movs	r3, #2
  }
}
 800692a:	4618      	mov	r0, r3
 800692c:	370c      	adds	r7, #12
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr

08006936 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006936:	b480      	push	{r7}
 8006938:	b085      	sub	sp, #20
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
 800693e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006946:	b2db      	uxtb	r3, r3
 8006948:	2b20      	cmp	r3, #32
 800694a:	d139      	bne.n	80069c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006952:	2b01      	cmp	r3, #1
 8006954:	d101      	bne.n	800695a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006956:	2302      	movs	r3, #2
 8006958:	e033      	b.n	80069c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2201      	movs	r2, #1
 800695e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2224      	movs	r2, #36	@ 0x24
 8006966:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f022 0201 	bic.w	r2, r2, #1
 8006978:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006988:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	021b      	lsls	r3, r3, #8
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	4313      	orrs	r3, r2
 8006992:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f042 0201 	orr.w	r2, r2, #1
 80069aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2220      	movs	r2, #32
 80069b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80069bc:	2300      	movs	r3, #0
 80069be:	e000      	b.n	80069c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80069c0:	2302      	movs	r3, #2
  }
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3714      	adds	r7, #20
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
	...

080069d0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80069d6:	2300      	movs	r3, #0
 80069d8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80069da:	4b23      	ldr	r3, [pc, #140]	@ (8006a68 <HAL_PWREx_EnableOverDrive+0x98>)
 80069dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069de:	4a22      	ldr	r2, [pc, #136]	@ (8006a68 <HAL_PWREx_EnableOverDrive+0x98>)
 80069e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80069e6:	4b20      	ldr	r3, [pc, #128]	@ (8006a68 <HAL_PWREx_EnableOverDrive+0x98>)
 80069e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069ee:	603b      	str	r3, [r7, #0]
 80069f0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80069f2:	4b1e      	ldr	r3, [pc, #120]	@ (8006a6c <HAL_PWREx_EnableOverDrive+0x9c>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a1d      	ldr	r2, [pc, #116]	@ (8006a6c <HAL_PWREx_EnableOverDrive+0x9c>)
 80069f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069fc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80069fe:	f7fc ffed 	bl	80039dc <HAL_GetTick>
 8006a02:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006a04:	e009      	b.n	8006a1a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006a06:	f7fc ffe9 	bl	80039dc <HAL_GetTick>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	1ad3      	subs	r3, r2, r3
 8006a10:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006a14:	d901      	bls.n	8006a1a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006a16:	2303      	movs	r3, #3
 8006a18:	e022      	b.n	8006a60 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006a1a:	4b14      	ldr	r3, [pc, #80]	@ (8006a6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a26:	d1ee      	bne.n	8006a06 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006a28:	4b10      	ldr	r3, [pc, #64]	@ (8006a6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a0f      	ldr	r2, [pc, #60]	@ (8006a6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006a2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a32:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a34:	f7fc ffd2 	bl	80039dc <HAL_GetTick>
 8006a38:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006a3a:	e009      	b.n	8006a50 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006a3c:	f7fc ffce 	bl	80039dc <HAL_GetTick>
 8006a40:	4602      	mov	r2, r0
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006a4a:	d901      	bls.n	8006a50 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	e007      	b.n	8006a60 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006a50:	4b06      	ldr	r3, [pc, #24]	@ (8006a6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a5c:	d1ee      	bne.n	8006a3c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006a5e:	2300      	movs	r3, #0
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3708      	adds	r7, #8
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	40023800 	.word	0x40023800
 8006a6c:	40007000 	.word	0x40007000

08006a70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b086      	sub	sp, #24
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d101      	bne.n	8006a86 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e291      	b.n	8006faa <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 0301 	and.w	r3, r3, #1
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	f000 8087 	beq.w	8006ba2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006a94:	4b96      	ldr	r3, [pc, #600]	@ (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	f003 030c 	and.w	r3, r3, #12
 8006a9c:	2b04      	cmp	r3, #4
 8006a9e:	d00c      	beq.n	8006aba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006aa0:	4b93      	ldr	r3, [pc, #588]	@ (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	f003 030c 	and.w	r3, r3, #12
 8006aa8:	2b08      	cmp	r3, #8
 8006aaa:	d112      	bne.n	8006ad2 <HAL_RCC_OscConfig+0x62>
 8006aac:	4b90      	ldr	r3, [pc, #576]	@ (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ab4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ab8:	d10b      	bne.n	8006ad2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006aba:	4b8d      	ldr	r3, [pc, #564]	@ (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d06c      	beq.n	8006ba0 <HAL_RCC_OscConfig+0x130>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d168      	bne.n	8006ba0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e26b      	b.n	8006faa <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ada:	d106      	bne.n	8006aea <HAL_RCC_OscConfig+0x7a>
 8006adc:	4b84      	ldr	r3, [pc, #528]	@ (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a83      	ldr	r2, [pc, #524]	@ (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006ae2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ae6:	6013      	str	r3, [r2, #0]
 8006ae8:	e02e      	b.n	8006b48 <HAL_RCC_OscConfig+0xd8>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d10c      	bne.n	8006b0c <HAL_RCC_OscConfig+0x9c>
 8006af2:	4b7f      	ldr	r3, [pc, #508]	@ (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a7e      	ldr	r2, [pc, #504]	@ (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006af8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006afc:	6013      	str	r3, [r2, #0]
 8006afe:	4b7c      	ldr	r3, [pc, #496]	@ (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a7b      	ldr	r2, [pc, #492]	@ (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006b04:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b08:	6013      	str	r3, [r2, #0]
 8006b0a:	e01d      	b.n	8006b48 <HAL_RCC_OscConfig+0xd8>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b14:	d10c      	bne.n	8006b30 <HAL_RCC_OscConfig+0xc0>
 8006b16:	4b76      	ldr	r3, [pc, #472]	@ (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a75      	ldr	r2, [pc, #468]	@ (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006b1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006b20:	6013      	str	r3, [r2, #0]
 8006b22:	4b73      	ldr	r3, [pc, #460]	@ (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a72      	ldr	r2, [pc, #456]	@ (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006b28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b2c:	6013      	str	r3, [r2, #0]
 8006b2e:	e00b      	b.n	8006b48 <HAL_RCC_OscConfig+0xd8>
 8006b30:	4b6f      	ldr	r3, [pc, #444]	@ (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a6e      	ldr	r2, [pc, #440]	@ (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006b36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b3a:	6013      	str	r3, [r2, #0]
 8006b3c:	4b6c      	ldr	r3, [pc, #432]	@ (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a6b      	ldr	r2, [pc, #428]	@ (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006b42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d013      	beq.n	8006b78 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b50:	f7fc ff44 	bl	80039dc <HAL_GetTick>
 8006b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b56:	e008      	b.n	8006b6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b58:	f7fc ff40 	bl	80039dc <HAL_GetTick>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	2b64      	cmp	r3, #100	@ 0x64
 8006b64:	d901      	bls.n	8006b6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b66:	2303      	movs	r3, #3
 8006b68:	e21f      	b.n	8006faa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b6a:	4b61      	ldr	r3, [pc, #388]	@ (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d0f0      	beq.n	8006b58 <HAL_RCC_OscConfig+0xe8>
 8006b76:	e014      	b.n	8006ba2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b78:	f7fc ff30 	bl	80039dc <HAL_GetTick>
 8006b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b7e:	e008      	b.n	8006b92 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b80:	f7fc ff2c 	bl	80039dc <HAL_GetTick>
 8006b84:	4602      	mov	r2, r0
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	1ad3      	subs	r3, r2, r3
 8006b8a:	2b64      	cmp	r3, #100	@ 0x64
 8006b8c:	d901      	bls.n	8006b92 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e20b      	b.n	8006faa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b92:	4b57      	ldr	r3, [pc, #348]	@ (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1f0      	bne.n	8006b80 <HAL_RCC_OscConfig+0x110>
 8006b9e:	e000      	b.n	8006ba2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 0302 	and.w	r3, r3, #2
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d069      	beq.n	8006c82 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006bae:	4b50      	ldr	r3, [pc, #320]	@ (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	f003 030c 	and.w	r3, r3, #12
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00b      	beq.n	8006bd2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bba:	4b4d      	ldr	r3, [pc, #308]	@ (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	f003 030c 	and.w	r3, r3, #12
 8006bc2:	2b08      	cmp	r3, #8
 8006bc4:	d11c      	bne.n	8006c00 <HAL_RCC_OscConfig+0x190>
 8006bc6:	4b4a      	ldr	r3, [pc, #296]	@ (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d116      	bne.n	8006c00 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bd2:	4b47      	ldr	r3, [pc, #284]	@ (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 0302 	and.w	r3, r3, #2
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d005      	beq.n	8006bea <HAL_RCC_OscConfig+0x17a>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d001      	beq.n	8006bea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	e1df      	b.n	8006faa <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bea:	4b41      	ldr	r3, [pc, #260]	@ (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	00db      	lsls	r3, r3, #3
 8006bf8:	493d      	ldr	r1, [pc, #244]	@ (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bfe:	e040      	b.n	8006c82 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d023      	beq.n	8006c50 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c08:	4b39      	ldr	r3, [pc, #228]	@ (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a38      	ldr	r2, [pc, #224]	@ (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006c0e:	f043 0301 	orr.w	r3, r3, #1
 8006c12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c14:	f7fc fee2 	bl	80039dc <HAL_GetTick>
 8006c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c1a:	e008      	b.n	8006c2e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c1c:	f7fc fede 	bl	80039dc <HAL_GetTick>
 8006c20:	4602      	mov	r2, r0
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	d901      	bls.n	8006c2e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	e1bd      	b.n	8006faa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c2e:	4b30      	ldr	r3, [pc, #192]	@ (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 0302 	and.w	r3, r3, #2
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d0f0      	beq.n	8006c1c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c3a:	4b2d      	ldr	r3, [pc, #180]	@ (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	00db      	lsls	r3, r3, #3
 8006c48:	4929      	ldr	r1, [pc, #164]	@ (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	600b      	str	r3, [r1, #0]
 8006c4e:	e018      	b.n	8006c82 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c50:	4b27      	ldr	r3, [pc, #156]	@ (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a26      	ldr	r2, [pc, #152]	@ (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006c56:	f023 0301 	bic.w	r3, r3, #1
 8006c5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c5c:	f7fc febe 	bl	80039dc <HAL_GetTick>
 8006c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c62:	e008      	b.n	8006c76 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c64:	f7fc feba 	bl	80039dc <HAL_GetTick>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d901      	bls.n	8006c76 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e199      	b.n	8006faa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c76:	4b1e      	ldr	r3, [pc, #120]	@ (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 0302 	and.w	r3, r3, #2
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1f0      	bne.n	8006c64 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0308 	and.w	r3, r3, #8
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d038      	beq.n	8006d00 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	695b      	ldr	r3, [r3, #20]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d019      	beq.n	8006cca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c96:	4b16      	ldr	r3, [pc, #88]	@ (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006c98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c9a:	4a15      	ldr	r2, [pc, #84]	@ (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006c9c:	f043 0301 	orr.w	r3, r3, #1
 8006ca0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ca2:	f7fc fe9b 	bl	80039dc <HAL_GetTick>
 8006ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ca8:	e008      	b.n	8006cbc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006caa:	f7fc fe97 	bl	80039dc <HAL_GetTick>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	1ad3      	subs	r3, r2, r3
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	d901      	bls.n	8006cbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006cb8:	2303      	movs	r3, #3
 8006cba:	e176      	b.n	8006faa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006cbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cc0:	f003 0302 	and.w	r3, r3, #2
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d0f0      	beq.n	8006caa <HAL_RCC_OscConfig+0x23a>
 8006cc8:	e01a      	b.n	8006d00 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006cca:	4b09      	ldr	r3, [pc, #36]	@ (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006ccc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cce:	4a08      	ldr	r2, [pc, #32]	@ (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006cd0:	f023 0301 	bic.w	r3, r3, #1
 8006cd4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cd6:	f7fc fe81 	bl	80039dc <HAL_GetTick>
 8006cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cdc:	e00a      	b.n	8006cf4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cde:	f7fc fe7d 	bl	80039dc <HAL_GetTick>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	1ad3      	subs	r3, r2, r3
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	d903      	bls.n	8006cf4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006cec:	2303      	movs	r3, #3
 8006cee:	e15c      	b.n	8006faa <HAL_RCC_OscConfig+0x53a>
 8006cf0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cf4:	4b91      	ldr	r3, [pc, #580]	@ (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006cf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cf8:	f003 0302 	and.w	r3, r3, #2
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1ee      	bne.n	8006cde <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0304 	and.w	r3, r3, #4
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f000 80a4 	beq.w	8006e56 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d0e:	4b8b      	ldr	r3, [pc, #556]	@ (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d10d      	bne.n	8006d36 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d1a:	4b88      	ldr	r3, [pc, #544]	@ (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d1e:	4a87      	ldr	r2, [pc, #540]	@ (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006d20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d24:	6413      	str	r3, [r2, #64]	@ 0x40
 8006d26:	4b85      	ldr	r3, [pc, #532]	@ (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d2e:	60bb      	str	r3, [r7, #8]
 8006d30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d32:	2301      	movs	r3, #1
 8006d34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d36:	4b82      	ldr	r3, [pc, #520]	@ (8006f40 <HAL_RCC_OscConfig+0x4d0>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d118      	bne.n	8006d74 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006d42:	4b7f      	ldr	r3, [pc, #508]	@ (8006f40 <HAL_RCC_OscConfig+0x4d0>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a7e      	ldr	r2, [pc, #504]	@ (8006f40 <HAL_RCC_OscConfig+0x4d0>)
 8006d48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d4e:	f7fc fe45 	bl	80039dc <HAL_GetTick>
 8006d52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d54:	e008      	b.n	8006d68 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d56:	f7fc fe41 	bl	80039dc <HAL_GetTick>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	2b64      	cmp	r3, #100	@ 0x64
 8006d62:	d901      	bls.n	8006d68 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006d64:	2303      	movs	r3, #3
 8006d66:	e120      	b.n	8006faa <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d68:	4b75      	ldr	r3, [pc, #468]	@ (8006f40 <HAL_RCC_OscConfig+0x4d0>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d0f0      	beq.n	8006d56 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d106      	bne.n	8006d8a <HAL_RCC_OscConfig+0x31a>
 8006d7c:	4b6f      	ldr	r3, [pc, #444]	@ (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006d7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d80:	4a6e      	ldr	r2, [pc, #440]	@ (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006d82:	f043 0301 	orr.w	r3, r3, #1
 8006d86:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d88:	e02d      	b.n	8006de6 <HAL_RCC_OscConfig+0x376>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d10c      	bne.n	8006dac <HAL_RCC_OscConfig+0x33c>
 8006d92:	4b6a      	ldr	r3, [pc, #424]	@ (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d96:	4a69      	ldr	r2, [pc, #420]	@ (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006d98:	f023 0301 	bic.w	r3, r3, #1
 8006d9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d9e:	4b67      	ldr	r3, [pc, #412]	@ (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006da2:	4a66      	ldr	r2, [pc, #408]	@ (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006da4:	f023 0304 	bic.w	r3, r3, #4
 8006da8:	6713      	str	r3, [r2, #112]	@ 0x70
 8006daa:	e01c      	b.n	8006de6 <HAL_RCC_OscConfig+0x376>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	2b05      	cmp	r3, #5
 8006db2:	d10c      	bne.n	8006dce <HAL_RCC_OscConfig+0x35e>
 8006db4:	4b61      	ldr	r3, [pc, #388]	@ (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006db6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006db8:	4a60      	ldr	r2, [pc, #384]	@ (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006dba:	f043 0304 	orr.w	r3, r3, #4
 8006dbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8006dc0:	4b5e      	ldr	r3, [pc, #376]	@ (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006dc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dc4:	4a5d      	ldr	r2, [pc, #372]	@ (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006dc6:	f043 0301 	orr.w	r3, r3, #1
 8006dca:	6713      	str	r3, [r2, #112]	@ 0x70
 8006dcc:	e00b      	b.n	8006de6 <HAL_RCC_OscConfig+0x376>
 8006dce:	4b5b      	ldr	r3, [pc, #364]	@ (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006dd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dd2:	4a5a      	ldr	r2, [pc, #360]	@ (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006dd4:	f023 0301 	bic.w	r3, r3, #1
 8006dd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8006dda:	4b58      	ldr	r3, [pc, #352]	@ (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dde:	4a57      	ldr	r2, [pc, #348]	@ (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006de0:	f023 0304 	bic.w	r3, r3, #4
 8006de4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d015      	beq.n	8006e1a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dee:	f7fc fdf5 	bl	80039dc <HAL_GetTick>
 8006df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006df4:	e00a      	b.n	8006e0c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006df6:	f7fc fdf1 	bl	80039dc <HAL_GetTick>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	1ad3      	subs	r3, r2, r3
 8006e00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d901      	bls.n	8006e0c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006e08:	2303      	movs	r3, #3
 8006e0a:	e0ce      	b.n	8006faa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e0c:	4b4b      	ldr	r3, [pc, #300]	@ (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006e0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e10:	f003 0302 	and.w	r3, r3, #2
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d0ee      	beq.n	8006df6 <HAL_RCC_OscConfig+0x386>
 8006e18:	e014      	b.n	8006e44 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e1a:	f7fc fddf 	bl	80039dc <HAL_GetTick>
 8006e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e20:	e00a      	b.n	8006e38 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e22:	f7fc fddb 	bl	80039dc <HAL_GetTick>
 8006e26:	4602      	mov	r2, r0
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	1ad3      	subs	r3, r2, r3
 8006e2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d901      	bls.n	8006e38 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006e34:	2303      	movs	r3, #3
 8006e36:	e0b8      	b.n	8006faa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e38:	4b40      	ldr	r3, [pc, #256]	@ (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e3c:	f003 0302 	and.w	r3, r3, #2
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1ee      	bne.n	8006e22 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006e44:	7dfb      	ldrb	r3, [r7, #23]
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d105      	bne.n	8006e56 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e4a:	4b3c      	ldr	r3, [pc, #240]	@ (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e4e:	4a3b      	ldr	r2, [pc, #236]	@ (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006e50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e54:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	699b      	ldr	r3, [r3, #24]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f000 80a4 	beq.w	8006fa8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006e60:	4b36      	ldr	r3, [pc, #216]	@ (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	f003 030c 	and.w	r3, r3, #12
 8006e68:	2b08      	cmp	r3, #8
 8006e6a:	d06b      	beq.n	8006f44 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	699b      	ldr	r3, [r3, #24]
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d149      	bne.n	8006f08 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e74:	4b31      	ldr	r3, [pc, #196]	@ (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a30      	ldr	r2, [pc, #192]	@ (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006e7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e80:	f7fc fdac 	bl	80039dc <HAL_GetTick>
 8006e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e86:	e008      	b.n	8006e9a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e88:	f7fc fda8 	bl	80039dc <HAL_GetTick>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	d901      	bls.n	8006e9a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	e087      	b.n	8006faa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e9a:	4b28      	ldr	r3, [pc, #160]	@ (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1f0      	bne.n	8006e88 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	69da      	ldr	r2, [r3, #28]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a1b      	ldr	r3, [r3, #32]
 8006eae:	431a      	orrs	r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eb4:	019b      	lsls	r3, r3, #6
 8006eb6:	431a      	orrs	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ebc:	085b      	lsrs	r3, r3, #1
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	041b      	lsls	r3, r3, #16
 8006ec2:	431a      	orrs	r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ec8:	061b      	lsls	r3, r3, #24
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	4a1b      	ldr	r2, [pc, #108]	@ (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006ece:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006ed2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ed4:	4b19      	ldr	r3, [pc, #100]	@ (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a18      	ldr	r2, [pc, #96]	@ (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006eda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006ede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ee0:	f7fc fd7c 	bl	80039dc <HAL_GetTick>
 8006ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ee6:	e008      	b.n	8006efa <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ee8:	f7fc fd78 	bl	80039dc <HAL_GetTick>
 8006eec:	4602      	mov	r2, r0
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d901      	bls.n	8006efa <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	e057      	b.n	8006faa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006efa:	4b10      	ldr	r3, [pc, #64]	@ (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d0f0      	beq.n	8006ee8 <HAL_RCC_OscConfig+0x478>
 8006f06:	e04f      	b.n	8006fa8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f08:	4b0c      	ldr	r3, [pc, #48]	@ (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a0b      	ldr	r2, [pc, #44]	@ (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006f0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f14:	f7fc fd62 	bl	80039dc <HAL_GetTick>
 8006f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f1a:	e008      	b.n	8006f2e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f1c:	f7fc fd5e 	bl	80039dc <HAL_GetTick>
 8006f20:	4602      	mov	r2, r0
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	d901      	bls.n	8006f2e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	e03d      	b.n	8006faa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f2e:	4b03      	ldr	r3, [pc, #12]	@ (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d1f0      	bne.n	8006f1c <HAL_RCC_OscConfig+0x4ac>
 8006f3a:	e035      	b.n	8006fa8 <HAL_RCC_OscConfig+0x538>
 8006f3c:	40023800 	.word	0x40023800
 8006f40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006f44:	4b1b      	ldr	r3, [pc, #108]	@ (8006fb4 <HAL_RCC_OscConfig+0x544>)
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	699b      	ldr	r3, [r3, #24]
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d028      	beq.n	8006fa4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d121      	bne.n	8006fa4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d11a      	bne.n	8006fa4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006f74:	4013      	ands	r3, r2
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006f7a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d111      	bne.n	8006fa4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f8a:	085b      	lsrs	r3, r3, #1
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d107      	bne.n	8006fa4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f9e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d001      	beq.n	8006fa8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e000      	b.n	8006faa <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3718      	adds	r7, #24
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	40023800 	.word	0x40023800

08006fb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d101      	bne.n	8006fd0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e0d0      	b.n	8007172 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006fd0:	4b6a      	ldr	r3, [pc, #424]	@ (800717c <HAL_RCC_ClockConfig+0x1c4>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 030f 	and.w	r3, r3, #15
 8006fd8:	683a      	ldr	r2, [r7, #0]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d910      	bls.n	8007000 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fde:	4b67      	ldr	r3, [pc, #412]	@ (800717c <HAL_RCC_ClockConfig+0x1c4>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f023 020f 	bic.w	r2, r3, #15
 8006fe6:	4965      	ldr	r1, [pc, #404]	@ (800717c <HAL_RCC_ClockConfig+0x1c4>)
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fee:	4b63      	ldr	r3, [pc, #396]	@ (800717c <HAL_RCC_ClockConfig+0x1c4>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 030f 	and.w	r3, r3, #15
 8006ff6:	683a      	ldr	r2, [r7, #0]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d001      	beq.n	8007000 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e0b8      	b.n	8007172 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 0302 	and.w	r3, r3, #2
 8007008:	2b00      	cmp	r3, #0
 800700a:	d020      	beq.n	800704e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 0304 	and.w	r3, r3, #4
 8007014:	2b00      	cmp	r3, #0
 8007016:	d005      	beq.n	8007024 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007018:	4b59      	ldr	r3, [pc, #356]	@ (8007180 <HAL_RCC_ClockConfig+0x1c8>)
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	4a58      	ldr	r2, [pc, #352]	@ (8007180 <HAL_RCC_ClockConfig+0x1c8>)
 800701e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007022:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 0308 	and.w	r3, r3, #8
 800702c:	2b00      	cmp	r3, #0
 800702e:	d005      	beq.n	800703c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007030:	4b53      	ldr	r3, [pc, #332]	@ (8007180 <HAL_RCC_ClockConfig+0x1c8>)
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	4a52      	ldr	r2, [pc, #328]	@ (8007180 <HAL_RCC_ClockConfig+0x1c8>)
 8007036:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800703a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800703c:	4b50      	ldr	r3, [pc, #320]	@ (8007180 <HAL_RCC_ClockConfig+0x1c8>)
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	494d      	ldr	r1, [pc, #308]	@ (8007180 <HAL_RCC_ClockConfig+0x1c8>)
 800704a:	4313      	orrs	r3, r2
 800704c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 0301 	and.w	r3, r3, #1
 8007056:	2b00      	cmp	r3, #0
 8007058:	d040      	beq.n	80070dc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	2b01      	cmp	r3, #1
 8007060:	d107      	bne.n	8007072 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007062:	4b47      	ldr	r3, [pc, #284]	@ (8007180 <HAL_RCC_ClockConfig+0x1c8>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800706a:	2b00      	cmp	r3, #0
 800706c:	d115      	bne.n	800709a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	e07f      	b.n	8007172 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	2b02      	cmp	r3, #2
 8007078:	d107      	bne.n	800708a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800707a:	4b41      	ldr	r3, [pc, #260]	@ (8007180 <HAL_RCC_ClockConfig+0x1c8>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007082:	2b00      	cmp	r3, #0
 8007084:	d109      	bne.n	800709a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e073      	b.n	8007172 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800708a:	4b3d      	ldr	r3, [pc, #244]	@ (8007180 <HAL_RCC_ClockConfig+0x1c8>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 0302 	and.w	r3, r3, #2
 8007092:	2b00      	cmp	r3, #0
 8007094:	d101      	bne.n	800709a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e06b      	b.n	8007172 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800709a:	4b39      	ldr	r3, [pc, #228]	@ (8007180 <HAL_RCC_ClockConfig+0x1c8>)
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	f023 0203 	bic.w	r2, r3, #3
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	4936      	ldr	r1, [pc, #216]	@ (8007180 <HAL_RCC_ClockConfig+0x1c8>)
 80070a8:	4313      	orrs	r3, r2
 80070aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070ac:	f7fc fc96 	bl	80039dc <HAL_GetTick>
 80070b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070b2:	e00a      	b.n	80070ca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070b4:	f7fc fc92 	bl	80039dc <HAL_GetTick>
 80070b8:	4602      	mov	r2, r0
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	1ad3      	subs	r3, r2, r3
 80070be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d901      	bls.n	80070ca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e053      	b.n	8007172 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070ca:	4b2d      	ldr	r3, [pc, #180]	@ (8007180 <HAL_RCC_ClockConfig+0x1c8>)
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	f003 020c 	and.w	r2, r3, #12
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	429a      	cmp	r2, r3
 80070da:	d1eb      	bne.n	80070b4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80070dc:	4b27      	ldr	r3, [pc, #156]	@ (800717c <HAL_RCC_ClockConfig+0x1c4>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f003 030f 	and.w	r3, r3, #15
 80070e4:	683a      	ldr	r2, [r7, #0]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d210      	bcs.n	800710c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070ea:	4b24      	ldr	r3, [pc, #144]	@ (800717c <HAL_RCC_ClockConfig+0x1c4>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f023 020f 	bic.w	r2, r3, #15
 80070f2:	4922      	ldr	r1, [pc, #136]	@ (800717c <HAL_RCC_ClockConfig+0x1c4>)
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070fa:	4b20      	ldr	r3, [pc, #128]	@ (800717c <HAL_RCC_ClockConfig+0x1c4>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 030f 	and.w	r3, r3, #15
 8007102:	683a      	ldr	r2, [r7, #0]
 8007104:	429a      	cmp	r2, r3
 8007106:	d001      	beq.n	800710c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	e032      	b.n	8007172 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 0304 	and.w	r3, r3, #4
 8007114:	2b00      	cmp	r3, #0
 8007116:	d008      	beq.n	800712a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007118:	4b19      	ldr	r3, [pc, #100]	@ (8007180 <HAL_RCC_ClockConfig+0x1c8>)
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	4916      	ldr	r1, [pc, #88]	@ (8007180 <HAL_RCC_ClockConfig+0x1c8>)
 8007126:	4313      	orrs	r3, r2
 8007128:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 0308 	and.w	r3, r3, #8
 8007132:	2b00      	cmp	r3, #0
 8007134:	d009      	beq.n	800714a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007136:	4b12      	ldr	r3, [pc, #72]	@ (8007180 <HAL_RCC_ClockConfig+0x1c8>)
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	00db      	lsls	r3, r3, #3
 8007144:	490e      	ldr	r1, [pc, #56]	@ (8007180 <HAL_RCC_ClockConfig+0x1c8>)
 8007146:	4313      	orrs	r3, r2
 8007148:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800714a:	f000 f821 	bl	8007190 <HAL_RCC_GetSysClockFreq>
 800714e:	4602      	mov	r2, r0
 8007150:	4b0b      	ldr	r3, [pc, #44]	@ (8007180 <HAL_RCC_ClockConfig+0x1c8>)
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	091b      	lsrs	r3, r3, #4
 8007156:	f003 030f 	and.w	r3, r3, #15
 800715a:	490a      	ldr	r1, [pc, #40]	@ (8007184 <HAL_RCC_ClockConfig+0x1cc>)
 800715c:	5ccb      	ldrb	r3, [r1, r3]
 800715e:	fa22 f303 	lsr.w	r3, r2, r3
 8007162:	4a09      	ldr	r2, [pc, #36]	@ (8007188 <HAL_RCC_ClockConfig+0x1d0>)
 8007164:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007166:	4b09      	ldr	r3, [pc, #36]	@ (800718c <HAL_RCC_ClockConfig+0x1d4>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4618      	mov	r0, r3
 800716c:	f7fc fbf2 	bl	8003954 <HAL_InitTick>

  return HAL_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	3710      	adds	r7, #16
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
 800717a:	bf00      	nop
 800717c:	40023c00 	.word	0x40023c00
 8007180:	40023800 	.word	0x40023800
 8007184:	080118ac 	.word	0x080118ac
 8007188:	20000004 	.word	0x20000004
 800718c:	20000008 	.word	0x20000008

08007190 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007190:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007194:	b090      	sub	sp, #64	@ 0x40
 8007196:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007198:	2300      	movs	r3, #0
 800719a:	637b      	str	r3, [r7, #52]	@ 0x34
 800719c:	2300      	movs	r3, #0
 800719e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071a0:	2300      	movs	r3, #0
 80071a2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80071a4:	2300      	movs	r3, #0
 80071a6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80071a8:	4b59      	ldr	r3, [pc, #356]	@ (8007310 <HAL_RCC_GetSysClockFreq+0x180>)
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	f003 030c 	and.w	r3, r3, #12
 80071b0:	2b08      	cmp	r3, #8
 80071b2:	d00d      	beq.n	80071d0 <HAL_RCC_GetSysClockFreq+0x40>
 80071b4:	2b08      	cmp	r3, #8
 80071b6:	f200 80a1 	bhi.w	80072fc <HAL_RCC_GetSysClockFreq+0x16c>
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d002      	beq.n	80071c4 <HAL_RCC_GetSysClockFreq+0x34>
 80071be:	2b04      	cmp	r3, #4
 80071c0:	d003      	beq.n	80071ca <HAL_RCC_GetSysClockFreq+0x3a>
 80071c2:	e09b      	b.n	80072fc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80071c4:	4b53      	ldr	r3, [pc, #332]	@ (8007314 <HAL_RCC_GetSysClockFreq+0x184>)
 80071c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80071c8:	e09b      	b.n	8007302 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80071ca:	4b53      	ldr	r3, [pc, #332]	@ (8007318 <HAL_RCC_GetSysClockFreq+0x188>)
 80071cc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80071ce:	e098      	b.n	8007302 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80071d0:	4b4f      	ldr	r3, [pc, #316]	@ (8007310 <HAL_RCC_GetSysClockFreq+0x180>)
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80071d8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80071da:	4b4d      	ldr	r3, [pc, #308]	@ (8007310 <HAL_RCC_GetSysClockFreq+0x180>)
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d028      	beq.n	8007238 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071e6:	4b4a      	ldr	r3, [pc, #296]	@ (8007310 <HAL_RCC_GetSysClockFreq+0x180>)
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	099b      	lsrs	r3, r3, #6
 80071ec:	2200      	movs	r2, #0
 80071ee:	623b      	str	r3, [r7, #32]
 80071f0:	627a      	str	r2, [r7, #36]	@ 0x24
 80071f2:	6a3b      	ldr	r3, [r7, #32]
 80071f4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80071f8:	2100      	movs	r1, #0
 80071fa:	4b47      	ldr	r3, [pc, #284]	@ (8007318 <HAL_RCC_GetSysClockFreq+0x188>)
 80071fc:	fb03 f201 	mul.w	r2, r3, r1
 8007200:	2300      	movs	r3, #0
 8007202:	fb00 f303 	mul.w	r3, r0, r3
 8007206:	4413      	add	r3, r2
 8007208:	4a43      	ldr	r2, [pc, #268]	@ (8007318 <HAL_RCC_GetSysClockFreq+0x188>)
 800720a:	fba0 1202 	umull	r1, r2, r0, r2
 800720e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007210:	460a      	mov	r2, r1
 8007212:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007214:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007216:	4413      	add	r3, r2
 8007218:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800721a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800721c:	2200      	movs	r2, #0
 800721e:	61bb      	str	r3, [r7, #24]
 8007220:	61fa      	str	r2, [r7, #28]
 8007222:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007226:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800722a:	f7f9 fc67 	bl	8000afc <__aeabi_uldivmod>
 800722e:	4602      	mov	r2, r0
 8007230:	460b      	mov	r3, r1
 8007232:	4613      	mov	r3, r2
 8007234:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007236:	e053      	b.n	80072e0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007238:	4b35      	ldr	r3, [pc, #212]	@ (8007310 <HAL_RCC_GetSysClockFreq+0x180>)
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	099b      	lsrs	r3, r3, #6
 800723e:	2200      	movs	r2, #0
 8007240:	613b      	str	r3, [r7, #16]
 8007242:	617a      	str	r2, [r7, #20]
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800724a:	f04f 0b00 	mov.w	fp, #0
 800724e:	4652      	mov	r2, sl
 8007250:	465b      	mov	r3, fp
 8007252:	f04f 0000 	mov.w	r0, #0
 8007256:	f04f 0100 	mov.w	r1, #0
 800725a:	0159      	lsls	r1, r3, #5
 800725c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007260:	0150      	lsls	r0, r2, #5
 8007262:	4602      	mov	r2, r0
 8007264:	460b      	mov	r3, r1
 8007266:	ebb2 080a 	subs.w	r8, r2, sl
 800726a:	eb63 090b 	sbc.w	r9, r3, fp
 800726e:	f04f 0200 	mov.w	r2, #0
 8007272:	f04f 0300 	mov.w	r3, #0
 8007276:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800727a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800727e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007282:	ebb2 0408 	subs.w	r4, r2, r8
 8007286:	eb63 0509 	sbc.w	r5, r3, r9
 800728a:	f04f 0200 	mov.w	r2, #0
 800728e:	f04f 0300 	mov.w	r3, #0
 8007292:	00eb      	lsls	r3, r5, #3
 8007294:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007298:	00e2      	lsls	r2, r4, #3
 800729a:	4614      	mov	r4, r2
 800729c:	461d      	mov	r5, r3
 800729e:	eb14 030a 	adds.w	r3, r4, sl
 80072a2:	603b      	str	r3, [r7, #0]
 80072a4:	eb45 030b 	adc.w	r3, r5, fp
 80072a8:	607b      	str	r3, [r7, #4]
 80072aa:	f04f 0200 	mov.w	r2, #0
 80072ae:	f04f 0300 	mov.w	r3, #0
 80072b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80072b6:	4629      	mov	r1, r5
 80072b8:	028b      	lsls	r3, r1, #10
 80072ba:	4621      	mov	r1, r4
 80072bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80072c0:	4621      	mov	r1, r4
 80072c2:	028a      	lsls	r2, r1, #10
 80072c4:	4610      	mov	r0, r2
 80072c6:	4619      	mov	r1, r3
 80072c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072ca:	2200      	movs	r2, #0
 80072cc:	60bb      	str	r3, [r7, #8]
 80072ce:	60fa      	str	r2, [r7, #12]
 80072d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072d4:	f7f9 fc12 	bl	8000afc <__aeabi_uldivmod>
 80072d8:	4602      	mov	r2, r0
 80072da:	460b      	mov	r3, r1
 80072dc:	4613      	mov	r3, r2
 80072de:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80072e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007310 <HAL_RCC_GetSysClockFreq+0x180>)
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	0c1b      	lsrs	r3, r3, #16
 80072e6:	f003 0303 	and.w	r3, r3, #3
 80072ea:	3301      	adds	r3, #1
 80072ec:	005b      	lsls	r3, r3, #1
 80072ee:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80072f0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80072f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80072f8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80072fa:	e002      	b.n	8007302 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80072fc:	4b05      	ldr	r3, [pc, #20]	@ (8007314 <HAL_RCC_GetSysClockFreq+0x184>)
 80072fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007300:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007304:	4618      	mov	r0, r3
 8007306:	3740      	adds	r7, #64	@ 0x40
 8007308:	46bd      	mov	sp, r7
 800730a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800730e:	bf00      	nop
 8007310:	40023800 	.word	0x40023800
 8007314:	00f42400 	.word	0x00f42400
 8007318:	017d7840 	.word	0x017d7840

0800731c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800731c:	b480      	push	{r7}
 800731e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007320:	4b03      	ldr	r3, [pc, #12]	@ (8007330 <HAL_RCC_GetHCLKFreq+0x14>)
 8007322:	681b      	ldr	r3, [r3, #0]
}
 8007324:	4618      	mov	r0, r3
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	20000004 	.word	0x20000004

08007334 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007338:	f7ff fff0 	bl	800731c <HAL_RCC_GetHCLKFreq>
 800733c:	4602      	mov	r2, r0
 800733e:	4b05      	ldr	r3, [pc, #20]	@ (8007354 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	0a9b      	lsrs	r3, r3, #10
 8007344:	f003 0307 	and.w	r3, r3, #7
 8007348:	4903      	ldr	r1, [pc, #12]	@ (8007358 <HAL_RCC_GetPCLK1Freq+0x24>)
 800734a:	5ccb      	ldrb	r3, [r1, r3]
 800734c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007350:	4618      	mov	r0, r3
 8007352:	bd80      	pop	{r7, pc}
 8007354:	40023800 	.word	0x40023800
 8007358:	080118bc 	.word	0x080118bc

0800735c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007360:	f7ff ffdc 	bl	800731c <HAL_RCC_GetHCLKFreq>
 8007364:	4602      	mov	r2, r0
 8007366:	4b05      	ldr	r3, [pc, #20]	@ (800737c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	0b5b      	lsrs	r3, r3, #13
 800736c:	f003 0307 	and.w	r3, r3, #7
 8007370:	4903      	ldr	r1, [pc, #12]	@ (8007380 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007372:	5ccb      	ldrb	r3, [r1, r3]
 8007374:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007378:	4618      	mov	r0, r3
 800737a:	bd80      	pop	{r7, pc}
 800737c:	40023800 	.word	0x40023800
 8007380:	080118bc 	.word	0x080118bc

08007384 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b088      	sub	sp, #32
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800738c:	2300      	movs	r3, #0
 800738e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007390:	2300      	movs	r3, #0
 8007392:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007394:	2300      	movs	r3, #0
 8007396:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007398:	2300      	movs	r3, #0
 800739a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800739c:	2300      	movs	r3, #0
 800739e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 0301 	and.w	r3, r3, #1
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d012      	beq.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80073ac:	4b69      	ldr	r3, [pc, #420]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	4a68      	ldr	r2, [pc, #416]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073b2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80073b6:	6093      	str	r3, [r2, #8]
 80073b8:	4b66      	ldr	r3, [pc, #408]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073ba:	689a      	ldr	r2, [r3, #8]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073c0:	4964      	ldr	r1, [pc, #400]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073c2:	4313      	orrs	r3, r2
 80073c4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d101      	bne.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80073ce:	2301      	movs	r3, #1
 80073d0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d017      	beq.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80073de:	4b5d      	ldr	r3, [pc, #372]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073e4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073ec:	4959      	ldr	r1, [pc, #356]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073ee:	4313      	orrs	r3, r2
 80073f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073fc:	d101      	bne.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80073fe:	2301      	movs	r3, #1
 8007400:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007406:	2b00      	cmp	r3, #0
 8007408:	d101      	bne.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800740a:	2301      	movs	r3, #1
 800740c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007416:	2b00      	cmp	r3, #0
 8007418:	d017      	beq.n	800744a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800741a:	4b4e      	ldr	r3, [pc, #312]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800741c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007420:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007428:	494a      	ldr	r1, [pc, #296]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800742a:	4313      	orrs	r3, r2
 800742c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007434:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007438:	d101      	bne.n	800743e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800743a:	2301      	movs	r3, #1
 800743c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007442:	2b00      	cmp	r3, #0
 8007444:	d101      	bne.n	800744a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007446:	2301      	movs	r3, #1
 8007448:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007452:	2b00      	cmp	r3, #0
 8007454:	d001      	beq.n	800745a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007456:	2301      	movs	r3, #1
 8007458:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f003 0320 	and.w	r3, r3, #32
 8007462:	2b00      	cmp	r3, #0
 8007464:	f000 808b 	beq.w	800757e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007468:	4b3a      	ldr	r3, [pc, #232]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800746a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800746c:	4a39      	ldr	r2, [pc, #228]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800746e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007472:	6413      	str	r3, [r2, #64]	@ 0x40
 8007474:	4b37      	ldr	r3, [pc, #220]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007478:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800747c:	60bb      	str	r3, [r7, #8]
 800747e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007480:	4b35      	ldr	r3, [pc, #212]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a34      	ldr	r2, [pc, #208]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007486:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800748a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800748c:	f7fc faa6 	bl	80039dc <HAL_GetTick>
 8007490:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007492:	e008      	b.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007494:	f7fc faa2 	bl	80039dc <HAL_GetTick>
 8007498:	4602      	mov	r2, r0
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	1ad3      	subs	r3, r2, r3
 800749e:	2b64      	cmp	r3, #100	@ 0x64
 80074a0:	d901      	bls.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80074a2:	2303      	movs	r3, #3
 80074a4:	e357      	b.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80074a6:	4b2c      	ldr	r3, [pc, #176]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d0f0      	beq.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80074b2:	4b28      	ldr	r3, [pc, #160]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074ba:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d035      	beq.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074ca:	693a      	ldr	r2, [r7, #16]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d02e      	beq.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80074d0:	4b20      	ldr	r3, [pc, #128]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074d8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80074da:	4b1e      	ldr	r3, [pc, #120]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074de:	4a1d      	ldr	r2, [pc, #116]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074e4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80074e6:	4b1b      	ldr	r3, [pc, #108]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074ea:	4a1a      	ldr	r2, [pc, #104]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80074f0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80074f2:	4a18      	ldr	r2, [pc, #96]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80074f8:	4b16      	ldr	r3, [pc, #88]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074fc:	f003 0301 	and.w	r3, r3, #1
 8007500:	2b01      	cmp	r3, #1
 8007502:	d114      	bne.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007504:	f7fc fa6a 	bl	80039dc <HAL_GetTick>
 8007508:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800750a:	e00a      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800750c:	f7fc fa66 	bl	80039dc <HAL_GetTick>
 8007510:	4602      	mov	r2, r0
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	f241 3288 	movw	r2, #5000	@ 0x1388
 800751a:	4293      	cmp	r3, r2
 800751c:	d901      	bls.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800751e:	2303      	movs	r3, #3
 8007520:	e319      	b.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007522:	4b0c      	ldr	r3, [pc, #48]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007526:	f003 0302 	and.w	r3, r3, #2
 800752a:	2b00      	cmp	r3, #0
 800752c:	d0ee      	beq.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007532:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007536:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800753a:	d111      	bne.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800753c:	4b05      	ldr	r3, [pc, #20]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007548:	4b04      	ldr	r3, [pc, #16]	@ (800755c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800754a:	400b      	ands	r3, r1
 800754c:	4901      	ldr	r1, [pc, #4]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800754e:	4313      	orrs	r3, r2
 8007550:	608b      	str	r3, [r1, #8]
 8007552:	e00b      	b.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007554:	40023800 	.word	0x40023800
 8007558:	40007000 	.word	0x40007000
 800755c:	0ffffcff 	.word	0x0ffffcff
 8007560:	4baa      	ldr	r3, [pc, #680]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	4aa9      	ldr	r2, [pc, #676]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007566:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800756a:	6093      	str	r3, [r2, #8]
 800756c:	4ba7      	ldr	r3, [pc, #668]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800756e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007574:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007578:	49a4      	ldr	r1, [pc, #656]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800757a:	4313      	orrs	r3, r2
 800757c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f003 0310 	and.w	r3, r3, #16
 8007586:	2b00      	cmp	r3, #0
 8007588:	d010      	beq.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800758a:	4ba0      	ldr	r3, [pc, #640]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800758c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007590:	4a9e      	ldr	r2, [pc, #632]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007592:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007596:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800759a:	4b9c      	ldr	r3, [pc, #624]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800759c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075a4:	4999      	ldr	r1, [pc, #612]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075a6:	4313      	orrs	r3, r2
 80075a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d00a      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80075b8:	4b94      	ldr	r3, [pc, #592]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075be:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075c6:	4991      	ldr	r1, [pc, #580]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075c8:	4313      	orrs	r3, r2
 80075ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00a      	beq.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80075da:	4b8c      	ldr	r3, [pc, #560]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075e0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80075e8:	4988      	ldr	r1, [pc, #544]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075ea:	4313      	orrs	r3, r2
 80075ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00a      	beq.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80075fc:	4b83      	ldr	r3, [pc, #524]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007602:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800760a:	4980      	ldr	r1, [pc, #512]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800760c:	4313      	orrs	r3, r2
 800760e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00a      	beq.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800761e:	4b7b      	ldr	r3, [pc, #492]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007620:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007624:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800762c:	4977      	ldr	r1, [pc, #476]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800762e:	4313      	orrs	r3, r2
 8007630:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800763c:	2b00      	cmp	r3, #0
 800763e:	d00a      	beq.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007640:	4b72      	ldr	r3, [pc, #456]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007646:	f023 0203 	bic.w	r2, r3, #3
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800764e:	496f      	ldr	r1, [pc, #444]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007650:	4313      	orrs	r3, r2
 8007652:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00a      	beq.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007662:	4b6a      	ldr	r3, [pc, #424]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007664:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007668:	f023 020c 	bic.w	r2, r3, #12
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007670:	4966      	ldr	r1, [pc, #408]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007672:	4313      	orrs	r3, r2
 8007674:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007680:	2b00      	cmp	r3, #0
 8007682:	d00a      	beq.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007684:	4b61      	ldr	r3, [pc, #388]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007686:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800768a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007692:	495e      	ldr	r1, [pc, #376]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007694:	4313      	orrs	r3, r2
 8007696:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00a      	beq.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80076a6:	4b59      	ldr	r3, [pc, #356]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076ac:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076b4:	4955      	ldr	r1, [pc, #340]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076b6:	4313      	orrs	r3, r2
 80076b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d00a      	beq.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80076c8:	4b50      	ldr	r3, [pc, #320]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076ce:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076d6:	494d      	ldr	r1, [pc, #308]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076d8:	4313      	orrs	r3, r2
 80076da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00a      	beq.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80076ea:	4b48      	ldr	r3, [pc, #288]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076f0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076f8:	4944      	ldr	r1, [pc, #272]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076fa:	4313      	orrs	r3, r2
 80076fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007708:	2b00      	cmp	r3, #0
 800770a:	d00a      	beq.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800770c:	4b3f      	ldr	r3, [pc, #252]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800770e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007712:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800771a:	493c      	ldr	r1, [pc, #240]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800771c:	4313      	orrs	r3, r2
 800771e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00a      	beq.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800772e:	4b37      	ldr	r3, [pc, #220]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007730:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007734:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800773c:	4933      	ldr	r1, [pc, #204]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800773e:	4313      	orrs	r3, r2
 8007740:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00a      	beq.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007750:	4b2e      	ldr	r3, [pc, #184]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007752:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007756:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800775e:	492b      	ldr	r1, [pc, #172]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007760:	4313      	orrs	r3, r2
 8007762:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800776e:	2b00      	cmp	r3, #0
 8007770:	d011      	beq.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007772:	4b26      	ldr	r3, [pc, #152]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007774:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007778:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007780:	4922      	ldr	r1, [pc, #136]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007782:	4313      	orrs	r3, r2
 8007784:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800778c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007790:	d101      	bne.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007792:	2301      	movs	r3, #1
 8007794:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f003 0308 	and.w	r3, r3, #8
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d001      	beq.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80077a2:	2301      	movs	r3, #1
 80077a4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d00a      	beq.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80077b2:	4b16      	ldr	r3, [pc, #88]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80077b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077b8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077c0:	4912      	ldr	r1, [pc, #72]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80077c2:	4313      	orrs	r3, r2
 80077c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d00b      	beq.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80077d4:	4b0d      	ldr	r3, [pc, #52]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80077d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077da:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077e4:	4909      	ldr	r1, [pc, #36]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80077e6:	4313      	orrs	r3, r2
 80077e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d006      	beq.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	f000 80d9 	beq.w	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007800:	4b02      	ldr	r3, [pc, #8]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a01      	ldr	r2, [pc, #4]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007806:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800780a:	e001      	b.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800780c:	40023800 	.word	0x40023800
 8007810:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007812:	f7fc f8e3 	bl	80039dc <HAL_GetTick>
 8007816:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007818:	e008      	b.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800781a:	f7fc f8df 	bl	80039dc <HAL_GetTick>
 800781e:	4602      	mov	r2, r0
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	1ad3      	subs	r3, r2, r3
 8007824:	2b64      	cmp	r3, #100	@ 0x64
 8007826:	d901      	bls.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007828:	2303      	movs	r3, #3
 800782a:	e194      	b.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800782c:	4b6c      	ldr	r3, [pc, #432]	@ (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007834:	2b00      	cmp	r3, #0
 8007836:	d1f0      	bne.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f003 0301 	and.w	r3, r3, #1
 8007840:	2b00      	cmp	r3, #0
 8007842:	d021      	beq.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007848:	2b00      	cmp	r3, #0
 800784a:	d11d      	bne.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800784c:	4b64      	ldr	r3, [pc, #400]	@ (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800784e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007852:	0c1b      	lsrs	r3, r3, #16
 8007854:	f003 0303 	and.w	r3, r3, #3
 8007858:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800785a:	4b61      	ldr	r3, [pc, #388]	@ (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800785c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007860:	0e1b      	lsrs	r3, r3, #24
 8007862:	f003 030f 	and.w	r3, r3, #15
 8007866:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	019a      	lsls	r2, r3, #6
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	041b      	lsls	r3, r3, #16
 8007872:	431a      	orrs	r2, r3
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	061b      	lsls	r3, r3, #24
 8007878:	431a      	orrs	r2, r3
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	071b      	lsls	r3, r3, #28
 8007880:	4957      	ldr	r1, [pc, #348]	@ (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007882:	4313      	orrs	r3, r2
 8007884:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007890:	2b00      	cmp	r3, #0
 8007892:	d004      	beq.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007898:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800789c:	d00a      	beq.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d02e      	beq.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80078b2:	d129      	bne.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80078b4:	4b4a      	ldr	r3, [pc, #296]	@ (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80078ba:	0c1b      	lsrs	r3, r3, #16
 80078bc:	f003 0303 	and.w	r3, r3, #3
 80078c0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80078c2:	4b47      	ldr	r3, [pc, #284]	@ (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80078c8:	0f1b      	lsrs	r3, r3, #28
 80078ca:	f003 0307 	and.w	r3, r3, #7
 80078ce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	019a      	lsls	r2, r3, #6
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	041b      	lsls	r3, r3, #16
 80078da:	431a      	orrs	r2, r3
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	061b      	lsls	r3, r3, #24
 80078e2:	431a      	orrs	r2, r3
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	071b      	lsls	r3, r3, #28
 80078e8:	493d      	ldr	r1, [pc, #244]	@ (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078ea:	4313      	orrs	r3, r2
 80078ec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80078f0:	4b3b      	ldr	r3, [pc, #236]	@ (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078f6:	f023 021f 	bic.w	r2, r3, #31
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078fe:	3b01      	subs	r3, #1
 8007900:	4937      	ldr	r1, [pc, #220]	@ (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007902:	4313      	orrs	r3, r2
 8007904:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007910:	2b00      	cmp	r3, #0
 8007912:	d01d      	beq.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007914:	4b32      	ldr	r3, [pc, #200]	@ (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007916:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800791a:	0e1b      	lsrs	r3, r3, #24
 800791c:	f003 030f 	and.w	r3, r3, #15
 8007920:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007922:	4b2f      	ldr	r3, [pc, #188]	@ (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007924:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007928:	0f1b      	lsrs	r3, r3, #28
 800792a:	f003 0307 	and.w	r3, r3, #7
 800792e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	019a      	lsls	r2, r3, #6
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	041b      	lsls	r3, r3, #16
 800793c:	431a      	orrs	r2, r3
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	061b      	lsls	r3, r3, #24
 8007942:	431a      	orrs	r2, r3
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	071b      	lsls	r3, r3, #28
 8007948:	4925      	ldr	r1, [pc, #148]	@ (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800794a:	4313      	orrs	r3, r2
 800794c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007958:	2b00      	cmp	r3, #0
 800795a:	d011      	beq.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	019a      	lsls	r2, r3, #6
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	691b      	ldr	r3, [r3, #16]
 8007966:	041b      	lsls	r3, r3, #16
 8007968:	431a      	orrs	r2, r3
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	68db      	ldr	r3, [r3, #12]
 800796e:	061b      	lsls	r3, r3, #24
 8007970:	431a      	orrs	r2, r3
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	071b      	lsls	r3, r3, #28
 8007978:	4919      	ldr	r1, [pc, #100]	@ (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800797a:	4313      	orrs	r3, r2
 800797c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007980:	4b17      	ldr	r3, [pc, #92]	@ (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a16      	ldr	r2, [pc, #88]	@ (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007986:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800798a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800798c:	f7fc f826 	bl	80039dc <HAL_GetTick>
 8007990:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007992:	e008      	b.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007994:	f7fc f822 	bl	80039dc <HAL_GetTick>
 8007998:	4602      	mov	r2, r0
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	1ad3      	subs	r3, r2, r3
 800799e:	2b64      	cmp	r3, #100	@ 0x64
 80079a0:	d901      	bls.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80079a2:	2303      	movs	r3, #3
 80079a4:	e0d7      	b.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80079a6:	4b0e      	ldr	r3, [pc, #56]	@ (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d0f0      	beq.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80079b2:	69bb      	ldr	r3, [r7, #24]
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	f040 80cd 	bne.w	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80079ba:	4b09      	ldr	r3, [pc, #36]	@ (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a08      	ldr	r2, [pc, #32]	@ (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80079c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80079c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079c6:	f7fc f809 	bl	80039dc <HAL_GetTick>
 80079ca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80079cc:	e00a      	b.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80079ce:	f7fc f805 	bl	80039dc <HAL_GetTick>
 80079d2:	4602      	mov	r2, r0
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	1ad3      	subs	r3, r2, r3
 80079d8:	2b64      	cmp	r3, #100	@ 0x64
 80079da:	d903      	bls.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80079dc:	2303      	movs	r3, #3
 80079de:	e0ba      	b.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80079e0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80079e4:	4b5e      	ldr	r3, [pc, #376]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80079ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079f0:	d0ed      	beq.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d003      	beq.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d009      	beq.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d02e      	beq.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d12a      	bne.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007a1a:	4b51      	ldr	r3, [pc, #324]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a20:	0c1b      	lsrs	r3, r3, #16
 8007a22:	f003 0303 	and.w	r3, r3, #3
 8007a26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007a28:	4b4d      	ldr	r3, [pc, #308]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a2e:	0f1b      	lsrs	r3, r3, #28
 8007a30:	f003 0307 	and.w	r3, r3, #7
 8007a34:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	695b      	ldr	r3, [r3, #20]
 8007a3a:	019a      	lsls	r2, r3, #6
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	041b      	lsls	r3, r3, #16
 8007a40:	431a      	orrs	r2, r3
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	699b      	ldr	r3, [r3, #24]
 8007a46:	061b      	lsls	r3, r3, #24
 8007a48:	431a      	orrs	r2, r3
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	071b      	lsls	r3, r3, #28
 8007a4e:	4944      	ldr	r1, [pc, #272]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a50:	4313      	orrs	r3, r2
 8007a52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007a56:	4b42      	ldr	r3, [pc, #264]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a5c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a64:	3b01      	subs	r3, #1
 8007a66:	021b      	lsls	r3, r3, #8
 8007a68:	493d      	ldr	r1, [pc, #244]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d022      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007a80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a84:	d11d      	bne.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007a86:	4b36      	ldr	r3, [pc, #216]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a8c:	0e1b      	lsrs	r3, r3, #24
 8007a8e:	f003 030f 	and.w	r3, r3, #15
 8007a92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007a94:	4b32      	ldr	r3, [pc, #200]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a9a:	0f1b      	lsrs	r3, r3, #28
 8007a9c:	f003 0307 	and.w	r3, r3, #7
 8007aa0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	695b      	ldr	r3, [r3, #20]
 8007aa6:	019a      	lsls	r2, r3, #6
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6a1b      	ldr	r3, [r3, #32]
 8007aac:	041b      	lsls	r3, r3, #16
 8007aae:	431a      	orrs	r2, r3
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	061b      	lsls	r3, r3, #24
 8007ab4:	431a      	orrs	r2, r3
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	071b      	lsls	r3, r3, #28
 8007aba:	4929      	ldr	r1, [pc, #164]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007abc:	4313      	orrs	r3, r2
 8007abe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f003 0308 	and.w	r3, r3, #8
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d028      	beq.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007ace:	4b24      	ldr	r3, [pc, #144]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ad4:	0e1b      	lsrs	r3, r3, #24
 8007ad6:	f003 030f 	and.w	r3, r3, #15
 8007ada:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007adc:	4b20      	ldr	r3, [pc, #128]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ae2:	0c1b      	lsrs	r3, r3, #16
 8007ae4:	f003 0303 	and.w	r3, r3, #3
 8007ae8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	695b      	ldr	r3, [r3, #20]
 8007aee:	019a      	lsls	r2, r3, #6
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	041b      	lsls	r3, r3, #16
 8007af4:	431a      	orrs	r2, r3
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	061b      	lsls	r3, r3, #24
 8007afa:	431a      	orrs	r2, r3
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	69db      	ldr	r3, [r3, #28]
 8007b00:	071b      	lsls	r3, r3, #28
 8007b02:	4917      	ldr	r1, [pc, #92]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007b04:	4313      	orrs	r3, r2
 8007b06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007b0a:	4b15      	ldr	r3, [pc, #84]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b10:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b18:	4911      	ldr	r1, [pc, #68]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007b20:	4b0f      	ldr	r3, [pc, #60]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a0e      	ldr	r2, [pc, #56]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007b26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b2c:	f7fb ff56 	bl	80039dc <HAL_GetTick>
 8007b30:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007b32:	e008      	b.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007b34:	f7fb ff52 	bl	80039dc <HAL_GetTick>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	1ad3      	subs	r3, r2, r3
 8007b3e:	2b64      	cmp	r3, #100	@ 0x64
 8007b40:	d901      	bls.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b42:	2303      	movs	r3, #3
 8007b44:	e007      	b.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007b46:	4b06      	ldr	r3, [pc, #24]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b52:	d1ef      	bne.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007b54:	2300      	movs	r3, #0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3720      	adds	r7, #32
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	40023800 	.word	0x40023800

08007b64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d101      	bne.n	8007b76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	e049      	b.n	8007c0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d106      	bne.n	8007b90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f7fb fa0e 	bl	8002fac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2202      	movs	r2, #2
 8007b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	3304      	adds	r3, #4
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	4610      	mov	r0, r2
 8007ba4:	f000 fbd8 	bl	8008358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2201      	movs	r2, #1
 8007c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c08:	2300      	movs	r3, #0
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3708      	adds	r7, #8
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}

08007c12 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b082      	sub	sp, #8
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d101      	bne.n	8007c24 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007c20:	2301      	movs	r3, #1
 8007c22:	e049      	b.n	8007cb8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d106      	bne.n	8007c3e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 f841 	bl	8007cc0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2202      	movs	r2, #2
 8007c42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	3304      	adds	r3, #4
 8007c4e:	4619      	mov	r1, r3
 8007c50:	4610      	mov	r0, r2
 8007c52:	f000 fb81 	bl	8008358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2201      	movs	r2, #1
 8007c5a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2201      	movs	r2, #1
 8007c62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2201      	movs	r2, #1
 8007c72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2201      	movs	r2, #1
 8007c7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2201      	movs	r2, #1
 8007c82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2201      	movs	r2, #1
 8007c92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2201      	movs	r2, #1
 8007c9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2201      	movs	r2, #1
 8007caa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3708      	adds	r7, #8
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b083      	sub	sp, #12
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007cc8:	bf00      	nop
 8007cca:	370c      	adds	r7, #12
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d109      	bne.n	8007cf8 <HAL_TIM_PWM_Start+0x24>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	bf14      	ite	ne
 8007cf0:	2301      	movne	r3, #1
 8007cf2:	2300      	moveq	r3, #0
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	e03c      	b.n	8007d72 <HAL_TIM_PWM_Start+0x9e>
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	2b04      	cmp	r3, #4
 8007cfc:	d109      	bne.n	8007d12 <HAL_TIM_PWM_Start+0x3e>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	bf14      	ite	ne
 8007d0a:	2301      	movne	r3, #1
 8007d0c:	2300      	moveq	r3, #0
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	e02f      	b.n	8007d72 <HAL_TIM_PWM_Start+0x9e>
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	2b08      	cmp	r3, #8
 8007d16:	d109      	bne.n	8007d2c <HAL_TIM_PWM_Start+0x58>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	bf14      	ite	ne
 8007d24:	2301      	movne	r3, #1
 8007d26:	2300      	moveq	r3, #0
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	e022      	b.n	8007d72 <HAL_TIM_PWM_Start+0x9e>
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	2b0c      	cmp	r3, #12
 8007d30:	d109      	bne.n	8007d46 <HAL_TIM_PWM_Start+0x72>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	bf14      	ite	ne
 8007d3e:	2301      	movne	r3, #1
 8007d40:	2300      	moveq	r3, #0
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	e015      	b.n	8007d72 <HAL_TIM_PWM_Start+0x9e>
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	2b10      	cmp	r3, #16
 8007d4a:	d109      	bne.n	8007d60 <HAL_TIM_PWM_Start+0x8c>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	bf14      	ite	ne
 8007d58:	2301      	movne	r3, #1
 8007d5a:	2300      	moveq	r3, #0
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	e008      	b.n	8007d72 <HAL_TIM_PWM_Start+0x9e>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	bf14      	ite	ne
 8007d6c:	2301      	movne	r3, #1
 8007d6e:	2300      	moveq	r3, #0
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d001      	beq.n	8007d7a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	e092      	b.n	8007ea0 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d104      	bne.n	8007d8a <HAL_TIM_PWM_Start+0xb6>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2202      	movs	r2, #2
 8007d84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d88:	e023      	b.n	8007dd2 <HAL_TIM_PWM_Start+0xfe>
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	2b04      	cmp	r3, #4
 8007d8e:	d104      	bne.n	8007d9a <HAL_TIM_PWM_Start+0xc6>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2202      	movs	r2, #2
 8007d94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d98:	e01b      	b.n	8007dd2 <HAL_TIM_PWM_Start+0xfe>
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	2b08      	cmp	r3, #8
 8007d9e:	d104      	bne.n	8007daa <HAL_TIM_PWM_Start+0xd6>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2202      	movs	r2, #2
 8007da4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007da8:	e013      	b.n	8007dd2 <HAL_TIM_PWM_Start+0xfe>
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	2b0c      	cmp	r3, #12
 8007dae:	d104      	bne.n	8007dba <HAL_TIM_PWM_Start+0xe6>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2202      	movs	r2, #2
 8007db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007db8:	e00b      	b.n	8007dd2 <HAL_TIM_PWM_Start+0xfe>
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	2b10      	cmp	r3, #16
 8007dbe:	d104      	bne.n	8007dca <HAL_TIM_PWM_Start+0xf6>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2202      	movs	r2, #2
 8007dc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007dc8:	e003      	b.n	8007dd2 <HAL_TIM_PWM_Start+0xfe>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2202      	movs	r2, #2
 8007dce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	6839      	ldr	r1, [r7, #0]
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f000 fdc0 	bl	8008960 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a30      	ldr	r2, [pc, #192]	@ (8007ea8 <HAL_TIM_PWM_Start+0x1d4>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d004      	beq.n	8007df4 <HAL_TIM_PWM_Start+0x120>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a2f      	ldr	r2, [pc, #188]	@ (8007eac <HAL_TIM_PWM_Start+0x1d8>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d101      	bne.n	8007df8 <HAL_TIM_PWM_Start+0x124>
 8007df4:	2301      	movs	r3, #1
 8007df6:	e000      	b.n	8007dfa <HAL_TIM_PWM_Start+0x126>
 8007df8:	2300      	movs	r3, #0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d007      	beq.n	8007e0e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007e0c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a25      	ldr	r2, [pc, #148]	@ (8007ea8 <HAL_TIM_PWM_Start+0x1d4>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d022      	beq.n	8007e5e <HAL_TIM_PWM_Start+0x18a>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e20:	d01d      	beq.n	8007e5e <HAL_TIM_PWM_Start+0x18a>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a22      	ldr	r2, [pc, #136]	@ (8007eb0 <HAL_TIM_PWM_Start+0x1dc>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d018      	beq.n	8007e5e <HAL_TIM_PWM_Start+0x18a>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a20      	ldr	r2, [pc, #128]	@ (8007eb4 <HAL_TIM_PWM_Start+0x1e0>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d013      	beq.n	8007e5e <HAL_TIM_PWM_Start+0x18a>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a1f      	ldr	r2, [pc, #124]	@ (8007eb8 <HAL_TIM_PWM_Start+0x1e4>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d00e      	beq.n	8007e5e <HAL_TIM_PWM_Start+0x18a>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a19      	ldr	r2, [pc, #100]	@ (8007eac <HAL_TIM_PWM_Start+0x1d8>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d009      	beq.n	8007e5e <HAL_TIM_PWM_Start+0x18a>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a1b      	ldr	r2, [pc, #108]	@ (8007ebc <HAL_TIM_PWM_Start+0x1e8>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d004      	beq.n	8007e5e <HAL_TIM_PWM_Start+0x18a>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a19      	ldr	r2, [pc, #100]	@ (8007ec0 <HAL_TIM_PWM_Start+0x1ec>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d115      	bne.n	8007e8a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	689a      	ldr	r2, [r3, #8]
 8007e64:	4b17      	ldr	r3, [pc, #92]	@ (8007ec4 <HAL_TIM_PWM_Start+0x1f0>)
 8007e66:	4013      	ands	r3, r2
 8007e68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2b06      	cmp	r3, #6
 8007e6e:	d015      	beq.n	8007e9c <HAL_TIM_PWM_Start+0x1c8>
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e76:	d011      	beq.n	8007e9c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f042 0201 	orr.w	r2, r2, #1
 8007e86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e88:	e008      	b.n	8007e9c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f042 0201 	orr.w	r2, r2, #1
 8007e98:	601a      	str	r2, [r3, #0]
 8007e9a:	e000      	b.n	8007e9e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e9c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007e9e:	2300      	movs	r3, #0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3710      	adds	r7, #16
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}
 8007ea8:	40010000 	.word	0x40010000
 8007eac:	40010400 	.word	0x40010400
 8007eb0:	40000400 	.word	0x40000400
 8007eb4:	40000800 	.word	0x40000800
 8007eb8:	40000c00 	.word	0x40000c00
 8007ebc:	40014000 	.word	0x40014000
 8007ec0:	40001800 	.word	0x40001800
 8007ec4:	00010007 	.word	0x00010007

08007ec8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b086      	sub	sp, #24
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d101      	bne.n	8007edc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e08f      	b.n	8007ffc <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d106      	bne.n	8007ef6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f7fb f817 	bl	8002f24 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2202      	movs	r2, #2
 8007efa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	6899      	ldr	r1, [r3, #8]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	4b3e      	ldr	r3, [pc, #248]	@ (8008004 <HAL_TIM_Encoder_Init+0x13c>)
 8007f0a:	400b      	ands	r3, r1
 8007f0c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	3304      	adds	r3, #4
 8007f16:	4619      	mov	r1, r3
 8007f18:	4610      	mov	r0, r2
 8007f1a:	f000 fa1d 	bl	8008358 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	699b      	ldr	r3, [r3, #24]
 8007f2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	6a1b      	ldr	r3, [r3, #32]
 8007f34:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	697a      	ldr	r2, [r7, #20]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007f40:	693a      	ldr	r2, [r7, #16]
 8007f42:	4b31      	ldr	r3, [pc, #196]	@ (8008008 <HAL_TIM_Encoder_Init+0x140>)
 8007f44:	4013      	ands	r3, r2
 8007f46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	689a      	ldr	r2, [r3, #8]
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	699b      	ldr	r3, [r3, #24]
 8007f50:	021b      	lsls	r3, r3, #8
 8007f52:	4313      	orrs	r3, r2
 8007f54:	693a      	ldr	r2, [r7, #16]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007f5a:	693a      	ldr	r2, [r7, #16]
 8007f5c:	4b2b      	ldr	r3, [pc, #172]	@ (800800c <HAL_TIM_Encoder_Init+0x144>)
 8007f5e:	4013      	ands	r3, r2
 8007f60:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007f62:	693a      	ldr	r2, [r7, #16]
 8007f64:	4b2a      	ldr	r3, [pc, #168]	@ (8008010 <HAL_TIM_Encoder_Init+0x148>)
 8007f66:	4013      	ands	r3, r2
 8007f68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	68da      	ldr	r2, [r3, #12]
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	69db      	ldr	r3, [r3, #28]
 8007f72:	021b      	lsls	r3, r3, #8
 8007f74:	4313      	orrs	r3, r2
 8007f76:	693a      	ldr	r2, [r7, #16]
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	691b      	ldr	r3, [r3, #16]
 8007f80:	011a      	lsls	r2, r3, #4
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	6a1b      	ldr	r3, [r3, #32]
 8007f86:	031b      	lsls	r3, r3, #12
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	693a      	ldr	r2, [r7, #16]
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007f96:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007f9e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	685a      	ldr	r2, [r3, #4]
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	695b      	ldr	r3, [r3, #20]
 8007fa8:	011b      	lsls	r3, r3, #4
 8007faa:	4313      	orrs	r3, r2
 8007fac:	68fa      	ldr	r2, [r7, #12]
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	697a      	ldr	r2, [r7, #20]
 8007fb8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	693a      	ldr	r2, [r7, #16]
 8007fc0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	68fa      	ldr	r2, [r7, #12]
 8007fc8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2201      	movs	r2, #1
 8007fde:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2201      	movs	r2, #1
 8007fee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ffa:	2300      	movs	r3, #0
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3718      	adds	r7, #24
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}
 8008004:	fffebff8 	.word	0xfffebff8
 8008008:	fffffcfc 	.word	0xfffffcfc
 800800c:	fffff3f3 	.word	0xfffff3f3
 8008010:	ffff0f0f 	.word	0xffff0f0f

08008014 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008024:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800802c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008034:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800803c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d110      	bne.n	8008066 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008044:	7bfb      	ldrb	r3, [r7, #15]
 8008046:	2b01      	cmp	r3, #1
 8008048:	d102      	bne.n	8008050 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800804a:	7b7b      	ldrb	r3, [r7, #13]
 800804c:	2b01      	cmp	r3, #1
 800804e:	d001      	beq.n	8008054 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	e069      	b.n	8008128 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2202      	movs	r2, #2
 8008058:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2202      	movs	r2, #2
 8008060:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008064:	e031      	b.n	80080ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	2b04      	cmp	r3, #4
 800806a:	d110      	bne.n	800808e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800806c:	7bbb      	ldrb	r3, [r7, #14]
 800806e:	2b01      	cmp	r3, #1
 8008070:	d102      	bne.n	8008078 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008072:	7b3b      	ldrb	r3, [r7, #12]
 8008074:	2b01      	cmp	r3, #1
 8008076:	d001      	beq.n	800807c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008078:	2301      	movs	r3, #1
 800807a:	e055      	b.n	8008128 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2202      	movs	r2, #2
 8008080:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2202      	movs	r2, #2
 8008088:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800808c:	e01d      	b.n	80080ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800808e:	7bfb      	ldrb	r3, [r7, #15]
 8008090:	2b01      	cmp	r3, #1
 8008092:	d108      	bne.n	80080a6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008094:	7bbb      	ldrb	r3, [r7, #14]
 8008096:	2b01      	cmp	r3, #1
 8008098:	d105      	bne.n	80080a6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800809a:	7b7b      	ldrb	r3, [r7, #13]
 800809c:	2b01      	cmp	r3, #1
 800809e:	d102      	bne.n	80080a6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80080a0:	7b3b      	ldrb	r3, [r7, #12]
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d001      	beq.n	80080aa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	e03e      	b.n	8008128 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2202      	movs	r2, #2
 80080ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2202      	movs	r2, #2
 80080b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2202      	movs	r2, #2
 80080be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2202      	movs	r2, #2
 80080c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d003      	beq.n	80080d8 <HAL_TIM_Encoder_Start+0xc4>
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	2b04      	cmp	r3, #4
 80080d4:	d008      	beq.n	80080e8 <HAL_TIM_Encoder_Start+0xd4>
 80080d6:	e00f      	b.n	80080f8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2201      	movs	r2, #1
 80080de:	2100      	movs	r1, #0
 80080e0:	4618      	mov	r0, r3
 80080e2:	f000 fc3d 	bl	8008960 <TIM_CCxChannelCmd>
      break;
 80080e6:	e016      	b.n	8008116 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	2201      	movs	r2, #1
 80080ee:	2104      	movs	r1, #4
 80080f0:	4618      	mov	r0, r3
 80080f2:	f000 fc35 	bl	8008960 <TIM_CCxChannelCmd>
      break;
 80080f6:	e00e      	b.n	8008116 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2201      	movs	r2, #1
 80080fe:	2100      	movs	r1, #0
 8008100:	4618      	mov	r0, r3
 8008102:	f000 fc2d 	bl	8008960 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	2201      	movs	r2, #1
 800810c:	2104      	movs	r1, #4
 800810e:	4618      	mov	r0, r3
 8008110:	f000 fc26 	bl	8008960 <TIM_CCxChannelCmd>
      break;
 8008114:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f042 0201 	orr.w	r2, r2, #1
 8008124:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008126:	2300      	movs	r3, #0
}
 8008128:	4618      	mov	r0, r3
 800812a:	3710      	adds	r7, #16
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b086      	sub	sp, #24
 8008134:	af00      	add	r7, sp, #0
 8008136:	60f8      	str	r0, [r7, #12]
 8008138:	60b9      	str	r1, [r7, #8]
 800813a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800813c:	2300      	movs	r3, #0
 800813e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008146:	2b01      	cmp	r3, #1
 8008148:	d101      	bne.n	800814e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800814a:	2302      	movs	r3, #2
 800814c:	e0ff      	b.n	800834e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2201      	movs	r2, #1
 8008152:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2b14      	cmp	r3, #20
 800815a:	f200 80f0 	bhi.w	800833e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800815e:	a201      	add	r2, pc, #4	@ (adr r2, 8008164 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008164:	080081b9 	.word	0x080081b9
 8008168:	0800833f 	.word	0x0800833f
 800816c:	0800833f 	.word	0x0800833f
 8008170:	0800833f 	.word	0x0800833f
 8008174:	080081f9 	.word	0x080081f9
 8008178:	0800833f 	.word	0x0800833f
 800817c:	0800833f 	.word	0x0800833f
 8008180:	0800833f 	.word	0x0800833f
 8008184:	0800823b 	.word	0x0800823b
 8008188:	0800833f 	.word	0x0800833f
 800818c:	0800833f 	.word	0x0800833f
 8008190:	0800833f 	.word	0x0800833f
 8008194:	0800827b 	.word	0x0800827b
 8008198:	0800833f 	.word	0x0800833f
 800819c:	0800833f 	.word	0x0800833f
 80081a0:	0800833f 	.word	0x0800833f
 80081a4:	080082bd 	.word	0x080082bd
 80081a8:	0800833f 	.word	0x0800833f
 80081ac:	0800833f 	.word	0x0800833f
 80081b0:	0800833f 	.word	0x0800833f
 80081b4:	080082fd 	.word	0x080082fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	68b9      	ldr	r1, [r7, #8]
 80081be:	4618      	mov	r0, r3
 80081c0:	f000 f970 	bl	80084a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	699a      	ldr	r2, [r3, #24]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f042 0208 	orr.w	r2, r2, #8
 80081d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	699a      	ldr	r2, [r3, #24]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f022 0204 	bic.w	r2, r2, #4
 80081e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	6999      	ldr	r1, [r3, #24]
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	691a      	ldr	r2, [r3, #16]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	430a      	orrs	r2, r1
 80081f4:	619a      	str	r2, [r3, #24]
      break;
 80081f6:	e0a5      	b.n	8008344 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	68b9      	ldr	r1, [r7, #8]
 80081fe:	4618      	mov	r0, r3
 8008200:	f000 f9c2 	bl	8008588 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	699a      	ldr	r2, [r3, #24]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008212:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	699a      	ldr	r2, [r3, #24]
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008222:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	6999      	ldr	r1, [r3, #24]
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	691b      	ldr	r3, [r3, #16]
 800822e:	021a      	lsls	r2, r3, #8
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	430a      	orrs	r2, r1
 8008236:	619a      	str	r2, [r3, #24]
      break;
 8008238:	e084      	b.n	8008344 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	68b9      	ldr	r1, [r7, #8]
 8008240:	4618      	mov	r0, r3
 8008242:	f000 fa19 	bl	8008678 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	69da      	ldr	r2, [r3, #28]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f042 0208 	orr.w	r2, r2, #8
 8008254:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	69da      	ldr	r2, [r3, #28]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f022 0204 	bic.w	r2, r2, #4
 8008264:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	69d9      	ldr	r1, [r3, #28]
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	691a      	ldr	r2, [r3, #16]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	430a      	orrs	r2, r1
 8008276:	61da      	str	r2, [r3, #28]
      break;
 8008278:	e064      	b.n	8008344 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	68b9      	ldr	r1, [r7, #8]
 8008280:	4618      	mov	r0, r3
 8008282:	f000 fa6f 	bl	8008764 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	69da      	ldr	r2, [r3, #28]
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008294:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	69da      	ldr	r2, [r3, #28]
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	69d9      	ldr	r1, [r3, #28]
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	691b      	ldr	r3, [r3, #16]
 80082b0:	021a      	lsls	r2, r3, #8
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	430a      	orrs	r2, r1
 80082b8:	61da      	str	r2, [r3, #28]
      break;
 80082ba:	e043      	b.n	8008344 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	68b9      	ldr	r1, [r7, #8]
 80082c2:	4618      	mov	r0, r3
 80082c4:	f000 faa6 	bl	8008814 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f042 0208 	orr.w	r2, r2, #8
 80082d6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f022 0204 	bic.w	r2, r2, #4
 80082e6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	691a      	ldr	r2, [r3, #16]
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	430a      	orrs	r2, r1
 80082f8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80082fa:	e023      	b.n	8008344 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	68b9      	ldr	r1, [r7, #8]
 8008302:	4618      	mov	r0, r3
 8008304:	f000 fad8 	bl	80088b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008316:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008326:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	691b      	ldr	r3, [r3, #16]
 8008332:	021a      	lsls	r2, r3, #8
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	430a      	orrs	r2, r1
 800833a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800833c:	e002      	b.n	8008344 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800833e:	2301      	movs	r3, #1
 8008340:	75fb      	strb	r3, [r7, #23]
      break;
 8008342:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2200      	movs	r2, #0
 8008348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800834c:	7dfb      	ldrb	r3, [r7, #23]
}
 800834e:	4618      	mov	r0, r3
 8008350:	3718      	adds	r7, #24
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop

08008358 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008358:	b480      	push	{r7}
 800835a:	b085      	sub	sp, #20
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4a43      	ldr	r2, [pc, #268]	@ (8008478 <TIM_Base_SetConfig+0x120>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d013      	beq.n	8008398 <TIM_Base_SetConfig+0x40>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008376:	d00f      	beq.n	8008398 <TIM_Base_SetConfig+0x40>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	4a40      	ldr	r2, [pc, #256]	@ (800847c <TIM_Base_SetConfig+0x124>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d00b      	beq.n	8008398 <TIM_Base_SetConfig+0x40>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	4a3f      	ldr	r2, [pc, #252]	@ (8008480 <TIM_Base_SetConfig+0x128>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d007      	beq.n	8008398 <TIM_Base_SetConfig+0x40>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	4a3e      	ldr	r2, [pc, #248]	@ (8008484 <TIM_Base_SetConfig+0x12c>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d003      	beq.n	8008398 <TIM_Base_SetConfig+0x40>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	4a3d      	ldr	r2, [pc, #244]	@ (8008488 <TIM_Base_SetConfig+0x130>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d108      	bne.n	80083aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800839e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	68fa      	ldr	r2, [r7, #12]
 80083a6:	4313      	orrs	r3, r2
 80083a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4a32      	ldr	r2, [pc, #200]	@ (8008478 <TIM_Base_SetConfig+0x120>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d02b      	beq.n	800840a <TIM_Base_SetConfig+0xb2>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083b8:	d027      	beq.n	800840a <TIM_Base_SetConfig+0xb2>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	4a2f      	ldr	r2, [pc, #188]	@ (800847c <TIM_Base_SetConfig+0x124>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d023      	beq.n	800840a <TIM_Base_SetConfig+0xb2>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	4a2e      	ldr	r2, [pc, #184]	@ (8008480 <TIM_Base_SetConfig+0x128>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d01f      	beq.n	800840a <TIM_Base_SetConfig+0xb2>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	4a2d      	ldr	r2, [pc, #180]	@ (8008484 <TIM_Base_SetConfig+0x12c>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d01b      	beq.n	800840a <TIM_Base_SetConfig+0xb2>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	4a2c      	ldr	r2, [pc, #176]	@ (8008488 <TIM_Base_SetConfig+0x130>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d017      	beq.n	800840a <TIM_Base_SetConfig+0xb2>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4a2b      	ldr	r2, [pc, #172]	@ (800848c <TIM_Base_SetConfig+0x134>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d013      	beq.n	800840a <TIM_Base_SetConfig+0xb2>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4a2a      	ldr	r2, [pc, #168]	@ (8008490 <TIM_Base_SetConfig+0x138>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d00f      	beq.n	800840a <TIM_Base_SetConfig+0xb2>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4a29      	ldr	r2, [pc, #164]	@ (8008494 <TIM_Base_SetConfig+0x13c>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d00b      	beq.n	800840a <TIM_Base_SetConfig+0xb2>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4a28      	ldr	r2, [pc, #160]	@ (8008498 <TIM_Base_SetConfig+0x140>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d007      	beq.n	800840a <TIM_Base_SetConfig+0xb2>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4a27      	ldr	r2, [pc, #156]	@ (800849c <TIM_Base_SetConfig+0x144>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d003      	beq.n	800840a <TIM_Base_SetConfig+0xb2>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a26      	ldr	r2, [pc, #152]	@ (80084a0 <TIM_Base_SetConfig+0x148>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d108      	bne.n	800841c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008410:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	68fa      	ldr	r2, [r7, #12]
 8008418:	4313      	orrs	r3, r2
 800841a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	695b      	ldr	r3, [r3, #20]
 8008426:	4313      	orrs	r3, r2
 8008428:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	689a      	ldr	r2, [r3, #8]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4a0e      	ldr	r2, [pc, #56]	@ (8008478 <TIM_Base_SetConfig+0x120>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d003      	beq.n	800844a <TIM_Base_SetConfig+0xf2>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	4a10      	ldr	r2, [pc, #64]	@ (8008488 <TIM_Base_SetConfig+0x130>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d103      	bne.n	8008452 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	691a      	ldr	r2, [r3, #16]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f043 0204 	orr.w	r2, r3, #4
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2201      	movs	r2, #1
 8008462:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	601a      	str	r2, [r3, #0]
}
 800846a:	bf00      	nop
 800846c:	3714      	adds	r7, #20
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr
 8008476:	bf00      	nop
 8008478:	40010000 	.word	0x40010000
 800847c:	40000400 	.word	0x40000400
 8008480:	40000800 	.word	0x40000800
 8008484:	40000c00 	.word	0x40000c00
 8008488:	40010400 	.word	0x40010400
 800848c:	40014000 	.word	0x40014000
 8008490:	40014400 	.word	0x40014400
 8008494:	40014800 	.word	0x40014800
 8008498:	40001800 	.word	0x40001800
 800849c:	40001c00 	.word	0x40001c00
 80084a0:	40002000 	.word	0x40002000

080084a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b087      	sub	sp, #28
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6a1b      	ldr	r3, [r3, #32]
 80084b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6a1b      	ldr	r3, [r3, #32]
 80084b8:	f023 0201 	bic.w	r2, r3, #1
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	699b      	ldr	r3, [r3, #24]
 80084ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	4b2b      	ldr	r3, [pc, #172]	@ (800857c <TIM_OC1_SetConfig+0xd8>)
 80084d0:	4013      	ands	r3, r2
 80084d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f023 0303 	bic.w	r3, r3, #3
 80084da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	68fa      	ldr	r2, [r7, #12]
 80084e2:	4313      	orrs	r3, r2
 80084e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	f023 0302 	bic.w	r3, r3, #2
 80084ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	697a      	ldr	r2, [r7, #20]
 80084f4:	4313      	orrs	r3, r2
 80084f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	4a21      	ldr	r2, [pc, #132]	@ (8008580 <TIM_OC1_SetConfig+0xdc>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d003      	beq.n	8008508 <TIM_OC1_SetConfig+0x64>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	4a20      	ldr	r2, [pc, #128]	@ (8008584 <TIM_OC1_SetConfig+0xe0>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d10c      	bne.n	8008522 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	f023 0308 	bic.w	r3, r3, #8
 800850e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	68db      	ldr	r3, [r3, #12]
 8008514:	697a      	ldr	r2, [r7, #20]
 8008516:	4313      	orrs	r3, r2
 8008518:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	f023 0304 	bic.w	r3, r3, #4
 8008520:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	4a16      	ldr	r2, [pc, #88]	@ (8008580 <TIM_OC1_SetConfig+0xdc>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d003      	beq.n	8008532 <TIM_OC1_SetConfig+0x8e>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	4a15      	ldr	r2, [pc, #84]	@ (8008584 <TIM_OC1_SetConfig+0xe0>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d111      	bne.n	8008556 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008538:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008540:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	695b      	ldr	r3, [r3, #20]
 8008546:	693a      	ldr	r2, [r7, #16]
 8008548:	4313      	orrs	r3, r2
 800854a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	699b      	ldr	r3, [r3, #24]
 8008550:	693a      	ldr	r2, [r7, #16]
 8008552:	4313      	orrs	r3, r2
 8008554:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	693a      	ldr	r2, [r7, #16]
 800855a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	68fa      	ldr	r2, [r7, #12]
 8008560:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	685a      	ldr	r2, [r3, #4]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	697a      	ldr	r2, [r7, #20]
 800856e:	621a      	str	r2, [r3, #32]
}
 8008570:	bf00      	nop
 8008572:	371c      	adds	r7, #28
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr
 800857c:	fffeff8f 	.word	0xfffeff8f
 8008580:	40010000 	.word	0x40010000
 8008584:	40010400 	.word	0x40010400

08008588 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008588:	b480      	push	{r7}
 800858a:	b087      	sub	sp, #28
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6a1b      	ldr	r3, [r3, #32]
 8008596:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6a1b      	ldr	r3, [r3, #32]
 800859c:	f023 0210 	bic.w	r2, r3, #16
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	699b      	ldr	r3, [r3, #24]
 80085ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80085b0:	68fa      	ldr	r2, [r7, #12]
 80085b2:	4b2e      	ldr	r3, [pc, #184]	@ (800866c <TIM_OC2_SetConfig+0xe4>)
 80085b4:	4013      	ands	r3, r2
 80085b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	021b      	lsls	r3, r3, #8
 80085c6:	68fa      	ldr	r2, [r7, #12]
 80085c8:	4313      	orrs	r3, r2
 80085ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	f023 0320 	bic.w	r3, r3, #32
 80085d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	689b      	ldr	r3, [r3, #8]
 80085d8:	011b      	lsls	r3, r3, #4
 80085da:	697a      	ldr	r2, [r7, #20]
 80085dc:	4313      	orrs	r3, r2
 80085de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4a23      	ldr	r2, [pc, #140]	@ (8008670 <TIM_OC2_SetConfig+0xe8>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d003      	beq.n	80085f0 <TIM_OC2_SetConfig+0x68>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	4a22      	ldr	r2, [pc, #136]	@ (8008674 <TIM_OC2_SetConfig+0xec>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d10d      	bne.n	800860c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80085f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	68db      	ldr	r3, [r3, #12]
 80085fc:	011b      	lsls	r3, r3, #4
 80085fe:	697a      	ldr	r2, [r7, #20]
 8008600:	4313      	orrs	r3, r2
 8008602:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800860a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	4a18      	ldr	r2, [pc, #96]	@ (8008670 <TIM_OC2_SetConfig+0xe8>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d003      	beq.n	800861c <TIM_OC2_SetConfig+0x94>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	4a17      	ldr	r2, [pc, #92]	@ (8008674 <TIM_OC2_SetConfig+0xec>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d113      	bne.n	8008644 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008622:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800862a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	695b      	ldr	r3, [r3, #20]
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	693a      	ldr	r2, [r7, #16]
 8008634:	4313      	orrs	r3, r2
 8008636:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	699b      	ldr	r3, [r3, #24]
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	693a      	ldr	r2, [r7, #16]
 8008640:	4313      	orrs	r3, r2
 8008642:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	693a      	ldr	r2, [r7, #16]
 8008648:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	68fa      	ldr	r2, [r7, #12]
 800864e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	685a      	ldr	r2, [r3, #4]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	697a      	ldr	r2, [r7, #20]
 800865c:	621a      	str	r2, [r3, #32]
}
 800865e:	bf00      	nop
 8008660:	371c      	adds	r7, #28
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr
 800866a:	bf00      	nop
 800866c:	feff8fff 	.word	0xfeff8fff
 8008670:	40010000 	.word	0x40010000
 8008674:	40010400 	.word	0x40010400

08008678 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008678:	b480      	push	{r7}
 800867a:	b087      	sub	sp, #28
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6a1b      	ldr	r3, [r3, #32]
 8008686:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6a1b      	ldr	r3, [r3, #32]
 800868c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	69db      	ldr	r3, [r3, #28]
 800869e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80086a0:	68fa      	ldr	r2, [r7, #12]
 80086a2:	4b2d      	ldr	r3, [pc, #180]	@ (8008758 <TIM_OC3_SetConfig+0xe0>)
 80086a4:	4013      	ands	r3, r2
 80086a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f023 0303 	bic.w	r3, r3, #3
 80086ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	68fa      	ldr	r2, [r7, #12]
 80086b6:	4313      	orrs	r3, r2
 80086b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80086c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	021b      	lsls	r3, r3, #8
 80086c8:	697a      	ldr	r2, [r7, #20]
 80086ca:	4313      	orrs	r3, r2
 80086cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	4a22      	ldr	r2, [pc, #136]	@ (800875c <TIM_OC3_SetConfig+0xe4>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d003      	beq.n	80086de <TIM_OC3_SetConfig+0x66>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	4a21      	ldr	r2, [pc, #132]	@ (8008760 <TIM_OC3_SetConfig+0xe8>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d10d      	bne.n	80086fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80086e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	021b      	lsls	r3, r3, #8
 80086ec:	697a      	ldr	r2, [r7, #20]
 80086ee:	4313      	orrs	r3, r2
 80086f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80086f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4a17      	ldr	r2, [pc, #92]	@ (800875c <TIM_OC3_SetConfig+0xe4>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d003      	beq.n	800870a <TIM_OC3_SetConfig+0x92>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4a16      	ldr	r2, [pc, #88]	@ (8008760 <TIM_OC3_SetConfig+0xe8>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d113      	bne.n	8008732 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008710:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008718:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	695b      	ldr	r3, [r3, #20]
 800871e:	011b      	lsls	r3, r3, #4
 8008720:	693a      	ldr	r2, [r7, #16]
 8008722:	4313      	orrs	r3, r2
 8008724:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	699b      	ldr	r3, [r3, #24]
 800872a:	011b      	lsls	r3, r3, #4
 800872c:	693a      	ldr	r2, [r7, #16]
 800872e:	4313      	orrs	r3, r2
 8008730:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	693a      	ldr	r2, [r7, #16]
 8008736:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	685a      	ldr	r2, [r3, #4]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	697a      	ldr	r2, [r7, #20]
 800874a:	621a      	str	r2, [r3, #32]
}
 800874c:	bf00      	nop
 800874e:	371c      	adds	r7, #28
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr
 8008758:	fffeff8f 	.word	0xfffeff8f
 800875c:	40010000 	.word	0x40010000
 8008760:	40010400 	.word	0x40010400

08008764 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008764:	b480      	push	{r7}
 8008766:	b087      	sub	sp, #28
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6a1b      	ldr	r3, [r3, #32]
 8008772:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6a1b      	ldr	r3, [r3, #32]
 8008778:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	69db      	ldr	r3, [r3, #28]
 800878a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800878c:	68fa      	ldr	r2, [r7, #12]
 800878e:	4b1e      	ldr	r3, [pc, #120]	@ (8008808 <TIM_OC4_SetConfig+0xa4>)
 8008790:	4013      	ands	r3, r2
 8008792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800879a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	021b      	lsls	r3, r3, #8
 80087a2:	68fa      	ldr	r2, [r7, #12]
 80087a4:	4313      	orrs	r3, r2
 80087a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80087ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	031b      	lsls	r3, r3, #12
 80087b6:	693a      	ldr	r2, [r7, #16]
 80087b8:	4313      	orrs	r3, r2
 80087ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	4a13      	ldr	r2, [pc, #76]	@ (800880c <TIM_OC4_SetConfig+0xa8>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d003      	beq.n	80087cc <TIM_OC4_SetConfig+0x68>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	4a12      	ldr	r2, [pc, #72]	@ (8008810 <TIM_OC4_SetConfig+0xac>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d109      	bne.n	80087e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80087d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	695b      	ldr	r3, [r3, #20]
 80087d8:	019b      	lsls	r3, r3, #6
 80087da:	697a      	ldr	r2, [r7, #20]
 80087dc:	4313      	orrs	r3, r2
 80087de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	697a      	ldr	r2, [r7, #20]
 80087e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	68fa      	ldr	r2, [r7, #12]
 80087ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	685a      	ldr	r2, [r3, #4]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	693a      	ldr	r2, [r7, #16]
 80087f8:	621a      	str	r2, [r3, #32]
}
 80087fa:	bf00      	nop
 80087fc:	371c      	adds	r7, #28
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr
 8008806:	bf00      	nop
 8008808:	feff8fff 	.word	0xfeff8fff
 800880c:	40010000 	.word	0x40010000
 8008810:	40010400 	.word	0x40010400

08008814 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008814:	b480      	push	{r7}
 8008816:	b087      	sub	sp, #28
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6a1b      	ldr	r3, [r3, #32]
 8008822:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6a1b      	ldr	r3, [r3, #32]
 8008828:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800883a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800883c:	68fa      	ldr	r2, [r7, #12]
 800883e:	4b1b      	ldr	r3, [pc, #108]	@ (80088ac <TIM_OC5_SetConfig+0x98>)
 8008840:	4013      	ands	r3, r2
 8008842:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	68fa      	ldr	r2, [r7, #12]
 800884a:	4313      	orrs	r3, r2
 800884c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008854:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	041b      	lsls	r3, r3, #16
 800885c:	693a      	ldr	r2, [r7, #16]
 800885e:	4313      	orrs	r3, r2
 8008860:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4a12      	ldr	r2, [pc, #72]	@ (80088b0 <TIM_OC5_SetConfig+0x9c>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d003      	beq.n	8008872 <TIM_OC5_SetConfig+0x5e>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4a11      	ldr	r2, [pc, #68]	@ (80088b4 <TIM_OC5_SetConfig+0xa0>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d109      	bne.n	8008886 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008878:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	695b      	ldr	r3, [r3, #20]
 800887e:	021b      	lsls	r3, r3, #8
 8008880:	697a      	ldr	r2, [r7, #20]
 8008882:	4313      	orrs	r3, r2
 8008884:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	697a      	ldr	r2, [r7, #20]
 800888a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	68fa      	ldr	r2, [r7, #12]
 8008890:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	685a      	ldr	r2, [r3, #4]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	693a      	ldr	r2, [r7, #16]
 800889e:	621a      	str	r2, [r3, #32]
}
 80088a0:	bf00      	nop
 80088a2:	371c      	adds	r7, #28
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr
 80088ac:	fffeff8f 	.word	0xfffeff8f
 80088b0:	40010000 	.word	0x40010000
 80088b4:	40010400 	.word	0x40010400

080088b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b087      	sub	sp, #28
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6a1b      	ldr	r3, [r3, #32]
 80088c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6a1b      	ldr	r3, [r3, #32]
 80088cc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80088e0:	68fa      	ldr	r2, [r7, #12]
 80088e2:	4b1c      	ldr	r3, [pc, #112]	@ (8008954 <TIM_OC6_SetConfig+0x9c>)
 80088e4:	4013      	ands	r3, r2
 80088e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	021b      	lsls	r3, r3, #8
 80088ee:	68fa      	ldr	r2, [r7, #12]
 80088f0:	4313      	orrs	r3, r2
 80088f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80088fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	689b      	ldr	r3, [r3, #8]
 8008900:	051b      	lsls	r3, r3, #20
 8008902:	693a      	ldr	r2, [r7, #16]
 8008904:	4313      	orrs	r3, r2
 8008906:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	4a13      	ldr	r2, [pc, #76]	@ (8008958 <TIM_OC6_SetConfig+0xa0>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d003      	beq.n	8008918 <TIM_OC6_SetConfig+0x60>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	4a12      	ldr	r2, [pc, #72]	@ (800895c <TIM_OC6_SetConfig+0xa4>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d109      	bne.n	800892c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800891e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	695b      	ldr	r3, [r3, #20]
 8008924:	029b      	lsls	r3, r3, #10
 8008926:	697a      	ldr	r2, [r7, #20]
 8008928:	4313      	orrs	r3, r2
 800892a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	697a      	ldr	r2, [r7, #20]
 8008930:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	68fa      	ldr	r2, [r7, #12]
 8008936:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	685a      	ldr	r2, [r3, #4]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	693a      	ldr	r2, [r7, #16]
 8008944:	621a      	str	r2, [r3, #32]
}
 8008946:	bf00      	nop
 8008948:	371c      	adds	r7, #28
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr
 8008952:	bf00      	nop
 8008954:	feff8fff 	.word	0xfeff8fff
 8008958:	40010000 	.word	0x40010000
 800895c:	40010400 	.word	0x40010400

08008960 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008960:	b480      	push	{r7}
 8008962:	b087      	sub	sp, #28
 8008964:	af00      	add	r7, sp, #0
 8008966:	60f8      	str	r0, [r7, #12]
 8008968:	60b9      	str	r1, [r7, #8]
 800896a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	f003 031f 	and.w	r3, r3, #31
 8008972:	2201      	movs	r2, #1
 8008974:	fa02 f303 	lsl.w	r3, r2, r3
 8008978:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	6a1a      	ldr	r2, [r3, #32]
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	43db      	mvns	r3, r3
 8008982:	401a      	ands	r2, r3
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	6a1a      	ldr	r2, [r3, #32]
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	f003 031f 	and.w	r3, r3, #31
 8008992:	6879      	ldr	r1, [r7, #4]
 8008994:	fa01 f303 	lsl.w	r3, r1, r3
 8008998:	431a      	orrs	r2, r3
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	621a      	str	r2, [r3, #32]
}
 800899e:	bf00      	nop
 80089a0:	371c      	adds	r7, #28
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr
	...

080089ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b085      	sub	sp, #20
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d101      	bne.n	80089c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80089c0:	2302      	movs	r3, #2
 80089c2:	e06d      	b.n	8008aa0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2201      	movs	r2, #1
 80089c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2202      	movs	r2, #2
 80089d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a30      	ldr	r2, [pc, #192]	@ (8008aac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d004      	beq.n	80089f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4a2f      	ldr	r2, [pc, #188]	@ (8008ab0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d108      	bne.n	8008a0a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80089fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	68fa      	ldr	r2, [r7, #12]
 8008a06:	4313      	orrs	r3, r2
 8008a08:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a10:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	68fa      	ldr	r2, [r7, #12]
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	68fa      	ldr	r2, [r7, #12]
 8008a22:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a20      	ldr	r2, [pc, #128]	@ (8008aac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d022      	beq.n	8008a74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a36:	d01d      	beq.n	8008a74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a1d      	ldr	r2, [pc, #116]	@ (8008ab4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d018      	beq.n	8008a74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a1c      	ldr	r2, [pc, #112]	@ (8008ab8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d013      	beq.n	8008a74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a1a      	ldr	r2, [pc, #104]	@ (8008abc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d00e      	beq.n	8008a74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a15      	ldr	r2, [pc, #84]	@ (8008ab0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d009      	beq.n	8008a74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a16      	ldr	r2, [pc, #88]	@ (8008ac0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d004      	beq.n	8008a74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a15      	ldr	r2, [pc, #84]	@ (8008ac4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d10c      	bne.n	8008a8e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a7a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	689b      	ldr	r3, [r3, #8]
 8008a80:	68ba      	ldr	r2, [r7, #8]
 8008a82:	4313      	orrs	r3, r2
 8008a84:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	68ba      	ldr	r2, [r7, #8]
 8008a8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2201      	movs	r2, #1
 8008a92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008a9e:	2300      	movs	r3, #0
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3714      	adds	r7, #20
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr
 8008aac:	40010000 	.word	0x40010000
 8008ab0:	40010400 	.word	0x40010400
 8008ab4:	40000400 	.word	0x40000400
 8008ab8:	40000800 	.word	0x40000800
 8008abc:	40000c00 	.word	0x40000c00
 8008ac0:	40014000 	.word	0x40014000
 8008ac4:	40001800 	.word	0x40001800

08008ac8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d101      	bne.n	8008ada <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	e040      	b.n	8008b5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d106      	bne.n	8008af0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f7fa fab6 	bl	800305c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2224      	movs	r2, #36	@ 0x24
 8008af4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f022 0201 	bic.w	r2, r2, #1
 8008b04:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d002      	beq.n	8008b14 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 fb16 	bl	8009140 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 f8af 	bl	8008c78 <UART_SetConfig>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d101      	bne.n	8008b24 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008b20:	2301      	movs	r3, #1
 8008b22:	e01b      	b.n	8008b5c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	685a      	ldr	r2, [r3, #4]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008b32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	689a      	ldr	r2, [r3, #8]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008b42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f042 0201 	orr.w	r2, r2, #1
 8008b52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 fb95 	bl	8009284 <UART_CheckIdleState>
 8008b5a:	4603      	mov	r3, r0
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3708      	adds	r7, #8
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b08a      	sub	sp, #40	@ 0x28
 8008b68:	af02      	add	r7, sp, #8
 8008b6a:	60f8      	str	r0, [r7, #12]
 8008b6c:	60b9      	str	r1, [r7, #8]
 8008b6e:	603b      	str	r3, [r7, #0]
 8008b70:	4613      	mov	r3, r2
 8008b72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b78:	2b20      	cmp	r3, #32
 8008b7a:	d177      	bne.n	8008c6c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d002      	beq.n	8008b88 <HAL_UART_Transmit+0x24>
 8008b82:	88fb      	ldrh	r3, [r7, #6]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d101      	bne.n	8008b8c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	e070      	b.n	8008c6e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2221      	movs	r2, #33	@ 0x21
 8008b98:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008b9a:	f7fa ff1f 	bl	80039dc <HAL_GetTick>
 8008b9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	88fa      	ldrh	r2, [r7, #6]
 8008ba4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	88fa      	ldrh	r2, [r7, #6]
 8008bac:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	689b      	ldr	r3, [r3, #8]
 8008bb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008bb8:	d108      	bne.n	8008bcc <HAL_UART_Transmit+0x68>
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	691b      	ldr	r3, [r3, #16]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d104      	bne.n	8008bcc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	61bb      	str	r3, [r7, #24]
 8008bca:	e003      	b.n	8008bd4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008bd4:	e02f      	b.n	8008c36 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	9300      	str	r3, [sp, #0]
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	2180      	movs	r1, #128	@ 0x80
 8008be0:	68f8      	ldr	r0, [r7, #12]
 8008be2:	f000 fba6 	bl	8009332 <UART_WaitOnFlagUntilTimeout>
 8008be6:	4603      	mov	r3, r0
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d004      	beq.n	8008bf6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2220      	movs	r2, #32
 8008bf0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8008bf2:	2303      	movs	r3, #3
 8008bf4:	e03b      	b.n	8008c6e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8008bf6:	69fb      	ldr	r3, [r7, #28]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d10b      	bne.n	8008c14 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008bfc:	69bb      	ldr	r3, [r7, #24]
 8008bfe:	881b      	ldrh	r3, [r3, #0]
 8008c00:	461a      	mov	r2, r3
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c0a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008c0c:	69bb      	ldr	r3, [r7, #24]
 8008c0e:	3302      	adds	r3, #2
 8008c10:	61bb      	str	r3, [r7, #24]
 8008c12:	e007      	b.n	8008c24 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	781a      	ldrb	r2, [r3, #0]
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008c1e:	69fb      	ldr	r3, [r7, #28]
 8008c20:	3301      	adds	r3, #1
 8008c22:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	3b01      	subs	r3, #1
 8008c2e:	b29a      	uxth	r2, r3
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d1c9      	bne.n	8008bd6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	9300      	str	r3, [sp, #0]
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	2140      	movs	r1, #64	@ 0x40
 8008c4c:	68f8      	ldr	r0, [r7, #12]
 8008c4e:	f000 fb70 	bl	8009332 <UART_WaitOnFlagUntilTimeout>
 8008c52:	4603      	mov	r3, r0
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d004      	beq.n	8008c62 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2220      	movs	r2, #32
 8008c5c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8008c5e:	2303      	movs	r3, #3
 8008c60:	e005      	b.n	8008c6e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2220      	movs	r2, #32
 8008c66:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	e000      	b.n	8008c6e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008c6c:	2302      	movs	r3, #2
  }
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3720      	adds	r7, #32
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
	...

08008c78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b088      	sub	sp, #32
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008c80:	2300      	movs	r3, #0
 8008c82:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	689a      	ldr	r2, [r3, #8]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	691b      	ldr	r3, [r3, #16]
 8008c8c:	431a      	orrs	r2, r3
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	695b      	ldr	r3, [r3, #20]
 8008c92:	431a      	orrs	r2, r3
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	69db      	ldr	r3, [r3, #28]
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	4ba6      	ldr	r3, [pc, #664]	@ (8008f3c <UART_SetConfig+0x2c4>)
 8008ca4:	4013      	ands	r3, r2
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	6812      	ldr	r2, [r2, #0]
 8008caa:	6979      	ldr	r1, [r7, #20]
 8008cac:	430b      	orrs	r3, r1
 8008cae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	68da      	ldr	r2, [r3, #12]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	430a      	orrs	r2, r1
 8008cc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	699b      	ldr	r3, [r3, #24]
 8008cca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6a1b      	ldr	r3, [r3, #32]
 8008cd0:	697a      	ldr	r2, [r7, #20]
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	689b      	ldr	r3, [r3, #8]
 8008cdc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	697a      	ldr	r2, [r7, #20]
 8008ce6:	430a      	orrs	r2, r1
 8008ce8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a94      	ldr	r2, [pc, #592]	@ (8008f40 <UART_SetConfig+0x2c8>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d120      	bne.n	8008d36 <UART_SetConfig+0xbe>
 8008cf4:	4b93      	ldr	r3, [pc, #588]	@ (8008f44 <UART_SetConfig+0x2cc>)
 8008cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cfa:	f003 0303 	and.w	r3, r3, #3
 8008cfe:	2b03      	cmp	r3, #3
 8008d00:	d816      	bhi.n	8008d30 <UART_SetConfig+0xb8>
 8008d02:	a201      	add	r2, pc, #4	@ (adr r2, 8008d08 <UART_SetConfig+0x90>)
 8008d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d08:	08008d19 	.word	0x08008d19
 8008d0c:	08008d25 	.word	0x08008d25
 8008d10:	08008d1f 	.word	0x08008d1f
 8008d14:	08008d2b 	.word	0x08008d2b
 8008d18:	2301      	movs	r3, #1
 8008d1a:	77fb      	strb	r3, [r7, #31]
 8008d1c:	e150      	b.n	8008fc0 <UART_SetConfig+0x348>
 8008d1e:	2302      	movs	r3, #2
 8008d20:	77fb      	strb	r3, [r7, #31]
 8008d22:	e14d      	b.n	8008fc0 <UART_SetConfig+0x348>
 8008d24:	2304      	movs	r3, #4
 8008d26:	77fb      	strb	r3, [r7, #31]
 8008d28:	e14a      	b.n	8008fc0 <UART_SetConfig+0x348>
 8008d2a:	2308      	movs	r3, #8
 8008d2c:	77fb      	strb	r3, [r7, #31]
 8008d2e:	e147      	b.n	8008fc0 <UART_SetConfig+0x348>
 8008d30:	2310      	movs	r3, #16
 8008d32:	77fb      	strb	r3, [r7, #31]
 8008d34:	e144      	b.n	8008fc0 <UART_SetConfig+0x348>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a83      	ldr	r2, [pc, #524]	@ (8008f48 <UART_SetConfig+0x2d0>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d132      	bne.n	8008da6 <UART_SetConfig+0x12e>
 8008d40:	4b80      	ldr	r3, [pc, #512]	@ (8008f44 <UART_SetConfig+0x2cc>)
 8008d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d46:	f003 030c 	and.w	r3, r3, #12
 8008d4a:	2b0c      	cmp	r3, #12
 8008d4c:	d828      	bhi.n	8008da0 <UART_SetConfig+0x128>
 8008d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8008d54 <UART_SetConfig+0xdc>)
 8008d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d54:	08008d89 	.word	0x08008d89
 8008d58:	08008da1 	.word	0x08008da1
 8008d5c:	08008da1 	.word	0x08008da1
 8008d60:	08008da1 	.word	0x08008da1
 8008d64:	08008d95 	.word	0x08008d95
 8008d68:	08008da1 	.word	0x08008da1
 8008d6c:	08008da1 	.word	0x08008da1
 8008d70:	08008da1 	.word	0x08008da1
 8008d74:	08008d8f 	.word	0x08008d8f
 8008d78:	08008da1 	.word	0x08008da1
 8008d7c:	08008da1 	.word	0x08008da1
 8008d80:	08008da1 	.word	0x08008da1
 8008d84:	08008d9b 	.word	0x08008d9b
 8008d88:	2300      	movs	r3, #0
 8008d8a:	77fb      	strb	r3, [r7, #31]
 8008d8c:	e118      	b.n	8008fc0 <UART_SetConfig+0x348>
 8008d8e:	2302      	movs	r3, #2
 8008d90:	77fb      	strb	r3, [r7, #31]
 8008d92:	e115      	b.n	8008fc0 <UART_SetConfig+0x348>
 8008d94:	2304      	movs	r3, #4
 8008d96:	77fb      	strb	r3, [r7, #31]
 8008d98:	e112      	b.n	8008fc0 <UART_SetConfig+0x348>
 8008d9a:	2308      	movs	r3, #8
 8008d9c:	77fb      	strb	r3, [r7, #31]
 8008d9e:	e10f      	b.n	8008fc0 <UART_SetConfig+0x348>
 8008da0:	2310      	movs	r3, #16
 8008da2:	77fb      	strb	r3, [r7, #31]
 8008da4:	e10c      	b.n	8008fc0 <UART_SetConfig+0x348>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a68      	ldr	r2, [pc, #416]	@ (8008f4c <UART_SetConfig+0x2d4>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d120      	bne.n	8008df2 <UART_SetConfig+0x17a>
 8008db0:	4b64      	ldr	r3, [pc, #400]	@ (8008f44 <UART_SetConfig+0x2cc>)
 8008db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008db6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008dba:	2b30      	cmp	r3, #48	@ 0x30
 8008dbc:	d013      	beq.n	8008de6 <UART_SetConfig+0x16e>
 8008dbe:	2b30      	cmp	r3, #48	@ 0x30
 8008dc0:	d814      	bhi.n	8008dec <UART_SetConfig+0x174>
 8008dc2:	2b20      	cmp	r3, #32
 8008dc4:	d009      	beq.n	8008dda <UART_SetConfig+0x162>
 8008dc6:	2b20      	cmp	r3, #32
 8008dc8:	d810      	bhi.n	8008dec <UART_SetConfig+0x174>
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d002      	beq.n	8008dd4 <UART_SetConfig+0x15c>
 8008dce:	2b10      	cmp	r3, #16
 8008dd0:	d006      	beq.n	8008de0 <UART_SetConfig+0x168>
 8008dd2:	e00b      	b.n	8008dec <UART_SetConfig+0x174>
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	77fb      	strb	r3, [r7, #31]
 8008dd8:	e0f2      	b.n	8008fc0 <UART_SetConfig+0x348>
 8008dda:	2302      	movs	r3, #2
 8008ddc:	77fb      	strb	r3, [r7, #31]
 8008dde:	e0ef      	b.n	8008fc0 <UART_SetConfig+0x348>
 8008de0:	2304      	movs	r3, #4
 8008de2:	77fb      	strb	r3, [r7, #31]
 8008de4:	e0ec      	b.n	8008fc0 <UART_SetConfig+0x348>
 8008de6:	2308      	movs	r3, #8
 8008de8:	77fb      	strb	r3, [r7, #31]
 8008dea:	e0e9      	b.n	8008fc0 <UART_SetConfig+0x348>
 8008dec:	2310      	movs	r3, #16
 8008dee:	77fb      	strb	r3, [r7, #31]
 8008df0:	e0e6      	b.n	8008fc0 <UART_SetConfig+0x348>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a56      	ldr	r2, [pc, #344]	@ (8008f50 <UART_SetConfig+0x2d8>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d120      	bne.n	8008e3e <UART_SetConfig+0x1c6>
 8008dfc:	4b51      	ldr	r3, [pc, #324]	@ (8008f44 <UART_SetConfig+0x2cc>)
 8008dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e02:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008e06:	2bc0      	cmp	r3, #192	@ 0xc0
 8008e08:	d013      	beq.n	8008e32 <UART_SetConfig+0x1ba>
 8008e0a:	2bc0      	cmp	r3, #192	@ 0xc0
 8008e0c:	d814      	bhi.n	8008e38 <UART_SetConfig+0x1c0>
 8008e0e:	2b80      	cmp	r3, #128	@ 0x80
 8008e10:	d009      	beq.n	8008e26 <UART_SetConfig+0x1ae>
 8008e12:	2b80      	cmp	r3, #128	@ 0x80
 8008e14:	d810      	bhi.n	8008e38 <UART_SetConfig+0x1c0>
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d002      	beq.n	8008e20 <UART_SetConfig+0x1a8>
 8008e1a:	2b40      	cmp	r3, #64	@ 0x40
 8008e1c:	d006      	beq.n	8008e2c <UART_SetConfig+0x1b4>
 8008e1e:	e00b      	b.n	8008e38 <UART_SetConfig+0x1c0>
 8008e20:	2300      	movs	r3, #0
 8008e22:	77fb      	strb	r3, [r7, #31]
 8008e24:	e0cc      	b.n	8008fc0 <UART_SetConfig+0x348>
 8008e26:	2302      	movs	r3, #2
 8008e28:	77fb      	strb	r3, [r7, #31]
 8008e2a:	e0c9      	b.n	8008fc0 <UART_SetConfig+0x348>
 8008e2c:	2304      	movs	r3, #4
 8008e2e:	77fb      	strb	r3, [r7, #31]
 8008e30:	e0c6      	b.n	8008fc0 <UART_SetConfig+0x348>
 8008e32:	2308      	movs	r3, #8
 8008e34:	77fb      	strb	r3, [r7, #31]
 8008e36:	e0c3      	b.n	8008fc0 <UART_SetConfig+0x348>
 8008e38:	2310      	movs	r3, #16
 8008e3a:	77fb      	strb	r3, [r7, #31]
 8008e3c:	e0c0      	b.n	8008fc0 <UART_SetConfig+0x348>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4a44      	ldr	r2, [pc, #272]	@ (8008f54 <UART_SetConfig+0x2dc>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d125      	bne.n	8008e94 <UART_SetConfig+0x21c>
 8008e48:	4b3e      	ldr	r3, [pc, #248]	@ (8008f44 <UART_SetConfig+0x2cc>)
 8008e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e56:	d017      	beq.n	8008e88 <UART_SetConfig+0x210>
 8008e58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e5c:	d817      	bhi.n	8008e8e <UART_SetConfig+0x216>
 8008e5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e62:	d00b      	beq.n	8008e7c <UART_SetConfig+0x204>
 8008e64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e68:	d811      	bhi.n	8008e8e <UART_SetConfig+0x216>
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d003      	beq.n	8008e76 <UART_SetConfig+0x1fe>
 8008e6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e72:	d006      	beq.n	8008e82 <UART_SetConfig+0x20a>
 8008e74:	e00b      	b.n	8008e8e <UART_SetConfig+0x216>
 8008e76:	2300      	movs	r3, #0
 8008e78:	77fb      	strb	r3, [r7, #31]
 8008e7a:	e0a1      	b.n	8008fc0 <UART_SetConfig+0x348>
 8008e7c:	2302      	movs	r3, #2
 8008e7e:	77fb      	strb	r3, [r7, #31]
 8008e80:	e09e      	b.n	8008fc0 <UART_SetConfig+0x348>
 8008e82:	2304      	movs	r3, #4
 8008e84:	77fb      	strb	r3, [r7, #31]
 8008e86:	e09b      	b.n	8008fc0 <UART_SetConfig+0x348>
 8008e88:	2308      	movs	r3, #8
 8008e8a:	77fb      	strb	r3, [r7, #31]
 8008e8c:	e098      	b.n	8008fc0 <UART_SetConfig+0x348>
 8008e8e:	2310      	movs	r3, #16
 8008e90:	77fb      	strb	r3, [r7, #31]
 8008e92:	e095      	b.n	8008fc0 <UART_SetConfig+0x348>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a2f      	ldr	r2, [pc, #188]	@ (8008f58 <UART_SetConfig+0x2e0>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d125      	bne.n	8008eea <UART_SetConfig+0x272>
 8008e9e:	4b29      	ldr	r3, [pc, #164]	@ (8008f44 <UART_SetConfig+0x2cc>)
 8008ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ea4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008ea8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008eac:	d017      	beq.n	8008ede <UART_SetConfig+0x266>
 8008eae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008eb2:	d817      	bhi.n	8008ee4 <UART_SetConfig+0x26c>
 8008eb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008eb8:	d00b      	beq.n	8008ed2 <UART_SetConfig+0x25a>
 8008eba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ebe:	d811      	bhi.n	8008ee4 <UART_SetConfig+0x26c>
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d003      	beq.n	8008ecc <UART_SetConfig+0x254>
 8008ec4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ec8:	d006      	beq.n	8008ed8 <UART_SetConfig+0x260>
 8008eca:	e00b      	b.n	8008ee4 <UART_SetConfig+0x26c>
 8008ecc:	2301      	movs	r3, #1
 8008ece:	77fb      	strb	r3, [r7, #31]
 8008ed0:	e076      	b.n	8008fc0 <UART_SetConfig+0x348>
 8008ed2:	2302      	movs	r3, #2
 8008ed4:	77fb      	strb	r3, [r7, #31]
 8008ed6:	e073      	b.n	8008fc0 <UART_SetConfig+0x348>
 8008ed8:	2304      	movs	r3, #4
 8008eda:	77fb      	strb	r3, [r7, #31]
 8008edc:	e070      	b.n	8008fc0 <UART_SetConfig+0x348>
 8008ede:	2308      	movs	r3, #8
 8008ee0:	77fb      	strb	r3, [r7, #31]
 8008ee2:	e06d      	b.n	8008fc0 <UART_SetConfig+0x348>
 8008ee4:	2310      	movs	r3, #16
 8008ee6:	77fb      	strb	r3, [r7, #31]
 8008ee8:	e06a      	b.n	8008fc0 <UART_SetConfig+0x348>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a1b      	ldr	r2, [pc, #108]	@ (8008f5c <UART_SetConfig+0x2e4>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d138      	bne.n	8008f66 <UART_SetConfig+0x2ee>
 8008ef4:	4b13      	ldr	r3, [pc, #76]	@ (8008f44 <UART_SetConfig+0x2cc>)
 8008ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008efa:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8008efe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008f02:	d017      	beq.n	8008f34 <UART_SetConfig+0x2bc>
 8008f04:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008f08:	d82a      	bhi.n	8008f60 <UART_SetConfig+0x2e8>
 8008f0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f0e:	d00b      	beq.n	8008f28 <UART_SetConfig+0x2b0>
 8008f10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f14:	d824      	bhi.n	8008f60 <UART_SetConfig+0x2e8>
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d003      	beq.n	8008f22 <UART_SetConfig+0x2aa>
 8008f1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f1e:	d006      	beq.n	8008f2e <UART_SetConfig+0x2b6>
 8008f20:	e01e      	b.n	8008f60 <UART_SetConfig+0x2e8>
 8008f22:	2300      	movs	r3, #0
 8008f24:	77fb      	strb	r3, [r7, #31]
 8008f26:	e04b      	b.n	8008fc0 <UART_SetConfig+0x348>
 8008f28:	2302      	movs	r3, #2
 8008f2a:	77fb      	strb	r3, [r7, #31]
 8008f2c:	e048      	b.n	8008fc0 <UART_SetConfig+0x348>
 8008f2e:	2304      	movs	r3, #4
 8008f30:	77fb      	strb	r3, [r7, #31]
 8008f32:	e045      	b.n	8008fc0 <UART_SetConfig+0x348>
 8008f34:	2308      	movs	r3, #8
 8008f36:	77fb      	strb	r3, [r7, #31]
 8008f38:	e042      	b.n	8008fc0 <UART_SetConfig+0x348>
 8008f3a:	bf00      	nop
 8008f3c:	efff69f3 	.word	0xefff69f3
 8008f40:	40011000 	.word	0x40011000
 8008f44:	40023800 	.word	0x40023800
 8008f48:	40004400 	.word	0x40004400
 8008f4c:	40004800 	.word	0x40004800
 8008f50:	40004c00 	.word	0x40004c00
 8008f54:	40005000 	.word	0x40005000
 8008f58:	40011400 	.word	0x40011400
 8008f5c:	40007800 	.word	0x40007800
 8008f60:	2310      	movs	r3, #16
 8008f62:	77fb      	strb	r3, [r7, #31]
 8008f64:	e02c      	b.n	8008fc0 <UART_SetConfig+0x348>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a72      	ldr	r2, [pc, #456]	@ (8009134 <UART_SetConfig+0x4bc>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d125      	bne.n	8008fbc <UART_SetConfig+0x344>
 8008f70:	4b71      	ldr	r3, [pc, #452]	@ (8009138 <UART_SetConfig+0x4c0>)
 8008f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f76:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008f7a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008f7e:	d017      	beq.n	8008fb0 <UART_SetConfig+0x338>
 8008f80:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008f84:	d817      	bhi.n	8008fb6 <UART_SetConfig+0x33e>
 8008f86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f8a:	d00b      	beq.n	8008fa4 <UART_SetConfig+0x32c>
 8008f8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f90:	d811      	bhi.n	8008fb6 <UART_SetConfig+0x33e>
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d003      	beq.n	8008f9e <UART_SetConfig+0x326>
 8008f96:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008f9a:	d006      	beq.n	8008faa <UART_SetConfig+0x332>
 8008f9c:	e00b      	b.n	8008fb6 <UART_SetConfig+0x33e>
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	77fb      	strb	r3, [r7, #31]
 8008fa2:	e00d      	b.n	8008fc0 <UART_SetConfig+0x348>
 8008fa4:	2302      	movs	r3, #2
 8008fa6:	77fb      	strb	r3, [r7, #31]
 8008fa8:	e00a      	b.n	8008fc0 <UART_SetConfig+0x348>
 8008faa:	2304      	movs	r3, #4
 8008fac:	77fb      	strb	r3, [r7, #31]
 8008fae:	e007      	b.n	8008fc0 <UART_SetConfig+0x348>
 8008fb0:	2308      	movs	r3, #8
 8008fb2:	77fb      	strb	r3, [r7, #31]
 8008fb4:	e004      	b.n	8008fc0 <UART_SetConfig+0x348>
 8008fb6:	2310      	movs	r3, #16
 8008fb8:	77fb      	strb	r3, [r7, #31]
 8008fba:	e001      	b.n	8008fc0 <UART_SetConfig+0x348>
 8008fbc:	2310      	movs	r3, #16
 8008fbe:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	69db      	ldr	r3, [r3, #28]
 8008fc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008fc8:	d15b      	bne.n	8009082 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8008fca:	7ffb      	ldrb	r3, [r7, #31]
 8008fcc:	2b08      	cmp	r3, #8
 8008fce:	d828      	bhi.n	8009022 <UART_SetConfig+0x3aa>
 8008fd0:	a201      	add	r2, pc, #4	@ (adr r2, 8008fd8 <UART_SetConfig+0x360>)
 8008fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fd6:	bf00      	nop
 8008fd8:	08008ffd 	.word	0x08008ffd
 8008fdc:	08009005 	.word	0x08009005
 8008fe0:	0800900d 	.word	0x0800900d
 8008fe4:	08009023 	.word	0x08009023
 8008fe8:	08009013 	.word	0x08009013
 8008fec:	08009023 	.word	0x08009023
 8008ff0:	08009023 	.word	0x08009023
 8008ff4:	08009023 	.word	0x08009023
 8008ff8:	0800901b 	.word	0x0800901b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ffc:	f7fe f99a 	bl	8007334 <HAL_RCC_GetPCLK1Freq>
 8009000:	61b8      	str	r0, [r7, #24]
        break;
 8009002:	e013      	b.n	800902c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009004:	f7fe f9aa 	bl	800735c <HAL_RCC_GetPCLK2Freq>
 8009008:	61b8      	str	r0, [r7, #24]
        break;
 800900a:	e00f      	b.n	800902c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800900c:	4b4b      	ldr	r3, [pc, #300]	@ (800913c <UART_SetConfig+0x4c4>)
 800900e:	61bb      	str	r3, [r7, #24]
        break;
 8009010:	e00c      	b.n	800902c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009012:	f7fe f8bd 	bl	8007190 <HAL_RCC_GetSysClockFreq>
 8009016:	61b8      	str	r0, [r7, #24]
        break;
 8009018:	e008      	b.n	800902c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800901a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800901e:	61bb      	str	r3, [r7, #24]
        break;
 8009020:	e004      	b.n	800902c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009022:	2300      	movs	r3, #0
 8009024:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009026:	2301      	movs	r3, #1
 8009028:	77bb      	strb	r3, [r7, #30]
        break;
 800902a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800902c:	69bb      	ldr	r3, [r7, #24]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d074      	beq.n	800911c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009032:	69bb      	ldr	r3, [r7, #24]
 8009034:	005a      	lsls	r2, r3, #1
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	085b      	lsrs	r3, r3, #1
 800903c:	441a      	add	r2, r3
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	fbb2 f3f3 	udiv	r3, r2, r3
 8009046:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	2b0f      	cmp	r3, #15
 800904c:	d916      	bls.n	800907c <UART_SetConfig+0x404>
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009054:	d212      	bcs.n	800907c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	b29b      	uxth	r3, r3
 800905a:	f023 030f 	bic.w	r3, r3, #15
 800905e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	085b      	lsrs	r3, r3, #1
 8009064:	b29b      	uxth	r3, r3
 8009066:	f003 0307 	and.w	r3, r3, #7
 800906a:	b29a      	uxth	r2, r3
 800906c:	89fb      	ldrh	r3, [r7, #14]
 800906e:	4313      	orrs	r3, r2
 8009070:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	89fa      	ldrh	r2, [r7, #14]
 8009078:	60da      	str	r2, [r3, #12]
 800907a:	e04f      	b.n	800911c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800907c:	2301      	movs	r3, #1
 800907e:	77bb      	strb	r3, [r7, #30]
 8009080:	e04c      	b.n	800911c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009082:	7ffb      	ldrb	r3, [r7, #31]
 8009084:	2b08      	cmp	r3, #8
 8009086:	d828      	bhi.n	80090da <UART_SetConfig+0x462>
 8009088:	a201      	add	r2, pc, #4	@ (adr r2, 8009090 <UART_SetConfig+0x418>)
 800908a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800908e:	bf00      	nop
 8009090:	080090b5 	.word	0x080090b5
 8009094:	080090bd 	.word	0x080090bd
 8009098:	080090c5 	.word	0x080090c5
 800909c:	080090db 	.word	0x080090db
 80090a0:	080090cb 	.word	0x080090cb
 80090a4:	080090db 	.word	0x080090db
 80090a8:	080090db 	.word	0x080090db
 80090ac:	080090db 	.word	0x080090db
 80090b0:	080090d3 	.word	0x080090d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80090b4:	f7fe f93e 	bl	8007334 <HAL_RCC_GetPCLK1Freq>
 80090b8:	61b8      	str	r0, [r7, #24]
        break;
 80090ba:	e013      	b.n	80090e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80090bc:	f7fe f94e 	bl	800735c <HAL_RCC_GetPCLK2Freq>
 80090c0:	61b8      	str	r0, [r7, #24]
        break;
 80090c2:	e00f      	b.n	80090e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80090c4:	4b1d      	ldr	r3, [pc, #116]	@ (800913c <UART_SetConfig+0x4c4>)
 80090c6:	61bb      	str	r3, [r7, #24]
        break;
 80090c8:	e00c      	b.n	80090e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80090ca:	f7fe f861 	bl	8007190 <HAL_RCC_GetSysClockFreq>
 80090ce:	61b8      	str	r0, [r7, #24]
        break;
 80090d0:	e008      	b.n	80090e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80090d6:	61bb      	str	r3, [r7, #24]
        break;
 80090d8:	e004      	b.n	80090e4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80090da:	2300      	movs	r3, #0
 80090dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80090de:	2301      	movs	r3, #1
 80090e0:	77bb      	strb	r3, [r7, #30]
        break;
 80090e2:	bf00      	nop
    }

    if (pclk != 0U)
 80090e4:	69bb      	ldr	r3, [r7, #24]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d018      	beq.n	800911c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	085a      	lsrs	r2, r3, #1
 80090f0:	69bb      	ldr	r3, [r7, #24]
 80090f2:	441a      	add	r2, r3
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	685b      	ldr	r3, [r3, #4]
 80090f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80090fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	2b0f      	cmp	r3, #15
 8009102:	d909      	bls.n	8009118 <UART_SetConfig+0x4a0>
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800910a:	d205      	bcs.n	8009118 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	b29a      	uxth	r2, r3
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	60da      	str	r2, [r3, #12]
 8009116:	e001      	b.n	800911c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009118:	2301      	movs	r3, #1
 800911a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2200      	movs	r2, #0
 8009120:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2200      	movs	r2, #0
 8009126:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009128:	7fbb      	ldrb	r3, [r7, #30]
}
 800912a:	4618      	mov	r0, r3
 800912c:	3720      	adds	r7, #32
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
 8009132:	bf00      	nop
 8009134:	40007c00 	.word	0x40007c00
 8009138:	40023800 	.word	0x40023800
 800913c:	00f42400 	.word	0x00f42400

08009140 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009140:	b480      	push	{r7}
 8009142:	b083      	sub	sp, #12
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800914c:	f003 0308 	and.w	r3, r3, #8
 8009150:	2b00      	cmp	r3, #0
 8009152:	d00a      	beq.n	800916a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	430a      	orrs	r2, r1
 8009168:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800916e:	f003 0301 	and.w	r3, r3, #1
 8009172:	2b00      	cmp	r3, #0
 8009174:	d00a      	beq.n	800918c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	430a      	orrs	r2, r1
 800918a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009190:	f003 0302 	and.w	r3, r3, #2
 8009194:	2b00      	cmp	r3, #0
 8009196:	d00a      	beq.n	80091ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	430a      	orrs	r2, r1
 80091ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091b2:	f003 0304 	and.w	r3, r3, #4
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d00a      	beq.n	80091d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	430a      	orrs	r2, r1
 80091ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091d4:	f003 0310 	and.w	r3, r3, #16
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d00a      	beq.n	80091f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	689b      	ldr	r3, [r3, #8]
 80091e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	430a      	orrs	r2, r1
 80091f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091f6:	f003 0320 	and.w	r3, r3, #32
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d00a      	beq.n	8009214 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	689b      	ldr	r3, [r3, #8]
 8009204:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	430a      	orrs	r2, r1
 8009212:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009218:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800921c:	2b00      	cmp	r3, #0
 800921e:	d01a      	beq.n	8009256 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	430a      	orrs	r2, r1
 8009234:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800923a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800923e:	d10a      	bne.n	8009256 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	430a      	orrs	r2, r1
 8009254:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800925a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800925e:	2b00      	cmp	r3, #0
 8009260:	d00a      	beq.n	8009278 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	430a      	orrs	r2, r1
 8009276:	605a      	str	r2, [r3, #4]
  }
}
 8009278:	bf00      	nop
 800927a:	370c      	adds	r7, #12
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr

08009284 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b08c      	sub	sp, #48	@ 0x30
 8009288:	af02      	add	r7, sp, #8
 800928a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2200      	movs	r2, #0
 8009290:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009294:	f7fa fba2 	bl	80039dc <HAL_GetTick>
 8009298:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f003 0308 	and.w	r3, r3, #8
 80092a4:	2b08      	cmp	r3, #8
 80092a6:	d12e      	bne.n	8009306 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80092a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80092ac:	9300      	str	r3, [sp, #0]
 80092ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092b0:	2200      	movs	r2, #0
 80092b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f000 f83b 	bl	8009332 <UART_WaitOnFlagUntilTimeout>
 80092bc:	4603      	mov	r3, r0
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d021      	beq.n	8009306 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	e853 3f00 	ldrex	r3, [r3]
 80092ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80092d6:	623b      	str	r3, [r7, #32]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	461a      	mov	r2, r3
 80092de:	6a3b      	ldr	r3, [r7, #32]
 80092e0:	61fb      	str	r3, [r7, #28]
 80092e2:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e4:	69b9      	ldr	r1, [r7, #24]
 80092e6:	69fa      	ldr	r2, [r7, #28]
 80092e8:	e841 2300 	strex	r3, r2, [r1]
 80092ec:	617b      	str	r3, [r7, #20]
   return(result);
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d1e6      	bne.n	80092c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2220      	movs	r2, #32
 80092f8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2200      	movs	r2, #0
 80092fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009302:	2303      	movs	r3, #3
 8009304:	e011      	b.n	800932a <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2220      	movs	r2, #32
 800930a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2220      	movs	r2, #32
 8009310:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2200      	movs	r2, #0
 8009318:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2200      	movs	r2, #0
 800931e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2200      	movs	r2, #0
 8009324:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009328:	2300      	movs	r3, #0
}
 800932a:	4618      	mov	r0, r3
 800932c:	3728      	adds	r7, #40	@ 0x28
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}

08009332 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009332:	b580      	push	{r7, lr}
 8009334:	b084      	sub	sp, #16
 8009336:	af00      	add	r7, sp, #0
 8009338:	60f8      	str	r0, [r7, #12]
 800933a:	60b9      	str	r1, [r7, #8]
 800933c:	603b      	str	r3, [r7, #0]
 800933e:	4613      	mov	r3, r2
 8009340:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009342:	e04f      	b.n	80093e4 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009344:	69bb      	ldr	r3, [r7, #24]
 8009346:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800934a:	d04b      	beq.n	80093e4 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800934c:	f7fa fb46 	bl	80039dc <HAL_GetTick>
 8009350:	4602      	mov	r2, r0
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	1ad3      	subs	r3, r2, r3
 8009356:	69ba      	ldr	r2, [r7, #24]
 8009358:	429a      	cmp	r2, r3
 800935a:	d302      	bcc.n	8009362 <UART_WaitOnFlagUntilTimeout+0x30>
 800935c:	69bb      	ldr	r3, [r7, #24]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d101      	bne.n	8009366 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009362:	2303      	movs	r3, #3
 8009364:	e04e      	b.n	8009404 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f003 0304 	and.w	r3, r3, #4
 8009370:	2b00      	cmp	r3, #0
 8009372:	d037      	beq.n	80093e4 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	2b80      	cmp	r3, #128	@ 0x80
 8009378:	d034      	beq.n	80093e4 <UART_WaitOnFlagUntilTimeout+0xb2>
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	2b40      	cmp	r3, #64	@ 0x40
 800937e:	d031      	beq.n	80093e4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	69db      	ldr	r3, [r3, #28]
 8009386:	f003 0308 	and.w	r3, r3, #8
 800938a:	2b08      	cmp	r3, #8
 800938c:	d110      	bne.n	80093b0 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	2208      	movs	r2, #8
 8009394:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009396:	68f8      	ldr	r0, [r7, #12]
 8009398:	f000 f838 	bl	800940c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2208      	movs	r2, #8
 80093a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2200      	movs	r2, #0
 80093a8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80093ac:	2301      	movs	r3, #1
 80093ae:	e029      	b.n	8009404 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	69db      	ldr	r3, [r3, #28]
 80093b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80093ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80093be:	d111      	bne.n	80093e4 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80093c8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80093ca:	68f8      	ldr	r0, [r7, #12]
 80093cc:	f000 f81e 	bl	800940c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2220      	movs	r2, #32
 80093d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2200      	movs	r2, #0
 80093dc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80093e0:	2303      	movs	r3, #3
 80093e2:	e00f      	b.n	8009404 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	69da      	ldr	r2, [r3, #28]
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	4013      	ands	r3, r2
 80093ee:	68ba      	ldr	r2, [r7, #8]
 80093f0:	429a      	cmp	r2, r3
 80093f2:	bf0c      	ite	eq
 80093f4:	2301      	moveq	r3, #1
 80093f6:	2300      	movne	r3, #0
 80093f8:	b2db      	uxtb	r3, r3
 80093fa:	461a      	mov	r2, r3
 80093fc:	79fb      	ldrb	r3, [r7, #7]
 80093fe:	429a      	cmp	r2, r3
 8009400:	d0a0      	beq.n	8009344 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009402:	2300      	movs	r3, #0
}
 8009404:	4618      	mov	r0, r3
 8009406:	3710      	adds	r7, #16
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800940c:	b480      	push	{r7}
 800940e:	b095      	sub	sp, #84	@ 0x54
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800941a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800941c:	e853 3f00 	ldrex	r3, [r3]
 8009420:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009424:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009428:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	461a      	mov	r2, r3
 8009430:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009432:	643b      	str	r3, [r7, #64]	@ 0x40
 8009434:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009436:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009438:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800943a:	e841 2300 	strex	r3, r2, [r1]
 800943e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009442:	2b00      	cmp	r3, #0
 8009444:	d1e6      	bne.n	8009414 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	3308      	adds	r3, #8
 800944c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800944e:	6a3b      	ldr	r3, [r7, #32]
 8009450:	e853 3f00 	ldrex	r3, [r3]
 8009454:	61fb      	str	r3, [r7, #28]
   return(result);
 8009456:	69fb      	ldr	r3, [r7, #28]
 8009458:	f023 0301 	bic.w	r3, r3, #1
 800945c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	3308      	adds	r3, #8
 8009464:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009466:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009468:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800946a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800946c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800946e:	e841 2300 	strex	r3, r2, [r1]
 8009472:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009476:	2b00      	cmp	r3, #0
 8009478:	d1e5      	bne.n	8009446 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800947e:	2b01      	cmp	r3, #1
 8009480:	d118      	bne.n	80094b4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	e853 3f00 	ldrex	r3, [r3]
 800948e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	f023 0310 	bic.w	r3, r3, #16
 8009496:	647b      	str	r3, [r7, #68]	@ 0x44
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	461a      	mov	r2, r3
 800949e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80094a0:	61bb      	str	r3, [r7, #24]
 80094a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a4:	6979      	ldr	r1, [r7, #20]
 80094a6:	69ba      	ldr	r2, [r7, #24]
 80094a8:	e841 2300 	strex	r3, r2, [r1]
 80094ac:	613b      	str	r3, [r7, #16]
   return(result);
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d1e6      	bne.n	8009482 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2220      	movs	r2, #32
 80094b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2200      	movs	r2, #0
 80094c0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2200      	movs	r2, #0
 80094c6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80094c8:	bf00      	nop
 80094ca:	3754      	adds	r7, #84	@ 0x54
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr

080094d4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b084      	sub	sp, #16
 80094d8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80094da:	4b87      	ldr	r3, [pc, #540]	@ (80096f8 <MX_LWIP_Init+0x224>)
 80094dc:	22c0      	movs	r2, #192	@ 0xc0
 80094de:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80094e0:	4b85      	ldr	r3, [pc, #532]	@ (80096f8 <MX_LWIP_Init+0x224>)
 80094e2:	22a8      	movs	r2, #168	@ 0xa8
 80094e4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 80094e6:	4b84      	ldr	r3, [pc, #528]	@ (80096f8 <MX_LWIP_Init+0x224>)
 80094e8:	2201      	movs	r2, #1
 80094ea:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 20;
 80094ec:	4b82      	ldr	r3, [pc, #520]	@ (80096f8 <MX_LWIP_Init+0x224>)
 80094ee:	2214      	movs	r2, #20
 80094f0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80094f2:	4b82      	ldr	r3, [pc, #520]	@ (80096fc <MX_LWIP_Init+0x228>)
 80094f4:	22ff      	movs	r2, #255	@ 0xff
 80094f6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80094f8:	4b80      	ldr	r3, [pc, #512]	@ (80096fc <MX_LWIP_Init+0x228>)
 80094fa:	22ff      	movs	r2, #255	@ 0xff
 80094fc:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80094fe:	4b7f      	ldr	r3, [pc, #508]	@ (80096fc <MX_LWIP_Init+0x228>)
 8009500:	22ff      	movs	r2, #255	@ 0xff
 8009502:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8009504:	4b7d      	ldr	r3, [pc, #500]	@ (80096fc <MX_LWIP_Init+0x228>)
 8009506:	2200      	movs	r2, #0
 8009508:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800950a:	4b7d      	ldr	r3, [pc, #500]	@ (8009700 <MX_LWIP_Init+0x22c>)
 800950c:	22c0      	movs	r2, #192	@ 0xc0
 800950e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8009510:	4b7b      	ldr	r3, [pc, #492]	@ (8009700 <MX_LWIP_Init+0x22c>)
 8009512:	22a8      	movs	r2, #168	@ 0xa8
 8009514:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8009516:	4b7a      	ldr	r3, [pc, #488]	@ (8009700 <MX_LWIP_Init+0x22c>)
 8009518:	2201      	movs	r2, #1
 800951a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800951c:	4b78      	ldr	r3, [pc, #480]	@ (8009700 <MX_LWIP_Init+0x22c>)
 800951e:	2201      	movs	r2, #1
 8009520:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 8009522:	f000 fd21 	bl	8009f68 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8009526:	4b74      	ldr	r3, [pc, #464]	@ (80096f8 <MX_LWIP_Init+0x224>)
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	061a      	lsls	r2, r3, #24
 800952c:	4b72      	ldr	r3, [pc, #456]	@ (80096f8 <MX_LWIP_Init+0x224>)
 800952e:	785b      	ldrb	r3, [r3, #1]
 8009530:	041b      	lsls	r3, r3, #16
 8009532:	431a      	orrs	r2, r3
 8009534:	4b70      	ldr	r3, [pc, #448]	@ (80096f8 <MX_LWIP_Init+0x224>)
 8009536:	789b      	ldrb	r3, [r3, #2]
 8009538:	021b      	lsls	r3, r3, #8
 800953a:	4313      	orrs	r3, r2
 800953c:	4a6e      	ldr	r2, [pc, #440]	@ (80096f8 <MX_LWIP_Init+0x224>)
 800953e:	78d2      	ldrb	r2, [r2, #3]
 8009540:	4313      	orrs	r3, r2
 8009542:	061a      	lsls	r2, r3, #24
 8009544:	4b6c      	ldr	r3, [pc, #432]	@ (80096f8 <MX_LWIP_Init+0x224>)
 8009546:	781b      	ldrb	r3, [r3, #0]
 8009548:	0619      	lsls	r1, r3, #24
 800954a:	4b6b      	ldr	r3, [pc, #428]	@ (80096f8 <MX_LWIP_Init+0x224>)
 800954c:	785b      	ldrb	r3, [r3, #1]
 800954e:	041b      	lsls	r3, r3, #16
 8009550:	4319      	orrs	r1, r3
 8009552:	4b69      	ldr	r3, [pc, #420]	@ (80096f8 <MX_LWIP_Init+0x224>)
 8009554:	789b      	ldrb	r3, [r3, #2]
 8009556:	021b      	lsls	r3, r3, #8
 8009558:	430b      	orrs	r3, r1
 800955a:	4967      	ldr	r1, [pc, #412]	@ (80096f8 <MX_LWIP_Init+0x224>)
 800955c:	78c9      	ldrb	r1, [r1, #3]
 800955e:	430b      	orrs	r3, r1
 8009560:	021b      	lsls	r3, r3, #8
 8009562:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009566:	431a      	orrs	r2, r3
 8009568:	4b63      	ldr	r3, [pc, #396]	@ (80096f8 <MX_LWIP_Init+0x224>)
 800956a:	781b      	ldrb	r3, [r3, #0]
 800956c:	0619      	lsls	r1, r3, #24
 800956e:	4b62      	ldr	r3, [pc, #392]	@ (80096f8 <MX_LWIP_Init+0x224>)
 8009570:	785b      	ldrb	r3, [r3, #1]
 8009572:	041b      	lsls	r3, r3, #16
 8009574:	4319      	orrs	r1, r3
 8009576:	4b60      	ldr	r3, [pc, #384]	@ (80096f8 <MX_LWIP_Init+0x224>)
 8009578:	789b      	ldrb	r3, [r3, #2]
 800957a:	021b      	lsls	r3, r3, #8
 800957c:	430b      	orrs	r3, r1
 800957e:	495e      	ldr	r1, [pc, #376]	@ (80096f8 <MX_LWIP_Init+0x224>)
 8009580:	78c9      	ldrb	r1, [r1, #3]
 8009582:	430b      	orrs	r3, r1
 8009584:	0a1b      	lsrs	r3, r3, #8
 8009586:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800958a:	431a      	orrs	r2, r3
 800958c:	4b5a      	ldr	r3, [pc, #360]	@ (80096f8 <MX_LWIP_Init+0x224>)
 800958e:	781b      	ldrb	r3, [r3, #0]
 8009590:	0619      	lsls	r1, r3, #24
 8009592:	4b59      	ldr	r3, [pc, #356]	@ (80096f8 <MX_LWIP_Init+0x224>)
 8009594:	785b      	ldrb	r3, [r3, #1]
 8009596:	041b      	lsls	r3, r3, #16
 8009598:	4319      	orrs	r1, r3
 800959a:	4b57      	ldr	r3, [pc, #348]	@ (80096f8 <MX_LWIP_Init+0x224>)
 800959c:	789b      	ldrb	r3, [r3, #2]
 800959e:	021b      	lsls	r3, r3, #8
 80095a0:	430b      	orrs	r3, r1
 80095a2:	4955      	ldr	r1, [pc, #340]	@ (80096f8 <MX_LWIP_Init+0x224>)
 80095a4:	78c9      	ldrb	r1, [r1, #3]
 80095a6:	430b      	orrs	r3, r1
 80095a8:	0e1b      	lsrs	r3, r3, #24
 80095aa:	4313      	orrs	r3, r2
 80095ac:	4a55      	ldr	r2, [pc, #340]	@ (8009704 <MX_LWIP_Init+0x230>)
 80095ae:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80095b0:	4b52      	ldr	r3, [pc, #328]	@ (80096fc <MX_LWIP_Init+0x228>)
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	061a      	lsls	r2, r3, #24
 80095b6:	4b51      	ldr	r3, [pc, #324]	@ (80096fc <MX_LWIP_Init+0x228>)
 80095b8:	785b      	ldrb	r3, [r3, #1]
 80095ba:	041b      	lsls	r3, r3, #16
 80095bc:	431a      	orrs	r2, r3
 80095be:	4b4f      	ldr	r3, [pc, #316]	@ (80096fc <MX_LWIP_Init+0x228>)
 80095c0:	789b      	ldrb	r3, [r3, #2]
 80095c2:	021b      	lsls	r3, r3, #8
 80095c4:	4313      	orrs	r3, r2
 80095c6:	4a4d      	ldr	r2, [pc, #308]	@ (80096fc <MX_LWIP_Init+0x228>)
 80095c8:	78d2      	ldrb	r2, [r2, #3]
 80095ca:	4313      	orrs	r3, r2
 80095cc:	061a      	lsls	r2, r3, #24
 80095ce:	4b4b      	ldr	r3, [pc, #300]	@ (80096fc <MX_LWIP_Init+0x228>)
 80095d0:	781b      	ldrb	r3, [r3, #0]
 80095d2:	0619      	lsls	r1, r3, #24
 80095d4:	4b49      	ldr	r3, [pc, #292]	@ (80096fc <MX_LWIP_Init+0x228>)
 80095d6:	785b      	ldrb	r3, [r3, #1]
 80095d8:	041b      	lsls	r3, r3, #16
 80095da:	4319      	orrs	r1, r3
 80095dc:	4b47      	ldr	r3, [pc, #284]	@ (80096fc <MX_LWIP_Init+0x228>)
 80095de:	789b      	ldrb	r3, [r3, #2]
 80095e0:	021b      	lsls	r3, r3, #8
 80095e2:	430b      	orrs	r3, r1
 80095e4:	4945      	ldr	r1, [pc, #276]	@ (80096fc <MX_LWIP_Init+0x228>)
 80095e6:	78c9      	ldrb	r1, [r1, #3]
 80095e8:	430b      	orrs	r3, r1
 80095ea:	021b      	lsls	r3, r3, #8
 80095ec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80095f0:	431a      	orrs	r2, r3
 80095f2:	4b42      	ldr	r3, [pc, #264]	@ (80096fc <MX_LWIP_Init+0x228>)
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	0619      	lsls	r1, r3, #24
 80095f8:	4b40      	ldr	r3, [pc, #256]	@ (80096fc <MX_LWIP_Init+0x228>)
 80095fa:	785b      	ldrb	r3, [r3, #1]
 80095fc:	041b      	lsls	r3, r3, #16
 80095fe:	4319      	orrs	r1, r3
 8009600:	4b3e      	ldr	r3, [pc, #248]	@ (80096fc <MX_LWIP_Init+0x228>)
 8009602:	789b      	ldrb	r3, [r3, #2]
 8009604:	021b      	lsls	r3, r3, #8
 8009606:	430b      	orrs	r3, r1
 8009608:	493c      	ldr	r1, [pc, #240]	@ (80096fc <MX_LWIP_Init+0x228>)
 800960a:	78c9      	ldrb	r1, [r1, #3]
 800960c:	430b      	orrs	r3, r1
 800960e:	0a1b      	lsrs	r3, r3, #8
 8009610:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009614:	431a      	orrs	r2, r3
 8009616:	4b39      	ldr	r3, [pc, #228]	@ (80096fc <MX_LWIP_Init+0x228>)
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	0619      	lsls	r1, r3, #24
 800961c:	4b37      	ldr	r3, [pc, #220]	@ (80096fc <MX_LWIP_Init+0x228>)
 800961e:	785b      	ldrb	r3, [r3, #1]
 8009620:	041b      	lsls	r3, r3, #16
 8009622:	4319      	orrs	r1, r3
 8009624:	4b35      	ldr	r3, [pc, #212]	@ (80096fc <MX_LWIP_Init+0x228>)
 8009626:	789b      	ldrb	r3, [r3, #2]
 8009628:	021b      	lsls	r3, r3, #8
 800962a:	430b      	orrs	r3, r1
 800962c:	4933      	ldr	r1, [pc, #204]	@ (80096fc <MX_LWIP_Init+0x228>)
 800962e:	78c9      	ldrb	r1, [r1, #3]
 8009630:	430b      	orrs	r3, r1
 8009632:	0e1b      	lsrs	r3, r3, #24
 8009634:	4313      	orrs	r3, r2
 8009636:	4a34      	ldr	r2, [pc, #208]	@ (8009708 <MX_LWIP_Init+0x234>)
 8009638:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800963a:	4b31      	ldr	r3, [pc, #196]	@ (8009700 <MX_LWIP_Init+0x22c>)
 800963c:	781b      	ldrb	r3, [r3, #0]
 800963e:	061a      	lsls	r2, r3, #24
 8009640:	4b2f      	ldr	r3, [pc, #188]	@ (8009700 <MX_LWIP_Init+0x22c>)
 8009642:	785b      	ldrb	r3, [r3, #1]
 8009644:	041b      	lsls	r3, r3, #16
 8009646:	431a      	orrs	r2, r3
 8009648:	4b2d      	ldr	r3, [pc, #180]	@ (8009700 <MX_LWIP_Init+0x22c>)
 800964a:	789b      	ldrb	r3, [r3, #2]
 800964c:	021b      	lsls	r3, r3, #8
 800964e:	4313      	orrs	r3, r2
 8009650:	4a2b      	ldr	r2, [pc, #172]	@ (8009700 <MX_LWIP_Init+0x22c>)
 8009652:	78d2      	ldrb	r2, [r2, #3]
 8009654:	4313      	orrs	r3, r2
 8009656:	061a      	lsls	r2, r3, #24
 8009658:	4b29      	ldr	r3, [pc, #164]	@ (8009700 <MX_LWIP_Init+0x22c>)
 800965a:	781b      	ldrb	r3, [r3, #0]
 800965c:	0619      	lsls	r1, r3, #24
 800965e:	4b28      	ldr	r3, [pc, #160]	@ (8009700 <MX_LWIP_Init+0x22c>)
 8009660:	785b      	ldrb	r3, [r3, #1]
 8009662:	041b      	lsls	r3, r3, #16
 8009664:	4319      	orrs	r1, r3
 8009666:	4b26      	ldr	r3, [pc, #152]	@ (8009700 <MX_LWIP_Init+0x22c>)
 8009668:	789b      	ldrb	r3, [r3, #2]
 800966a:	021b      	lsls	r3, r3, #8
 800966c:	430b      	orrs	r3, r1
 800966e:	4924      	ldr	r1, [pc, #144]	@ (8009700 <MX_LWIP_Init+0x22c>)
 8009670:	78c9      	ldrb	r1, [r1, #3]
 8009672:	430b      	orrs	r3, r1
 8009674:	021b      	lsls	r3, r3, #8
 8009676:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800967a:	431a      	orrs	r2, r3
 800967c:	4b20      	ldr	r3, [pc, #128]	@ (8009700 <MX_LWIP_Init+0x22c>)
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	0619      	lsls	r1, r3, #24
 8009682:	4b1f      	ldr	r3, [pc, #124]	@ (8009700 <MX_LWIP_Init+0x22c>)
 8009684:	785b      	ldrb	r3, [r3, #1]
 8009686:	041b      	lsls	r3, r3, #16
 8009688:	4319      	orrs	r1, r3
 800968a:	4b1d      	ldr	r3, [pc, #116]	@ (8009700 <MX_LWIP_Init+0x22c>)
 800968c:	789b      	ldrb	r3, [r3, #2]
 800968e:	021b      	lsls	r3, r3, #8
 8009690:	430b      	orrs	r3, r1
 8009692:	491b      	ldr	r1, [pc, #108]	@ (8009700 <MX_LWIP_Init+0x22c>)
 8009694:	78c9      	ldrb	r1, [r1, #3]
 8009696:	430b      	orrs	r3, r1
 8009698:	0a1b      	lsrs	r3, r3, #8
 800969a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800969e:	431a      	orrs	r2, r3
 80096a0:	4b17      	ldr	r3, [pc, #92]	@ (8009700 <MX_LWIP_Init+0x22c>)
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	0619      	lsls	r1, r3, #24
 80096a6:	4b16      	ldr	r3, [pc, #88]	@ (8009700 <MX_LWIP_Init+0x22c>)
 80096a8:	785b      	ldrb	r3, [r3, #1]
 80096aa:	041b      	lsls	r3, r3, #16
 80096ac:	4319      	orrs	r1, r3
 80096ae:	4b14      	ldr	r3, [pc, #80]	@ (8009700 <MX_LWIP_Init+0x22c>)
 80096b0:	789b      	ldrb	r3, [r3, #2]
 80096b2:	021b      	lsls	r3, r3, #8
 80096b4:	430b      	orrs	r3, r1
 80096b6:	4912      	ldr	r1, [pc, #72]	@ (8009700 <MX_LWIP_Init+0x22c>)
 80096b8:	78c9      	ldrb	r1, [r1, #3]
 80096ba:	430b      	orrs	r3, r1
 80096bc:	0e1b      	lsrs	r3, r3, #24
 80096be:	4313      	orrs	r3, r2
 80096c0:	4a12      	ldr	r2, [pc, #72]	@ (800970c <MX_LWIP_Init+0x238>)
 80096c2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80096c4:	4b12      	ldr	r3, [pc, #72]	@ (8009710 <MX_LWIP_Init+0x23c>)
 80096c6:	9302      	str	r3, [sp, #8]
 80096c8:	4b12      	ldr	r3, [pc, #72]	@ (8009714 <MX_LWIP_Init+0x240>)
 80096ca:	9301      	str	r3, [sp, #4]
 80096cc:	2300      	movs	r3, #0
 80096ce:	9300      	str	r3, [sp, #0]
 80096d0:	4b0e      	ldr	r3, [pc, #56]	@ (800970c <MX_LWIP_Init+0x238>)
 80096d2:	4a0d      	ldr	r2, [pc, #52]	@ (8009708 <MX_LWIP_Init+0x234>)
 80096d4:	490b      	ldr	r1, [pc, #44]	@ (8009704 <MX_LWIP_Init+0x230>)
 80096d6:	4810      	ldr	r0, [pc, #64]	@ (8009718 <MX_LWIP_Init+0x244>)
 80096d8:	f001 f92c 	bl	800a934 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80096dc:	480e      	ldr	r0, [pc, #56]	@ (8009718 <MX_LWIP_Init+0x244>)
 80096de:	f001 fad7 	bl	800ac90 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 80096e2:	480d      	ldr	r0, [pc, #52]	@ (8009718 <MX_LWIP_Init+0x244>)
 80096e4:	f001 fae4 	bl	800acb0 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80096e8:	490c      	ldr	r1, [pc, #48]	@ (800971c <MX_LWIP_Init+0x248>)
 80096ea:	480b      	ldr	r0, [pc, #44]	@ (8009718 <MX_LWIP_Init+0x244>)
 80096ec:	f001 fbe2 	bl	800aeb4 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80096f0:	bf00      	nop
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	200007ec 	.word	0x200007ec
 80096fc:	200007f0 	.word	0x200007f0
 8009700:	200007f4 	.word	0x200007f4
 8009704:	200007e0 	.word	0x200007e0
 8009708:	200007e4 	.word	0x200007e4
 800970c:	200007e8 	.word	0x200007e8
 8009710:	0800e915 	.word	0x0800e915
 8009714:	08009a95 	.word	0x08009a95
 8009718:	200007ac 	.word	0x200007ac
 800971c:	08009771 	.word	0x08009771

08009720 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b082      	sub	sp, #8
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8009728:	f7fa f958 	bl	80039dc <HAL_GetTick>
 800972c:	4602      	mov	r2, r0
 800972e:	4b08      	ldr	r3, [pc, #32]	@ (8009750 <Ethernet_Link_Periodic_Handle+0x30>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	1ad3      	subs	r3, r2, r3
 8009734:	2b63      	cmp	r3, #99	@ 0x63
 8009736:	d907      	bls.n	8009748 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8009738:	f7fa f950 	bl	80039dc <HAL_GetTick>
 800973c:	4603      	mov	r3, r0
 800973e:	4a04      	ldr	r2, [pc, #16]	@ (8009750 <Ethernet_Link_Periodic_Handle+0x30>)
 8009740:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 fafc 	bl	8009d40 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8009748:	bf00      	nop
 800974a:	3708      	adds	r7, #8
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}
 8009750:	200007a8 	.word	0x200007a8

08009754 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8009758:	4804      	ldr	r0, [pc, #16]	@ (800976c <MX_LWIP_Process+0x18>)
 800975a:	f000 f97b 	bl	8009a54 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800975e:	f002 fa0f 	bl	800bb80 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8009762:	4802      	ldr	r0, [pc, #8]	@ (800976c <MX_LWIP_Process+0x18>)
 8009764:	f7ff ffdc 	bl	8009720 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8009768:	bf00      	nop
 800976a:	bd80      	pop	{r7, pc}
 800976c:	200007ac 	.word	0x200007ac

08009770 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8009770:	b480      	push	{r7}
 8009772:	b083      	sub	sp, #12
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8009778:	bf00      	nop
 800977a:	370c      	adds	r7, #12
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr

08009784 <SCB_InvalidateDCache_by_Addr>:
{
 8009784:	b480      	push	{r7}
 8009786:	b087      	sub	sp, #28
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8009796:	2320      	movs	r3, #32
 8009798:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800979a:	f3bf 8f4f 	dsb	sy
}
 800979e:	bf00      	nop
    while (op_size > 0) {
 80097a0:	e00b      	b.n	80097ba <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 80097a2:	4a0d      	ldr	r2, [pc, #52]	@ (80097d8 <SCB_InvalidateDCache_by_Addr+0x54>)
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	693a      	ldr	r2, [r7, #16]
 80097ae:	4413      	add	r3, r2
 80097b0:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 80097b2:	697a      	ldr	r2, [r7, #20]
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	1ad3      	subs	r3, r2, r3
 80097b8:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	dcf0      	bgt.n	80097a2 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 80097c0:	f3bf 8f4f 	dsb	sy
}
 80097c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80097c6:	f3bf 8f6f 	isb	sy
}
 80097ca:	bf00      	nop
}
 80097cc:	bf00      	nop
 80097ce:	371c      	adds	r7, #28
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr
 80097d8:	e000ed00 	.word	0xe000ed00

080097dc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b084      	sub	sp, #16
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80097e4:	2300      	movs	r3, #0
 80097e6:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80097e8:	4b44      	ldr	r3, [pc, #272]	@ (80098fc <low_level_init+0x120>)
 80097ea:	4a45      	ldr	r2, [pc, #276]	@ (8009900 <low_level_init+0x124>)
 80097ec:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80097ee:	2300      	movs	r3, #0
 80097f0:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80097f2:	2380      	movs	r3, #128	@ 0x80
 80097f4:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80097f6:	23e1      	movs	r3, #225	@ 0xe1
 80097f8:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80097fa:	2300      	movs	r3, #0
 80097fc:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80097fe:	2300      	movs	r3, #0
 8009800:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8009802:	2300      	movs	r3, #0
 8009804:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8009806:	4a3d      	ldr	r2, [pc, #244]	@ (80098fc <low_level_init+0x120>)
 8009808:	f107 0308 	add.w	r3, r7, #8
 800980c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800980e:	4b3b      	ldr	r3, [pc, #236]	@ (80098fc <low_level_init+0x120>)
 8009810:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8009814:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8009816:	4b39      	ldr	r3, [pc, #228]	@ (80098fc <low_level_init+0x120>)
 8009818:	4a3a      	ldr	r2, [pc, #232]	@ (8009904 <low_level_init+0x128>)
 800981a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800981c:	4b37      	ldr	r3, [pc, #220]	@ (80098fc <low_level_init+0x120>)
 800981e:	4a3a      	ldr	r2, [pc, #232]	@ (8009908 <low_level_init+0x12c>)
 8009820:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8009822:	4b36      	ldr	r3, [pc, #216]	@ (80098fc <low_level_init+0x120>)
 8009824:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8009828:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800982a:	4834      	ldr	r0, [pc, #208]	@ (80098fc <low_level_init+0x120>)
 800982c:	f7fa fe96 	bl	800455c <HAL_ETH_Init>
 8009830:	4603      	mov	r3, r0
 8009832:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8009834:	2238      	movs	r2, #56	@ 0x38
 8009836:	2100      	movs	r1, #0
 8009838:	4834      	ldr	r0, [pc, #208]	@ (800990c <low_level_init+0x130>)
 800983a:	f005 fb33 	bl	800eea4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800983e:	4b33      	ldr	r3, [pc, #204]	@ (800990c <low_level_init+0x130>)
 8009840:	2221      	movs	r2, #33	@ 0x21
 8009842:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8009844:	4b31      	ldr	r3, [pc, #196]	@ (800990c <low_level_init+0x130>)
 8009846:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800984a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800984c:	4b2f      	ldr	r3, [pc, #188]	@ (800990c <low_level_init+0x130>)
 800984e:	2200      	movs	r2, #0
 8009850:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8009852:	482f      	ldr	r0, [pc, #188]	@ (8009910 <low_level_init+0x134>)
 8009854:	f000 ff36 	bl	800a6c4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2206      	movs	r2, #6
 800985c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8009860:	4b26      	ldr	r3, [pc, #152]	@ (80098fc <low_level_init+0x120>)
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	781a      	ldrb	r2, [r3, #0]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800986c:	4b23      	ldr	r3, [pc, #140]	@ (80098fc <low_level_init+0x120>)
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	785a      	ldrb	r2, [r3, #1]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8009878:	4b20      	ldr	r3, [pc, #128]	@ (80098fc <low_level_init+0x120>)
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	789a      	ldrb	r2, [r3, #2]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8009884:	4b1d      	ldr	r3, [pc, #116]	@ (80098fc <low_level_init+0x120>)
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	78da      	ldrb	r2, [r3, #3]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8009890:	4b1a      	ldr	r3, [pc, #104]	@ (80098fc <low_level_init+0x120>)
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	791a      	ldrb	r2, [r3, #4]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800989c:	4b17      	ldr	r3, [pc, #92]	@ (80098fc <low_level_init+0x120>)
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	795a      	ldrb	r2, [r3, #5]
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80098ae:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80098b6:	f043 030a 	orr.w	r3, r3, #10
 80098ba:	b2da      	uxtb	r2, r3
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80098c2:	4914      	ldr	r1, [pc, #80]	@ (8009914 <low_level_init+0x138>)
 80098c4:	4814      	ldr	r0, [pc, #80]	@ (8009918 <low_level_init+0x13c>)
 80098c6:	f7f9 ff32 	bl	800372e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 80098ca:	4813      	ldr	r0, [pc, #76]	@ (8009918 <low_level_init+0x13c>)
 80098cc:	f7f9 ff61 	bl	8003792 <LAN8742_Init>
 80098d0:	4603      	mov	r3, r0
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d006      	beq.n	80098e4 <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f001 fabc 	bl	800ae54 <netif_set_link_down>
    netif_set_down(netif);
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f001 fa53 	bl	800ad88 <netif_set_down>
 80098e2:	e008      	b.n	80098f6 <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 80098e4:	7bfb      	ldrb	r3, [r7, #15]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d103      	bne.n	80098f2 <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f000 fa28 	bl	8009d40 <ethernet_link_check_state>
 80098f0:	e001      	b.n	80098f6 <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 80098f2:	f7f8 ffb5 	bl	8002860 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 80098f6:	3710      	adds	r7, #16
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}
 80098fc:	20005184 	.word	0x20005184
 8009900:	40028000 	.word	0x40028000
 8009904:	20000124 	.word	0x20000124
 8009908:	20000084 	.word	0x20000084
 800990c:	20005234 	.word	0x20005234
 8009910:	080118c4 	.word	0x080118c4
 8009914:	20000010 	.word	0x20000010
 8009918:	2000526c 	.word	0x2000526c

0800991c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b092      	sub	sp, #72	@ 0x48
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8009926:	2300      	movs	r3, #0
 8009928:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800992a:	2300      	movs	r3, #0
 800992c:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800992e:	2300      	movs	r3, #0
 8009930:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8009934:	f107 030c 	add.w	r3, r7, #12
 8009938:	2230      	movs	r2, #48	@ 0x30
 800993a:	2100      	movs	r1, #0
 800993c:	4618      	mov	r0, r3
 800993e:	f005 fab1 	bl	800eea4 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8009942:	f107 030c 	add.w	r3, r7, #12
 8009946:	2230      	movs	r2, #48	@ 0x30
 8009948:	2100      	movs	r1, #0
 800994a:	4618      	mov	r0, r3
 800994c:	f005 faaa 	bl	800eea4 <memset>

  for(q = p; q != NULL; q = q->next)
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	643b      	str	r3, [r7, #64]	@ 0x40
 8009954:	e045      	b.n	80099e2 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8009956:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009958:	2b03      	cmp	r3, #3
 800995a:	d902      	bls.n	8009962 <low_level_output+0x46>
      return ERR_IF;
 800995c:	f06f 030b 	mvn.w	r3, #11
 8009960:	e055      	b.n	8009a0e <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8009962:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009964:	6859      	ldr	r1, [r3, #4]
 8009966:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009968:	4613      	mov	r3, r2
 800996a:	005b      	lsls	r3, r3, #1
 800996c:	4413      	add	r3, r2
 800996e:	009b      	lsls	r3, r3, #2
 8009970:	3348      	adds	r3, #72	@ 0x48
 8009972:	443b      	add	r3, r7
 8009974:	3b3c      	subs	r3, #60	@ 0x3c
 8009976:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8009978:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800997a:	895b      	ldrh	r3, [r3, #10]
 800997c:	4619      	mov	r1, r3
 800997e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009980:	4613      	mov	r3, r2
 8009982:	005b      	lsls	r3, r3, #1
 8009984:	4413      	add	r3, r2
 8009986:	009b      	lsls	r3, r3, #2
 8009988:	3348      	adds	r3, #72	@ 0x48
 800998a:	443b      	add	r3, r7
 800998c:	3b38      	subs	r3, #56	@ 0x38
 800998e:	6019      	str	r1, [r3, #0]

    if(i>0)
 8009990:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009992:	2b00      	cmp	r3, #0
 8009994:	d011      	beq.n	80099ba <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8009996:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009998:	1e5a      	subs	r2, r3, #1
 800999a:	f107 000c 	add.w	r0, r7, #12
 800999e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80099a0:	460b      	mov	r3, r1
 80099a2:	005b      	lsls	r3, r3, #1
 80099a4:	440b      	add	r3, r1
 80099a6:	009b      	lsls	r3, r3, #2
 80099a8:	18c1      	adds	r1, r0, r3
 80099aa:	4613      	mov	r3, r2
 80099ac:	005b      	lsls	r3, r3, #1
 80099ae:	4413      	add	r3, r2
 80099b0:	009b      	lsls	r3, r3, #2
 80099b2:	3348      	adds	r3, #72	@ 0x48
 80099b4:	443b      	add	r3, r7
 80099b6:	3b34      	subs	r3, #52	@ 0x34
 80099b8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80099ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d109      	bne.n	80099d6 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80099c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80099c4:	4613      	mov	r3, r2
 80099c6:	005b      	lsls	r3, r3, #1
 80099c8:	4413      	add	r3, r2
 80099ca:	009b      	lsls	r3, r3, #2
 80099cc:	3348      	adds	r3, #72	@ 0x48
 80099ce:	443b      	add	r3, r7
 80099d0:	3b34      	subs	r3, #52	@ 0x34
 80099d2:	2200      	movs	r2, #0
 80099d4:	601a      	str	r2, [r3, #0]
    }

    i++;
 80099d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099d8:	3301      	adds	r3, #1
 80099da:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 80099dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80099e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d1b6      	bne.n	8009956 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	891b      	ldrh	r3, [r3, #8]
 80099ec:	461a      	mov	r2, r3
 80099ee:	4b0a      	ldr	r3, [pc, #40]	@ (8009a18 <low_level_output+0xfc>)
 80099f0:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80099f2:	4a09      	ldr	r2, [pc, #36]	@ (8009a18 <low_level_output+0xfc>)
 80099f4:	f107 030c 	add.w	r3, r7, #12
 80099f8:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80099fa:	4a07      	ldr	r2, [pc, #28]	@ (8009a18 <low_level_output+0xfc>)
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8009a00:	2214      	movs	r2, #20
 8009a02:	4905      	ldr	r1, [pc, #20]	@ (8009a18 <low_level_output+0xfc>)
 8009a04:	4805      	ldr	r0, [pc, #20]	@ (8009a1c <low_level_output+0x100>)
 8009a06:	f7fa fefb 	bl	8004800 <HAL_ETH_Transmit>

  return errval;
 8009a0a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3748      	adds	r7, #72	@ 0x48
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop
 8009a18:	20005234 	.word	0x20005234
 8009a1c:	20005184 	.word	0x20005184

08009a20 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b084      	sub	sp, #16
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8009a2c:	4b07      	ldr	r3, [pc, #28]	@ (8009a4c <low_level_input+0x2c>)
 8009a2e:	781b      	ldrb	r3, [r3, #0]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d105      	bne.n	8009a40 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8009a34:	f107 030c 	add.w	r3, r7, #12
 8009a38:	4619      	mov	r1, r3
 8009a3a:	4805      	ldr	r0, [pc, #20]	@ (8009a50 <low_level_input+0x30>)
 8009a3c:	f7fa ff74 	bl	8004928 <HAL_ETH_ReadData>
  }

  return p;
 8009a40:	68fb      	ldr	r3, [r7, #12]
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3710      	adds	r7, #16
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	20005180 	.word	0x20005180
 8009a50:	20005184 	.word	0x20005184

08009a54 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b084      	sub	sp, #16
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f7ff ffdd 	bl	8009a20 <low_level_input>
 8009a66:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d00a      	beq.n	8009a84 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	691b      	ldr	r3, [r3, #16]
 8009a72:	6879      	ldr	r1, [r7, #4]
 8009a74:	68f8      	ldr	r0, [r7, #12]
 8009a76:	4798      	blx	r3
 8009a78:	4603      	mov	r3, r0
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d002      	beq.n	8009a84 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8009a7e:	68f8      	ldr	r0, [r7, #12]
 8009a80:	f001 fd6a 	bl	800b558 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d1ea      	bne.n	8009a60 <ethernetif_input+0xc>
}
 8009a8a:	bf00      	nop
 8009a8c:	bf00      	nop
 8009a8e:	3710      	adds	r7, #16
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b082      	sub	sp, #8
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d106      	bne.n	8009ab0 <ethernetif_init+0x1c>
 8009aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8009adc <ethernetif_init+0x48>)
 8009aa4:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8009aa8:	490d      	ldr	r1, [pc, #52]	@ (8009ae0 <ethernetif_init+0x4c>)
 8009aaa:	480e      	ldr	r0, [pc, #56]	@ (8009ae4 <ethernetif_init+0x50>)
 8009aac:	f005 f960 	bl	800ed70 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2273      	movs	r2, #115	@ 0x73
 8009ab4:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2274      	movs	r2, #116	@ 0x74
 8009abc:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	4a09      	ldr	r2, [pc, #36]	@ (8009ae8 <ethernetif_init+0x54>)
 8009ac4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	4a08      	ldr	r2, [pc, #32]	@ (8009aec <ethernetif_init+0x58>)
 8009aca:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f7ff fe85 	bl	80097dc <low_level_init>

  return ERR_OK;
 8009ad2:	2300      	movs	r3, #0
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3708      	adds	r7, #8
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}
 8009adc:	08010348 	.word	0x08010348
 8009ae0:	08010364 	.word	0x08010364
 8009ae4:	08010374 	.word	0x08010374
 8009ae8:	0800cde1 	.word	0x0800cde1
 8009aec:	0800991d 	.word	0x0800991d

08009af0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b084      	sub	sp, #16
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8009afc:	68f9      	ldr	r1, [r7, #12]
 8009afe:	4807      	ldr	r0, [pc, #28]	@ (8009b1c <pbuf_free_custom+0x2c>)
 8009b00:	f000 fec2 	bl	800a888 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8009b04:	4b06      	ldr	r3, [pc, #24]	@ (8009b20 <pbuf_free_custom+0x30>)
 8009b06:	781b      	ldrb	r3, [r3, #0]
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d102      	bne.n	8009b12 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8009b0c:	4b04      	ldr	r3, [pc, #16]	@ (8009b20 <pbuf_free_custom+0x30>)
 8009b0e:	2200      	movs	r2, #0
 8009b10:	701a      	strb	r2, [r3, #0]
  }
}
 8009b12:	bf00      	nop
 8009b14:	3710      	adds	r7, #16
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
 8009b1a:	bf00      	nop
 8009b1c:	080118c4 	.word	0x080118c4
 8009b20:	20005180 	.word	0x20005180

08009b24 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009b28:	f7f9 ff58 	bl	80039dc <HAL_GetTick>
 8009b2c:	4603      	mov	r3, r0
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	bd80      	pop	{r7, pc}
	...

08009b34 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b08e      	sub	sp, #56	@ 0x38
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009b40:	2200      	movs	r2, #0
 8009b42:	601a      	str	r2, [r3, #0]
 8009b44:	605a      	str	r2, [r3, #4]
 8009b46:	609a      	str	r2, [r3, #8]
 8009b48:	60da      	str	r2, [r3, #12]
 8009b4a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4a4e      	ldr	r2, [pc, #312]	@ (8009c8c <HAL_ETH_MspInit+0x158>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	f040 8096 	bne.w	8009c84 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8009b58:	4b4d      	ldr	r3, [pc, #308]	@ (8009c90 <HAL_ETH_MspInit+0x15c>)
 8009b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b5c:	4a4c      	ldr	r2, [pc, #304]	@ (8009c90 <HAL_ETH_MspInit+0x15c>)
 8009b5e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009b62:	6313      	str	r3, [r2, #48]	@ 0x30
 8009b64:	4b4a      	ldr	r3, [pc, #296]	@ (8009c90 <HAL_ETH_MspInit+0x15c>)
 8009b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b6c:	623b      	str	r3, [r7, #32]
 8009b6e:	6a3b      	ldr	r3, [r7, #32]
 8009b70:	4b47      	ldr	r3, [pc, #284]	@ (8009c90 <HAL_ETH_MspInit+0x15c>)
 8009b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b74:	4a46      	ldr	r2, [pc, #280]	@ (8009c90 <HAL_ETH_MspInit+0x15c>)
 8009b76:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009b7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8009b7c:	4b44      	ldr	r3, [pc, #272]	@ (8009c90 <HAL_ETH_MspInit+0x15c>)
 8009b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b80:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009b84:	61fb      	str	r3, [r7, #28]
 8009b86:	69fb      	ldr	r3, [r7, #28]
 8009b88:	4b41      	ldr	r3, [pc, #260]	@ (8009c90 <HAL_ETH_MspInit+0x15c>)
 8009b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b8c:	4a40      	ldr	r2, [pc, #256]	@ (8009c90 <HAL_ETH_MspInit+0x15c>)
 8009b8e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009b92:	6313      	str	r3, [r2, #48]	@ 0x30
 8009b94:	4b3e      	ldr	r3, [pc, #248]	@ (8009c90 <HAL_ETH_MspInit+0x15c>)
 8009b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b9c:	61bb      	str	r3, [r7, #24]
 8009b9e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009ba0:	4b3b      	ldr	r3, [pc, #236]	@ (8009c90 <HAL_ETH_MspInit+0x15c>)
 8009ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ba4:	4a3a      	ldr	r2, [pc, #232]	@ (8009c90 <HAL_ETH_MspInit+0x15c>)
 8009ba6:	f043 0304 	orr.w	r3, r3, #4
 8009baa:	6313      	str	r3, [r2, #48]	@ 0x30
 8009bac:	4b38      	ldr	r3, [pc, #224]	@ (8009c90 <HAL_ETH_MspInit+0x15c>)
 8009bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bb0:	f003 0304 	and.w	r3, r3, #4
 8009bb4:	617b      	str	r3, [r7, #20]
 8009bb6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009bb8:	4b35      	ldr	r3, [pc, #212]	@ (8009c90 <HAL_ETH_MspInit+0x15c>)
 8009bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bbc:	4a34      	ldr	r2, [pc, #208]	@ (8009c90 <HAL_ETH_MspInit+0x15c>)
 8009bbe:	f043 0301 	orr.w	r3, r3, #1
 8009bc2:	6313      	str	r3, [r2, #48]	@ 0x30
 8009bc4:	4b32      	ldr	r3, [pc, #200]	@ (8009c90 <HAL_ETH_MspInit+0x15c>)
 8009bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bc8:	f003 0301 	and.w	r3, r3, #1
 8009bcc:	613b      	str	r3, [r7, #16]
 8009bce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009bd0:	4b2f      	ldr	r3, [pc, #188]	@ (8009c90 <HAL_ETH_MspInit+0x15c>)
 8009bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bd4:	4a2e      	ldr	r2, [pc, #184]	@ (8009c90 <HAL_ETH_MspInit+0x15c>)
 8009bd6:	f043 0302 	orr.w	r3, r3, #2
 8009bda:	6313      	str	r3, [r2, #48]	@ 0x30
 8009bdc:	4b2c      	ldr	r3, [pc, #176]	@ (8009c90 <HAL_ETH_MspInit+0x15c>)
 8009bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009be0:	f003 0302 	and.w	r3, r3, #2
 8009be4:	60fb      	str	r3, [r7, #12]
 8009be6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8009be8:	4b29      	ldr	r3, [pc, #164]	@ (8009c90 <HAL_ETH_MspInit+0x15c>)
 8009bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bec:	4a28      	ldr	r2, [pc, #160]	@ (8009c90 <HAL_ETH_MspInit+0x15c>)
 8009bee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009bf2:	6313      	str	r3, [r2, #48]	@ 0x30
 8009bf4:	4b26      	ldr	r3, [pc, #152]	@ (8009c90 <HAL_ETH_MspInit+0x15c>)
 8009bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bfc:	60bb      	str	r3, [r7, #8]
 8009bfe:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8009c00:	2332      	movs	r3, #50	@ 0x32
 8009c02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c04:	2302      	movs	r3, #2
 8009c06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c0c:	2303      	movs	r3, #3
 8009c0e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009c10:	230b      	movs	r3, #11
 8009c12:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009c14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c18:	4619      	mov	r1, r3
 8009c1a:	481e      	ldr	r0, [pc, #120]	@ (8009c94 <HAL_ETH_MspInit+0x160>)
 8009c1c:	f7fb fdd0 	bl	80057c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8009c20:	2386      	movs	r3, #134	@ 0x86
 8009c22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c24:	2302      	movs	r3, #2
 8009c26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c2c:	2303      	movs	r3, #3
 8009c2e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009c30:	230b      	movs	r3, #11
 8009c32:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c38:	4619      	mov	r1, r3
 8009c3a:	4817      	ldr	r0, [pc, #92]	@ (8009c98 <HAL_ETH_MspInit+0x164>)
 8009c3c:	f7fb fdc0 	bl	80057c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8009c40:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009c44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c46:	2302      	movs	r3, #2
 8009c48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c4e:	2303      	movs	r3, #3
 8009c50:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009c52:	230b      	movs	r3, #11
 8009c54:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009c56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	480f      	ldr	r0, [pc, #60]	@ (8009c9c <HAL_ETH_MspInit+0x168>)
 8009c5e:	f7fb fdaf 	bl	80057c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8009c62:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8009c66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c68:	2302      	movs	r3, #2
 8009c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c70:	2303      	movs	r3, #3
 8009c72:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009c74:	230b      	movs	r3, #11
 8009c76:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009c78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c7c:	4619      	mov	r1, r3
 8009c7e:	4808      	ldr	r0, [pc, #32]	@ (8009ca0 <HAL_ETH_MspInit+0x16c>)
 8009c80:	f7fb fd9e 	bl	80057c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8009c84:	bf00      	nop
 8009c86:	3738      	adds	r7, #56	@ 0x38
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}
 8009c8c:	40028000 	.word	0x40028000
 8009c90:	40023800 	.word	0x40023800
 8009c94:	40020800 	.word	0x40020800
 8009c98:	40020000 	.word	0x40020000
 8009c9c:	40020400 	.word	0x40020400
 8009ca0:	40021800 	.word	0x40021800

08009ca4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8009ca8:	4802      	ldr	r0, [pc, #8]	@ (8009cb4 <ETH_PHY_IO_Init+0x10>)
 8009caa:	f7fb f927 	bl	8004efc <HAL_ETH_SetMDIOClockRange>

  return 0;
 8009cae:	2300      	movs	r3, #0
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	bd80      	pop	{r7, pc}
 8009cb4:	20005184 	.word	0x20005184

08009cb8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	af00      	add	r7, sp, #0
  return 0;
 8009cbc:	2300      	movs	r3, #0
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b084      	sub	sp, #16
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	60f8      	str	r0, [r7, #12]
 8009cd0:	60b9      	str	r1, [r7, #8]
 8009cd2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	68ba      	ldr	r2, [r7, #8]
 8009cd8:	68f9      	ldr	r1, [r7, #12]
 8009cda:	4807      	ldr	r0, [pc, #28]	@ (8009cf8 <ETH_PHY_IO_ReadReg+0x30>)
 8009cdc:	f7fa ff68 	bl	8004bb0 <HAL_ETH_ReadPHYRegister>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d002      	beq.n	8009cec <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8009ce6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009cea:	e000      	b.n	8009cee <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8009cec:	2300      	movs	r3, #0
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3710      	adds	r7, #16
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
 8009cf6:	bf00      	nop
 8009cf8:	20005184 	.word	0x20005184

08009cfc <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b084      	sub	sp, #16
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	68ba      	ldr	r2, [r7, #8]
 8009d0c:	68f9      	ldr	r1, [r7, #12]
 8009d0e:	4807      	ldr	r0, [pc, #28]	@ (8009d2c <ETH_PHY_IO_WriteReg+0x30>)
 8009d10:	f7fa ff99 	bl	8004c46 <HAL_ETH_WritePHYRegister>
 8009d14:	4603      	mov	r3, r0
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d002      	beq.n	8009d20 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8009d1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009d1e:	e000      	b.n	8009d22 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8009d20:	2300      	movs	r3, #0
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3710      	adds	r7, #16
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}
 8009d2a:	bf00      	nop
 8009d2c:	20005184 	.word	0x20005184

08009d30 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009d34:	f7f9 fe52 	bl	80039dc <HAL_GetTick>
 8009d38:	4603      	mov	r3, r0
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	bd80      	pop	{r7, pc}
	...

08009d40 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b0a0      	sub	sp, #128	@ 0x80
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8009d48:	f107 030c 	add.w	r3, r7, #12
 8009d4c:	2264      	movs	r2, #100	@ 0x64
 8009d4e:	2100      	movs	r1, #0
 8009d50:	4618      	mov	r0, r3
 8009d52:	f005 f8a7 	bl	800eea4 <memset>
  int32_t PHYLinkState = 0;
 8009d56:	2300      	movs	r3, #0
 8009d58:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009d5e:	2300      	movs	r3, #0
 8009d60:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009d62:	2300      	movs	r3, #0
 8009d64:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8009d66:	483a      	ldr	r0, [pc, #232]	@ (8009e50 <ethernet_link_check_state+0x110>)
 8009d68:	f7f9 fd60 	bl	800382c <LAN8742_GetLinkState>
 8009d6c:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009d74:	089b      	lsrs	r3, r3, #2
 8009d76:	f003 0301 	and.w	r3, r3, #1
 8009d7a:	b2db      	uxtb	r3, r3
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d00c      	beq.n	8009d9a <ethernet_link_check_state+0x5a>
 8009d80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009d82:	2b01      	cmp	r3, #1
 8009d84:	dc09      	bgt.n	8009d9a <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8009d86:	4833      	ldr	r0, [pc, #204]	@ (8009e54 <ethernet_link_check_state+0x114>)
 8009d88:	f7fa fce1 	bl	800474e <HAL_ETH_Stop>
    netif_set_down(netif);
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f000 fffb 	bl	800ad88 <netif_set_down>
    netif_set_link_down(netif);
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f001 f85e 	bl	800ae54 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8009d98:	e055      	b.n	8009e46 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009da0:	f003 0304 	and.w	r3, r3, #4
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d14e      	bne.n	8009e46 <ethernet_link_check_state+0x106>
 8009da8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	dd4b      	ble.n	8009e46 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8009dae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009db0:	3b02      	subs	r3, #2
 8009db2:	2b03      	cmp	r3, #3
 8009db4:	d82a      	bhi.n	8009e0c <ethernet_link_check_state+0xcc>
 8009db6:	a201      	add	r2, pc, #4	@ (adr r2, 8009dbc <ethernet_link_check_state+0x7c>)
 8009db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dbc:	08009dcd 	.word	0x08009dcd
 8009dc0:	08009ddf 	.word	0x08009ddf
 8009dc4:	08009def 	.word	0x08009def
 8009dc8:	08009dff 	.word	0x08009dff
      duplex = ETH_FULLDUPLEX_MODE;
 8009dcc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009dd0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8009dd2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009dd6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009dd8:	2301      	movs	r3, #1
 8009dda:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8009ddc:	e017      	b.n	8009e0e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8009dde:	2300      	movs	r3, #0
 8009de0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8009de2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009de6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009de8:	2301      	movs	r3, #1
 8009dea:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8009dec:	e00f      	b.n	8009e0e <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8009dee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009df2:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8009df4:	2300      	movs	r3, #0
 8009df6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009df8:	2301      	movs	r3, #1
 8009dfa:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8009dfc:	e007      	b.n	8009e0e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8009e02:	2300      	movs	r3, #0
 8009e04:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009e06:	2301      	movs	r3, #1
 8009e08:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8009e0a:	e000      	b.n	8009e0e <ethernet_link_check_state+0xce>
      break;
 8009e0c:	bf00      	nop
    if(linkchanged)
 8009e0e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d018      	beq.n	8009e46 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8009e14:	f107 030c 	add.w	r3, r7, #12
 8009e18:	4619      	mov	r1, r3
 8009e1a:	480e      	ldr	r0, [pc, #56]	@ (8009e54 <ethernet_link_check_state+0x114>)
 8009e1c:	f7fa ff5c 	bl	8004cd8 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8009e20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009e22:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8009e24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e26:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8009e28:	f107 030c 	add.w	r3, r7, #12
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	4809      	ldr	r0, [pc, #36]	@ (8009e54 <ethernet_link_check_state+0x114>)
 8009e30:	f7fb f849 	bl	8004ec6 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8009e34:	4807      	ldr	r0, [pc, #28]	@ (8009e54 <ethernet_link_check_state+0x114>)
 8009e36:	f7fa fc2b 	bl	8004690 <HAL_ETH_Start>
      netif_set_up(netif);
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 ff38 	bl	800acb0 <netif_set_up>
      netif_set_link_up(netif);
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f000 ffd3 	bl	800adec <netif_set_link_up>
}
 8009e46:	bf00      	nop
 8009e48:	3780      	adds	r7, #128	@ 0x80
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}
 8009e4e:	bf00      	nop
 8009e50:	2000526c 	.word	0x2000526c
 8009e54:	20005184 	.word	0x20005184

08009e58 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b086      	sub	sp, #24
 8009e5c:	af02      	add	r7, sp, #8
 8009e5e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8009e60:	4812      	ldr	r0, [pc, #72]	@ (8009eac <HAL_ETH_RxAllocateCallback+0x54>)
 8009e62:	f000 fca3 	bl	800a7ac <memp_malloc_pool>
 8009e66:	60f8      	str	r0, [r7, #12]
  if (p)
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d014      	beq.n	8009e98 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	f103 0220 	add.w	r2, r3, #32
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	4a0d      	ldr	r2, [pc, #52]	@ (8009eb0 <HAL_ETH_RxAllocateCallback+0x58>)
 8009e7c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8009e86:	9201      	str	r2, [sp, #4]
 8009e88:	9300      	str	r3, [sp, #0]
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2241      	movs	r2, #65	@ 0x41
 8009e8e:	2100      	movs	r1, #0
 8009e90:	2000      	movs	r0, #0
 8009e92:	f001 f9a7 	bl	800b1e4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8009e96:	e005      	b.n	8009ea4 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8009e98:	4b06      	ldr	r3, [pc, #24]	@ (8009eb4 <HAL_ETH_RxAllocateCallback+0x5c>)
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	601a      	str	r2, [r3, #0]
}
 8009ea4:	bf00      	nop
 8009ea6:	3710      	adds	r7, #16
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}
 8009eac:	080118c4 	.word	0x080118c4
 8009eb0:	08009af1 	.word	0x08009af1
 8009eb4:	20005180 	.word	0x20005180

08009eb8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b088      	sub	sp, #32
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	60f8      	str	r0, [r7, #12]
 8009ec0:	60b9      	str	r1, [r7, #8]
 8009ec2:	607a      	str	r2, [r7, #4]
 8009ec4:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	3b20      	subs	r3, #32
 8009ed6:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8009ed8:	69fb      	ldr	r3, [r7, #28]
 8009eda:	2200      	movs	r2, #0
 8009edc:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8009ede:	69fb      	ldr	r3, [r7, #28]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8009ee4:	69fb      	ldr	r3, [r7, #28]
 8009ee6:	887a      	ldrh	r2, [r7, #2]
 8009ee8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8009eea:	69bb      	ldr	r3, [r7, #24]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d103      	bne.n	8009efa <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8009ef2:	69bb      	ldr	r3, [r7, #24]
 8009ef4:	69fa      	ldr	r2, [r7, #28]
 8009ef6:	601a      	str	r2, [r3, #0]
 8009ef8:	e003      	b.n	8009f02 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	69fa      	ldr	r2, [r7, #28]
 8009f00:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	69fa      	ldr	r2, [r7, #28]
 8009f06:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8009f08:	69bb      	ldr	r3, [r7, #24]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	61fb      	str	r3, [r7, #28]
 8009f0e:	e009      	b.n	8009f24 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8009f10:	69fb      	ldr	r3, [r7, #28]
 8009f12:	891a      	ldrh	r2, [r3, #8]
 8009f14:	887b      	ldrh	r3, [r7, #2]
 8009f16:	4413      	add	r3, r2
 8009f18:	b29a      	uxth	r2, r3
 8009f1a:	69fb      	ldr	r3, [r7, #28]
 8009f1c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8009f1e:	69fb      	ldr	r3, [r7, #28]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	61fb      	str	r3, [r7, #28]
 8009f24:	69fb      	ldr	r3, [r7, #28]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d1f2      	bne.n	8009f10 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8009f2a:	887b      	ldrh	r3, [r7, #2]
 8009f2c:	4619      	mov	r1, r3
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f7ff fc28 	bl	8009784 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8009f34:	bf00      	nop
 8009f36:	3720      	adds	r7, #32
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b083      	sub	sp, #12
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	4603      	mov	r3, r0
 8009f44:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8009f46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009f4a:	021b      	lsls	r3, r3, #8
 8009f4c:	b21a      	sxth	r2, r3
 8009f4e:	88fb      	ldrh	r3, [r7, #6]
 8009f50:	0a1b      	lsrs	r3, r3, #8
 8009f52:	b29b      	uxth	r3, r3
 8009f54:	b21b      	sxth	r3, r3
 8009f56:	4313      	orrs	r3, r2
 8009f58:	b21b      	sxth	r3, r3
 8009f5a:	b29b      	uxth	r3, r3
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	370c      	adds	r7, #12
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr

08009f68 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b082      	sub	sp, #8
 8009f6c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8009f72:	f000 f8d3 	bl	800a11c <mem_init>
  memp_init();
 8009f76:	f000 fbd5 	bl	800a724 <memp_init>
  pbuf_init();
  netif_init();
 8009f7a:	f000 fcd3 	bl	800a924 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009f7e:	f001 fe39 	bl	800bbf4 <udp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8009f82:	f001 fdb5 	bl	800baf0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8009f86:	bf00      	nop
 8009f88:	3708      	adds	r7, #8
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}
	...

08009f90 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b083      	sub	sp, #12
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	4603      	mov	r3, r0
 8009f98:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8009f9a:	4b05      	ldr	r3, [pc, #20]	@ (8009fb0 <ptr_to_mem+0x20>)
 8009f9c:	681a      	ldr	r2, [r3, #0]
 8009f9e:	88fb      	ldrh	r3, [r7, #6]
 8009fa0:	4413      	add	r3, r2
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	370c      	adds	r7, #12
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fac:	4770      	bx	lr
 8009fae:	bf00      	nop
 8009fb0:	200052a4 	.word	0x200052a4

08009fb4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b083      	sub	sp, #12
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8009fbc:	4b05      	ldr	r3, [pc, #20]	@ (8009fd4 <mem_to_ptr+0x20>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	687a      	ldr	r2, [r7, #4]
 8009fc2:	1ad3      	subs	r3, r2, r3
 8009fc4:	b29b      	uxth	r3, r3
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	370c      	adds	r7, #12
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd0:	4770      	bx	lr
 8009fd2:	bf00      	nop
 8009fd4:	200052a4 	.word	0x200052a4

08009fd8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009fd8:	b590      	push	{r4, r7, lr}
 8009fda:	b085      	sub	sp, #20
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009fe0:	4b45      	ldr	r3, [pc, #276]	@ (800a0f8 <plug_holes+0x120>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	687a      	ldr	r2, [r7, #4]
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	d206      	bcs.n	8009ff8 <plug_holes+0x20>
 8009fea:	4b44      	ldr	r3, [pc, #272]	@ (800a0fc <plug_holes+0x124>)
 8009fec:	f240 12df 	movw	r2, #479	@ 0x1df
 8009ff0:	4943      	ldr	r1, [pc, #268]	@ (800a100 <plug_holes+0x128>)
 8009ff2:	4844      	ldr	r0, [pc, #272]	@ (800a104 <plug_holes+0x12c>)
 8009ff4:	f004 febc 	bl	800ed70 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009ff8:	4b43      	ldr	r3, [pc, #268]	@ (800a108 <plug_holes+0x130>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	687a      	ldr	r2, [r7, #4]
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d306      	bcc.n	800a010 <plug_holes+0x38>
 800a002:	4b3e      	ldr	r3, [pc, #248]	@ (800a0fc <plug_holes+0x124>)
 800a004:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800a008:	4940      	ldr	r1, [pc, #256]	@ (800a10c <plug_holes+0x134>)
 800a00a:	483e      	ldr	r0, [pc, #248]	@ (800a104 <plug_holes+0x12c>)
 800a00c:	f004 feb0 	bl	800ed70 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	791b      	ldrb	r3, [r3, #4]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d006      	beq.n	800a026 <plug_holes+0x4e>
 800a018:	4b38      	ldr	r3, [pc, #224]	@ (800a0fc <plug_holes+0x124>)
 800a01a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800a01e:	493c      	ldr	r1, [pc, #240]	@ (800a110 <plug_holes+0x138>)
 800a020:	4838      	ldr	r0, [pc, #224]	@ (800a104 <plug_holes+0x12c>)
 800a022:	f004 fea5 	bl	800ed70 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	881b      	ldrh	r3, [r3, #0]
 800a02a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a02e:	d906      	bls.n	800a03e <plug_holes+0x66>
 800a030:	4b32      	ldr	r3, [pc, #200]	@ (800a0fc <plug_holes+0x124>)
 800a032:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800a036:	4937      	ldr	r1, [pc, #220]	@ (800a114 <plug_holes+0x13c>)
 800a038:	4832      	ldr	r0, [pc, #200]	@ (800a104 <plug_holes+0x12c>)
 800a03a:	f004 fe99 	bl	800ed70 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	881b      	ldrh	r3, [r3, #0]
 800a042:	4618      	mov	r0, r3
 800a044:	f7ff ffa4 	bl	8009f90 <ptr_to_mem>
 800a048:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a04a:	687a      	ldr	r2, [r7, #4]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	429a      	cmp	r2, r3
 800a050:	d024      	beq.n	800a09c <plug_holes+0xc4>
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	791b      	ldrb	r3, [r3, #4]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d120      	bne.n	800a09c <plug_holes+0xc4>
 800a05a:	4b2b      	ldr	r3, [pc, #172]	@ (800a108 <plug_holes+0x130>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	68fa      	ldr	r2, [r7, #12]
 800a060:	429a      	cmp	r2, r3
 800a062:	d01b      	beq.n	800a09c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a064:	4b2c      	ldr	r3, [pc, #176]	@ (800a118 <plug_holes+0x140>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	68fa      	ldr	r2, [r7, #12]
 800a06a:	429a      	cmp	r2, r3
 800a06c:	d102      	bne.n	800a074 <plug_holes+0x9c>
      lfree = mem;
 800a06e:	4a2a      	ldr	r2, [pc, #168]	@ (800a118 <plug_holes+0x140>)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	881a      	ldrh	r2, [r3, #0]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	881b      	ldrh	r3, [r3, #0]
 800a080:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a084:	d00a      	beq.n	800a09c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	881b      	ldrh	r3, [r3, #0]
 800a08a:	4618      	mov	r0, r3
 800a08c:	f7ff ff80 	bl	8009f90 <ptr_to_mem>
 800a090:	4604      	mov	r4, r0
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f7ff ff8e 	bl	8009fb4 <mem_to_ptr>
 800a098:	4603      	mov	r3, r0
 800a09a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	885b      	ldrh	r3, [r3, #2]
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f7ff ff75 	bl	8009f90 <ptr_to_mem>
 800a0a6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a0a8:	68ba      	ldr	r2, [r7, #8]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	d01f      	beq.n	800a0f0 <plug_holes+0x118>
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	791b      	ldrb	r3, [r3, #4]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d11b      	bne.n	800a0f0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a0b8:	4b17      	ldr	r3, [pc, #92]	@ (800a118 <plug_holes+0x140>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	687a      	ldr	r2, [r7, #4]
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d102      	bne.n	800a0c8 <plug_holes+0xf0>
      lfree = pmem;
 800a0c2:	4a15      	ldr	r2, [pc, #84]	@ (800a118 <plug_holes+0x140>)
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	881a      	ldrh	r2, [r3, #0]
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	881b      	ldrh	r3, [r3, #0]
 800a0d4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a0d8:	d00a      	beq.n	800a0f0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	881b      	ldrh	r3, [r3, #0]
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f7ff ff56 	bl	8009f90 <ptr_to_mem>
 800a0e4:	4604      	mov	r4, r0
 800a0e6:	68b8      	ldr	r0, [r7, #8]
 800a0e8:	f7ff ff64 	bl	8009fb4 <mem_to_ptr>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a0f0:	bf00      	nop
 800a0f2:	3714      	adds	r7, #20
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd90      	pop	{r4, r7, pc}
 800a0f8:	200052a4 	.word	0x200052a4
 800a0fc:	0801039c 	.word	0x0801039c
 800a100:	080103cc 	.word	0x080103cc
 800a104:	080103e4 	.word	0x080103e4
 800a108:	200052a8 	.word	0x200052a8
 800a10c:	0801040c 	.word	0x0801040c
 800a110:	08010428 	.word	0x08010428
 800a114:	08010444 	.word	0x08010444
 800a118:	200052ac 	.word	0x200052ac

0800a11c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b082      	sub	sp, #8
 800a120:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a122:	4b16      	ldr	r3, [pc, #88]	@ (800a17c <mem_init+0x60>)
 800a124:	4a16      	ldr	r2, [pc, #88]	@ (800a180 <mem_init+0x64>)
 800a126:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a128:	4b14      	ldr	r3, [pc, #80]	@ (800a17c <mem_init+0x60>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800a134:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2200      	movs	r2, #0
 800a13a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2200      	movs	r2, #0
 800a140:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a142:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800a146:	f7ff ff23 	bl	8009f90 <ptr_to_mem>
 800a14a:	4603      	mov	r3, r0
 800a14c:	4a0d      	ldr	r2, [pc, #52]	@ (800a184 <mem_init+0x68>)
 800a14e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a150:	4b0c      	ldr	r3, [pc, #48]	@ (800a184 <mem_init+0x68>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	2201      	movs	r2, #1
 800a156:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a158:	4b0a      	ldr	r3, [pc, #40]	@ (800a184 <mem_init+0x68>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800a160:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a162:	4b08      	ldr	r3, [pc, #32]	@ (800a184 <mem_init+0x68>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800a16a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a16c:	4b03      	ldr	r3, [pc, #12]	@ (800a17c <mem_init+0x60>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4a05      	ldr	r2, [pc, #20]	@ (800a188 <mem_init+0x6c>)
 800a172:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800a174:	bf00      	nop
 800a176:	3708      	adds	r7, #8
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}
 800a17c:	200052a4 	.word	0x200052a4
 800a180:	20048000 	.word	0x20048000
 800a184:	200052a8 	.word	0x200052a8
 800a188:	200052ac 	.word	0x200052ac

0800a18c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b086      	sub	sp, #24
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f7ff ff0d 	bl	8009fb4 <mem_to_ptr>
 800a19a:	4603      	mov	r3, r0
 800a19c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	881b      	ldrh	r3, [r3, #0]
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f7ff fef4 	bl	8009f90 <ptr_to_mem>
 800a1a8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	885b      	ldrh	r3, [r3, #2]
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f7ff feee 	bl	8009f90 <ptr_to_mem>
 800a1b4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	881b      	ldrh	r3, [r3, #0]
 800a1ba:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a1be:	d818      	bhi.n	800a1f2 <mem_link_valid+0x66>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	885b      	ldrh	r3, [r3, #2]
 800a1c4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a1c8:	d813      	bhi.n	800a1f2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a1ce:	8afa      	ldrh	r2, [r7, #22]
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d004      	beq.n	800a1de <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	881b      	ldrh	r3, [r3, #0]
 800a1d8:	8afa      	ldrh	r2, [r7, #22]
 800a1da:	429a      	cmp	r2, r3
 800a1dc:	d109      	bne.n	800a1f2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a1de:	4b08      	ldr	r3, [pc, #32]	@ (800a200 <mem_link_valid+0x74>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a1e2:	693a      	ldr	r2, [r7, #16]
 800a1e4:	429a      	cmp	r2, r3
 800a1e6:	d006      	beq.n	800a1f6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	885b      	ldrh	r3, [r3, #2]
 800a1ec:	8afa      	ldrh	r2, [r7, #22]
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	d001      	beq.n	800a1f6 <mem_link_valid+0x6a>
    return 0;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	e000      	b.n	800a1f8 <mem_link_valid+0x6c>
  }
  return 1;
 800a1f6:	2301      	movs	r3, #1
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3718      	adds	r7, #24
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}
 800a200:	200052a8 	.word	0x200052a8

0800a204 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b084      	sub	sp, #16
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d04c      	beq.n	800a2ac <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f003 0303 	and.w	r3, r3, #3
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d007      	beq.n	800a22c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a21c:	4b25      	ldr	r3, [pc, #148]	@ (800a2b4 <mem_free+0xb0>)
 800a21e:	f240 2273 	movw	r2, #627	@ 0x273
 800a222:	4925      	ldr	r1, [pc, #148]	@ (800a2b8 <mem_free+0xb4>)
 800a224:	4825      	ldr	r0, [pc, #148]	@ (800a2bc <mem_free+0xb8>)
 800a226:	f004 fda3 	bl	800ed70 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a22a:	e040      	b.n	800a2ae <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	3b08      	subs	r3, #8
 800a230:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a232:	4b23      	ldr	r3, [pc, #140]	@ (800a2c0 <mem_free+0xbc>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	68fa      	ldr	r2, [r7, #12]
 800a238:	429a      	cmp	r2, r3
 800a23a:	d306      	bcc.n	800a24a <mem_free+0x46>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f103 020c 	add.w	r2, r3, #12
 800a242:	4b20      	ldr	r3, [pc, #128]	@ (800a2c4 <mem_free+0xc0>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	429a      	cmp	r2, r3
 800a248:	d907      	bls.n	800a25a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a24a:	4b1a      	ldr	r3, [pc, #104]	@ (800a2b4 <mem_free+0xb0>)
 800a24c:	f240 227f 	movw	r2, #639	@ 0x27f
 800a250:	491d      	ldr	r1, [pc, #116]	@ (800a2c8 <mem_free+0xc4>)
 800a252:	481a      	ldr	r0, [pc, #104]	@ (800a2bc <mem_free+0xb8>)
 800a254:	f004 fd8c 	bl	800ed70 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a258:	e029      	b.n	800a2ae <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	791b      	ldrb	r3, [r3, #4]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d107      	bne.n	800a272 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a262:	4b14      	ldr	r3, [pc, #80]	@ (800a2b4 <mem_free+0xb0>)
 800a264:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800a268:	4918      	ldr	r1, [pc, #96]	@ (800a2cc <mem_free+0xc8>)
 800a26a:	4814      	ldr	r0, [pc, #80]	@ (800a2bc <mem_free+0xb8>)
 800a26c:	f004 fd80 	bl	800ed70 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a270:	e01d      	b.n	800a2ae <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800a272:	68f8      	ldr	r0, [r7, #12]
 800a274:	f7ff ff8a 	bl	800a18c <mem_link_valid>
 800a278:	4603      	mov	r3, r0
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d107      	bne.n	800a28e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a27e:	4b0d      	ldr	r3, [pc, #52]	@ (800a2b4 <mem_free+0xb0>)
 800a280:	f240 2295 	movw	r2, #661	@ 0x295
 800a284:	4912      	ldr	r1, [pc, #72]	@ (800a2d0 <mem_free+0xcc>)
 800a286:	480d      	ldr	r0, [pc, #52]	@ (800a2bc <mem_free+0xb8>)
 800a288:	f004 fd72 	bl	800ed70 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a28c:	e00f      	b.n	800a2ae <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	2200      	movs	r2, #0
 800a292:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a294:	4b0f      	ldr	r3, [pc, #60]	@ (800a2d4 <mem_free+0xd0>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	68fa      	ldr	r2, [r7, #12]
 800a29a:	429a      	cmp	r2, r3
 800a29c:	d202      	bcs.n	800a2a4 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a29e:	4a0d      	ldr	r2, [pc, #52]	@ (800a2d4 <mem_free+0xd0>)
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a2a4:	68f8      	ldr	r0, [r7, #12]
 800a2a6:	f7ff fe97 	bl	8009fd8 <plug_holes>
 800a2aa:	e000      	b.n	800a2ae <mem_free+0xaa>
    return;
 800a2ac:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800a2ae:	3710      	adds	r7, #16
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}
 800a2b4:	0801039c 	.word	0x0801039c
 800a2b8:	08010470 	.word	0x08010470
 800a2bc:	080103e4 	.word	0x080103e4
 800a2c0:	200052a4 	.word	0x200052a4
 800a2c4:	200052a8 	.word	0x200052a8
 800a2c8:	08010494 	.word	0x08010494
 800a2cc:	080104b0 	.word	0x080104b0
 800a2d0:	080104d8 	.word	0x080104d8
 800a2d4:	200052ac 	.word	0x200052ac

0800a2d8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b088      	sub	sp, #32
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	460b      	mov	r3, r1
 800a2e2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a2e4:	887b      	ldrh	r3, [r7, #2]
 800a2e6:	3303      	adds	r3, #3
 800a2e8:	b29b      	uxth	r3, r3
 800a2ea:	f023 0303 	bic.w	r3, r3, #3
 800a2ee:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a2f0:	8bfb      	ldrh	r3, [r7, #30]
 800a2f2:	2b0b      	cmp	r3, #11
 800a2f4:	d801      	bhi.n	800a2fa <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a2f6:	230c      	movs	r3, #12
 800a2f8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a2fa:	8bfb      	ldrh	r3, [r7, #30]
 800a2fc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a300:	d803      	bhi.n	800a30a <mem_trim+0x32>
 800a302:	8bfa      	ldrh	r2, [r7, #30]
 800a304:	887b      	ldrh	r3, [r7, #2]
 800a306:	429a      	cmp	r2, r3
 800a308:	d201      	bcs.n	800a30e <mem_trim+0x36>
    return NULL;
 800a30a:	2300      	movs	r3, #0
 800a30c:	e0cc      	b.n	800a4a8 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a30e:	4b68      	ldr	r3, [pc, #416]	@ (800a4b0 <mem_trim+0x1d8>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	687a      	ldr	r2, [r7, #4]
 800a314:	429a      	cmp	r2, r3
 800a316:	d304      	bcc.n	800a322 <mem_trim+0x4a>
 800a318:	4b66      	ldr	r3, [pc, #408]	@ (800a4b4 <mem_trim+0x1dc>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	687a      	ldr	r2, [r7, #4]
 800a31e:	429a      	cmp	r2, r3
 800a320:	d306      	bcc.n	800a330 <mem_trim+0x58>
 800a322:	4b65      	ldr	r3, [pc, #404]	@ (800a4b8 <mem_trim+0x1e0>)
 800a324:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800a328:	4964      	ldr	r1, [pc, #400]	@ (800a4bc <mem_trim+0x1e4>)
 800a32a:	4865      	ldr	r0, [pc, #404]	@ (800a4c0 <mem_trim+0x1e8>)
 800a32c:	f004 fd20 	bl	800ed70 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a330:	4b5f      	ldr	r3, [pc, #380]	@ (800a4b0 <mem_trim+0x1d8>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	429a      	cmp	r2, r3
 800a338:	d304      	bcc.n	800a344 <mem_trim+0x6c>
 800a33a:	4b5e      	ldr	r3, [pc, #376]	@ (800a4b4 <mem_trim+0x1dc>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	687a      	ldr	r2, [r7, #4]
 800a340:	429a      	cmp	r2, r3
 800a342:	d301      	bcc.n	800a348 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	e0af      	b.n	800a4a8 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	3b08      	subs	r3, #8
 800a34c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a34e:	69b8      	ldr	r0, [r7, #24]
 800a350:	f7ff fe30 	bl	8009fb4 <mem_to_ptr>
 800a354:	4603      	mov	r3, r0
 800a356:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a358:	69bb      	ldr	r3, [r7, #24]
 800a35a:	881a      	ldrh	r2, [r3, #0]
 800a35c:	8afb      	ldrh	r3, [r7, #22]
 800a35e:	1ad3      	subs	r3, r2, r3
 800a360:	b29b      	uxth	r3, r3
 800a362:	3b08      	subs	r3, #8
 800a364:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a366:	8bfa      	ldrh	r2, [r7, #30]
 800a368:	8abb      	ldrh	r3, [r7, #20]
 800a36a:	429a      	cmp	r2, r3
 800a36c:	d906      	bls.n	800a37c <mem_trim+0xa4>
 800a36e:	4b52      	ldr	r3, [pc, #328]	@ (800a4b8 <mem_trim+0x1e0>)
 800a370:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800a374:	4953      	ldr	r1, [pc, #332]	@ (800a4c4 <mem_trim+0x1ec>)
 800a376:	4852      	ldr	r0, [pc, #328]	@ (800a4c0 <mem_trim+0x1e8>)
 800a378:	f004 fcfa 	bl	800ed70 <iprintf>
  if (newsize > size) {
 800a37c:	8bfa      	ldrh	r2, [r7, #30]
 800a37e:	8abb      	ldrh	r3, [r7, #20]
 800a380:	429a      	cmp	r2, r3
 800a382:	d901      	bls.n	800a388 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800a384:	2300      	movs	r3, #0
 800a386:	e08f      	b.n	800a4a8 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800a388:	8bfa      	ldrh	r2, [r7, #30]
 800a38a:	8abb      	ldrh	r3, [r7, #20]
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d101      	bne.n	800a394 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	e089      	b.n	800a4a8 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800a394:	69bb      	ldr	r3, [r7, #24]
 800a396:	881b      	ldrh	r3, [r3, #0]
 800a398:	4618      	mov	r0, r3
 800a39a:	f7ff fdf9 	bl	8009f90 <ptr_to_mem>
 800a39e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	791b      	ldrb	r3, [r3, #4]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d13f      	bne.n	800a428 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a3a8:	69bb      	ldr	r3, [r7, #24]
 800a3aa:	881b      	ldrh	r3, [r3, #0]
 800a3ac:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a3b0:	d106      	bne.n	800a3c0 <mem_trim+0xe8>
 800a3b2:	4b41      	ldr	r3, [pc, #260]	@ (800a4b8 <mem_trim+0x1e0>)
 800a3b4:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800a3b8:	4943      	ldr	r1, [pc, #268]	@ (800a4c8 <mem_trim+0x1f0>)
 800a3ba:	4841      	ldr	r0, [pc, #260]	@ (800a4c0 <mem_trim+0x1e8>)
 800a3bc:	f004 fcd8 	bl	800ed70 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	881b      	ldrh	r3, [r3, #0]
 800a3c4:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a3c6:	8afa      	ldrh	r2, [r7, #22]
 800a3c8:	8bfb      	ldrh	r3, [r7, #30]
 800a3ca:	4413      	add	r3, r2
 800a3cc:	b29b      	uxth	r3, r3
 800a3ce:	3308      	adds	r3, #8
 800a3d0:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a3d2:	4b3e      	ldr	r3, [pc, #248]	@ (800a4cc <mem_trim+0x1f4>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	693a      	ldr	r2, [r7, #16]
 800a3d8:	429a      	cmp	r2, r3
 800a3da:	d106      	bne.n	800a3ea <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800a3dc:	89fb      	ldrh	r3, [r7, #14]
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f7ff fdd6 	bl	8009f90 <ptr_to_mem>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	4a39      	ldr	r2, [pc, #228]	@ (800a4cc <mem_trim+0x1f4>)
 800a3e8:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a3ea:	89fb      	ldrh	r3, [r7, #14]
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f7ff fdcf 	bl	8009f90 <ptr_to_mem>
 800a3f2:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a3fa:	693b      	ldr	r3, [r7, #16]
 800a3fc:	89ba      	ldrh	r2, [r7, #12]
 800a3fe:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	8afa      	ldrh	r2, [r7, #22]
 800a404:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a406:	69bb      	ldr	r3, [r7, #24]
 800a408:	89fa      	ldrh	r2, [r7, #14]
 800a40a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	881b      	ldrh	r3, [r3, #0]
 800a410:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a414:	d047      	beq.n	800a4a6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	881b      	ldrh	r3, [r3, #0]
 800a41a:	4618      	mov	r0, r3
 800a41c:	f7ff fdb8 	bl	8009f90 <ptr_to_mem>
 800a420:	4602      	mov	r2, r0
 800a422:	89fb      	ldrh	r3, [r7, #14]
 800a424:	8053      	strh	r3, [r2, #2]
 800a426:	e03e      	b.n	800a4a6 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a428:	8bfb      	ldrh	r3, [r7, #30]
 800a42a:	f103 0214 	add.w	r2, r3, #20
 800a42e:	8abb      	ldrh	r3, [r7, #20]
 800a430:	429a      	cmp	r2, r3
 800a432:	d838      	bhi.n	800a4a6 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a434:	8afa      	ldrh	r2, [r7, #22]
 800a436:	8bfb      	ldrh	r3, [r7, #30]
 800a438:	4413      	add	r3, r2
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	3308      	adds	r3, #8
 800a43e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a440:	69bb      	ldr	r3, [r7, #24]
 800a442:	881b      	ldrh	r3, [r3, #0]
 800a444:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a448:	d106      	bne.n	800a458 <mem_trim+0x180>
 800a44a:	4b1b      	ldr	r3, [pc, #108]	@ (800a4b8 <mem_trim+0x1e0>)
 800a44c:	f240 3216 	movw	r2, #790	@ 0x316
 800a450:	491d      	ldr	r1, [pc, #116]	@ (800a4c8 <mem_trim+0x1f0>)
 800a452:	481b      	ldr	r0, [pc, #108]	@ (800a4c0 <mem_trim+0x1e8>)
 800a454:	f004 fc8c 	bl	800ed70 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a458:	89fb      	ldrh	r3, [r7, #14]
 800a45a:	4618      	mov	r0, r3
 800a45c:	f7ff fd98 	bl	8009f90 <ptr_to_mem>
 800a460:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a462:	4b1a      	ldr	r3, [pc, #104]	@ (800a4cc <mem_trim+0x1f4>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	693a      	ldr	r2, [r7, #16]
 800a468:	429a      	cmp	r2, r3
 800a46a:	d202      	bcs.n	800a472 <mem_trim+0x19a>
      lfree = mem2;
 800a46c:	4a17      	ldr	r2, [pc, #92]	@ (800a4cc <mem_trim+0x1f4>)
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	2200      	movs	r2, #0
 800a476:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a478:	69bb      	ldr	r3, [r7, #24]
 800a47a:	881a      	ldrh	r2, [r3, #0]
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	8afa      	ldrh	r2, [r7, #22]
 800a484:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a486:	69bb      	ldr	r3, [r7, #24]
 800a488:	89fa      	ldrh	r2, [r7, #14]
 800a48a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	881b      	ldrh	r3, [r3, #0]
 800a490:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a494:	d007      	beq.n	800a4a6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	881b      	ldrh	r3, [r3, #0]
 800a49a:	4618      	mov	r0, r3
 800a49c:	f7ff fd78 	bl	8009f90 <ptr_to_mem>
 800a4a0:	4602      	mov	r2, r0
 800a4a2:	89fb      	ldrh	r3, [r7, #14]
 800a4a4:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800a4a6:	687b      	ldr	r3, [r7, #4]
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3720      	adds	r7, #32
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}
 800a4b0:	200052a4 	.word	0x200052a4
 800a4b4:	200052a8 	.word	0x200052a8
 800a4b8:	0801039c 	.word	0x0801039c
 800a4bc:	0801050c 	.word	0x0801050c
 800a4c0:	080103e4 	.word	0x080103e4
 800a4c4:	08010524 	.word	0x08010524
 800a4c8:	08010544 	.word	0x08010544
 800a4cc:	200052ac 	.word	0x200052ac

0800a4d0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b088      	sub	sp, #32
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a4da:	88fb      	ldrh	r3, [r7, #6]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d101      	bne.n	800a4e4 <mem_malloc+0x14>
    return NULL;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	e0d9      	b.n	800a698 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a4e4:	88fb      	ldrh	r3, [r7, #6]
 800a4e6:	3303      	adds	r3, #3
 800a4e8:	b29b      	uxth	r3, r3
 800a4ea:	f023 0303 	bic.w	r3, r3, #3
 800a4ee:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a4f0:	8bbb      	ldrh	r3, [r7, #28]
 800a4f2:	2b0b      	cmp	r3, #11
 800a4f4:	d801      	bhi.n	800a4fa <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a4f6:	230c      	movs	r3, #12
 800a4f8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a4fa:	8bbb      	ldrh	r3, [r7, #28]
 800a4fc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a500:	d803      	bhi.n	800a50a <mem_malloc+0x3a>
 800a502:	8bba      	ldrh	r2, [r7, #28]
 800a504:	88fb      	ldrh	r3, [r7, #6]
 800a506:	429a      	cmp	r2, r3
 800a508:	d201      	bcs.n	800a50e <mem_malloc+0x3e>
    return NULL;
 800a50a:	2300      	movs	r3, #0
 800a50c:	e0c4      	b.n	800a698 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a50e:	4b64      	ldr	r3, [pc, #400]	@ (800a6a0 <mem_malloc+0x1d0>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	4618      	mov	r0, r3
 800a514:	f7ff fd4e 	bl	8009fb4 <mem_to_ptr>
 800a518:	4603      	mov	r3, r0
 800a51a:	83fb      	strh	r3, [r7, #30]
 800a51c:	e0b4      	b.n	800a688 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a51e:	8bfb      	ldrh	r3, [r7, #30]
 800a520:	4618      	mov	r0, r3
 800a522:	f7ff fd35 	bl	8009f90 <ptr_to_mem>
 800a526:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	791b      	ldrb	r3, [r3, #4]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	f040 80a4 	bne.w	800a67a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	881b      	ldrh	r3, [r3, #0]
 800a536:	461a      	mov	r2, r3
 800a538:	8bfb      	ldrh	r3, [r7, #30]
 800a53a:	1ad3      	subs	r3, r2, r3
 800a53c:	f1a3 0208 	sub.w	r2, r3, #8
 800a540:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a542:	429a      	cmp	r2, r3
 800a544:	f0c0 8099 	bcc.w	800a67a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	881b      	ldrh	r3, [r3, #0]
 800a54c:	461a      	mov	r2, r3
 800a54e:	8bfb      	ldrh	r3, [r7, #30]
 800a550:	1ad3      	subs	r3, r2, r3
 800a552:	f1a3 0208 	sub.w	r2, r3, #8
 800a556:	8bbb      	ldrh	r3, [r7, #28]
 800a558:	3314      	adds	r3, #20
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d333      	bcc.n	800a5c6 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a55e:	8bfa      	ldrh	r2, [r7, #30]
 800a560:	8bbb      	ldrh	r3, [r7, #28]
 800a562:	4413      	add	r3, r2
 800a564:	b29b      	uxth	r3, r3
 800a566:	3308      	adds	r3, #8
 800a568:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a56a:	8a7b      	ldrh	r3, [r7, #18]
 800a56c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a570:	d106      	bne.n	800a580 <mem_malloc+0xb0>
 800a572:	4b4c      	ldr	r3, [pc, #304]	@ (800a6a4 <mem_malloc+0x1d4>)
 800a574:	f240 3287 	movw	r2, #903	@ 0x387
 800a578:	494b      	ldr	r1, [pc, #300]	@ (800a6a8 <mem_malloc+0x1d8>)
 800a57a:	484c      	ldr	r0, [pc, #304]	@ (800a6ac <mem_malloc+0x1dc>)
 800a57c:	f004 fbf8 	bl	800ed70 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a580:	8a7b      	ldrh	r3, [r7, #18]
 800a582:	4618      	mov	r0, r3
 800a584:	f7ff fd04 	bl	8009f90 <ptr_to_mem>
 800a588:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	2200      	movs	r2, #0
 800a58e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	881a      	ldrh	r2, [r3, #0]
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	8bfa      	ldrh	r2, [r7, #30]
 800a59c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	8a7a      	ldrh	r2, [r7, #18]
 800a5a2:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800a5a4:	697b      	ldr	r3, [r7, #20]
 800a5a6:	2201      	movs	r2, #1
 800a5a8:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	881b      	ldrh	r3, [r3, #0]
 800a5ae:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a5b2:	d00b      	beq.n	800a5cc <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	881b      	ldrh	r3, [r3, #0]
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f7ff fce9 	bl	8009f90 <ptr_to_mem>
 800a5be:	4602      	mov	r2, r0
 800a5c0:	8a7b      	ldrh	r3, [r7, #18]
 800a5c2:	8053      	strh	r3, [r2, #2]
 800a5c4:	e002      	b.n	800a5cc <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	2201      	movs	r2, #1
 800a5ca:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a5cc:	4b34      	ldr	r3, [pc, #208]	@ (800a6a0 <mem_malloc+0x1d0>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	697a      	ldr	r2, [r7, #20]
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d127      	bne.n	800a626 <mem_malloc+0x156>
          struct mem *cur = lfree;
 800a5d6:	4b32      	ldr	r3, [pc, #200]	@ (800a6a0 <mem_malloc+0x1d0>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a5dc:	e005      	b.n	800a5ea <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800a5de:	69bb      	ldr	r3, [r7, #24]
 800a5e0:	881b      	ldrh	r3, [r3, #0]
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f7ff fcd4 	bl	8009f90 <ptr_to_mem>
 800a5e8:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800a5ea:	69bb      	ldr	r3, [r7, #24]
 800a5ec:	791b      	ldrb	r3, [r3, #4]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d004      	beq.n	800a5fc <mem_malloc+0x12c>
 800a5f2:	4b2f      	ldr	r3, [pc, #188]	@ (800a6b0 <mem_malloc+0x1e0>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	69ba      	ldr	r2, [r7, #24]
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d1f0      	bne.n	800a5de <mem_malloc+0x10e>
          }
          lfree = cur;
 800a5fc:	4a28      	ldr	r2, [pc, #160]	@ (800a6a0 <mem_malloc+0x1d0>)
 800a5fe:	69bb      	ldr	r3, [r7, #24]
 800a600:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a602:	4b27      	ldr	r3, [pc, #156]	@ (800a6a0 <mem_malloc+0x1d0>)
 800a604:	681a      	ldr	r2, [r3, #0]
 800a606:	4b2a      	ldr	r3, [pc, #168]	@ (800a6b0 <mem_malloc+0x1e0>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	429a      	cmp	r2, r3
 800a60c:	d00b      	beq.n	800a626 <mem_malloc+0x156>
 800a60e:	4b24      	ldr	r3, [pc, #144]	@ (800a6a0 <mem_malloc+0x1d0>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	791b      	ldrb	r3, [r3, #4]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d006      	beq.n	800a626 <mem_malloc+0x156>
 800a618:	4b22      	ldr	r3, [pc, #136]	@ (800a6a4 <mem_malloc+0x1d4>)
 800a61a:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800a61e:	4925      	ldr	r1, [pc, #148]	@ (800a6b4 <mem_malloc+0x1e4>)
 800a620:	4822      	ldr	r0, [pc, #136]	@ (800a6ac <mem_malloc+0x1dc>)
 800a622:	f004 fba5 	bl	800ed70 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a626:	8bba      	ldrh	r2, [r7, #28]
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	4413      	add	r3, r2
 800a62c:	3308      	adds	r3, #8
 800a62e:	4a20      	ldr	r2, [pc, #128]	@ (800a6b0 <mem_malloc+0x1e0>)
 800a630:	6812      	ldr	r2, [r2, #0]
 800a632:	4293      	cmp	r3, r2
 800a634:	d906      	bls.n	800a644 <mem_malloc+0x174>
 800a636:	4b1b      	ldr	r3, [pc, #108]	@ (800a6a4 <mem_malloc+0x1d4>)
 800a638:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800a63c:	491e      	ldr	r1, [pc, #120]	@ (800a6b8 <mem_malloc+0x1e8>)
 800a63e:	481b      	ldr	r0, [pc, #108]	@ (800a6ac <mem_malloc+0x1dc>)
 800a640:	f004 fb96 	bl	800ed70 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	f003 0303 	and.w	r3, r3, #3
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d006      	beq.n	800a65c <mem_malloc+0x18c>
 800a64e:	4b15      	ldr	r3, [pc, #84]	@ (800a6a4 <mem_malloc+0x1d4>)
 800a650:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800a654:	4919      	ldr	r1, [pc, #100]	@ (800a6bc <mem_malloc+0x1ec>)
 800a656:	4815      	ldr	r0, [pc, #84]	@ (800a6ac <mem_malloc+0x1dc>)
 800a658:	f004 fb8a 	bl	800ed70 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	f003 0303 	and.w	r3, r3, #3
 800a662:	2b00      	cmp	r3, #0
 800a664:	d006      	beq.n	800a674 <mem_malloc+0x1a4>
 800a666:	4b0f      	ldr	r3, [pc, #60]	@ (800a6a4 <mem_malloc+0x1d4>)
 800a668:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800a66c:	4914      	ldr	r1, [pc, #80]	@ (800a6c0 <mem_malloc+0x1f0>)
 800a66e:	480f      	ldr	r0, [pc, #60]	@ (800a6ac <mem_malloc+0x1dc>)
 800a670:	f004 fb7e 	bl	800ed70 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	3308      	adds	r3, #8
 800a678:	e00e      	b.n	800a698 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800a67a:	8bfb      	ldrh	r3, [r7, #30]
 800a67c:	4618      	mov	r0, r3
 800a67e:	f7ff fc87 	bl	8009f90 <ptr_to_mem>
 800a682:	4603      	mov	r3, r0
 800a684:	881b      	ldrh	r3, [r3, #0]
 800a686:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a688:	8bfa      	ldrh	r2, [r7, #30]
 800a68a:	8bbb      	ldrh	r3, [r7, #28]
 800a68c:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 800a690:	429a      	cmp	r2, r3
 800a692:	f4ff af44 	bcc.w	800a51e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800a696:	2300      	movs	r3, #0
}
 800a698:	4618      	mov	r0, r3
 800a69a:	3720      	adds	r7, #32
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}
 800a6a0:	200052ac 	.word	0x200052ac
 800a6a4:	0801039c 	.word	0x0801039c
 800a6a8:	08010544 	.word	0x08010544
 800a6ac:	080103e4 	.word	0x080103e4
 800a6b0:	200052a8 	.word	0x200052a8
 800a6b4:	08010558 	.word	0x08010558
 800a6b8:	08010574 	.word	0x08010574
 800a6bc:	080105a4 	.word	0x080105a4
 800a6c0:	080105d4 	.word	0x080105d4

0800a6c4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b085      	sub	sp, #20
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	689b      	ldr	r3, [r3, #8]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	685b      	ldr	r3, [r3, #4]
 800a6d8:	3303      	adds	r3, #3
 800a6da:	f023 0303 	bic.w	r3, r3, #3
 800a6de:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	60fb      	str	r3, [r7, #12]
 800a6e4:	e011      	b.n	800a70a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	689b      	ldr	r3, [r3, #8]
 800a6ea:	681a      	ldr	r2, [r3, #0]
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	68ba      	ldr	r2, [r7, #8]
 800a6f6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	881b      	ldrh	r3, [r3, #0]
 800a6fc:	461a      	mov	r2, r3
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	4413      	add	r3, r2
 800a702:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	3301      	adds	r3, #1
 800a708:	60fb      	str	r3, [r7, #12]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	885b      	ldrh	r3, [r3, #2]
 800a70e:	461a      	mov	r2, r3
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	4293      	cmp	r3, r2
 800a714:	dbe7      	blt.n	800a6e6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800a716:	bf00      	nop
 800a718:	bf00      	nop
 800a71a:	3714      	adds	r7, #20
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr

0800a724 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b082      	sub	sp, #8
 800a728:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a72a:	2300      	movs	r3, #0
 800a72c:	80fb      	strh	r3, [r7, #6]
 800a72e:	e009      	b.n	800a744 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800a730:	88fb      	ldrh	r3, [r7, #6]
 800a732:	4a08      	ldr	r2, [pc, #32]	@ (800a754 <memp_init+0x30>)
 800a734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a738:	4618      	mov	r0, r3
 800a73a:	f7ff ffc3 	bl	800a6c4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a73e:	88fb      	ldrh	r3, [r7, #6]
 800a740:	3301      	adds	r3, #1
 800a742:	80fb      	strh	r3, [r7, #6]
 800a744:	88fb      	ldrh	r3, [r7, #6]
 800a746:	2b05      	cmp	r3, #5
 800a748:	d9f2      	bls.n	800a730 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800a74a:	bf00      	nop
 800a74c:	bf00      	nop
 800a74e:	3708      	adds	r7, #8
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}
 800a754:	08011918 	.word	0x08011918

0800a758 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b084      	sub	sp, #16
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	689b      	ldr	r3, [r3, #8]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d012      	beq.n	800a794 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	689b      	ldr	r3, [r3, #8]
 800a772:	68fa      	ldr	r2, [r7, #12]
 800a774:	6812      	ldr	r2, [r2, #0]
 800a776:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f003 0303 	and.w	r3, r3, #3
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d006      	beq.n	800a790 <do_memp_malloc_pool+0x38>
 800a782:	4b07      	ldr	r3, [pc, #28]	@ (800a7a0 <do_memp_malloc_pool+0x48>)
 800a784:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800a788:	4906      	ldr	r1, [pc, #24]	@ (800a7a4 <do_memp_malloc_pool+0x4c>)
 800a78a:	4807      	ldr	r0, [pc, #28]	@ (800a7a8 <do_memp_malloc_pool+0x50>)
 800a78c:	f004 faf0 	bl	800ed70 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	e000      	b.n	800a796 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800a794:	2300      	movs	r3, #0
}
 800a796:	4618      	mov	r0, r3
 800a798:	3710      	adds	r7, #16
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}
 800a79e:	bf00      	nop
 800a7a0:	080105f8 	.word	0x080105f8
 800a7a4:	08010628 	.word	0x08010628
 800a7a8:	0801064c 	.word	0x0801064c

0800a7ac <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b082      	sub	sp, #8
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d106      	bne.n	800a7c8 <memp_malloc_pool+0x1c>
 800a7ba:	4b0a      	ldr	r3, [pc, #40]	@ (800a7e4 <memp_malloc_pool+0x38>)
 800a7bc:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800a7c0:	4909      	ldr	r1, [pc, #36]	@ (800a7e8 <memp_malloc_pool+0x3c>)
 800a7c2:	480a      	ldr	r0, [pc, #40]	@ (800a7ec <memp_malloc_pool+0x40>)
 800a7c4:	f004 fad4 	bl	800ed70 <iprintf>
  if (desc == NULL) {
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d101      	bne.n	800a7d2 <memp_malloc_pool+0x26>
    return NULL;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	e003      	b.n	800a7da <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f7ff ffc0 	bl	800a758 <do_memp_malloc_pool>
 800a7d8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	3708      	adds	r7, #8
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}
 800a7e2:	bf00      	nop
 800a7e4:	080105f8 	.word	0x080105f8
 800a7e8:	08010674 	.word	0x08010674
 800a7ec:	0801064c 	.word	0x0801064c

0800a7f0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b084      	sub	sp, #16
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800a7fa:	79fb      	ldrb	r3, [r7, #7]
 800a7fc:	2b05      	cmp	r3, #5
 800a7fe:	d908      	bls.n	800a812 <memp_malloc+0x22>
 800a800:	4b0a      	ldr	r3, [pc, #40]	@ (800a82c <memp_malloc+0x3c>)
 800a802:	f240 1257 	movw	r2, #343	@ 0x157
 800a806:	490a      	ldr	r1, [pc, #40]	@ (800a830 <memp_malloc+0x40>)
 800a808:	480a      	ldr	r0, [pc, #40]	@ (800a834 <memp_malloc+0x44>)
 800a80a:	f004 fab1 	bl	800ed70 <iprintf>
 800a80e:	2300      	movs	r3, #0
 800a810:	e008      	b.n	800a824 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800a812:	79fb      	ldrb	r3, [r7, #7]
 800a814:	4a08      	ldr	r2, [pc, #32]	@ (800a838 <memp_malloc+0x48>)
 800a816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a81a:	4618      	mov	r0, r3
 800a81c:	f7ff ff9c 	bl	800a758 <do_memp_malloc_pool>
 800a820:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800a822:	68fb      	ldr	r3, [r7, #12]
}
 800a824:	4618      	mov	r0, r3
 800a826:	3710      	adds	r7, #16
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}
 800a82c:	080105f8 	.word	0x080105f8
 800a830:	08010688 	.word	0x08010688
 800a834:	0801064c 	.word	0x0801064c
 800a838:	08011918 	.word	0x08011918

0800a83c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b084      	sub	sp, #16
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	f003 0303 	and.w	r3, r3, #3
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d006      	beq.n	800a85e <do_memp_free_pool+0x22>
 800a850:	4b0a      	ldr	r3, [pc, #40]	@ (800a87c <do_memp_free_pool+0x40>)
 800a852:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800a856:	490a      	ldr	r1, [pc, #40]	@ (800a880 <do_memp_free_pool+0x44>)
 800a858:	480a      	ldr	r0, [pc, #40]	@ (800a884 <do_memp_free_pool+0x48>)
 800a85a:	f004 fa89 	bl	800ed70 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	689b      	ldr	r3, [r3, #8]
 800a866:	681a      	ldr	r2, [r3, #0]
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	689b      	ldr	r3, [r3, #8]
 800a870:	68fa      	ldr	r2, [r7, #12]
 800a872:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800a874:	bf00      	nop
 800a876:	3710      	adds	r7, #16
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}
 800a87c:	080105f8 	.word	0x080105f8
 800a880:	080106a8 	.word	0x080106a8
 800a884:	0801064c 	.word	0x0801064c

0800a888 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b082      	sub	sp, #8
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d106      	bne.n	800a8a6 <memp_free_pool+0x1e>
 800a898:	4b0a      	ldr	r3, [pc, #40]	@ (800a8c4 <memp_free_pool+0x3c>)
 800a89a:	f240 1295 	movw	r2, #405	@ 0x195
 800a89e:	490a      	ldr	r1, [pc, #40]	@ (800a8c8 <memp_free_pool+0x40>)
 800a8a0:	480a      	ldr	r0, [pc, #40]	@ (800a8cc <memp_free_pool+0x44>)
 800a8a2:	f004 fa65 	bl	800ed70 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d007      	beq.n	800a8bc <memp_free_pool+0x34>
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d004      	beq.n	800a8bc <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800a8b2:	6839      	ldr	r1, [r7, #0]
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f7ff ffc1 	bl	800a83c <do_memp_free_pool>
 800a8ba:	e000      	b.n	800a8be <memp_free_pool+0x36>
    return;
 800a8bc:	bf00      	nop
}
 800a8be:	3708      	adds	r7, #8
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}
 800a8c4:	080105f8 	.word	0x080105f8
 800a8c8:	08010674 	.word	0x08010674
 800a8cc:	0801064c 	.word	0x0801064c

0800a8d0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b082      	sub	sp, #8
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	6039      	str	r1, [r7, #0]
 800a8da:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800a8dc:	79fb      	ldrb	r3, [r7, #7]
 800a8de:	2b05      	cmp	r3, #5
 800a8e0:	d907      	bls.n	800a8f2 <memp_free+0x22>
 800a8e2:	4b0c      	ldr	r3, [pc, #48]	@ (800a914 <memp_free+0x44>)
 800a8e4:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800a8e8:	490b      	ldr	r1, [pc, #44]	@ (800a918 <memp_free+0x48>)
 800a8ea:	480c      	ldr	r0, [pc, #48]	@ (800a91c <memp_free+0x4c>)
 800a8ec:	f004 fa40 	bl	800ed70 <iprintf>
 800a8f0:	e00c      	b.n	800a90c <memp_free+0x3c>

  if (mem == NULL) {
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d008      	beq.n	800a90a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800a8f8:	79fb      	ldrb	r3, [r7, #7]
 800a8fa:	4a09      	ldr	r2, [pc, #36]	@ (800a920 <memp_free+0x50>)
 800a8fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a900:	6839      	ldr	r1, [r7, #0]
 800a902:	4618      	mov	r0, r3
 800a904:	f7ff ff9a 	bl	800a83c <do_memp_free_pool>
 800a908:	e000      	b.n	800a90c <memp_free+0x3c>
    return;
 800a90a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800a90c:	3708      	adds	r7, #8
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}
 800a912:	bf00      	nop
 800a914:	080105f8 	.word	0x080105f8
 800a918:	080106c8 	.word	0x080106c8
 800a91c:	0801064c 	.word	0x0801064c
 800a920:	08011918 	.word	0x08011918

0800a924 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800a924:	b480      	push	{r7}
 800a926:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800a928:	bf00      	nop
 800a92a:	46bd      	mov	sp, r7
 800a92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a930:	4770      	bx	lr
	...

0800a934 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b086      	sub	sp, #24
 800a938:	af00      	add	r7, sp, #0
 800a93a:	60f8      	str	r0, [r7, #12]
 800a93c:	60b9      	str	r1, [r7, #8]
 800a93e:	607a      	str	r2, [r7, #4]
 800a940:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d108      	bne.n	800a95a <netif_add+0x26>
 800a948:	4b57      	ldr	r3, [pc, #348]	@ (800aaa8 <netif_add+0x174>)
 800a94a:	f240 1227 	movw	r2, #295	@ 0x127
 800a94e:	4957      	ldr	r1, [pc, #348]	@ (800aaac <netif_add+0x178>)
 800a950:	4857      	ldr	r0, [pc, #348]	@ (800aab0 <netif_add+0x17c>)
 800a952:	f004 fa0d 	bl	800ed70 <iprintf>
 800a956:	2300      	movs	r3, #0
 800a958:	e0a2      	b.n	800aaa0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800a95a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d108      	bne.n	800a972 <netif_add+0x3e>
 800a960:	4b51      	ldr	r3, [pc, #324]	@ (800aaa8 <netif_add+0x174>)
 800a962:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800a966:	4953      	ldr	r1, [pc, #332]	@ (800aab4 <netif_add+0x180>)
 800a968:	4851      	ldr	r0, [pc, #324]	@ (800aab0 <netif_add+0x17c>)
 800a96a:	f004 fa01 	bl	800ed70 <iprintf>
 800a96e:	2300      	movs	r3, #0
 800a970:	e096      	b.n	800aaa0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d101      	bne.n	800a97c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800a978:	4b4f      	ldr	r3, [pc, #316]	@ (800aab8 <netif_add+0x184>)
 800a97a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d101      	bne.n	800a986 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800a982:	4b4d      	ldr	r3, [pc, #308]	@ (800aab8 <netif_add+0x184>)
 800a984:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d101      	bne.n	800a990 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800a98c:	4b4a      	ldr	r3, [pc, #296]	@ (800aab8 <netif_add+0x184>)
 800a98e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2200      	movs	r2, #0
 800a994:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	2200      	movs	r2, #0
 800a99a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	4a45      	ldr	r2, [pc, #276]	@ (800aabc <netif_add+0x188>)
 800a9a6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	6a3a      	ldr	r2, [r7, #32]
 800a9c0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800a9c2:	4b3f      	ldr	r3, [pc, #252]	@ (800aac0 <netif_add+0x18c>)
 800a9c4:	781a      	ldrb	r2, [r3, #0]
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a9d0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	687a      	ldr	r2, [r7, #4]
 800a9d6:	68b9      	ldr	r1, [r7, #8]
 800a9d8:	68f8      	ldr	r0, [r7, #12]
 800a9da:	f000 f90f 	bl	800abfc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800a9de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9e0:	68f8      	ldr	r0, [r7, #12]
 800a9e2:	4798      	blx	r3
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d001      	beq.n	800a9ee <netif_add+0xba>
    return NULL;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	e058      	b.n	800aaa0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a9f4:	2bff      	cmp	r3, #255	@ 0xff
 800a9f6:	d103      	bne.n	800aa00 <netif_add+0xcc>
        netif->num = 0;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800aa00:	2300      	movs	r3, #0
 800aa02:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800aa04:	4b2f      	ldr	r3, [pc, #188]	@ (800aac4 <netif_add+0x190>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	617b      	str	r3, [r7, #20]
 800aa0a:	e02b      	b.n	800aa64 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800aa0c:	697a      	ldr	r2, [r7, #20]
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d106      	bne.n	800aa22 <netif_add+0xee>
 800aa14:	4b24      	ldr	r3, [pc, #144]	@ (800aaa8 <netif_add+0x174>)
 800aa16:	f240 128b 	movw	r2, #395	@ 0x18b
 800aa1a:	492b      	ldr	r1, [pc, #172]	@ (800aac8 <netif_add+0x194>)
 800aa1c:	4824      	ldr	r0, [pc, #144]	@ (800aab0 <netif_add+0x17c>)
 800aa1e:	f004 f9a7 	bl	800ed70 <iprintf>
        num_netifs++;
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	3301      	adds	r3, #1
 800aa26:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800aa28:	693b      	ldr	r3, [r7, #16]
 800aa2a:	2bff      	cmp	r3, #255	@ 0xff
 800aa2c:	dd06      	ble.n	800aa3c <netif_add+0x108>
 800aa2e:	4b1e      	ldr	r3, [pc, #120]	@ (800aaa8 <netif_add+0x174>)
 800aa30:	f240 128d 	movw	r2, #397	@ 0x18d
 800aa34:	4925      	ldr	r1, [pc, #148]	@ (800aacc <netif_add+0x198>)
 800aa36:	481e      	ldr	r0, [pc, #120]	@ (800aab0 <netif_add+0x17c>)
 800aa38:	f004 f99a 	bl	800ed70 <iprintf>
        if (netif2->num == netif->num) {
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	d108      	bne.n	800aa5e <netif_add+0x12a>
          netif->num++;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800aa52:	3301      	adds	r3, #1
 800aa54:	b2da      	uxtb	r2, r3
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800aa5c:	e005      	b.n	800aa6a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	617b      	str	r3, [r7, #20]
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d1d0      	bne.n	800aa0c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d1be      	bne.n	800a9ee <netif_add+0xba>
  }
  if (netif->num == 254) {
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800aa76:	2bfe      	cmp	r3, #254	@ 0xfe
 800aa78:	d103      	bne.n	800aa82 <netif_add+0x14e>
    netif_num = 0;
 800aa7a:	4b11      	ldr	r3, [pc, #68]	@ (800aac0 <netif_add+0x18c>)
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	701a      	strb	r2, [r3, #0]
 800aa80:	e006      	b.n	800aa90 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800aa88:	3301      	adds	r3, #1
 800aa8a:	b2da      	uxtb	r2, r3
 800aa8c:	4b0c      	ldr	r3, [pc, #48]	@ (800aac0 <netif_add+0x18c>)
 800aa8e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800aa90:	4b0c      	ldr	r3, [pc, #48]	@ (800aac4 <netif_add+0x190>)
 800aa92:	681a      	ldr	r2, [r3, #0]
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800aa98:	4a0a      	ldr	r2, [pc, #40]	@ (800aac4 <netif_add+0x190>)
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	3718      	adds	r7, #24
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}
 800aaa8:	080106e4 	.word	0x080106e4
 800aaac:	08010778 	.word	0x08010778
 800aab0:	08010734 	.word	0x08010734
 800aab4:	08010794 	.word	0x08010794
 800aab8:	08011940 	.word	0x08011940
 800aabc:	0800aed7 	.word	0x0800aed7
 800aac0:	20007c90 	.word	0x20007c90
 800aac4:	20007c88 	.word	0x20007c88
 800aac8:	080107b8 	.word	0x080107b8
 800aacc:	080107cc 	.word	0x080107cc

0800aad0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b082      	sub	sp, #8
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800aada:	6839      	ldr	r1, [r7, #0]
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f001 fd03 	bl	800c4e8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800aae2:	bf00      	nop
 800aae4:	3708      	adds	r7, #8
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}
	...

0800aaec <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b086      	sub	sp, #24
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	60f8      	str	r0, [r7, #12]
 800aaf4:	60b9      	str	r1, [r7, #8]
 800aaf6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d106      	bne.n	800ab0c <netif_do_set_ipaddr+0x20>
 800aafe:	4b1d      	ldr	r3, [pc, #116]	@ (800ab74 <netif_do_set_ipaddr+0x88>)
 800ab00:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800ab04:	491c      	ldr	r1, [pc, #112]	@ (800ab78 <netif_do_set_ipaddr+0x8c>)
 800ab06:	481d      	ldr	r0, [pc, #116]	@ (800ab7c <netif_do_set_ipaddr+0x90>)
 800ab08:	f004 f932 	bl	800ed70 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d106      	bne.n	800ab20 <netif_do_set_ipaddr+0x34>
 800ab12:	4b18      	ldr	r3, [pc, #96]	@ (800ab74 <netif_do_set_ipaddr+0x88>)
 800ab14:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800ab18:	4917      	ldr	r1, [pc, #92]	@ (800ab78 <netif_do_set_ipaddr+0x8c>)
 800ab1a:	4818      	ldr	r0, [pc, #96]	@ (800ab7c <netif_do_set_ipaddr+0x90>)
 800ab1c:	f004 f928 	bl	800ed70 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	681a      	ldr	r2, [r3, #0]
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	3304      	adds	r3, #4
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	d01c      	beq.n	800ab68 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	3304      	adds	r3, #4
 800ab38:	681a      	ldr	r2, [r3, #0]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800ab3e:	f107 0314 	add.w	r3, r7, #20
 800ab42:	4619      	mov	r1, r3
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f7ff ffc3 	bl	800aad0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d002      	beq.n	800ab56 <netif_do_set_ipaddr+0x6a>
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	e000      	b.n	800ab58 <netif_do_set_ipaddr+0x6c>
 800ab56:	2300      	movs	r3, #0
 800ab58:	68fa      	ldr	r2, [r7, #12]
 800ab5a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800ab5c:	2101      	movs	r1, #1
 800ab5e:	68f8      	ldr	r0, [r7, #12]
 800ab60:	f000 f8d2 	bl	800ad08 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800ab64:	2301      	movs	r3, #1
 800ab66:	e000      	b.n	800ab6a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800ab68:	2300      	movs	r3, #0
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3718      	adds	r7, #24
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
 800ab72:	bf00      	nop
 800ab74:	080106e4 	.word	0x080106e4
 800ab78:	080107fc 	.word	0x080107fc
 800ab7c:	08010734 	.word	0x08010734

0800ab80 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800ab80:	b480      	push	{r7}
 800ab82:	b085      	sub	sp, #20
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	60f8      	str	r0, [r7, #12]
 800ab88:	60b9      	str	r1, [r7, #8]
 800ab8a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	681a      	ldr	r2, [r3, #0]
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	3308      	adds	r3, #8
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d00a      	beq.n	800abb0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d002      	beq.n	800aba6 <netif_do_set_netmask+0x26>
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	e000      	b.n	800aba8 <netif_do_set_netmask+0x28>
 800aba6:	2300      	movs	r3, #0
 800aba8:	68fa      	ldr	r2, [r7, #12]
 800abaa:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800abac:	2301      	movs	r3, #1
 800abae:	e000      	b.n	800abb2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800abb0:	2300      	movs	r3, #0
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3714      	adds	r7, #20
 800abb6:	46bd      	mov	sp, r7
 800abb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbc:	4770      	bx	lr

0800abbe <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800abbe:	b480      	push	{r7}
 800abc0:	b085      	sub	sp, #20
 800abc2:	af00      	add	r7, sp, #0
 800abc4:	60f8      	str	r0, [r7, #12]
 800abc6:	60b9      	str	r1, [r7, #8]
 800abc8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	681a      	ldr	r2, [r3, #0]
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	330c      	adds	r3, #12
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d00a      	beq.n	800abee <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d002      	beq.n	800abe4 <netif_do_set_gw+0x26>
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	e000      	b.n	800abe6 <netif_do_set_gw+0x28>
 800abe4:	2300      	movs	r3, #0
 800abe6:	68fa      	ldr	r2, [r7, #12]
 800abe8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800abea:	2301      	movs	r3, #1
 800abec:	e000      	b.n	800abf0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800abee:	2300      	movs	r3, #0
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	3714      	adds	r7, #20
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr

0800abfc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b088      	sub	sp, #32
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	60f8      	str	r0, [r7, #12]
 800ac04:	60b9      	str	r1, [r7, #8]
 800ac06:	607a      	str	r2, [r7, #4]
 800ac08:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d101      	bne.n	800ac1c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800ac18:	4b1c      	ldr	r3, [pc, #112]	@ (800ac8c <netif_set_addr+0x90>)
 800ac1a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d101      	bne.n	800ac26 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800ac22:	4b1a      	ldr	r3, [pc, #104]	@ (800ac8c <netif_set_addr+0x90>)
 800ac24:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d101      	bne.n	800ac30 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800ac2c:	4b17      	ldr	r3, [pc, #92]	@ (800ac8c <netif_set_addr+0x90>)
 800ac2e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d003      	beq.n	800ac3e <netif_set_addr+0x42>
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d101      	bne.n	800ac42 <netif_set_addr+0x46>
 800ac3e:	2301      	movs	r3, #1
 800ac40:	e000      	b.n	800ac44 <netif_set_addr+0x48>
 800ac42:	2300      	movs	r3, #0
 800ac44:	617b      	str	r3, [r7, #20]
  if (remove) {
 800ac46:	697b      	ldr	r3, [r7, #20]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d006      	beq.n	800ac5a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ac4c:	f107 0310 	add.w	r3, r7, #16
 800ac50:	461a      	mov	r2, r3
 800ac52:	68b9      	ldr	r1, [r7, #8]
 800ac54:	68f8      	ldr	r0, [r7, #12]
 800ac56:	f7ff ff49 	bl	800aaec <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800ac5a:	69fa      	ldr	r2, [r7, #28]
 800ac5c:	6879      	ldr	r1, [r7, #4]
 800ac5e:	68f8      	ldr	r0, [r7, #12]
 800ac60:	f7ff ff8e 	bl	800ab80 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800ac64:	69ba      	ldr	r2, [r7, #24]
 800ac66:	6839      	ldr	r1, [r7, #0]
 800ac68:	68f8      	ldr	r0, [r7, #12]
 800ac6a:	f7ff ffa8 	bl	800abbe <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d106      	bne.n	800ac82 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ac74:	f107 0310 	add.w	r3, r7, #16
 800ac78:	461a      	mov	r2, r3
 800ac7a:	68b9      	ldr	r1, [r7, #8]
 800ac7c:	68f8      	ldr	r0, [r7, #12]
 800ac7e:	f7ff ff35 	bl	800aaec <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800ac82:	bf00      	nop
 800ac84:	3720      	adds	r7, #32
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}
 800ac8a:	bf00      	nop
 800ac8c:	08011940 	.word	0x08011940

0800ac90 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b083      	sub	sp, #12
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ac98:	4a04      	ldr	r2, [pc, #16]	@ (800acac <netif_set_default+0x1c>)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ac9e:	bf00      	nop
 800aca0:	370c      	adds	r7, #12
 800aca2:	46bd      	mov	sp, r7
 800aca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca8:	4770      	bx	lr
 800acaa:	bf00      	nop
 800acac:	20007c8c 	.word	0x20007c8c

0800acb0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b082      	sub	sp, #8
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d107      	bne.n	800acce <netif_set_up+0x1e>
 800acbe:	4b0f      	ldr	r3, [pc, #60]	@ (800acfc <netif_set_up+0x4c>)
 800acc0:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800acc4:	490e      	ldr	r1, [pc, #56]	@ (800ad00 <netif_set_up+0x50>)
 800acc6:	480f      	ldr	r0, [pc, #60]	@ (800ad04 <netif_set_up+0x54>)
 800acc8:	f004 f852 	bl	800ed70 <iprintf>
 800accc:	e013      	b.n	800acf6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800acd4:	f003 0301 	and.w	r3, r3, #1
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d10c      	bne.n	800acf6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ace2:	f043 0301 	orr.w	r3, r3, #1
 800ace6:	b2da      	uxtb	r2, r3
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800acee:	2103      	movs	r1, #3
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f000 f809 	bl	800ad08 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800acf6:	3708      	adds	r7, #8
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}
 800acfc:	080106e4 	.word	0x080106e4
 800ad00:	0801086c 	.word	0x0801086c
 800ad04:	08010734 	.word	0x08010734

0800ad08 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b082      	sub	sp, #8
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
 800ad10:	460b      	mov	r3, r1
 800ad12:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d106      	bne.n	800ad28 <netif_issue_reports+0x20>
 800ad1a:	4b18      	ldr	r3, [pc, #96]	@ (800ad7c <netif_issue_reports+0x74>)
 800ad1c:	f240 326d 	movw	r2, #877	@ 0x36d
 800ad20:	4917      	ldr	r1, [pc, #92]	@ (800ad80 <netif_issue_reports+0x78>)
 800ad22:	4818      	ldr	r0, [pc, #96]	@ (800ad84 <netif_issue_reports+0x7c>)
 800ad24:	f004 f824 	bl	800ed70 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ad2e:	f003 0304 	and.w	r3, r3, #4
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d01e      	beq.n	800ad74 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ad3c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d017      	beq.n	800ad74 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ad44:	78fb      	ldrb	r3, [r7, #3]
 800ad46:	f003 0301 	and.w	r3, r3, #1
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d013      	beq.n	800ad76 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	3304      	adds	r3, #4
 800ad52:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d00e      	beq.n	800ad76 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ad5e:	f003 0308 	and.w	r3, r3, #8
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d007      	beq.n	800ad76 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	3304      	adds	r3, #4
 800ad6a:	4619      	mov	r1, r3
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f002 fb25 	bl	800d3bc <etharp_request>
 800ad72:	e000      	b.n	800ad76 <netif_issue_reports+0x6e>
    return;
 800ad74:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800ad76:	3708      	adds	r7, #8
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}
 800ad7c:	080106e4 	.word	0x080106e4
 800ad80:	08010888 	.word	0x08010888
 800ad84:	08010734 	.word	0x08010734

0800ad88 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b082      	sub	sp, #8
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d107      	bne.n	800ada6 <netif_set_down+0x1e>
 800ad96:	4b12      	ldr	r3, [pc, #72]	@ (800ade0 <netif_set_down+0x58>)
 800ad98:	f240 329b 	movw	r2, #923	@ 0x39b
 800ad9c:	4911      	ldr	r1, [pc, #68]	@ (800ade4 <netif_set_down+0x5c>)
 800ad9e:	4812      	ldr	r0, [pc, #72]	@ (800ade8 <netif_set_down+0x60>)
 800ada0:	f003 ffe6 	bl	800ed70 <iprintf>
 800ada4:	e019      	b.n	800adda <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800adac:	f003 0301 	and.w	r3, r3, #1
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d012      	beq.n	800adda <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800adba:	f023 0301 	bic.w	r3, r3, #1
 800adbe:	b2da      	uxtb	r2, r3
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800adcc:	f003 0308 	and.w	r3, r3, #8
 800add0:	2b00      	cmp	r3, #0
 800add2:	d002      	beq.n	800adda <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f001 feaf 	bl	800cb38 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800adda:	3708      	adds	r7, #8
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}
 800ade0:	080106e4 	.word	0x080106e4
 800ade4:	080108ac 	.word	0x080108ac
 800ade8:	08010734 	.word	0x08010734

0800adec <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b082      	sub	sp, #8
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d107      	bne.n	800ae0a <netif_set_link_up+0x1e>
 800adfa:	4b13      	ldr	r3, [pc, #76]	@ (800ae48 <netif_set_link_up+0x5c>)
 800adfc:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800ae00:	4912      	ldr	r1, [pc, #72]	@ (800ae4c <netif_set_link_up+0x60>)
 800ae02:	4813      	ldr	r0, [pc, #76]	@ (800ae50 <netif_set_link_up+0x64>)
 800ae04:	f003 ffb4 	bl	800ed70 <iprintf>
 800ae08:	e01b      	b.n	800ae42 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ae10:	f003 0304 	and.w	r3, r3, #4
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d114      	bne.n	800ae42 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ae1e:	f043 0304 	orr.w	r3, r3, #4
 800ae22:	b2da      	uxtb	r2, r3
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ae2a:	2103      	movs	r1, #3
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f7ff ff6b 	bl	800ad08 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	69db      	ldr	r3, [r3, #28]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d003      	beq.n	800ae42 <netif_set_link_up+0x56>
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	69db      	ldr	r3, [r3, #28]
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ae42:	3708      	adds	r7, #8
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}
 800ae48:	080106e4 	.word	0x080106e4
 800ae4c:	080108cc 	.word	0x080108cc
 800ae50:	08010734 	.word	0x08010734

0800ae54 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b082      	sub	sp, #8
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d107      	bne.n	800ae72 <netif_set_link_down+0x1e>
 800ae62:	4b11      	ldr	r3, [pc, #68]	@ (800aea8 <netif_set_link_down+0x54>)
 800ae64:	f240 4206 	movw	r2, #1030	@ 0x406
 800ae68:	4910      	ldr	r1, [pc, #64]	@ (800aeac <netif_set_link_down+0x58>)
 800ae6a:	4811      	ldr	r0, [pc, #68]	@ (800aeb0 <netif_set_link_down+0x5c>)
 800ae6c:	f003 ff80 	bl	800ed70 <iprintf>
 800ae70:	e017      	b.n	800aea2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ae78:	f003 0304 	and.w	r3, r3, #4
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d010      	beq.n	800aea2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ae86:	f023 0304 	bic.w	r3, r3, #4
 800ae8a:	b2da      	uxtb	r2, r3
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	69db      	ldr	r3, [r3, #28]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d003      	beq.n	800aea2 <netif_set_link_down+0x4e>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	69db      	ldr	r3, [r3, #28]
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800aea2:	3708      	adds	r7, #8
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}
 800aea8:	080106e4 	.word	0x080106e4
 800aeac:	080108f0 	.word	0x080108f0
 800aeb0:	08010734 	.word	0x08010734

0800aeb4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b083      	sub	sp, #12
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d002      	beq.n	800aeca <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	683a      	ldr	r2, [r7, #0]
 800aec8:	61da      	str	r2, [r3, #28]
  }
}
 800aeca:	bf00      	nop
 800aecc:	370c      	adds	r7, #12
 800aece:	46bd      	mov	sp, r7
 800aed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed4:	4770      	bx	lr

0800aed6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800aed6:	b480      	push	{r7}
 800aed8:	b085      	sub	sp, #20
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	60f8      	str	r0, [r7, #12]
 800aede:	60b9      	str	r1, [r7, #8]
 800aee0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800aee2:	f06f 030b 	mvn.w	r3, #11
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	3714      	adds	r7, #20
 800aeea:	46bd      	mov	sp, r7
 800aeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef0:	4770      	bx	lr
	...

0800aef4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800aef4:	b480      	push	{r7}
 800aef6:	b085      	sub	sp, #20
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	4603      	mov	r3, r0
 800aefc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800aefe:	79fb      	ldrb	r3, [r7, #7]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d013      	beq.n	800af2c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800af04:	4b0d      	ldr	r3, [pc, #52]	@ (800af3c <netif_get_by_index+0x48>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	60fb      	str	r3, [r7, #12]
 800af0a:	e00c      	b.n	800af26 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800af12:	3301      	adds	r3, #1
 800af14:	b2db      	uxtb	r3, r3
 800af16:	79fa      	ldrb	r2, [r7, #7]
 800af18:	429a      	cmp	r2, r3
 800af1a:	d101      	bne.n	800af20 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	e006      	b.n	800af2e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	60fb      	str	r3, [r7, #12]
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d1ef      	bne.n	800af0c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800af2c:	2300      	movs	r3, #0
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3714      	adds	r7, #20
 800af32:	46bd      	mov	sp, r7
 800af34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af38:	4770      	bx	lr
 800af3a:	bf00      	nop
 800af3c:	20007c88 	.word	0x20007c88

0800af40 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800af40:	b480      	push	{r7}
 800af42:	b085      	sub	sp, #20
 800af44:	af00      	add	r7, sp, #0
 800af46:	60f8      	str	r0, [r7, #12]
 800af48:	60b9      	str	r1, [r7, #8]
 800af4a:	4611      	mov	r1, r2
 800af4c:	461a      	mov	r2, r3
 800af4e:	460b      	mov	r3, r1
 800af50:	80fb      	strh	r3, [r7, #6]
 800af52:	4613      	mov	r3, r2
 800af54:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	2200      	movs	r2, #0
 800af5a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	68ba      	ldr	r2, [r7, #8]
 800af60:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	88fa      	ldrh	r2, [r7, #6]
 800af66:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	88ba      	ldrh	r2, [r7, #4]
 800af6c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800af6e:	8b3b      	ldrh	r3, [r7, #24]
 800af70:	b2da      	uxtb	r2, r3
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	7f3a      	ldrb	r2, [r7, #28]
 800af7a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	2201      	movs	r2, #1
 800af80:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	2200      	movs	r2, #0
 800af86:	73da      	strb	r2, [r3, #15]
}
 800af88:	bf00      	nop
 800af8a:	3714      	adds	r7, #20
 800af8c:	46bd      	mov	sp, r7
 800af8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af92:	4770      	bx	lr

0800af94 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b08c      	sub	sp, #48	@ 0x30
 800af98:	af02      	add	r7, sp, #8
 800af9a:	4603      	mov	r3, r0
 800af9c:	71fb      	strb	r3, [r7, #7]
 800af9e:	460b      	mov	r3, r1
 800afa0:	80bb      	strh	r3, [r7, #4]
 800afa2:	4613      	mov	r3, r2
 800afa4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800afa6:	79fb      	ldrb	r3, [r7, #7]
 800afa8:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800afaa:	887b      	ldrh	r3, [r7, #2]
 800afac:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800afb0:	d07d      	beq.n	800b0ae <pbuf_alloc+0x11a>
 800afb2:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800afb6:	f300 80c6 	bgt.w	800b146 <pbuf_alloc+0x1b2>
 800afba:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800afbe:	d010      	beq.n	800afe2 <pbuf_alloc+0x4e>
 800afc0:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800afc4:	f300 80bf 	bgt.w	800b146 <pbuf_alloc+0x1b2>
 800afc8:	2b01      	cmp	r3, #1
 800afca:	d002      	beq.n	800afd2 <pbuf_alloc+0x3e>
 800afcc:	2b41      	cmp	r3, #65	@ 0x41
 800afce:	f040 80ba 	bne.w	800b146 <pbuf_alloc+0x1b2>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800afd2:	887a      	ldrh	r2, [r7, #2]
 800afd4:	88bb      	ldrh	r3, [r7, #4]
 800afd6:	4619      	mov	r1, r3
 800afd8:	2000      	movs	r0, #0
 800afda:	f000 f8cf 	bl	800b17c <pbuf_alloc_reference>
 800afde:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800afe0:	e0bb      	b.n	800b15a <pbuf_alloc+0x1c6>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800afe2:	2300      	movs	r3, #0
 800afe4:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800afe6:	2300      	movs	r3, #0
 800afe8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800afea:	88bb      	ldrh	r3, [r7, #4]
 800afec:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800afee:	2005      	movs	r0, #5
 800aff0:	f7ff fbfe 	bl	800a7f0 <memp_malloc>
 800aff4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d107      	bne.n	800b00c <pbuf_alloc+0x78>
          PBUF_POOL_IS_EMPTY();
          /* free chain so far allocated */
          if (p) {
 800affc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800affe:	2b00      	cmp	r3, #0
 800b000:	d002      	beq.n	800b008 <pbuf_alloc+0x74>
            pbuf_free(p);
 800b002:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b004:	f000 faa8 	bl	800b558 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b008:	2300      	movs	r3, #0
 800b00a:	e0a7      	b.n	800b15c <pbuf_alloc+0x1c8>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b00c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b00e:	3303      	adds	r3, #3
 800b010:	b29b      	uxth	r3, r3
 800b012:	f023 0303 	bic.w	r3, r3, #3
 800b016:	b29b      	uxth	r3, r3
 800b018:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800b01c:	b29b      	uxth	r3, r3
 800b01e:	8b7a      	ldrh	r2, [r7, #26]
 800b020:	4293      	cmp	r3, r2
 800b022:	bf28      	it	cs
 800b024:	4613      	movcs	r3, r2
 800b026:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b028:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b02a:	3310      	adds	r3, #16
 800b02c:	693a      	ldr	r2, [r7, #16]
 800b02e:	4413      	add	r3, r2
 800b030:	3303      	adds	r3, #3
 800b032:	f023 0303 	bic.w	r3, r3, #3
 800b036:	4618      	mov	r0, r3
 800b038:	89f9      	ldrh	r1, [r7, #14]
 800b03a:	8b7a      	ldrh	r2, [r7, #26]
 800b03c:	2300      	movs	r3, #0
 800b03e:	9301      	str	r3, [sp, #4]
 800b040:	887b      	ldrh	r3, [r7, #2]
 800b042:	9300      	str	r3, [sp, #0]
 800b044:	460b      	mov	r3, r1
 800b046:	4601      	mov	r1, r0
 800b048:	6938      	ldr	r0, [r7, #16]
 800b04a:	f7ff ff79 	bl	800af40 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b04e:	693b      	ldr	r3, [r7, #16]
 800b050:	685b      	ldr	r3, [r3, #4]
 800b052:	f003 0303 	and.w	r3, r3, #3
 800b056:	2b00      	cmp	r3, #0
 800b058:	d006      	beq.n	800b068 <pbuf_alloc+0xd4>
 800b05a:	4b42      	ldr	r3, [pc, #264]	@ (800b164 <pbuf_alloc+0x1d0>)
 800b05c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b060:	4941      	ldr	r1, [pc, #260]	@ (800b168 <pbuf_alloc+0x1d4>)
 800b062:	4842      	ldr	r0, [pc, #264]	@ (800b16c <pbuf_alloc+0x1d8>)
 800b064:	f003 fe84 	bl	800ed70 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b068:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b06a:	3303      	adds	r3, #3
 800b06c:	f023 0303 	bic.w	r3, r3, #3
 800b070:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800b074:	d106      	bne.n	800b084 <pbuf_alloc+0xf0>
 800b076:	4b3b      	ldr	r3, [pc, #236]	@ (800b164 <pbuf_alloc+0x1d0>)
 800b078:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800b07c:	493c      	ldr	r1, [pc, #240]	@ (800b170 <pbuf_alloc+0x1dc>)
 800b07e:	483b      	ldr	r0, [pc, #236]	@ (800b16c <pbuf_alloc+0x1d8>)
 800b080:	f003 fe76 	bl	800ed70 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b086:	2b00      	cmp	r3, #0
 800b088:	d102      	bne.n	800b090 <pbuf_alloc+0xfc>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b08a:	693b      	ldr	r3, [r7, #16]
 800b08c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b08e:	e002      	b.n	800b096 <pbuf_alloc+0x102>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b090:	69fb      	ldr	r3, [r7, #28]
 800b092:	693a      	ldr	r2, [r7, #16]
 800b094:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b096:	693b      	ldr	r3, [r7, #16]
 800b098:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b09a:	8b7a      	ldrh	r2, [r7, #26]
 800b09c:	89fb      	ldrh	r3, [r7, #14]
 800b09e:	1ad3      	subs	r3, r2, r3
 800b0a0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800b0a6:	8b7b      	ldrh	r3, [r7, #26]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d1a0      	bne.n	800afee <pbuf_alloc+0x5a>
      break;
 800b0ac:	e055      	b.n	800b15a <pbuf_alloc+0x1c6>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b0ae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b0b0:	3303      	adds	r3, #3
 800b0b2:	b29b      	uxth	r3, r3
 800b0b4:	f023 0303 	bic.w	r3, r3, #3
 800b0b8:	b29a      	uxth	r2, r3
 800b0ba:	88bb      	ldrh	r3, [r7, #4]
 800b0bc:	3303      	adds	r3, #3
 800b0be:	b29b      	uxth	r3, r3
 800b0c0:	f023 0303 	bic.w	r3, r3, #3
 800b0c4:	b29b      	uxth	r3, r3
 800b0c6:	4413      	add	r3, r2
 800b0c8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b0ca:	8b3b      	ldrh	r3, [r7, #24]
 800b0cc:	3310      	adds	r3, #16
 800b0ce:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b0d0:	8b3a      	ldrh	r2, [r7, #24]
 800b0d2:	88bb      	ldrh	r3, [r7, #4]
 800b0d4:	3303      	adds	r3, #3
 800b0d6:	f023 0303 	bic.w	r3, r3, #3
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d306      	bcc.n	800b0ec <pbuf_alloc+0x158>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b0de:	8afa      	ldrh	r2, [r7, #22]
 800b0e0:	88bb      	ldrh	r3, [r7, #4]
 800b0e2:	3303      	adds	r3, #3
 800b0e4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b0e8:	429a      	cmp	r2, r3
 800b0ea:	d201      	bcs.n	800b0f0 <pbuf_alloc+0x15c>
        return NULL;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	e035      	b.n	800b15c <pbuf_alloc+0x1c8>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b0f0:	8afb      	ldrh	r3, [r7, #22]
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f7ff f9ec 	bl	800a4d0 <mem_malloc>
 800b0f8:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800b0fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d101      	bne.n	800b104 <pbuf_alloc+0x170>
        return NULL;
 800b100:	2300      	movs	r3, #0
 800b102:	e02b      	b.n	800b15c <pbuf_alloc+0x1c8>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b104:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b106:	3310      	adds	r3, #16
 800b108:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b10a:	4413      	add	r3, r2
 800b10c:	3303      	adds	r3, #3
 800b10e:	f023 0303 	bic.w	r3, r3, #3
 800b112:	4618      	mov	r0, r3
 800b114:	88b9      	ldrh	r1, [r7, #4]
 800b116:	88ba      	ldrh	r2, [r7, #4]
 800b118:	2300      	movs	r3, #0
 800b11a:	9301      	str	r3, [sp, #4]
 800b11c:	887b      	ldrh	r3, [r7, #2]
 800b11e:	9300      	str	r3, [sp, #0]
 800b120:	460b      	mov	r3, r1
 800b122:	4601      	mov	r1, r0
 800b124:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b126:	f7ff ff0b 	bl	800af40 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b12a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b12c:	685b      	ldr	r3, [r3, #4]
 800b12e:	f003 0303 	and.w	r3, r3, #3
 800b132:	2b00      	cmp	r3, #0
 800b134:	d010      	beq.n	800b158 <pbuf_alloc+0x1c4>
 800b136:	4b0b      	ldr	r3, [pc, #44]	@ (800b164 <pbuf_alloc+0x1d0>)
 800b138:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800b13c:	490d      	ldr	r1, [pc, #52]	@ (800b174 <pbuf_alloc+0x1e0>)
 800b13e:	480b      	ldr	r0, [pc, #44]	@ (800b16c <pbuf_alloc+0x1d8>)
 800b140:	f003 fe16 	bl	800ed70 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b144:	e008      	b.n	800b158 <pbuf_alloc+0x1c4>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b146:	4b07      	ldr	r3, [pc, #28]	@ (800b164 <pbuf_alloc+0x1d0>)
 800b148:	f240 1227 	movw	r2, #295	@ 0x127
 800b14c:	490a      	ldr	r1, [pc, #40]	@ (800b178 <pbuf_alloc+0x1e4>)
 800b14e:	4807      	ldr	r0, [pc, #28]	@ (800b16c <pbuf_alloc+0x1d8>)
 800b150:	f003 fe0e 	bl	800ed70 <iprintf>
      return NULL;
 800b154:	2300      	movs	r3, #0
 800b156:	e001      	b.n	800b15c <pbuf_alloc+0x1c8>
      break;
 800b158:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b15a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	3728      	adds	r7, #40	@ 0x28
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}
 800b164:	08010914 	.word	0x08010914
 800b168:	08010944 	.word	0x08010944
 800b16c:	08010974 	.word	0x08010974
 800b170:	0801099c 	.word	0x0801099c
 800b174:	080109d0 	.word	0x080109d0
 800b178:	080109fc 	.word	0x080109fc

0800b17c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b086      	sub	sp, #24
 800b180:	af02      	add	r7, sp, #8
 800b182:	6078      	str	r0, [r7, #4]
 800b184:	460b      	mov	r3, r1
 800b186:	807b      	strh	r3, [r7, #2]
 800b188:	4613      	mov	r3, r2
 800b18a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b18c:	883b      	ldrh	r3, [r7, #0]
 800b18e:	2b41      	cmp	r3, #65	@ 0x41
 800b190:	d009      	beq.n	800b1a6 <pbuf_alloc_reference+0x2a>
 800b192:	883b      	ldrh	r3, [r7, #0]
 800b194:	2b01      	cmp	r3, #1
 800b196:	d006      	beq.n	800b1a6 <pbuf_alloc_reference+0x2a>
 800b198:	4b0f      	ldr	r3, [pc, #60]	@ (800b1d8 <pbuf_alloc_reference+0x5c>)
 800b19a:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800b19e:	490f      	ldr	r1, [pc, #60]	@ (800b1dc <pbuf_alloc_reference+0x60>)
 800b1a0:	480f      	ldr	r0, [pc, #60]	@ (800b1e0 <pbuf_alloc_reference+0x64>)
 800b1a2:	f003 fde5 	bl	800ed70 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b1a6:	2004      	movs	r0, #4
 800b1a8:	f7ff fb22 	bl	800a7f0 <memp_malloc>
 800b1ac:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d101      	bne.n	800b1b8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	e00b      	b.n	800b1d0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b1b8:	8879      	ldrh	r1, [r7, #2]
 800b1ba:	887a      	ldrh	r2, [r7, #2]
 800b1bc:	2300      	movs	r3, #0
 800b1be:	9301      	str	r3, [sp, #4]
 800b1c0:	883b      	ldrh	r3, [r7, #0]
 800b1c2:	9300      	str	r3, [sp, #0]
 800b1c4:	460b      	mov	r3, r1
 800b1c6:	6879      	ldr	r1, [r7, #4]
 800b1c8:	68f8      	ldr	r0, [r7, #12]
 800b1ca:	f7ff feb9 	bl	800af40 <pbuf_init_alloced_pbuf>
  return p;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3710      	adds	r7, #16
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}
 800b1d8:	08010914 	.word	0x08010914
 800b1dc:	08010a18 	.word	0x08010a18
 800b1e0:	08010974 	.word	0x08010974

0800b1e4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b088      	sub	sp, #32
 800b1e8:	af02      	add	r7, sp, #8
 800b1ea:	607b      	str	r3, [r7, #4]
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	73fb      	strb	r3, [r7, #15]
 800b1f0:	460b      	mov	r3, r1
 800b1f2:	81bb      	strh	r3, [r7, #12]
 800b1f4:	4613      	mov	r3, r2
 800b1f6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b1f8:	7bfb      	ldrb	r3, [r7, #15]
 800b1fa:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b1fc:	8a7b      	ldrh	r3, [r7, #18]
 800b1fe:	3303      	adds	r3, #3
 800b200:	f023 0203 	bic.w	r2, r3, #3
 800b204:	89bb      	ldrh	r3, [r7, #12]
 800b206:	441a      	add	r2, r3
 800b208:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b20a:	429a      	cmp	r2, r3
 800b20c:	d901      	bls.n	800b212 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b20e:	2300      	movs	r3, #0
 800b210:	e018      	b.n	800b244 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b212:	6a3b      	ldr	r3, [r7, #32]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d007      	beq.n	800b228 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b218:	8a7b      	ldrh	r3, [r7, #18]
 800b21a:	3303      	adds	r3, #3
 800b21c:	f023 0303 	bic.w	r3, r3, #3
 800b220:	6a3a      	ldr	r2, [r7, #32]
 800b222:	4413      	add	r3, r2
 800b224:	617b      	str	r3, [r7, #20]
 800b226:	e001      	b.n	800b22c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b228:	2300      	movs	r3, #0
 800b22a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	89b9      	ldrh	r1, [r7, #12]
 800b230:	89ba      	ldrh	r2, [r7, #12]
 800b232:	2302      	movs	r3, #2
 800b234:	9301      	str	r3, [sp, #4]
 800b236:	897b      	ldrh	r3, [r7, #10]
 800b238:	9300      	str	r3, [sp, #0]
 800b23a:	460b      	mov	r3, r1
 800b23c:	6979      	ldr	r1, [r7, #20]
 800b23e:	f7ff fe7f 	bl	800af40 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b242:	687b      	ldr	r3, [r7, #4]
}
 800b244:	4618      	mov	r0, r3
 800b246:	3718      	adds	r7, #24
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}

0800b24c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b084      	sub	sp, #16
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	460b      	mov	r3, r1
 800b256:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d106      	bne.n	800b26c <pbuf_realloc+0x20>
 800b25e:	4b3a      	ldr	r3, [pc, #232]	@ (800b348 <pbuf_realloc+0xfc>)
 800b260:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800b264:	4939      	ldr	r1, [pc, #228]	@ (800b34c <pbuf_realloc+0x100>)
 800b266:	483a      	ldr	r0, [pc, #232]	@ (800b350 <pbuf_realloc+0x104>)
 800b268:	f003 fd82 	bl	800ed70 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	891b      	ldrh	r3, [r3, #8]
 800b270:	887a      	ldrh	r2, [r7, #2]
 800b272:	429a      	cmp	r2, r3
 800b274:	d263      	bcs.n	800b33e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	891a      	ldrh	r2, [r3, #8]
 800b27a:	887b      	ldrh	r3, [r7, #2]
 800b27c:	1ad3      	subs	r3, r2, r3
 800b27e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b280:	887b      	ldrh	r3, [r7, #2]
 800b282:	817b      	strh	r3, [r7, #10]
  q = p;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b288:	e018      	b.n	800b2bc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	895b      	ldrh	r3, [r3, #10]
 800b28e:	897a      	ldrh	r2, [r7, #10]
 800b290:	1ad3      	subs	r3, r2, r3
 800b292:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	891a      	ldrh	r2, [r3, #8]
 800b298:	893b      	ldrh	r3, [r7, #8]
 800b29a:	1ad3      	subs	r3, r2, r3
 800b29c:	b29a      	uxth	r2, r3
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d106      	bne.n	800b2bc <pbuf_realloc+0x70>
 800b2ae:	4b26      	ldr	r3, [pc, #152]	@ (800b348 <pbuf_realloc+0xfc>)
 800b2b0:	f240 12af 	movw	r2, #431	@ 0x1af
 800b2b4:	4927      	ldr	r1, [pc, #156]	@ (800b354 <pbuf_realloc+0x108>)
 800b2b6:	4826      	ldr	r0, [pc, #152]	@ (800b350 <pbuf_realloc+0x104>)
 800b2b8:	f003 fd5a 	bl	800ed70 <iprintf>
  while (rem_len > q->len) {
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	895b      	ldrh	r3, [r3, #10]
 800b2c0:	897a      	ldrh	r2, [r7, #10]
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	d8e1      	bhi.n	800b28a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	7b1b      	ldrb	r3, [r3, #12]
 800b2ca:	f003 030f 	and.w	r3, r3, #15
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d121      	bne.n	800b316 <pbuf_realloc+0xca>
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	895b      	ldrh	r3, [r3, #10]
 800b2d6:	897a      	ldrh	r2, [r7, #10]
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d01c      	beq.n	800b316 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	7b5b      	ldrb	r3, [r3, #13]
 800b2e0:	f003 0302 	and.w	r3, r3, #2
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d116      	bne.n	800b316 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	685a      	ldr	r2, [r3, #4]
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	1ad3      	subs	r3, r2, r3
 800b2f0:	b29a      	uxth	r2, r3
 800b2f2:	897b      	ldrh	r3, [r7, #10]
 800b2f4:	4413      	add	r3, r2
 800b2f6:	b29b      	uxth	r3, r3
 800b2f8:	4619      	mov	r1, r3
 800b2fa:	68f8      	ldr	r0, [r7, #12]
 800b2fc:	f7fe ffec 	bl	800a2d8 <mem_trim>
 800b300:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d106      	bne.n	800b316 <pbuf_realloc+0xca>
 800b308:	4b0f      	ldr	r3, [pc, #60]	@ (800b348 <pbuf_realloc+0xfc>)
 800b30a:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800b30e:	4912      	ldr	r1, [pc, #72]	@ (800b358 <pbuf_realloc+0x10c>)
 800b310:	480f      	ldr	r0, [pc, #60]	@ (800b350 <pbuf_realloc+0x104>)
 800b312:	f003 fd2d 	bl	800ed70 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	897a      	ldrh	r2, [r7, #10]
 800b31a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	895a      	ldrh	r2, [r3, #10]
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d004      	beq.n	800b336 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	4618      	mov	r0, r3
 800b332:	f000 f911 	bl	800b558 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	2200      	movs	r2, #0
 800b33a:	601a      	str	r2, [r3, #0]
 800b33c:	e000      	b.n	800b340 <pbuf_realloc+0xf4>
    return;
 800b33e:	bf00      	nop

}
 800b340:	3710      	adds	r7, #16
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}
 800b346:	bf00      	nop
 800b348:	08010914 	.word	0x08010914
 800b34c:	08010a2c 	.word	0x08010a2c
 800b350:	08010974 	.word	0x08010974
 800b354:	08010a44 	.word	0x08010a44
 800b358:	08010a5c 	.word	0x08010a5c

0800b35c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b086      	sub	sp, #24
 800b360:	af00      	add	r7, sp, #0
 800b362:	60f8      	str	r0, [r7, #12]
 800b364:	60b9      	str	r1, [r7, #8]
 800b366:	4613      	mov	r3, r2
 800b368:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d106      	bne.n	800b37e <pbuf_add_header_impl+0x22>
 800b370:	4b2b      	ldr	r3, [pc, #172]	@ (800b420 <pbuf_add_header_impl+0xc4>)
 800b372:	f240 12df 	movw	r2, #479	@ 0x1df
 800b376:	492b      	ldr	r1, [pc, #172]	@ (800b424 <pbuf_add_header_impl+0xc8>)
 800b378:	482b      	ldr	r0, [pc, #172]	@ (800b428 <pbuf_add_header_impl+0xcc>)
 800b37a:	f003 fcf9 	bl	800ed70 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d003      	beq.n	800b38c <pbuf_add_header_impl+0x30>
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b38a:	d301      	bcc.n	800b390 <pbuf_add_header_impl+0x34>
    return 1;
 800b38c:	2301      	movs	r3, #1
 800b38e:	e043      	b.n	800b418 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d101      	bne.n	800b39a <pbuf_add_header_impl+0x3e>
    return 0;
 800b396:	2300      	movs	r3, #0
 800b398:	e03e      	b.n	800b418 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	891a      	ldrh	r2, [r3, #8]
 800b3a2:	8a7b      	ldrh	r3, [r7, #18]
 800b3a4:	4413      	add	r3, r2
 800b3a6:	b29b      	uxth	r3, r3
 800b3a8:	8a7a      	ldrh	r2, [r7, #18]
 800b3aa:	429a      	cmp	r2, r3
 800b3ac:	d901      	bls.n	800b3b2 <pbuf_add_header_impl+0x56>
    return 1;
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	e032      	b.n	800b418 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	7b1b      	ldrb	r3, [r3, #12]
 800b3b6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b3b8:	8a3b      	ldrh	r3, [r7, #16]
 800b3ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d00c      	beq.n	800b3dc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	685a      	ldr	r2, [r3, #4]
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	425b      	negs	r3, r3
 800b3ca:	4413      	add	r3, r2
 800b3cc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	3310      	adds	r3, #16
 800b3d2:	697a      	ldr	r2, [r7, #20]
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	d20d      	bcs.n	800b3f4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b3d8:	2301      	movs	r3, #1
 800b3da:	e01d      	b.n	800b418 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b3dc:	79fb      	ldrb	r3, [r7, #7]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d006      	beq.n	800b3f0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	685a      	ldr	r2, [r3, #4]
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	425b      	negs	r3, r3
 800b3ea:	4413      	add	r3, r2
 800b3ec:	617b      	str	r3, [r7, #20]
 800b3ee:	e001      	b.n	800b3f4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	e011      	b.n	800b418 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	697a      	ldr	r2, [r7, #20]
 800b3f8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	895a      	ldrh	r2, [r3, #10]
 800b3fe:	8a7b      	ldrh	r3, [r7, #18]
 800b400:	4413      	add	r3, r2
 800b402:	b29a      	uxth	r2, r3
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	891a      	ldrh	r2, [r3, #8]
 800b40c:	8a7b      	ldrh	r3, [r7, #18]
 800b40e:	4413      	add	r3, r2
 800b410:	b29a      	uxth	r2, r3
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	811a      	strh	r2, [r3, #8]


  return 0;
 800b416:	2300      	movs	r3, #0
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3718      	adds	r7, #24
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}
 800b420:	08010914 	.word	0x08010914
 800b424:	08010a78 	.word	0x08010a78
 800b428:	08010974 	.word	0x08010974

0800b42c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b082      	sub	sp, #8
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
 800b434:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b436:	2200      	movs	r2, #0
 800b438:	6839      	ldr	r1, [r7, #0]
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f7ff ff8e 	bl	800b35c <pbuf_add_header_impl>
 800b440:	4603      	mov	r3, r0
}
 800b442:	4618      	mov	r0, r3
 800b444:	3708      	adds	r7, #8
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}
	...

0800b44c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b084      	sub	sp, #16
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d106      	bne.n	800b46a <pbuf_remove_header+0x1e>
 800b45c:	4b20      	ldr	r3, [pc, #128]	@ (800b4e0 <pbuf_remove_header+0x94>)
 800b45e:	f240 224b 	movw	r2, #587	@ 0x24b
 800b462:	4920      	ldr	r1, [pc, #128]	@ (800b4e4 <pbuf_remove_header+0x98>)
 800b464:	4820      	ldr	r0, [pc, #128]	@ (800b4e8 <pbuf_remove_header+0x9c>)
 800b466:	f003 fc83 	bl	800ed70 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d003      	beq.n	800b478 <pbuf_remove_header+0x2c>
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b476:	d301      	bcc.n	800b47c <pbuf_remove_header+0x30>
    return 1;
 800b478:	2301      	movs	r3, #1
 800b47a:	e02c      	b.n	800b4d6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d101      	bne.n	800b486 <pbuf_remove_header+0x3a>
    return 0;
 800b482:	2300      	movs	r3, #0
 800b484:	e027      	b.n	800b4d6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	895b      	ldrh	r3, [r3, #10]
 800b48e:	89fa      	ldrh	r2, [r7, #14]
 800b490:	429a      	cmp	r2, r3
 800b492:	d908      	bls.n	800b4a6 <pbuf_remove_header+0x5a>
 800b494:	4b12      	ldr	r3, [pc, #72]	@ (800b4e0 <pbuf_remove_header+0x94>)
 800b496:	f240 2255 	movw	r2, #597	@ 0x255
 800b49a:	4914      	ldr	r1, [pc, #80]	@ (800b4ec <pbuf_remove_header+0xa0>)
 800b49c:	4812      	ldr	r0, [pc, #72]	@ (800b4e8 <pbuf_remove_header+0x9c>)
 800b49e:	f003 fc67 	bl	800ed70 <iprintf>
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	e017      	b.n	800b4d6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	685b      	ldr	r3, [r3, #4]
 800b4aa:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	685a      	ldr	r2, [r3, #4]
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	441a      	add	r2, r3
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	895a      	ldrh	r2, [r3, #10]
 800b4bc:	89fb      	ldrh	r3, [r7, #14]
 800b4be:	1ad3      	subs	r3, r2, r3
 800b4c0:	b29a      	uxth	r2, r3
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	891a      	ldrh	r2, [r3, #8]
 800b4ca:	89fb      	ldrh	r3, [r7, #14]
 800b4cc:	1ad3      	subs	r3, r2, r3
 800b4ce:	b29a      	uxth	r2, r3
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b4d4:	2300      	movs	r3, #0
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3710      	adds	r7, #16
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}
 800b4de:	bf00      	nop
 800b4e0:	08010914 	.word	0x08010914
 800b4e4:	08010a78 	.word	0x08010a78
 800b4e8:	08010974 	.word	0x08010974
 800b4ec:	08010a84 	.word	0x08010a84

0800b4f0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b082      	sub	sp, #8
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
 800b4f8:	460b      	mov	r3, r1
 800b4fa:	807b      	strh	r3, [r7, #2]
 800b4fc:	4613      	mov	r3, r2
 800b4fe:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800b500:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b504:	2b00      	cmp	r3, #0
 800b506:	da08      	bge.n	800b51a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b508:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b50c:	425b      	negs	r3, r3
 800b50e:	4619      	mov	r1, r3
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f7ff ff9b 	bl	800b44c <pbuf_remove_header>
 800b516:	4603      	mov	r3, r0
 800b518:	e007      	b.n	800b52a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b51a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b51e:	787a      	ldrb	r2, [r7, #1]
 800b520:	4619      	mov	r1, r3
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f7ff ff1a 	bl	800b35c <pbuf_add_header_impl>
 800b528:	4603      	mov	r3, r0
  }
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3708      	adds	r7, #8
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}

0800b532 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b532:	b580      	push	{r7, lr}
 800b534:	b082      	sub	sp, #8
 800b536:	af00      	add	r7, sp, #0
 800b538:	6078      	str	r0, [r7, #4]
 800b53a:	460b      	mov	r3, r1
 800b53c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800b53e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b542:	2201      	movs	r2, #1
 800b544:	4619      	mov	r1, r3
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f7ff ffd2 	bl	800b4f0 <pbuf_header_impl>
 800b54c:	4603      	mov	r3, r0
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3708      	adds	r7, #8
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}
	...

0800b558 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b086      	sub	sp, #24
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d10b      	bne.n	800b57e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d106      	bne.n	800b57a <pbuf_free+0x22>
 800b56c:	4b38      	ldr	r3, [pc, #224]	@ (800b650 <pbuf_free+0xf8>)
 800b56e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800b572:	4938      	ldr	r1, [pc, #224]	@ (800b654 <pbuf_free+0xfc>)
 800b574:	4838      	ldr	r0, [pc, #224]	@ (800b658 <pbuf_free+0x100>)
 800b576:	f003 fbfb 	bl	800ed70 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800b57a:	2300      	movs	r3, #0
 800b57c:	e063      	b.n	800b646 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800b57e:	2300      	movs	r3, #0
 800b580:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800b582:	e05c      	b.n	800b63e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	7b9b      	ldrb	r3, [r3, #14]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d106      	bne.n	800b59a <pbuf_free+0x42>
 800b58c:	4b30      	ldr	r3, [pc, #192]	@ (800b650 <pbuf_free+0xf8>)
 800b58e:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800b592:	4932      	ldr	r1, [pc, #200]	@ (800b65c <pbuf_free+0x104>)
 800b594:	4830      	ldr	r0, [pc, #192]	@ (800b658 <pbuf_free+0x100>)
 800b596:	f003 fbeb 	bl	800ed70 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	7b9b      	ldrb	r3, [r3, #14]
 800b59e:	3b01      	subs	r3, #1
 800b5a0:	b2da      	uxtb	r2, r3
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	739a      	strb	r2, [r3, #14]
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	7b9b      	ldrb	r3, [r3, #14]
 800b5aa:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800b5ac:	7dbb      	ldrb	r3, [r7, #22]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d143      	bne.n	800b63a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	7b1b      	ldrb	r3, [r3, #12]
 800b5bc:	f003 030f 	and.w	r3, r3, #15
 800b5c0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	7b5b      	ldrb	r3, [r3, #13]
 800b5c6:	f003 0302 	and.w	r3, r3, #2
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d011      	beq.n	800b5f2 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	691b      	ldr	r3, [r3, #16]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d106      	bne.n	800b5e8 <pbuf_free+0x90>
 800b5da:	4b1d      	ldr	r3, [pc, #116]	@ (800b650 <pbuf_free+0xf8>)
 800b5dc:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800b5e0:	491f      	ldr	r1, [pc, #124]	@ (800b660 <pbuf_free+0x108>)
 800b5e2:	481d      	ldr	r0, [pc, #116]	@ (800b658 <pbuf_free+0x100>)
 800b5e4:	f003 fbc4 	bl	800ed70 <iprintf>
        pc->custom_free_function(p);
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	691b      	ldr	r3, [r3, #16]
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	4798      	blx	r3
 800b5f0:	e01d      	b.n	800b62e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800b5f2:	7bfb      	ldrb	r3, [r7, #15]
 800b5f4:	2b02      	cmp	r3, #2
 800b5f6:	d104      	bne.n	800b602 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800b5f8:	6879      	ldr	r1, [r7, #4]
 800b5fa:	2005      	movs	r0, #5
 800b5fc:	f7ff f968 	bl	800a8d0 <memp_free>
 800b600:	e015      	b.n	800b62e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800b602:	7bfb      	ldrb	r3, [r7, #15]
 800b604:	2b01      	cmp	r3, #1
 800b606:	d104      	bne.n	800b612 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800b608:	6879      	ldr	r1, [r7, #4]
 800b60a:	2004      	movs	r0, #4
 800b60c:	f7ff f960 	bl	800a8d0 <memp_free>
 800b610:	e00d      	b.n	800b62e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800b612:	7bfb      	ldrb	r3, [r7, #15]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d103      	bne.n	800b620 <pbuf_free+0xc8>
          mem_free(p);
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f7fe fdf3 	bl	800a204 <mem_free>
 800b61e:	e006      	b.n	800b62e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800b620:	4b0b      	ldr	r3, [pc, #44]	@ (800b650 <pbuf_free+0xf8>)
 800b622:	f240 320f 	movw	r2, #783	@ 0x30f
 800b626:	490f      	ldr	r1, [pc, #60]	@ (800b664 <pbuf_free+0x10c>)
 800b628:	480b      	ldr	r0, [pc, #44]	@ (800b658 <pbuf_free+0x100>)
 800b62a:	f003 fba1 	bl	800ed70 <iprintf>
        }
      }
      count++;
 800b62e:	7dfb      	ldrb	r3, [r7, #23]
 800b630:	3301      	adds	r3, #1
 800b632:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	607b      	str	r3, [r7, #4]
 800b638:	e001      	b.n	800b63e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800b63a:	2300      	movs	r3, #0
 800b63c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d19f      	bne.n	800b584 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800b644:	7dfb      	ldrb	r3, [r7, #23]
}
 800b646:	4618      	mov	r0, r3
 800b648:	3718      	adds	r7, #24
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}
 800b64e:	bf00      	nop
 800b650:	08010914 	.word	0x08010914
 800b654:	08010a78 	.word	0x08010a78
 800b658:	08010974 	.word	0x08010974
 800b65c:	08010aa4 	.word	0x08010aa4
 800b660:	08010abc 	.word	0x08010abc
 800b664:	08010ae0 	.word	0x08010ae0

0800b668 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800b668:	b480      	push	{r7}
 800b66a:	b085      	sub	sp, #20
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800b670:	2300      	movs	r3, #0
 800b672:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800b674:	e005      	b.n	800b682 <pbuf_clen+0x1a>
    ++len;
 800b676:	89fb      	ldrh	r3, [r7, #14]
 800b678:	3301      	adds	r3, #1
 800b67a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d1f6      	bne.n	800b676 <pbuf_clen+0xe>
  }
  return len;
 800b688:	89fb      	ldrh	r3, [r7, #14]
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3714      	adds	r7, #20
 800b68e:	46bd      	mov	sp, r7
 800b690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b694:	4770      	bx	lr
	...

0800b698 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b082      	sub	sp, #8
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d010      	beq.n	800b6c8 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	7b9b      	ldrb	r3, [r3, #14]
 800b6aa:	3301      	adds	r3, #1
 800b6ac:	b2da      	uxtb	r2, r3
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	7b9b      	ldrb	r3, [r3, #14]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d106      	bne.n	800b6c8 <pbuf_ref+0x30>
 800b6ba:	4b05      	ldr	r3, [pc, #20]	@ (800b6d0 <pbuf_ref+0x38>)
 800b6bc:	f240 3242 	movw	r2, #834	@ 0x342
 800b6c0:	4904      	ldr	r1, [pc, #16]	@ (800b6d4 <pbuf_ref+0x3c>)
 800b6c2:	4805      	ldr	r0, [pc, #20]	@ (800b6d8 <pbuf_ref+0x40>)
 800b6c4:	f003 fb54 	bl	800ed70 <iprintf>
  }
}
 800b6c8:	bf00      	nop
 800b6ca:	3708      	adds	r7, #8
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}
 800b6d0:	08010914 	.word	0x08010914
 800b6d4:	08010af4 	.word	0x08010af4
 800b6d8:	08010974 	.word	0x08010974

0800b6dc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b084      	sub	sp, #16
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
 800b6e4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d002      	beq.n	800b6f2 <pbuf_cat+0x16>
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d107      	bne.n	800b702 <pbuf_cat+0x26>
 800b6f2:	4b20      	ldr	r3, [pc, #128]	@ (800b774 <pbuf_cat+0x98>)
 800b6f4:	f240 3259 	movw	r2, #857	@ 0x359
 800b6f8:	491f      	ldr	r1, [pc, #124]	@ (800b778 <pbuf_cat+0x9c>)
 800b6fa:	4820      	ldr	r0, [pc, #128]	@ (800b77c <pbuf_cat+0xa0>)
 800b6fc:	f003 fb38 	bl	800ed70 <iprintf>
 800b700:	e034      	b.n	800b76c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	60fb      	str	r3, [r7, #12]
 800b706:	e00a      	b.n	800b71e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	891a      	ldrh	r2, [r3, #8]
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	891b      	ldrh	r3, [r3, #8]
 800b710:	4413      	add	r3, r2
 800b712:	b29a      	uxth	r2, r3
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	60fb      	str	r3, [r7, #12]
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d1f0      	bne.n	800b708 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	891a      	ldrh	r2, [r3, #8]
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	895b      	ldrh	r3, [r3, #10]
 800b72e:	429a      	cmp	r2, r3
 800b730:	d006      	beq.n	800b740 <pbuf_cat+0x64>
 800b732:	4b10      	ldr	r3, [pc, #64]	@ (800b774 <pbuf_cat+0x98>)
 800b734:	f240 3262 	movw	r2, #866	@ 0x362
 800b738:	4911      	ldr	r1, [pc, #68]	@ (800b780 <pbuf_cat+0xa4>)
 800b73a:	4810      	ldr	r0, [pc, #64]	@ (800b77c <pbuf_cat+0xa0>)
 800b73c:	f003 fb18 	bl	800ed70 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d006      	beq.n	800b756 <pbuf_cat+0x7a>
 800b748:	4b0a      	ldr	r3, [pc, #40]	@ (800b774 <pbuf_cat+0x98>)
 800b74a:	f240 3263 	movw	r2, #867	@ 0x363
 800b74e:	490d      	ldr	r1, [pc, #52]	@ (800b784 <pbuf_cat+0xa8>)
 800b750:	480a      	ldr	r0, [pc, #40]	@ (800b77c <pbuf_cat+0xa0>)
 800b752:	f003 fb0d 	bl	800ed70 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	891a      	ldrh	r2, [r3, #8]
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	891b      	ldrh	r3, [r3, #8]
 800b75e:	4413      	add	r3, r2
 800b760:	b29a      	uxth	r2, r3
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	683a      	ldr	r2, [r7, #0]
 800b76a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800b76c:	3710      	adds	r7, #16
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}
 800b772:	bf00      	nop
 800b774:	08010914 	.word	0x08010914
 800b778:	08010b08 	.word	0x08010b08
 800b77c:	08010974 	.word	0x08010974
 800b780:	08010b40 	.word	0x08010b40
 800b784:	08010b70 	.word	0x08010b70

0800b788 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b082      	sub	sp, #8
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
 800b790:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800b792:	6839      	ldr	r1, [r7, #0]
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f7ff ffa1 	bl	800b6dc <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800b79a:	6838      	ldr	r0, [r7, #0]
 800b79c:	f7ff ff7c 	bl	800b698 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800b7a0:	bf00      	nop
 800b7a2:	3708      	adds	r7, #8
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}

0800b7a8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b086      	sub	sp, #24
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	617b      	str	r3, [r7, #20]
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d008      	beq.n	800b7d2 <pbuf_copy+0x2a>
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d005      	beq.n	800b7d2 <pbuf_copy+0x2a>
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	891a      	ldrh	r2, [r3, #8]
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	891b      	ldrh	r3, [r3, #8]
 800b7ce:	429a      	cmp	r2, r3
 800b7d0:	d209      	bcs.n	800b7e6 <pbuf_copy+0x3e>
 800b7d2:	4b57      	ldr	r3, [pc, #348]	@ (800b930 <pbuf_copy+0x188>)
 800b7d4:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800b7d8:	4956      	ldr	r1, [pc, #344]	@ (800b934 <pbuf_copy+0x18c>)
 800b7da:	4857      	ldr	r0, [pc, #348]	@ (800b938 <pbuf_copy+0x190>)
 800b7dc:	f003 fac8 	bl	800ed70 <iprintf>
 800b7e0:	f06f 030f 	mvn.w	r3, #15
 800b7e4:	e09f      	b.n	800b926 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	895b      	ldrh	r3, [r3, #10]
 800b7ea:	461a      	mov	r2, r3
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	1ad2      	subs	r2, r2, r3
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	895b      	ldrh	r3, [r3, #10]
 800b7f4:	4619      	mov	r1, r3
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	1acb      	subs	r3, r1, r3
 800b7fa:	429a      	cmp	r2, r3
 800b7fc:	d306      	bcc.n	800b80c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	895b      	ldrh	r3, [r3, #10]
 800b802:	461a      	mov	r2, r3
 800b804:	693b      	ldr	r3, [r7, #16]
 800b806:	1ad3      	subs	r3, r2, r3
 800b808:	60fb      	str	r3, [r7, #12]
 800b80a:	e005      	b.n	800b818 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	895b      	ldrh	r3, [r3, #10]
 800b810:	461a      	mov	r2, r3
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	1ad3      	subs	r3, r2, r3
 800b816:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	685a      	ldr	r2, [r3, #4]
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	18d0      	adds	r0, r2, r3
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	685a      	ldr	r2, [r3, #4]
 800b824:	693b      	ldr	r3, [r7, #16]
 800b826:	4413      	add	r3, r2
 800b828:	68fa      	ldr	r2, [r7, #12]
 800b82a:	4619      	mov	r1, r3
 800b82c:	f003 fb93 	bl	800ef56 <memcpy>
    offset_to += len;
 800b830:	697a      	ldr	r2, [r7, #20]
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	4413      	add	r3, r2
 800b836:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800b838:	693a      	ldr	r2, [r7, #16]
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	4413      	add	r3, r2
 800b83e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	895b      	ldrh	r3, [r3, #10]
 800b844:	461a      	mov	r2, r3
 800b846:	697b      	ldr	r3, [r7, #20]
 800b848:	4293      	cmp	r3, r2
 800b84a:	d906      	bls.n	800b85a <pbuf_copy+0xb2>
 800b84c:	4b38      	ldr	r3, [pc, #224]	@ (800b930 <pbuf_copy+0x188>)
 800b84e:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800b852:	493a      	ldr	r1, [pc, #232]	@ (800b93c <pbuf_copy+0x194>)
 800b854:	4838      	ldr	r0, [pc, #224]	@ (800b938 <pbuf_copy+0x190>)
 800b856:	f003 fa8b 	bl	800ed70 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	895b      	ldrh	r3, [r3, #10]
 800b85e:	461a      	mov	r2, r3
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	4293      	cmp	r3, r2
 800b864:	d906      	bls.n	800b874 <pbuf_copy+0xcc>
 800b866:	4b32      	ldr	r3, [pc, #200]	@ (800b930 <pbuf_copy+0x188>)
 800b868:	f240 32da 	movw	r2, #986	@ 0x3da
 800b86c:	4934      	ldr	r1, [pc, #208]	@ (800b940 <pbuf_copy+0x198>)
 800b86e:	4832      	ldr	r0, [pc, #200]	@ (800b938 <pbuf_copy+0x190>)
 800b870:	f003 fa7e 	bl	800ed70 <iprintf>
    if (offset_from >= p_from->len) {
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	895b      	ldrh	r3, [r3, #10]
 800b878:	461a      	mov	r2, r3
 800b87a:	693b      	ldr	r3, [r7, #16]
 800b87c:	4293      	cmp	r3, r2
 800b87e:	d304      	bcc.n	800b88a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800b880:	2300      	movs	r3, #0
 800b882:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	895b      	ldrh	r3, [r3, #10]
 800b88e:	461a      	mov	r2, r3
 800b890:	697b      	ldr	r3, [r7, #20]
 800b892:	4293      	cmp	r3, r2
 800b894:	d114      	bne.n	800b8c0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800b896:	2300      	movs	r3, #0
 800b898:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d10c      	bne.n	800b8c0 <pbuf_copy+0x118>
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d009      	beq.n	800b8c0 <pbuf_copy+0x118>
 800b8ac:	4b20      	ldr	r3, [pc, #128]	@ (800b930 <pbuf_copy+0x188>)
 800b8ae:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800b8b2:	4924      	ldr	r1, [pc, #144]	@ (800b944 <pbuf_copy+0x19c>)
 800b8b4:	4820      	ldr	r0, [pc, #128]	@ (800b938 <pbuf_copy+0x190>)
 800b8b6:	f003 fa5b 	bl	800ed70 <iprintf>
 800b8ba:	f06f 030f 	mvn.w	r3, #15
 800b8be:	e032      	b.n	800b926 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d013      	beq.n	800b8ee <pbuf_copy+0x146>
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	895a      	ldrh	r2, [r3, #10]
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	891b      	ldrh	r3, [r3, #8]
 800b8ce:	429a      	cmp	r2, r3
 800b8d0:	d10d      	bne.n	800b8ee <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d009      	beq.n	800b8ee <pbuf_copy+0x146>
 800b8da:	4b15      	ldr	r3, [pc, #84]	@ (800b930 <pbuf_copy+0x188>)
 800b8dc:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800b8e0:	4919      	ldr	r1, [pc, #100]	@ (800b948 <pbuf_copy+0x1a0>)
 800b8e2:	4815      	ldr	r0, [pc, #84]	@ (800b938 <pbuf_copy+0x190>)
 800b8e4:	f003 fa44 	bl	800ed70 <iprintf>
 800b8e8:	f06f 0305 	mvn.w	r3, #5
 800b8ec:	e01b      	b.n	800b926 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d013      	beq.n	800b91c <pbuf_copy+0x174>
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	895a      	ldrh	r2, [r3, #10]
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	891b      	ldrh	r3, [r3, #8]
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	d10d      	bne.n	800b91c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d009      	beq.n	800b91c <pbuf_copy+0x174>
 800b908:	4b09      	ldr	r3, [pc, #36]	@ (800b930 <pbuf_copy+0x188>)
 800b90a:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800b90e:	490e      	ldr	r1, [pc, #56]	@ (800b948 <pbuf_copy+0x1a0>)
 800b910:	4809      	ldr	r0, [pc, #36]	@ (800b938 <pbuf_copy+0x190>)
 800b912:	f003 fa2d 	bl	800ed70 <iprintf>
 800b916:	f06f 0305 	mvn.w	r3, #5
 800b91a:	e004      	b.n	800b926 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	f47f af61 	bne.w	800b7e6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800b924:	2300      	movs	r3, #0
}
 800b926:	4618      	mov	r0, r3
 800b928:	3718      	adds	r7, #24
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}
 800b92e:	bf00      	nop
 800b930:	08010914 	.word	0x08010914
 800b934:	08010bbc 	.word	0x08010bbc
 800b938:	08010974 	.word	0x08010974
 800b93c:	08010bec 	.word	0x08010bec
 800b940:	08010c04 	.word	0x08010c04
 800b944:	08010c20 	.word	0x08010c20
 800b948:	08010c30 	.word	0x08010c30

0800b94c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b084      	sub	sp, #16
 800b950:	af00      	add	r7, sp, #0
 800b952:	4603      	mov	r3, r0
 800b954:	603a      	str	r2, [r7, #0]
 800b956:	71fb      	strb	r3, [r7, #7]
 800b958:	460b      	mov	r3, r1
 800b95a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	8919      	ldrh	r1, [r3, #8]
 800b960:	88ba      	ldrh	r2, [r7, #4]
 800b962:	79fb      	ldrb	r3, [r7, #7]
 800b964:	4618      	mov	r0, r3
 800b966:	f7ff fb15 	bl	800af94 <pbuf_alloc>
 800b96a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d101      	bne.n	800b976 <pbuf_clone+0x2a>
    return NULL;
 800b972:	2300      	movs	r3, #0
 800b974:	e011      	b.n	800b99a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800b976:	6839      	ldr	r1, [r7, #0]
 800b978:	68f8      	ldr	r0, [r7, #12]
 800b97a:	f7ff ff15 	bl	800b7a8 <pbuf_copy>
 800b97e:	4603      	mov	r3, r0
 800b980:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800b982:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d006      	beq.n	800b998 <pbuf_clone+0x4c>
 800b98a:	4b06      	ldr	r3, [pc, #24]	@ (800b9a4 <pbuf_clone+0x58>)
 800b98c:	f240 5224 	movw	r2, #1316	@ 0x524
 800b990:	4905      	ldr	r1, [pc, #20]	@ (800b9a8 <pbuf_clone+0x5c>)
 800b992:	4806      	ldr	r0, [pc, #24]	@ (800b9ac <pbuf_clone+0x60>)
 800b994:	f003 f9ec 	bl	800ed70 <iprintf>
  return q;
 800b998:	68fb      	ldr	r3, [r7, #12]
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	3710      	adds	r7, #16
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}
 800b9a2:	bf00      	nop
 800b9a4:	08010914 	.word	0x08010914
 800b9a8:	08010d88 	.word	0x08010d88
 800b9ac:	08010974 	.word	0x08010974

0800b9b0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b086      	sub	sp, #24
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	60f8      	str	r0, [r7, #12]
 800b9b8:	60b9      	str	r1, [r7, #8]
 800b9ba:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800b9bc:	2003      	movs	r0, #3
 800b9be:	f7fe ff17 	bl	800a7f0 <memp_malloc>
 800b9c2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d109      	bne.n	800b9de <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d151      	bne.n	800ba74 <sys_timeout_abs+0xc4>
 800b9d0:	4b2a      	ldr	r3, [pc, #168]	@ (800ba7c <sys_timeout_abs+0xcc>)
 800b9d2:	22be      	movs	r2, #190	@ 0xbe
 800b9d4:	492a      	ldr	r1, [pc, #168]	@ (800ba80 <sys_timeout_abs+0xd0>)
 800b9d6:	482b      	ldr	r0, [pc, #172]	@ (800ba84 <sys_timeout_abs+0xd4>)
 800b9d8:	f003 f9ca 	bl	800ed70 <iprintf>
    return;
 800b9dc:	e04a      	b.n	800ba74 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800b9e4:	693b      	ldr	r3, [r7, #16]
 800b9e6:	68ba      	ldr	r2, [r7, #8]
 800b9e8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	687a      	ldr	r2, [r7, #4]
 800b9ee:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	68fa      	ldr	r2, [r7, #12]
 800b9f4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800b9f6:	4b24      	ldr	r3, [pc, #144]	@ (800ba88 <sys_timeout_abs+0xd8>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d103      	bne.n	800ba06 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800b9fe:	4a22      	ldr	r2, [pc, #136]	@ (800ba88 <sys_timeout_abs+0xd8>)
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	6013      	str	r3, [r2, #0]
    return;
 800ba04:	e037      	b.n	800ba76 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	685a      	ldr	r2, [r3, #4]
 800ba0a:	4b1f      	ldr	r3, [pc, #124]	@ (800ba88 <sys_timeout_abs+0xd8>)
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	685b      	ldr	r3, [r3, #4]
 800ba10:	1ad3      	subs	r3, r2, r3
 800ba12:	0fdb      	lsrs	r3, r3, #31
 800ba14:	f003 0301 	and.w	r3, r3, #1
 800ba18:	b2db      	uxtb	r3, r3
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d007      	beq.n	800ba2e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800ba1e:	4b1a      	ldr	r3, [pc, #104]	@ (800ba88 <sys_timeout_abs+0xd8>)
 800ba20:	681a      	ldr	r2, [r3, #0]
 800ba22:	693b      	ldr	r3, [r7, #16]
 800ba24:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800ba26:	4a18      	ldr	r2, [pc, #96]	@ (800ba88 <sys_timeout_abs+0xd8>)
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	6013      	str	r3, [r2, #0]
 800ba2c:	e023      	b.n	800ba76 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800ba2e:	4b16      	ldr	r3, [pc, #88]	@ (800ba88 <sys_timeout_abs+0xd8>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	617b      	str	r3, [r7, #20]
 800ba34:	e01a      	b.n	800ba6c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800ba36:	697b      	ldr	r3, [r7, #20]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d00b      	beq.n	800ba56 <sys_timeout_abs+0xa6>
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	685a      	ldr	r2, [r3, #4]
 800ba42:	697b      	ldr	r3, [r7, #20]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	685b      	ldr	r3, [r3, #4]
 800ba48:	1ad3      	subs	r3, r2, r3
 800ba4a:	0fdb      	lsrs	r3, r3, #31
 800ba4c:	f003 0301 	and.w	r3, r3, #1
 800ba50:	b2db      	uxtb	r3, r3
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d007      	beq.n	800ba66 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	681a      	ldr	r2, [r3, #0]
 800ba5a:	693b      	ldr	r3, [r7, #16]
 800ba5c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800ba5e:	697b      	ldr	r3, [r7, #20]
 800ba60:	693a      	ldr	r2, [r7, #16]
 800ba62:	601a      	str	r2, [r3, #0]
        break;
 800ba64:	e007      	b.n	800ba76 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800ba66:	697b      	ldr	r3, [r7, #20]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	617b      	str	r3, [r7, #20]
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d1e1      	bne.n	800ba36 <sys_timeout_abs+0x86>
 800ba72:	e000      	b.n	800ba76 <sys_timeout_abs+0xc6>
    return;
 800ba74:	bf00      	nop
      }
    }
  }
}
 800ba76:	3718      	adds	r7, #24
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}
 800ba7c:	08010d9c 	.word	0x08010d9c
 800ba80:	08010dd0 	.word	0x08010dd0
 800ba84:	08010e10 	.word	0x08010e10
 800ba88:	20007c94 	.word	0x20007c94

0800ba8c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b086      	sub	sp, #24
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	685b      	ldr	r3, [r3, #4]
 800ba9c:	4798      	blx	r3

  now = sys_now();
 800ba9e:	f7fe f841 	bl	8009b24 <sys_now>
 800baa2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	681a      	ldr	r2, [r3, #0]
 800baa8:	4b0f      	ldr	r3, [pc, #60]	@ (800bae8 <lwip_cyclic_timer+0x5c>)
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	4413      	add	r3, r2
 800baae:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800bab0:	68fa      	ldr	r2, [r7, #12]
 800bab2:	693b      	ldr	r3, [r7, #16]
 800bab4:	1ad3      	subs	r3, r2, r3
 800bab6:	0fdb      	lsrs	r3, r3, #31
 800bab8:	f003 0301 	and.w	r3, r3, #1
 800babc:	b2db      	uxtb	r3, r3
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d009      	beq.n	800bad6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	681a      	ldr	r2, [r3, #0]
 800bac6:	693b      	ldr	r3, [r7, #16]
 800bac8:	4413      	add	r3, r2
 800baca:	687a      	ldr	r2, [r7, #4]
 800bacc:	4907      	ldr	r1, [pc, #28]	@ (800baec <lwip_cyclic_timer+0x60>)
 800bace:	4618      	mov	r0, r3
 800bad0:	f7ff ff6e 	bl	800b9b0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800bad4:	e004      	b.n	800bae0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800bad6:	687a      	ldr	r2, [r7, #4]
 800bad8:	4904      	ldr	r1, [pc, #16]	@ (800baec <lwip_cyclic_timer+0x60>)
 800bada:	68f8      	ldr	r0, [r7, #12]
 800badc:	f7ff ff68 	bl	800b9b0 <sys_timeout_abs>
}
 800bae0:	bf00      	nop
 800bae2:	3718      	adds	r7, #24
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}
 800bae8:	20007c98 	.word	0x20007c98
 800baec:	0800ba8d 	.word	0x0800ba8d

0800baf0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b082      	sub	sp, #8
 800baf4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800baf6:	2300      	movs	r3, #0
 800baf8:	607b      	str	r3, [r7, #4]
 800bafa:	e00e      	b.n	800bb1a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800bafc:	4a0b      	ldr	r2, [pc, #44]	@ (800bb2c <sys_timeouts_init+0x3c>)
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	00db      	lsls	r3, r3, #3
 800bb08:	4a08      	ldr	r2, [pc, #32]	@ (800bb2c <sys_timeouts_init+0x3c>)
 800bb0a:	4413      	add	r3, r2
 800bb0c:	461a      	mov	r2, r3
 800bb0e:	4908      	ldr	r1, [pc, #32]	@ (800bb30 <sys_timeouts_init+0x40>)
 800bb10:	f000 f810 	bl	800bb34 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	3301      	adds	r3, #1
 800bb18:	607b      	str	r3, [r7, #4]
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2b01      	cmp	r3, #1
 800bb1e:	d9ed      	bls.n	800bafc <sys_timeouts_init+0xc>
  }
}
 800bb20:	bf00      	nop
 800bb22:	bf00      	nop
 800bb24:	3708      	adds	r7, #8
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}
 800bb2a:	bf00      	nop
 800bb2c:	08011930 	.word	0x08011930
 800bb30:	0800ba8d 	.word	0x0800ba8d

0800bb34 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b086      	sub	sp, #24
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	60f8      	str	r0, [r7, #12]
 800bb3c:	60b9      	str	r1, [r7, #8]
 800bb3e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb46:	d306      	bcc.n	800bb56 <sys_timeout+0x22>
 800bb48:	4b0a      	ldr	r3, [pc, #40]	@ (800bb74 <sys_timeout+0x40>)
 800bb4a:	f240 1229 	movw	r2, #297	@ 0x129
 800bb4e:	490a      	ldr	r1, [pc, #40]	@ (800bb78 <sys_timeout+0x44>)
 800bb50:	480a      	ldr	r0, [pc, #40]	@ (800bb7c <sys_timeout+0x48>)
 800bb52:	f003 f90d 	bl	800ed70 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800bb56:	f7fd ffe5 	bl	8009b24 <sys_now>
 800bb5a:	4602      	mov	r2, r0
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	4413      	add	r3, r2
 800bb60:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800bb62:	687a      	ldr	r2, [r7, #4]
 800bb64:	68b9      	ldr	r1, [r7, #8]
 800bb66:	6978      	ldr	r0, [r7, #20]
 800bb68:	f7ff ff22 	bl	800b9b0 <sys_timeout_abs>
#endif
}
 800bb6c:	bf00      	nop
 800bb6e:	3718      	adds	r7, #24
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}
 800bb74:	08010d9c 	.word	0x08010d9c
 800bb78:	08010e38 	.word	0x08010e38
 800bb7c:	08010e10 	.word	0x08010e10

0800bb80 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b084      	sub	sp, #16
 800bb84:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800bb86:	f7fd ffcd 	bl	8009b24 <sys_now>
 800bb8a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800bb8c:	4b17      	ldr	r3, [pc, #92]	@ (800bbec <sys_check_timeouts+0x6c>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d022      	beq.n	800bbde <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	685b      	ldr	r3, [r3, #4]
 800bb9c:	68fa      	ldr	r2, [r7, #12]
 800bb9e:	1ad3      	subs	r3, r2, r3
 800bba0:	0fdb      	lsrs	r3, r3, #31
 800bba2:	f003 0301 	and.w	r3, r3, #1
 800bba6:	b2db      	uxtb	r3, r3
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d11a      	bne.n	800bbe2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	4a0e      	ldr	r2, [pc, #56]	@ (800bbec <sys_check_timeouts+0x6c>)
 800bbb2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800bbb4:	68bb      	ldr	r3, [r7, #8]
 800bbb6:	689b      	ldr	r3, [r3, #8]
 800bbb8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	68db      	ldr	r3, [r3, #12]
 800bbbe:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	685b      	ldr	r3, [r3, #4]
 800bbc4:	4a0a      	ldr	r2, [pc, #40]	@ (800bbf0 <sys_check_timeouts+0x70>)
 800bbc6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800bbc8:	68b9      	ldr	r1, [r7, #8]
 800bbca:	2003      	movs	r0, #3
 800bbcc:	f7fe fe80 	bl	800a8d0 <memp_free>
    if (handler != NULL) {
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d0da      	beq.n	800bb8c <sys_check_timeouts+0xc>
      handler(arg);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6838      	ldr	r0, [r7, #0]
 800bbda:	4798      	blx	r3
  do {
 800bbdc:	e7d6      	b.n	800bb8c <sys_check_timeouts+0xc>
      return;
 800bbde:	bf00      	nop
 800bbe0:	e000      	b.n	800bbe4 <sys_check_timeouts+0x64>
      return;
 800bbe2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800bbe4:	3710      	adds	r7, #16
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}
 800bbea:	bf00      	nop
 800bbec:	20007c94 	.word	0x20007c94
 800bbf0:	20007c98 	.word	0x20007c98

0800bbf4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800bbf8:	f002 ffba 	bl	800eb70 <rand>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	b29b      	uxth	r3, r3
 800bc00:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bc04:	b29b      	uxth	r3, r3
 800bc06:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800bc0a:	b29a      	uxth	r2, r3
 800bc0c:	4b01      	ldr	r3, [pc, #4]	@ (800bc14 <udp_init+0x20>)
 800bc0e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800bc10:	bf00      	nop
 800bc12:	bd80      	pop	{r7, pc}
 800bc14:	20000024 	.word	0x20000024

0800bc18 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800bc18:	b480      	push	{r7}
 800bc1a:	b083      	sub	sp, #12
 800bc1c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800bc22:	4b17      	ldr	r3, [pc, #92]	@ (800bc80 <udp_new_port+0x68>)
 800bc24:	881b      	ldrh	r3, [r3, #0]
 800bc26:	1c5a      	adds	r2, r3, #1
 800bc28:	b291      	uxth	r1, r2
 800bc2a:	4a15      	ldr	r2, [pc, #84]	@ (800bc80 <udp_new_port+0x68>)
 800bc2c:	8011      	strh	r1, [r2, #0]
 800bc2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bc32:	4293      	cmp	r3, r2
 800bc34:	d103      	bne.n	800bc3e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800bc36:	4b12      	ldr	r3, [pc, #72]	@ (800bc80 <udp_new_port+0x68>)
 800bc38:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800bc3c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc3e:	4b11      	ldr	r3, [pc, #68]	@ (800bc84 <udp_new_port+0x6c>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	603b      	str	r3, [r7, #0]
 800bc44:	e011      	b.n	800bc6a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	8a5a      	ldrh	r2, [r3, #18]
 800bc4a:	4b0d      	ldr	r3, [pc, #52]	@ (800bc80 <udp_new_port+0x68>)
 800bc4c:	881b      	ldrh	r3, [r3, #0]
 800bc4e:	429a      	cmp	r2, r3
 800bc50:	d108      	bne.n	800bc64 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800bc52:	88fb      	ldrh	r3, [r7, #6]
 800bc54:	3301      	adds	r3, #1
 800bc56:	80fb      	strh	r3, [r7, #6]
 800bc58:	88fb      	ldrh	r3, [r7, #6]
 800bc5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bc5e:	d3e0      	bcc.n	800bc22 <udp_new_port+0xa>
        return 0;
 800bc60:	2300      	movs	r3, #0
 800bc62:	e007      	b.n	800bc74 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	68db      	ldr	r3, [r3, #12]
 800bc68:	603b      	str	r3, [r7, #0]
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d1ea      	bne.n	800bc46 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800bc70:	4b03      	ldr	r3, [pc, #12]	@ (800bc80 <udp_new_port+0x68>)
 800bc72:	881b      	ldrh	r3, [r3, #0]
}
 800bc74:	4618      	mov	r0, r3
 800bc76:	370c      	adds	r7, #12
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7e:	4770      	bx	lr
 800bc80:	20000024 	.word	0x20000024
 800bc84:	20007c9c 	.word	0x20007c9c

0800bc88 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b084      	sub	sp, #16
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	60f8      	str	r0, [r7, #12]
 800bc90:	60b9      	str	r1, [r7, #8]
 800bc92:	4613      	mov	r3, r2
 800bc94:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d105      	bne.n	800bca8 <udp_input_local_match+0x20>
 800bc9c:	4b27      	ldr	r3, [pc, #156]	@ (800bd3c <udp_input_local_match+0xb4>)
 800bc9e:	2287      	movs	r2, #135	@ 0x87
 800bca0:	4927      	ldr	r1, [pc, #156]	@ (800bd40 <udp_input_local_match+0xb8>)
 800bca2:	4828      	ldr	r0, [pc, #160]	@ (800bd44 <udp_input_local_match+0xbc>)
 800bca4:	f003 f864 	bl	800ed70 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d105      	bne.n	800bcba <udp_input_local_match+0x32>
 800bcae:	4b23      	ldr	r3, [pc, #140]	@ (800bd3c <udp_input_local_match+0xb4>)
 800bcb0:	2288      	movs	r2, #136	@ 0x88
 800bcb2:	4925      	ldr	r1, [pc, #148]	@ (800bd48 <udp_input_local_match+0xc0>)
 800bcb4:	4823      	ldr	r0, [pc, #140]	@ (800bd44 <udp_input_local_match+0xbc>)
 800bcb6:	f003 f85b 	bl	800ed70 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	7a1b      	ldrb	r3, [r3, #8]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d00b      	beq.n	800bcda <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	7a1a      	ldrb	r2, [r3, #8]
 800bcc6:	4b21      	ldr	r3, [pc, #132]	@ (800bd4c <udp_input_local_match+0xc4>)
 800bcc8:	685b      	ldr	r3, [r3, #4]
 800bcca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bcce:	3301      	adds	r3, #1
 800bcd0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bcd2:	429a      	cmp	r2, r3
 800bcd4:	d001      	beq.n	800bcda <udp_input_local_match+0x52>
    return 0;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	e02b      	b.n	800bd32 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800bcda:	79fb      	ldrb	r3, [r7, #7]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d018      	beq.n	800bd12 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d013      	beq.n	800bd0e <udp_input_local_match+0x86>
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d00f      	beq.n	800bd0e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800bcee:	4b17      	ldr	r3, [pc, #92]	@ (800bd4c <udp_input_local_match+0xc4>)
 800bcf0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bcf2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bcf6:	d00a      	beq.n	800bd0e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	681a      	ldr	r2, [r3, #0]
 800bcfc:	4b13      	ldr	r3, [pc, #76]	@ (800bd4c <udp_input_local_match+0xc4>)
 800bcfe:	695b      	ldr	r3, [r3, #20]
 800bd00:	405a      	eors	r2, r3
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	3308      	adds	r3, #8
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d110      	bne.n	800bd30 <udp_input_local_match+0xa8>
          return 1;
 800bd0e:	2301      	movs	r3, #1
 800bd10:	e00f      	b.n	800bd32 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d009      	beq.n	800bd2c <udp_input_local_match+0xa4>
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d005      	beq.n	800bd2c <udp_input_local_match+0xa4>
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	681a      	ldr	r2, [r3, #0]
 800bd24:	4b09      	ldr	r3, [pc, #36]	@ (800bd4c <udp_input_local_match+0xc4>)
 800bd26:	695b      	ldr	r3, [r3, #20]
 800bd28:	429a      	cmp	r2, r3
 800bd2a:	d101      	bne.n	800bd30 <udp_input_local_match+0xa8>
        return 1;
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	e000      	b.n	800bd32 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800bd30:	2300      	movs	r3, #0
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	3710      	adds	r7, #16
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}
 800bd3a:	bf00      	nop
 800bd3c:	08010e84 	.word	0x08010e84
 800bd40:	08010eb4 	.word	0x08010eb4
 800bd44:	08010ed8 	.word	0x08010ed8
 800bd48:	08010f00 	.word	0x08010f00
 800bd4c:	2000528c 	.word	0x2000528c

0800bd50 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800bd50:	b590      	push	{r4, r7, lr}
 800bd52:	b08d      	sub	sp, #52	@ 0x34
 800bd54:	af02      	add	r7, sp, #8
 800bd56:	6078      	str	r0, [r7, #4]
 800bd58:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d105      	bne.n	800bd70 <udp_input+0x20>
 800bd64:	4b7c      	ldr	r3, [pc, #496]	@ (800bf58 <udp_input+0x208>)
 800bd66:	22cf      	movs	r2, #207	@ 0xcf
 800bd68:	497c      	ldr	r1, [pc, #496]	@ (800bf5c <udp_input+0x20c>)
 800bd6a:	487d      	ldr	r0, [pc, #500]	@ (800bf60 <udp_input+0x210>)
 800bd6c:	f003 f800 	bl	800ed70 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d105      	bne.n	800bd82 <udp_input+0x32>
 800bd76:	4b78      	ldr	r3, [pc, #480]	@ (800bf58 <udp_input+0x208>)
 800bd78:	22d0      	movs	r2, #208	@ 0xd0
 800bd7a:	497a      	ldr	r1, [pc, #488]	@ (800bf64 <udp_input+0x214>)
 800bd7c:	4878      	ldr	r0, [pc, #480]	@ (800bf60 <udp_input+0x210>)
 800bd7e:	f002 fff7 	bl	800ed70 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	895b      	ldrh	r3, [r3, #10]
 800bd86:	2b07      	cmp	r3, #7
 800bd88:	d803      	bhi.n	800bd92 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f7ff fbe4 	bl	800b558 <pbuf_free>
    goto end;
 800bd90:	e0de      	b.n	800bf50 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	685b      	ldr	r3, [r3, #4]
 800bd96:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800bd98:	4b73      	ldr	r3, [pc, #460]	@ (800bf68 <udp_input+0x218>)
 800bd9a:	695b      	ldr	r3, [r3, #20]
 800bd9c:	4a72      	ldr	r2, [pc, #456]	@ (800bf68 <udp_input+0x218>)
 800bd9e:	6812      	ldr	r2, [r2, #0]
 800bda0:	4611      	mov	r1, r2
 800bda2:	4618      	mov	r0, r3
 800bda4:	f001 ff36 	bl	800dc14 <ip4_addr_isbroadcast_u32>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	881b      	ldrh	r3, [r3, #0]
 800bdb0:	b29b      	uxth	r3, r3
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f7fe f8c2 	bl	8009f3c <lwip_htons>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800bdbc:	697b      	ldr	r3, [r7, #20]
 800bdbe:	885b      	ldrh	r3, [r3, #2]
 800bdc0:	b29b      	uxth	r3, r3
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f7fe f8ba 	bl	8009f3c <lwip_htons>
 800bdc8:	4603      	mov	r3, r0
 800bdca:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800bdcc:	2300      	movs	r3, #0
 800bdce:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bdd8:	4b64      	ldr	r3, [pc, #400]	@ (800bf6c <udp_input+0x21c>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	627b      	str	r3, [r7, #36]	@ 0x24
 800bdde:	e054      	b.n	800be8a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800bde0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bde2:	8a5b      	ldrh	r3, [r3, #18]
 800bde4:	89fa      	ldrh	r2, [r7, #14]
 800bde6:	429a      	cmp	r2, r3
 800bde8:	d14a      	bne.n	800be80 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800bdea:	7cfb      	ldrb	r3, [r7, #19]
 800bdec:	461a      	mov	r2, r3
 800bdee:	6839      	ldr	r1, [r7, #0]
 800bdf0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bdf2:	f7ff ff49 	bl	800bc88 <udp_input_local_match>
 800bdf6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d041      	beq.n	800be80 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800bdfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdfe:	7c1b      	ldrb	r3, [r3, #16]
 800be00:	f003 0304 	and.w	r3, r3, #4
 800be04:	2b00      	cmp	r3, #0
 800be06:	d11d      	bne.n	800be44 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800be08:	69fb      	ldr	r3, [r7, #28]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d102      	bne.n	800be14 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800be0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be10:	61fb      	str	r3, [r7, #28]
 800be12:	e017      	b.n	800be44 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800be14:	7cfb      	ldrb	r3, [r7, #19]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d014      	beq.n	800be44 <udp_input+0xf4>
 800be1a:	4b53      	ldr	r3, [pc, #332]	@ (800bf68 <udp_input+0x218>)
 800be1c:	695b      	ldr	r3, [r3, #20]
 800be1e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800be22:	d10f      	bne.n	800be44 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800be24:	69fb      	ldr	r3, [r7, #28]
 800be26:	681a      	ldr	r2, [r3, #0]
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	3304      	adds	r3, #4
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	429a      	cmp	r2, r3
 800be30:	d008      	beq.n	800be44 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800be32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be34:	681a      	ldr	r2, [r3, #0]
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	3304      	adds	r3, #4
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	429a      	cmp	r2, r3
 800be3e:	d101      	bne.n	800be44 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800be40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be42:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800be44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be46:	8a9b      	ldrh	r3, [r3, #20]
 800be48:	8a3a      	ldrh	r2, [r7, #16]
 800be4a:	429a      	cmp	r2, r3
 800be4c:	d118      	bne.n	800be80 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800be4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be50:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800be52:	2b00      	cmp	r3, #0
 800be54:	d005      	beq.n	800be62 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800be56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be58:	685a      	ldr	r2, [r3, #4]
 800be5a:	4b43      	ldr	r3, [pc, #268]	@ (800bf68 <udp_input+0x218>)
 800be5c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800be5e:	429a      	cmp	r2, r3
 800be60:	d10e      	bne.n	800be80 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800be62:	6a3b      	ldr	r3, [r7, #32]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d014      	beq.n	800be92 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800be68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be6a:	68da      	ldr	r2, [r3, #12]
 800be6c:	6a3b      	ldr	r3, [r7, #32]
 800be6e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800be70:	4b3e      	ldr	r3, [pc, #248]	@ (800bf6c <udp_input+0x21c>)
 800be72:	681a      	ldr	r2, [r3, #0]
 800be74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be76:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800be78:	4a3c      	ldr	r2, [pc, #240]	@ (800bf6c <udp_input+0x21c>)
 800be7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be7c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800be7e:	e008      	b.n	800be92 <udp_input+0x142>
      }
    }

    prev = pcb;
 800be80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be82:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800be84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be86:	68db      	ldr	r3, [r3, #12]
 800be88:	627b      	str	r3, [r7, #36]	@ 0x24
 800be8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d1a7      	bne.n	800bde0 <udp_input+0x90>
 800be90:	e000      	b.n	800be94 <udp_input+0x144>
        break;
 800be92:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800be94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be96:	2b00      	cmp	r3, #0
 800be98:	d101      	bne.n	800be9e <udp_input+0x14e>
    pcb = uncon_pcb;
 800be9a:	69fb      	ldr	r3, [r7, #28]
 800be9c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800be9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d002      	beq.n	800beaa <udp_input+0x15a>
    for_us = 1;
 800bea4:	2301      	movs	r3, #1
 800bea6:	76fb      	strb	r3, [r7, #27]
 800bea8:	e00a      	b.n	800bec0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	3304      	adds	r3, #4
 800beae:	681a      	ldr	r2, [r3, #0]
 800beb0:	4b2d      	ldr	r3, [pc, #180]	@ (800bf68 <udp_input+0x218>)
 800beb2:	695b      	ldr	r3, [r3, #20]
 800beb4:	429a      	cmp	r2, r3
 800beb6:	bf0c      	ite	eq
 800beb8:	2301      	moveq	r3, #1
 800beba:	2300      	movne	r3, #0
 800bebc:	b2db      	uxtb	r3, r3
 800bebe:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800bec0:	7efb      	ldrb	r3, [r7, #27]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d041      	beq.n	800bf4a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800bec6:	2108      	movs	r1, #8
 800bec8:	6878      	ldr	r0, [r7, #4]
 800beca:	f7ff fabf 	bl	800b44c <pbuf_remove_header>
 800bece:	4603      	mov	r3, r0
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d00a      	beq.n	800beea <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800bed4:	4b20      	ldr	r3, [pc, #128]	@ (800bf58 <udp_input+0x208>)
 800bed6:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800beda:	4925      	ldr	r1, [pc, #148]	@ (800bf70 <udp_input+0x220>)
 800bedc:	4820      	ldr	r0, [pc, #128]	@ (800bf60 <udp_input+0x210>)
 800bede:	f002 ff47 	bl	800ed70 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f7ff fb38 	bl	800b558 <pbuf_free>
      goto end;
 800bee8:	e032      	b.n	800bf50 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800beea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beec:	2b00      	cmp	r3, #0
 800beee:	d012      	beq.n	800bf16 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800bef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bef2:	699b      	ldr	r3, [r3, #24]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d00a      	beq.n	800bf0e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800bef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800befa:	699c      	ldr	r4, [r3, #24]
 800befc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800befe:	69d8      	ldr	r0, [r3, #28]
 800bf00:	8a3b      	ldrh	r3, [r7, #16]
 800bf02:	9300      	str	r3, [sp, #0]
 800bf04:	4b1b      	ldr	r3, [pc, #108]	@ (800bf74 <udp_input+0x224>)
 800bf06:	687a      	ldr	r2, [r7, #4]
 800bf08:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bf0a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800bf0c:	e021      	b.n	800bf52 <udp_input+0x202>
        pbuf_free(p);
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f7ff fb22 	bl	800b558 <pbuf_free>
        goto end;
 800bf14:	e01c      	b.n	800bf50 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800bf16:	7cfb      	ldrb	r3, [r7, #19]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d112      	bne.n	800bf42 <udp_input+0x1f2>
 800bf1c:	4b12      	ldr	r3, [pc, #72]	@ (800bf68 <udp_input+0x218>)
 800bf1e:	695b      	ldr	r3, [r3, #20]
 800bf20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bf24:	2be0      	cmp	r3, #224	@ 0xe0
 800bf26:	d00c      	beq.n	800bf42 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800bf28:	4b0f      	ldr	r3, [pc, #60]	@ (800bf68 <udp_input+0x218>)
 800bf2a:	899b      	ldrh	r3, [r3, #12]
 800bf2c:	3308      	adds	r3, #8
 800bf2e:	b29b      	uxth	r3, r3
 800bf30:	b21b      	sxth	r3, r3
 800bf32:	4619      	mov	r1, r3
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f7ff fafc 	bl	800b532 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800bf3a:	2103      	movs	r1, #3
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	f001 fb53 	bl	800d5e8 <icmp_dest_unreach>
      pbuf_free(p);
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f7ff fb08 	bl	800b558 <pbuf_free>
  return;
 800bf48:	e003      	b.n	800bf52 <udp_input+0x202>
    pbuf_free(p);
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f7ff fb04 	bl	800b558 <pbuf_free>
  return;
 800bf50:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800bf52:	372c      	adds	r7, #44	@ 0x2c
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd90      	pop	{r4, r7, pc}
 800bf58:	08010e84 	.word	0x08010e84
 800bf5c:	08010f28 	.word	0x08010f28
 800bf60:	08010ed8 	.word	0x08010ed8
 800bf64:	08010f40 	.word	0x08010f40
 800bf68:	2000528c 	.word	0x2000528c
 800bf6c:	20007c9c 	.word	0x20007c9c
 800bf70:	08010f5c 	.word	0x08010f5c
 800bf74:	2000529c 	.word	0x2000529c

0800bf78 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b088      	sub	sp, #32
 800bf7c:	af02      	add	r7, sp, #8
 800bf7e:	60f8      	str	r0, [r7, #12]
 800bf80:	60b9      	str	r1, [r7, #8]
 800bf82:	607a      	str	r2, [r7, #4]
 800bf84:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d109      	bne.n	800bfa0 <udp_sendto+0x28>
 800bf8c:	4b23      	ldr	r3, [pc, #140]	@ (800c01c <udp_sendto+0xa4>)
 800bf8e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800bf92:	4923      	ldr	r1, [pc, #140]	@ (800c020 <udp_sendto+0xa8>)
 800bf94:	4823      	ldr	r0, [pc, #140]	@ (800c024 <udp_sendto+0xac>)
 800bf96:	f002 feeb 	bl	800ed70 <iprintf>
 800bf9a:	f06f 030f 	mvn.w	r3, #15
 800bf9e:	e038      	b.n	800c012 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d109      	bne.n	800bfba <udp_sendto+0x42>
 800bfa6:	4b1d      	ldr	r3, [pc, #116]	@ (800c01c <udp_sendto+0xa4>)
 800bfa8:	f240 2219 	movw	r2, #537	@ 0x219
 800bfac:	491e      	ldr	r1, [pc, #120]	@ (800c028 <udp_sendto+0xb0>)
 800bfae:	481d      	ldr	r0, [pc, #116]	@ (800c024 <udp_sendto+0xac>)
 800bfb0:	f002 fede 	bl	800ed70 <iprintf>
 800bfb4:	f06f 030f 	mvn.w	r3, #15
 800bfb8:	e02b      	b.n	800c012 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d109      	bne.n	800bfd4 <udp_sendto+0x5c>
 800bfc0:	4b16      	ldr	r3, [pc, #88]	@ (800c01c <udp_sendto+0xa4>)
 800bfc2:	f240 221a 	movw	r2, #538	@ 0x21a
 800bfc6:	4919      	ldr	r1, [pc, #100]	@ (800c02c <udp_sendto+0xb4>)
 800bfc8:	4816      	ldr	r0, [pc, #88]	@ (800c024 <udp_sendto+0xac>)
 800bfca:	f002 fed1 	bl	800ed70 <iprintf>
 800bfce:	f06f 030f 	mvn.w	r3, #15
 800bfd2:	e01e      	b.n	800c012 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	7a1b      	ldrb	r3, [r3, #8]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d006      	beq.n	800bfea <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	7a1b      	ldrb	r3, [r3, #8]
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	f7fe ff87 	bl	800aef4 <netif_get_by_index>
 800bfe6:	6178      	str	r0, [r7, #20]
 800bfe8:	e003      	b.n	800bff2 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f001 fb86 	bl	800d6fc <ip4_route>
 800bff0:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800bff2:	697b      	ldr	r3, [r7, #20]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d102      	bne.n	800bffe <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800bff8:	f06f 0303 	mvn.w	r3, #3
 800bffc:	e009      	b.n	800c012 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800bffe:	887a      	ldrh	r2, [r7, #2]
 800c000:	697b      	ldr	r3, [r7, #20]
 800c002:	9300      	str	r3, [sp, #0]
 800c004:	4613      	mov	r3, r2
 800c006:	687a      	ldr	r2, [r7, #4]
 800c008:	68b9      	ldr	r1, [r7, #8]
 800c00a:	68f8      	ldr	r0, [r7, #12]
 800c00c:	f000 f810 	bl	800c030 <udp_sendto_if>
 800c010:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800c012:	4618      	mov	r0, r3
 800c014:	3718      	adds	r7, #24
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}
 800c01a:	bf00      	nop
 800c01c:	08010e84 	.word	0x08010e84
 800c020:	08010fa8 	.word	0x08010fa8
 800c024:	08010ed8 	.word	0x08010ed8
 800c028:	08010fc0 	.word	0x08010fc0
 800c02c:	08010fdc 	.word	0x08010fdc

0800c030 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b088      	sub	sp, #32
 800c034:	af02      	add	r7, sp, #8
 800c036:	60f8      	str	r0, [r7, #12]
 800c038:	60b9      	str	r1, [r7, #8]
 800c03a:	607a      	str	r2, [r7, #4]
 800c03c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d109      	bne.n	800c058 <udp_sendto_if+0x28>
 800c044:	4b2e      	ldr	r3, [pc, #184]	@ (800c100 <udp_sendto_if+0xd0>)
 800c046:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c04a:	492e      	ldr	r1, [pc, #184]	@ (800c104 <udp_sendto_if+0xd4>)
 800c04c:	482e      	ldr	r0, [pc, #184]	@ (800c108 <udp_sendto_if+0xd8>)
 800c04e:	f002 fe8f 	bl	800ed70 <iprintf>
 800c052:	f06f 030f 	mvn.w	r3, #15
 800c056:	e04f      	b.n	800c0f8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800c058:	68bb      	ldr	r3, [r7, #8]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d109      	bne.n	800c072 <udp_sendto_if+0x42>
 800c05e:	4b28      	ldr	r3, [pc, #160]	@ (800c100 <udp_sendto_if+0xd0>)
 800c060:	f240 2281 	movw	r2, #641	@ 0x281
 800c064:	4929      	ldr	r1, [pc, #164]	@ (800c10c <udp_sendto_if+0xdc>)
 800c066:	4828      	ldr	r0, [pc, #160]	@ (800c108 <udp_sendto_if+0xd8>)
 800c068:	f002 fe82 	bl	800ed70 <iprintf>
 800c06c:	f06f 030f 	mvn.w	r3, #15
 800c070:	e042      	b.n	800c0f8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d109      	bne.n	800c08c <udp_sendto_if+0x5c>
 800c078:	4b21      	ldr	r3, [pc, #132]	@ (800c100 <udp_sendto_if+0xd0>)
 800c07a:	f240 2282 	movw	r2, #642	@ 0x282
 800c07e:	4924      	ldr	r1, [pc, #144]	@ (800c110 <udp_sendto_if+0xe0>)
 800c080:	4821      	ldr	r0, [pc, #132]	@ (800c108 <udp_sendto_if+0xd8>)
 800c082:	f002 fe75 	bl	800ed70 <iprintf>
 800c086:	f06f 030f 	mvn.w	r3, #15
 800c08a:	e035      	b.n	800c0f8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800c08c:	6a3b      	ldr	r3, [r7, #32]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d109      	bne.n	800c0a6 <udp_sendto_if+0x76>
 800c092:	4b1b      	ldr	r3, [pc, #108]	@ (800c100 <udp_sendto_if+0xd0>)
 800c094:	f240 2283 	movw	r2, #643	@ 0x283
 800c098:	491e      	ldr	r1, [pc, #120]	@ (800c114 <udp_sendto_if+0xe4>)
 800c09a:	481b      	ldr	r0, [pc, #108]	@ (800c108 <udp_sendto_if+0xd8>)
 800c09c:	f002 fe68 	bl	800ed70 <iprintf>
 800c0a0:	f06f 030f 	mvn.w	r3, #15
 800c0a4:	e028      	b.n	800c0f8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d009      	beq.n	800c0c0 <udp_sendto_if+0x90>
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d005      	beq.n	800c0c0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c0bc:	2be0      	cmp	r3, #224	@ 0xe0
 800c0be:	d103      	bne.n	800c0c8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800c0c0:	6a3b      	ldr	r3, [r7, #32]
 800c0c2:	3304      	adds	r3, #4
 800c0c4:	617b      	str	r3, [r7, #20]
 800c0c6:	e00b      	b.n	800c0e0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	681a      	ldr	r2, [r3, #0]
 800c0cc:	6a3b      	ldr	r3, [r7, #32]
 800c0ce:	3304      	adds	r3, #4
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	429a      	cmp	r2, r3
 800c0d4:	d002      	beq.n	800c0dc <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800c0d6:	f06f 0303 	mvn.w	r3, #3
 800c0da:	e00d      	b.n	800c0f8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800c0e0:	887a      	ldrh	r2, [r7, #2]
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	9301      	str	r3, [sp, #4]
 800c0e6:	6a3b      	ldr	r3, [r7, #32]
 800c0e8:	9300      	str	r3, [sp, #0]
 800c0ea:	4613      	mov	r3, r2
 800c0ec:	687a      	ldr	r2, [r7, #4]
 800c0ee:	68b9      	ldr	r1, [r7, #8]
 800c0f0:	68f8      	ldr	r0, [r7, #12]
 800c0f2:	f000 f811 	bl	800c118 <udp_sendto_if_src>
 800c0f6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	3718      	adds	r7, #24
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}
 800c100:	08010e84 	.word	0x08010e84
 800c104:	08010ff8 	.word	0x08010ff8
 800c108:	08010ed8 	.word	0x08010ed8
 800c10c:	08011014 	.word	0x08011014
 800c110:	08011030 	.word	0x08011030
 800c114:	08011050 	.word	0x08011050

0800c118 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b08c      	sub	sp, #48	@ 0x30
 800c11c:	af04      	add	r7, sp, #16
 800c11e:	60f8      	str	r0, [r7, #12]
 800c120:	60b9      	str	r1, [r7, #8]
 800c122:	607a      	str	r2, [r7, #4]
 800c124:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d109      	bne.n	800c140 <udp_sendto_if_src+0x28>
 800c12c:	4b65      	ldr	r3, [pc, #404]	@ (800c2c4 <udp_sendto_if_src+0x1ac>)
 800c12e:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800c132:	4965      	ldr	r1, [pc, #404]	@ (800c2c8 <udp_sendto_if_src+0x1b0>)
 800c134:	4865      	ldr	r0, [pc, #404]	@ (800c2cc <udp_sendto_if_src+0x1b4>)
 800c136:	f002 fe1b 	bl	800ed70 <iprintf>
 800c13a:	f06f 030f 	mvn.w	r3, #15
 800c13e:	e0bc      	b.n	800c2ba <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800c140:	68bb      	ldr	r3, [r7, #8]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d109      	bne.n	800c15a <udp_sendto_if_src+0x42>
 800c146:	4b5f      	ldr	r3, [pc, #380]	@ (800c2c4 <udp_sendto_if_src+0x1ac>)
 800c148:	f240 22d2 	movw	r2, #722	@ 0x2d2
 800c14c:	4960      	ldr	r1, [pc, #384]	@ (800c2d0 <udp_sendto_if_src+0x1b8>)
 800c14e:	485f      	ldr	r0, [pc, #380]	@ (800c2cc <udp_sendto_if_src+0x1b4>)
 800c150:	f002 fe0e 	bl	800ed70 <iprintf>
 800c154:	f06f 030f 	mvn.w	r3, #15
 800c158:	e0af      	b.n	800c2ba <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d109      	bne.n	800c174 <udp_sendto_if_src+0x5c>
 800c160:	4b58      	ldr	r3, [pc, #352]	@ (800c2c4 <udp_sendto_if_src+0x1ac>)
 800c162:	f240 22d3 	movw	r2, #723	@ 0x2d3
 800c166:	495b      	ldr	r1, [pc, #364]	@ (800c2d4 <udp_sendto_if_src+0x1bc>)
 800c168:	4858      	ldr	r0, [pc, #352]	@ (800c2cc <udp_sendto_if_src+0x1b4>)
 800c16a:	f002 fe01 	bl	800ed70 <iprintf>
 800c16e:	f06f 030f 	mvn.w	r3, #15
 800c172:	e0a2      	b.n	800c2ba <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800c174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c176:	2b00      	cmp	r3, #0
 800c178:	d109      	bne.n	800c18e <udp_sendto_if_src+0x76>
 800c17a:	4b52      	ldr	r3, [pc, #328]	@ (800c2c4 <udp_sendto_if_src+0x1ac>)
 800c17c:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 800c180:	4955      	ldr	r1, [pc, #340]	@ (800c2d8 <udp_sendto_if_src+0x1c0>)
 800c182:	4852      	ldr	r0, [pc, #328]	@ (800c2cc <udp_sendto_if_src+0x1b4>)
 800c184:	f002 fdf4 	bl	800ed70 <iprintf>
 800c188:	f06f 030f 	mvn.w	r3, #15
 800c18c:	e095      	b.n	800c2ba <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800c18e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c190:	2b00      	cmp	r3, #0
 800c192:	d109      	bne.n	800c1a8 <udp_sendto_if_src+0x90>
 800c194:	4b4b      	ldr	r3, [pc, #300]	@ (800c2c4 <udp_sendto_if_src+0x1ac>)
 800c196:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800c19a:	4950      	ldr	r1, [pc, #320]	@ (800c2dc <udp_sendto_if_src+0x1c4>)
 800c19c:	484b      	ldr	r0, [pc, #300]	@ (800c2cc <udp_sendto_if_src+0x1b4>)
 800c19e:	f002 fde7 	bl	800ed70 <iprintf>
 800c1a2:	f06f 030f 	mvn.w	r3, #15
 800c1a6:	e088      	b.n	800c2ba <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	8a5b      	ldrh	r3, [r3, #18]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d10f      	bne.n	800c1d0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800c1b0:	68f9      	ldr	r1, [r7, #12]
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	8a5b      	ldrh	r3, [r3, #18]
 800c1b6:	461a      	mov	r2, r3
 800c1b8:	68f8      	ldr	r0, [r7, #12]
 800c1ba:	f000 f893 	bl	800c2e4 <udp_bind>
 800c1be:	4603      	mov	r3, r0
 800c1c0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800c1c2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d002      	beq.n	800c1d0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800c1ca:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c1ce:	e074      	b.n	800c2ba <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	891b      	ldrh	r3, [r3, #8]
 800c1d4:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800c1d8:	4293      	cmp	r3, r2
 800c1da:	d902      	bls.n	800c1e2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800c1dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c1e0:	e06b      	b.n	800c2ba <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800c1e2:	2108      	movs	r1, #8
 800c1e4:	68b8      	ldr	r0, [r7, #8]
 800c1e6:	f7ff f921 	bl	800b42c <pbuf_add_header>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d015      	beq.n	800c21c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800c1f0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c1f4:	2108      	movs	r1, #8
 800c1f6:	2022      	movs	r0, #34	@ 0x22
 800c1f8:	f7fe fecc 	bl	800af94 <pbuf_alloc>
 800c1fc:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800c1fe:	69fb      	ldr	r3, [r7, #28]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d102      	bne.n	800c20a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800c204:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c208:	e057      	b.n	800c2ba <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	891b      	ldrh	r3, [r3, #8]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d006      	beq.n	800c220 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800c212:	68b9      	ldr	r1, [r7, #8]
 800c214:	69f8      	ldr	r0, [r7, #28]
 800c216:	f7ff fab7 	bl	800b788 <pbuf_chain>
 800c21a:	e001      	b.n	800c220 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800c21c:	68bb      	ldr	r3, [r7, #8]
 800c21e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800c220:	69fb      	ldr	r3, [r7, #28]
 800c222:	895b      	ldrh	r3, [r3, #10]
 800c224:	2b07      	cmp	r3, #7
 800c226:	d806      	bhi.n	800c236 <udp_sendto_if_src+0x11e>
 800c228:	4b26      	ldr	r3, [pc, #152]	@ (800c2c4 <udp_sendto_if_src+0x1ac>)
 800c22a:	f240 320d 	movw	r2, #781	@ 0x30d
 800c22e:	492c      	ldr	r1, [pc, #176]	@ (800c2e0 <udp_sendto_if_src+0x1c8>)
 800c230:	4826      	ldr	r0, [pc, #152]	@ (800c2cc <udp_sendto_if_src+0x1b4>)
 800c232:	f002 fd9d 	bl	800ed70 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800c236:	69fb      	ldr	r3, [r7, #28]
 800c238:	685b      	ldr	r3, [r3, #4]
 800c23a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	8a5b      	ldrh	r3, [r3, #18]
 800c240:	4618      	mov	r0, r3
 800c242:	f7fd fe7b 	bl	8009f3c <lwip_htons>
 800c246:	4603      	mov	r3, r0
 800c248:	461a      	mov	r2, r3
 800c24a:	697b      	ldr	r3, [r7, #20]
 800c24c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800c24e:	887b      	ldrh	r3, [r7, #2]
 800c250:	4618      	mov	r0, r3
 800c252:	f7fd fe73 	bl	8009f3c <lwip_htons>
 800c256:	4603      	mov	r3, r0
 800c258:	461a      	mov	r2, r3
 800c25a:	697b      	ldr	r3, [r7, #20]
 800c25c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	2200      	movs	r2, #0
 800c262:	719a      	strb	r2, [r3, #6]
 800c264:	2200      	movs	r2, #0
 800c266:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800c268:	69fb      	ldr	r3, [r7, #28]
 800c26a:	891b      	ldrh	r3, [r3, #8]
 800c26c:	4618      	mov	r0, r3
 800c26e:	f7fd fe65 	bl	8009f3c <lwip_htons>
 800c272:	4603      	mov	r3, r0
 800c274:	461a      	mov	r2, r3
 800c276:	697b      	ldr	r3, [r7, #20]
 800c278:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800c27a:	2311      	movs	r3, #17
 800c27c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	7adb      	ldrb	r3, [r3, #11]
 800c282:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	7a9b      	ldrb	r3, [r3, #10]
 800c288:	7cb9      	ldrb	r1, [r7, #18]
 800c28a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c28c:	9202      	str	r2, [sp, #8]
 800c28e:	7cfa      	ldrb	r2, [r7, #19]
 800c290:	9201      	str	r2, [sp, #4]
 800c292:	9300      	str	r3, [sp, #0]
 800c294:	460b      	mov	r3, r1
 800c296:	687a      	ldr	r2, [r7, #4]
 800c298:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c29a:	69f8      	ldr	r0, [r7, #28]
 800c29c:	f001 fc0c 	bl	800dab8 <ip4_output_if_src>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800c2a4:	69fa      	ldr	r2, [r7, #28]
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	429a      	cmp	r2, r3
 800c2aa:	d004      	beq.n	800c2b6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800c2ac:	69f8      	ldr	r0, [r7, #28]
 800c2ae:	f7ff f953 	bl	800b558 <pbuf_free>
    q = NULL;
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800c2b6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3720      	adds	r7, #32
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}
 800c2c2:	bf00      	nop
 800c2c4:	08010e84 	.word	0x08010e84
 800c2c8:	08011070 	.word	0x08011070
 800c2cc:	08010ed8 	.word	0x08010ed8
 800c2d0:	08011090 	.word	0x08011090
 800c2d4:	080110b0 	.word	0x080110b0
 800c2d8:	080110d4 	.word	0x080110d4
 800c2dc:	080110f8 	.word	0x080110f8
 800c2e0:	0801111c 	.word	0x0801111c

0800c2e4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b086      	sub	sp, #24
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	60f8      	str	r0, [r7, #12]
 800c2ec:	60b9      	str	r1, [r7, #8]
 800c2ee:	4613      	mov	r3, r2
 800c2f0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c2f2:	68bb      	ldr	r3, [r7, #8]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d101      	bne.n	800c2fc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800c2f8:	4b39      	ldr	r3, [pc, #228]	@ (800c3e0 <udp_bind+0xfc>)
 800c2fa:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d109      	bne.n	800c316 <udp_bind+0x32>
 800c302:	4b38      	ldr	r3, [pc, #224]	@ (800c3e4 <udp_bind+0x100>)
 800c304:	f240 32b7 	movw	r2, #951	@ 0x3b7
 800c308:	4937      	ldr	r1, [pc, #220]	@ (800c3e8 <udp_bind+0x104>)
 800c30a:	4838      	ldr	r0, [pc, #224]	@ (800c3ec <udp_bind+0x108>)
 800c30c:	f002 fd30 	bl	800ed70 <iprintf>
 800c310:	f06f 030f 	mvn.w	r3, #15
 800c314:	e060      	b.n	800c3d8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800c316:	2300      	movs	r3, #0
 800c318:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c31a:	4b35      	ldr	r3, [pc, #212]	@ (800c3f0 <udp_bind+0x10c>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	617b      	str	r3, [r7, #20]
 800c320:	e009      	b.n	800c336 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800c322:	68fa      	ldr	r2, [r7, #12]
 800c324:	697b      	ldr	r3, [r7, #20]
 800c326:	429a      	cmp	r2, r3
 800c328:	d102      	bne.n	800c330 <udp_bind+0x4c>
      rebind = 1;
 800c32a:	2301      	movs	r3, #1
 800c32c:	74fb      	strb	r3, [r7, #19]
      break;
 800c32e:	e005      	b.n	800c33c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c330:	697b      	ldr	r3, [r7, #20]
 800c332:	68db      	ldr	r3, [r3, #12]
 800c334:	617b      	str	r3, [r7, #20]
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d1f2      	bne.n	800c322 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800c33c:	88fb      	ldrh	r3, [r7, #6]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d109      	bne.n	800c356 <udp_bind+0x72>
    port = udp_new_port();
 800c342:	f7ff fc69 	bl	800bc18 <udp_new_port>
 800c346:	4603      	mov	r3, r0
 800c348:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c34a:	88fb      	ldrh	r3, [r7, #6]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d12c      	bne.n	800c3aa <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800c350:	f06f 0307 	mvn.w	r3, #7
 800c354:	e040      	b.n	800c3d8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c356:	4b26      	ldr	r3, [pc, #152]	@ (800c3f0 <udp_bind+0x10c>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	617b      	str	r3, [r7, #20]
 800c35c:	e022      	b.n	800c3a4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800c35e:	68fa      	ldr	r2, [r7, #12]
 800c360:	697b      	ldr	r3, [r7, #20]
 800c362:	429a      	cmp	r2, r3
 800c364:	d01b      	beq.n	800c39e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800c366:	697b      	ldr	r3, [r7, #20]
 800c368:	8a5b      	ldrh	r3, [r3, #18]
 800c36a:	88fa      	ldrh	r2, [r7, #6]
 800c36c:	429a      	cmp	r2, r3
 800c36e:	d116      	bne.n	800c39e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c370:	697b      	ldr	r3, [r7, #20]
 800c372:	681a      	ldr	r2, [r3, #0]
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800c378:	429a      	cmp	r2, r3
 800c37a:	d00d      	beq.n	800c398 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d00a      	beq.n	800c398 <udp_bind+0xb4>
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d006      	beq.n	800c398 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800c38a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d003      	beq.n	800c398 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800c390:	697b      	ldr	r3, [r7, #20]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d102      	bne.n	800c39e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800c398:	f06f 0307 	mvn.w	r3, #7
 800c39c:	e01c      	b.n	800c3d8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c39e:	697b      	ldr	r3, [r7, #20]
 800c3a0:	68db      	ldr	r3, [r3, #12]
 800c3a2:	617b      	str	r3, [r7, #20]
 800c3a4:	697b      	ldr	r3, [r7, #20]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d1d9      	bne.n	800c35e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d002      	beq.n	800c3b6 <udp_bind+0xd2>
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	e000      	b.n	800c3b8 <udp_bind+0xd4>
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	68fa      	ldr	r2, [r7, #12]
 800c3ba:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	88fa      	ldrh	r2, [r7, #6]
 800c3c0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800c3c2:	7cfb      	ldrb	r3, [r7, #19]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d106      	bne.n	800c3d6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800c3c8:	4b09      	ldr	r3, [pc, #36]	@ (800c3f0 <udp_bind+0x10c>)
 800c3ca:	681a      	ldr	r2, [r3, #0]
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800c3d0:	4a07      	ldr	r2, [pc, #28]	@ (800c3f0 <udp_bind+0x10c>)
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800c3d6:	2300      	movs	r3, #0
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3718      	adds	r7, #24
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}
 800c3e0:	08011940 	.word	0x08011940
 800c3e4:	08010e84 	.word	0x08010e84
 800c3e8:	0801114c 	.word	0x0801114c
 800c3ec:	08010ed8 	.word	0x08010ed8
 800c3f0:	20007c9c 	.word	0x20007c9c

0800c3f4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b084      	sub	sp, #16
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	60f8      	str	r0, [r7, #12]
 800c3fc:	60b9      	str	r1, [r7, #8]
 800c3fe:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d107      	bne.n	800c416 <udp_recv+0x22>
 800c406:	4b08      	ldr	r3, [pc, #32]	@ (800c428 <udp_recv+0x34>)
 800c408:	f240 428a 	movw	r2, #1162	@ 0x48a
 800c40c:	4907      	ldr	r1, [pc, #28]	@ (800c42c <udp_recv+0x38>)
 800c40e:	4808      	ldr	r0, [pc, #32]	@ (800c430 <udp_recv+0x3c>)
 800c410:	f002 fcae 	bl	800ed70 <iprintf>
 800c414:	e005      	b.n	800c422 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	68ba      	ldr	r2, [r7, #8]
 800c41a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	687a      	ldr	r2, [r7, #4]
 800c420:	61da      	str	r2, [r3, #28]
}
 800c422:	3710      	adds	r7, #16
 800c424:	46bd      	mov	sp, r7
 800c426:	bd80      	pop	{r7, pc}
 800c428:	08010e84 	.word	0x08010e84
 800c42c:	080111b8 	.word	0x080111b8
 800c430:	08010ed8 	.word	0x08010ed8

0800c434 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b084      	sub	sp, #16
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d107      	bne.n	800c452 <udp_remove+0x1e>
 800c442:	4b19      	ldr	r3, [pc, #100]	@ (800c4a8 <udp_remove+0x74>)
 800c444:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 800c448:	4918      	ldr	r1, [pc, #96]	@ (800c4ac <udp_remove+0x78>)
 800c44a:	4819      	ldr	r0, [pc, #100]	@ (800c4b0 <udp_remove+0x7c>)
 800c44c:	f002 fc90 	bl	800ed70 <iprintf>
 800c450:	e026      	b.n	800c4a0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800c452:	4b18      	ldr	r3, [pc, #96]	@ (800c4b4 <udp_remove+0x80>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	687a      	ldr	r2, [r7, #4]
 800c458:	429a      	cmp	r2, r3
 800c45a:	d105      	bne.n	800c468 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800c45c:	4b15      	ldr	r3, [pc, #84]	@ (800c4b4 <udp_remove+0x80>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	68db      	ldr	r3, [r3, #12]
 800c462:	4a14      	ldr	r2, [pc, #80]	@ (800c4b4 <udp_remove+0x80>)
 800c464:	6013      	str	r3, [r2, #0]
 800c466:	e017      	b.n	800c498 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800c468:	4b12      	ldr	r3, [pc, #72]	@ (800c4b4 <udp_remove+0x80>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	60fb      	str	r3, [r7, #12]
 800c46e:	e010      	b.n	800c492 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	68db      	ldr	r3, [r3, #12]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d009      	beq.n	800c48c <udp_remove+0x58>
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	68db      	ldr	r3, [r3, #12]
 800c47c:	687a      	ldr	r2, [r7, #4]
 800c47e:	429a      	cmp	r2, r3
 800c480:	d104      	bne.n	800c48c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	68da      	ldr	r2, [r3, #12]
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	60da      	str	r2, [r3, #12]
        break;
 800c48a:	e005      	b.n	800c498 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	68db      	ldr	r3, [r3, #12]
 800c490:	60fb      	str	r3, [r7, #12]
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d1eb      	bne.n	800c470 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800c498:	6879      	ldr	r1, [r7, #4]
 800c49a:	2000      	movs	r0, #0
 800c49c:	f7fe fa18 	bl	800a8d0 <memp_free>
}
 800c4a0:	3710      	adds	r7, #16
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}
 800c4a6:	bf00      	nop
 800c4a8:	08010e84 	.word	0x08010e84
 800c4ac:	080111d0 	.word	0x080111d0
 800c4b0:	08010ed8 	.word	0x08010ed8
 800c4b4:	20007c9c 	.word	0x20007c9c

0800c4b8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b082      	sub	sp, #8
 800c4bc:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800c4be:	2000      	movs	r0, #0
 800c4c0:	f7fe f996 	bl	800a7f0 <memp_malloc>
 800c4c4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d007      	beq.n	800c4dc <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800c4cc:	2220      	movs	r2, #32
 800c4ce:	2100      	movs	r1, #0
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	f002 fce7 	bl	800eea4 <memset>
    pcb->ttl = UDP_TTL;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	22ff      	movs	r2, #255	@ 0xff
 800c4da:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800c4dc:	687b      	ldr	r3, [r7, #4]
}
 800c4de:	4618      	mov	r0, r3
 800c4e0:	3708      	adds	r7, #8
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}
	...

0800c4e8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c4e8:	b480      	push	{r7}
 800c4ea:	b085      	sub	sp, #20
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
 800c4f0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d01e      	beq.n	800c536 <udp_netif_ip_addr_changed+0x4e>
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d01a      	beq.n	800c536 <udp_netif_ip_addr_changed+0x4e>
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d017      	beq.n	800c536 <udp_netif_ip_addr_changed+0x4e>
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d013      	beq.n	800c536 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c50e:	4b0d      	ldr	r3, [pc, #52]	@ (800c544 <udp_netif_ip_addr_changed+0x5c>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	60fb      	str	r3, [r7, #12]
 800c514:	e00c      	b.n	800c530 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	681a      	ldr	r2, [r3, #0]
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	429a      	cmp	r2, r3
 800c520:	d103      	bne.n	800c52a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	681a      	ldr	r2, [r3, #0]
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	68db      	ldr	r3, [r3, #12]
 800c52e:	60fb      	str	r3, [r7, #12]
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d1ef      	bne.n	800c516 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800c536:	bf00      	nop
 800c538:	3714      	adds	r7, #20
 800c53a:	46bd      	mov	sp, r7
 800c53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c540:	4770      	bx	lr
 800c542:	bf00      	nop
 800c544:	20007c9c 	.word	0x20007c9c

0800c548 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b082      	sub	sp, #8
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800c550:	4915      	ldr	r1, [pc, #84]	@ (800c5a8 <etharp_free_entry+0x60>)
 800c552:	687a      	ldr	r2, [r7, #4]
 800c554:	4613      	mov	r3, r2
 800c556:	005b      	lsls	r3, r3, #1
 800c558:	4413      	add	r3, r2
 800c55a:	00db      	lsls	r3, r3, #3
 800c55c:	440b      	add	r3, r1
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d013      	beq.n	800c58c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800c564:	4910      	ldr	r1, [pc, #64]	@ (800c5a8 <etharp_free_entry+0x60>)
 800c566:	687a      	ldr	r2, [r7, #4]
 800c568:	4613      	mov	r3, r2
 800c56a:	005b      	lsls	r3, r3, #1
 800c56c:	4413      	add	r3, r2
 800c56e:	00db      	lsls	r3, r3, #3
 800c570:	440b      	add	r3, r1
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	4618      	mov	r0, r3
 800c576:	f7fe ffef 	bl	800b558 <pbuf_free>
    arp_table[i].q = NULL;
 800c57a:	490b      	ldr	r1, [pc, #44]	@ (800c5a8 <etharp_free_entry+0x60>)
 800c57c:	687a      	ldr	r2, [r7, #4]
 800c57e:	4613      	mov	r3, r2
 800c580:	005b      	lsls	r3, r3, #1
 800c582:	4413      	add	r3, r2
 800c584:	00db      	lsls	r3, r3, #3
 800c586:	440b      	add	r3, r1
 800c588:	2200      	movs	r2, #0
 800c58a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c58c:	4906      	ldr	r1, [pc, #24]	@ (800c5a8 <etharp_free_entry+0x60>)
 800c58e:	687a      	ldr	r2, [r7, #4]
 800c590:	4613      	mov	r3, r2
 800c592:	005b      	lsls	r3, r3, #1
 800c594:	4413      	add	r3, r2
 800c596:	00db      	lsls	r3, r3, #3
 800c598:	440b      	add	r3, r1
 800c59a:	3314      	adds	r3, #20
 800c59c:	2200      	movs	r2, #0
 800c59e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800c5a0:	bf00      	nop
 800c5a2:	3708      	adds	r7, #8
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd80      	pop	{r7, pc}
 800c5a8:	20007ca0 	.word	0x20007ca0

0800c5ac <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b082      	sub	sp, #8
 800c5b0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	607b      	str	r3, [r7, #4]
 800c5b6:	e096      	b.n	800c6e6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800c5b8:	494f      	ldr	r1, [pc, #316]	@ (800c6f8 <etharp_tmr+0x14c>)
 800c5ba:	687a      	ldr	r2, [r7, #4]
 800c5bc:	4613      	mov	r3, r2
 800c5be:	005b      	lsls	r3, r3, #1
 800c5c0:	4413      	add	r3, r2
 800c5c2:	00db      	lsls	r3, r3, #3
 800c5c4:	440b      	add	r3, r1
 800c5c6:	3314      	adds	r3, #20
 800c5c8:	781b      	ldrb	r3, [r3, #0]
 800c5ca:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800c5cc:	78fb      	ldrb	r3, [r7, #3]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	f000 8086 	beq.w	800c6e0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800c5d4:	4948      	ldr	r1, [pc, #288]	@ (800c6f8 <etharp_tmr+0x14c>)
 800c5d6:	687a      	ldr	r2, [r7, #4]
 800c5d8:	4613      	mov	r3, r2
 800c5da:	005b      	lsls	r3, r3, #1
 800c5dc:	4413      	add	r3, r2
 800c5de:	00db      	lsls	r3, r3, #3
 800c5e0:	440b      	add	r3, r1
 800c5e2:	3312      	adds	r3, #18
 800c5e4:	881b      	ldrh	r3, [r3, #0]
 800c5e6:	3301      	adds	r3, #1
 800c5e8:	b298      	uxth	r0, r3
 800c5ea:	4943      	ldr	r1, [pc, #268]	@ (800c6f8 <etharp_tmr+0x14c>)
 800c5ec:	687a      	ldr	r2, [r7, #4]
 800c5ee:	4613      	mov	r3, r2
 800c5f0:	005b      	lsls	r3, r3, #1
 800c5f2:	4413      	add	r3, r2
 800c5f4:	00db      	lsls	r3, r3, #3
 800c5f6:	440b      	add	r3, r1
 800c5f8:	3312      	adds	r3, #18
 800c5fa:	4602      	mov	r2, r0
 800c5fc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c5fe:	493e      	ldr	r1, [pc, #248]	@ (800c6f8 <etharp_tmr+0x14c>)
 800c600:	687a      	ldr	r2, [r7, #4]
 800c602:	4613      	mov	r3, r2
 800c604:	005b      	lsls	r3, r3, #1
 800c606:	4413      	add	r3, r2
 800c608:	00db      	lsls	r3, r3, #3
 800c60a:	440b      	add	r3, r1
 800c60c:	3312      	adds	r3, #18
 800c60e:	881b      	ldrh	r3, [r3, #0]
 800c610:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800c614:	d215      	bcs.n	800c642 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c616:	4938      	ldr	r1, [pc, #224]	@ (800c6f8 <etharp_tmr+0x14c>)
 800c618:	687a      	ldr	r2, [r7, #4]
 800c61a:	4613      	mov	r3, r2
 800c61c:	005b      	lsls	r3, r3, #1
 800c61e:	4413      	add	r3, r2
 800c620:	00db      	lsls	r3, r3, #3
 800c622:	440b      	add	r3, r1
 800c624:	3314      	adds	r3, #20
 800c626:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c628:	2b01      	cmp	r3, #1
 800c62a:	d10e      	bne.n	800c64a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800c62c:	4932      	ldr	r1, [pc, #200]	@ (800c6f8 <etharp_tmr+0x14c>)
 800c62e:	687a      	ldr	r2, [r7, #4]
 800c630:	4613      	mov	r3, r2
 800c632:	005b      	lsls	r3, r3, #1
 800c634:	4413      	add	r3, r2
 800c636:	00db      	lsls	r3, r3, #3
 800c638:	440b      	add	r3, r1
 800c63a:	3312      	adds	r3, #18
 800c63c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c63e:	2b04      	cmp	r3, #4
 800c640:	d903      	bls.n	800c64a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f7ff ff80 	bl	800c548 <etharp_free_entry>
 800c648:	e04a      	b.n	800c6e0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800c64a:	492b      	ldr	r1, [pc, #172]	@ (800c6f8 <etharp_tmr+0x14c>)
 800c64c:	687a      	ldr	r2, [r7, #4]
 800c64e:	4613      	mov	r3, r2
 800c650:	005b      	lsls	r3, r3, #1
 800c652:	4413      	add	r3, r2
 800c654:	00db      	lsls	r3, r3, #3
 800c656:	440b      	add	r3, r1
 800c658:	3314      	adds	r3, #20
 800c65a:	781b      	ldrb	r3, [r3, #0]
 800c65c:	2b03      	cmp	r3, #3
 800c65e:	d10a      	bne.n	800c676 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800c660:	4925      	ldr	r1, [pc, #148]	@ (800c6f8 <etharp_tmr+0x14c>)
 800c662:	687a      	ldr	r2, [r7, #4]
 800c664:	4613      	mov	r3, r2
 800c666:	005b      	lsls	r3, r3, #1
 800c668:	4413      	add	r3, r2
 800c66a:	00db      	lsls	r3, r3, #3
 800c66c:	440b      	add	r3, r1
 800c66e:	3314      	adds	r3, #20
 800c670:	2204      	movs	r2, #4
 800c672:	701a      	strb	r2, [r3, #0]
 800c674:	e034      	b.n	800c6e0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800c676:	4920      	ldr	r1, [pc, #128]	@ (800c6f8 <etharp_tmr+0x14c>)
 800c678:	687a      	ldr	r2, [r7, #4]
 800c67a:	4613      	mov	r3, r2
 800c67c:	005b      	lsls	r3, r3, #1
 800c67e:	4413      	add	r3, r2
 800c680:	00db      	lsls	r3, r3, #3
 800c682:	440b      	add	r3, r1
 800c684:	3314      	adds	r3, #20
 800c686:	781b      	ldrb	r3, [r3, #0]
 800c688:	2b04      	cmp	r3, #4
 800c68a:	d10a      	bne.n	800c6a2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800c68c:	491a      	ldr	r1, [pc, #104]	@ (800c6f8 <etharp_tmr+0x14c>)
 800c68e:	687a      	ldr	r2, [r7, #4]
 800c690:	4613      	mov	r3, r2
 800c692:	005b      	lsls	r3, r3, #1
 800c694:	4413      	add	r3, r2
 800c696:	00db      	lsls	r3, r3, #3
 800c698:	440b      	add	r3, r1
 800c69a:	3314      	adds	r3, #20
 800c69c:	2202      	movs	r2, #2
 800c69e:	701a      	strb	r2, [r3, #0]
 800c6a0:	e01e      	b.n	800c6e0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c6a2:	4915      	ldr	r1, [pc, #84]	@ (800c6f8 <etharp_tmr+0x14c>)
 800c6a4:	687a      	ldr	r2, [r7, #4]
 800c6a6:	4613      	mov	r3, r2
 800c6a8:	005b      	lsls	r3, r3, #1
 800c6aa:	4413      	add	r3, r2
 800c6ac:	00db      	lsls	r3, r3, #3
 800c6ae:	440b      	add	r3, r1
 800c6b0:	3314      	adds	r3, #20
 800c6b2:	781b      	ldrb	r3, [r3, #0]
 800c6b4:	2b01      	cmp	r3, #1
 800c6b6:	d113      	bne.n	800c6e0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800c6b8:	490f      	ldr	r1, [pc, #60]	@ (800c6f8 <etharp_tmr+0x14c>)
 800c6ba:	687a      	ldr	r2, [r7, #4]
 800c6bc:	4613      	mov	r3, r2
 800c6be:	005b      	lsls	r3, r3, #1
 800c6c0:	4413      	add	r3, r2
 800c6c2:	00db      	lsls	r3, r3, #3
 800c6c4:	440b      	add	r3, r1
 800c6c6:	3308      	adds	r3, #8
 800c6c8:	6818      	ldr	r0, [r3, #0]
 800c6ca:	687a      	ldr	r2, [r7, #4]
 800c6cc:	4613      	mov	r3, r2
 800c6ce:	005b      	lsls	r3, r3, #1
 800c6d0:	4413      	add	r3, r2
 800c6d2:	00db      	lsls	r3, r3, #3
 800c6d4:	4a08      	ldr	r2, [pc, #32]	@ (800c6f8 <etharp_tmr+0x14c>)
 800c6d6:	4413      	add	r3, r2
 800c6d8:	3304      	adds	r3, #4
 800c6da:	4619      	mov	r1, r3
 800c6dc:	f000 fe6e 	bl	800d3bc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	3301      	adds	r3, #1
 800c6e4:	607b      	str	r3, [r7, #4]
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2b09      	cmp	r3, #9
 800c6ea:	f77f af65 	ble.w	800c5b8 <etharp_tmr+0xc>
      }
    }
  }
}
 800c6ee:	bf00      	nop
 800c6f0:	bf00      	nop
 800c6f2:	3708      	adds	r7, #8
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bd80      	pop	{r7, pc}
 800c6f8:	20007ca0 	.word	0x20007ca0

0800c6fc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b08a      	sub	sp, #40	@ 0x28
 800c700:	af00      	add	r7, sp, #0
 800c702:	60f8      	str	r0, [r7, #12]
 800c704:	460b      	mov	r3, r1
 800c706:	607a      	str	r2, [r7, #4]
 800c708:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800c70a:	230a      	movs	r3, #10
 800c70c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800c70e:	230a      	movs	r3, #10
 800c710:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800c712:	230a      	movs	r3, #10
 800c714:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800c716:	2300      	movs	r3, #0
 800c718:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800c71a:	230a      	movs	r3, #10
 800c71c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800c71e:	2300      	movs	r3, #0
 800c720:	83bb      	strh	r3, [r7, #28]
 800c722:	2300      	movs	r3, #0
 800c724:	837b      	strh	r3, [r7, #26]
 800c726:	2300      	movs	r3, #0
 800c728:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c72a:	2300      	movs	r3, #0
 800c72c:	843b      	strh	r3, [r7, #32]
 800c72e:	e0ae      	b.n	800c88e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800c730:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c734:	49a6      	ldr	r1, [pc, #664]	@ (800c9d0 <etharp_find_entry+0x2d4>)
 800c736:	4613      	mov	r3, r2
 800c738:	005b      	lsls	r3, r3, #1
 800c73a:	4413      	add	r3, r2
 800c73c:	00db      	lsls	r3, r3, #3
 800c73e:	440b      	add	r3, r1
 800c740:	3314      	adds	r3, #20
 800c742:	781b      	ldrb	r3, [r3, #0]
 800c744:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c746:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800c74a:	2b0a      	cmp	r3, #10
 800c74c:	d105      	bne.n	800c75a <etharp_find_entry+0x5e>
 800c74e:	7dfb      	ldrb	r3, [r7, #23]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d102      	bne.n	800c75a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800c754:	8c3b      	ldrh	r3, [r7, #32]
 800c756:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c758:	e095      	b.n	800c886 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800c75a:	7dfb      	ldrb	r3, [r7, #23]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	f000 8092 	beq.w	800c886 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800c762:	7dfb      	ldrb	r3, [r7, #23]
 800c764:	2b01      	cmp	r3, #1
 800c766:	d009      	beq.n	800c77c <etharp_find_entry+0x80>
 800c768:	7dfb      	ldrb	r3, [r7, #23]
 800c76a:	2b01      	cmp	r3, #1
 800c76c:	d806      	bhi.n	800c77c <etharp_find_entry+0x80>
 800c76e:	4b99      	ldr	r3, [pc, #612]	@ (800c9d4 <etharp_find_entry+0x2d8>)
 800c770:	f240 1223 	movw	r2, #291	@ 0x123
 800c774:	4998      	ldr	r1, [pc, #608]	@ (800c9d8 <etharp_find_entry+0x2dc>)
 800c776:	4899      	ldr	r0, [pc, #612]	@ (800c9dc <etharp_find_entry+0x2e0>)
 800c778:	f002 fafa 	bl	800ed70 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d020      	beq.n	800c7c4 <etharp_find_entry+0xc8>
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	6819      	ldr	r1, [r3, #0]
 800c786:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c78a:	4891      	ldr	r0, [pc, #580]	@ (800c9d0 <etharp_find_entry+0x2d4>)
 800c78c:	4613      	mov	r3, r2
 800c78e:	005b      	lsls	r3, r3, #1
 800c790:	4413      	add	r3, r2
 800c792:	00db      	lsls	r3, r3, #3
 800c794:	4403      	add	r3, r0
 800c796:	3304      	adds	r3, #4
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	4299      	cmp	r1, r3
 800c79c:	d112      	bne.n	800c7c4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d00c      	beq.n	800c7be <etharp_find_entry+0xc2>
 800c7a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c7a8:	4989      	ldr	r1, [pc, #548]	@ (800c9d0 <etharp_find_entry+0x2d4>)
 800c7aa:	4613      	mov	r3, r2
 800c7ac:	005b      	lsls	r3, r3, #1
 800c7ae:	4413      	add	r3, r2
 800c7b0:	00db      	lsls	r3, r3, #3
 800c7b2:	440b      	add	r3, r1
 800c7b4:	3308      	adds	r3, #8
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	687a      	ldr	r2, [r7, #4]
 800c7ba:	429a      	cmp	r2, r3
 800c7bc:	d102      	bne.n	800c7c4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800c7be:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c7c2:	e100      	b.n	800c9c6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800c7c4:	7dfb      	ldrb	r3, [r7, #23]
 800c7c6:	2b01      	cmp	r3, #1
 800c7c8:	d140      	bne.n	800c84c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800c7ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c7ce:	4980      	ldr	r1, [pc, #512]	@ (800c9d0 <etharp_find_entry+0x2d4>)
 800c7d0:	4613      	mov	r3, r2
 800c7d2:	005b      	lsls	r3, r3, #1
 800c7d4:	4413      	add	r3, r2
 800c7d6:	00db      	lsls	r3, r3, #3
 800c7d8:	440b      	add	r3, r1
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d01a      	beq.n	800c816 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800c7e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c7e4:	497a      	ldr	r1, [pc, #488]	@ (800c9d0 <etharp_find_entry+0x2d4>)
 800c7e6:	4613      	mov	r3, r2
 800c7e8:	005b      	lsls	r3, r3, #1
 800c7ea:	4413      	add	r3, r2
 800c7ec:	00db      	lsls	r3, r3, #3
 800c7ee:	440b      	add	r3, r1
 800c7f0:	3312      	adds	r3, #18
 800c7f2:	881b      	ldrh	r3, [r3, #0]
 800c7f4:	8bba      	ldrh	r2, [r7, #28]
 800c7f6:	429a      	cmp	r2, r3
 800c7f8:	d845      	bhi.n	800c886 <etharp_find_entry+0x18a>
            old_queue = i;
 800c7fa:	8c3b      	ldrh	r3, [r7, #32]
 800c7fc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800c7fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c802:	4973      	ldr	r1, [pc, #460]	@ (800c9d0 <etharp_find_entry+0x2d4>)
 800c804:	4613      	mov	r3, r2
 800c806:	005b      	lsls	r3, r3, #1
 800c808:	4413      	add	r3, r2
 800c80a:	00db      	lsls	r3, r3, #3
 800c80c:	440b      	add	r3, r1
 800c80e:	3312      	adds	r3, #18
 800c810:	881b      	ldrh	r3, [r3, #0]
 800c812:	83bb      	strh	r3, [r7, #28]
 800c814:	e037      	b.n	800c886 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800c816:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c81a:	496d      	ldr	r1, [pc, #436]	@ (800c9d0 <etharp_find_entry+0x2d4>)
 800c81c:	4613      	mov	r3, r2
 800c81e:	005b      	lsls	r3, r3, #1
 800c820:	4413      	add	r3, r2
 800c822:	00db      	lsls	r3, r3, #3
 800c824:	440b      	add	r3, r1
 800c826:	3312      	adds	r3, #18
 800c828:	881b      	ldrh	r3, [r3, #0]
 800c82a:	8b7a      	ldrh	r2, [r7, #26]
 800c82c:	429a      	cmp	r2, r3
 800c82e:	d82a      	bhi.n	800c886 <etharp_find_entry+0x18a>
            old_pending = i;
 800c830:	8c3b      	ldrh	r3, [r7, #32]
 800c832:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800c834:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c838:	4965      	ldr	r1, [pc, #404]	@ (800c9d0 <etharp_find_entry+0x2d4>)
 800c83a:	4613      	mov	r3, r2
 800c83c:	005b      	lsls	r3, r3, #1
 800c83e:	4413      	add	r3, r2
 800c840:	00db      	lsls	r3, r3, #3
 800c842:	440b      	add	r3, r1
 800c844:	3312      	adds	r3, #18
 800c846:	881b      	ldrh	r3, [r3, #0]
 800c848:	837b      	strh	r3, [r7, #26]
 800c84a:	e01c      	b.n	800c886 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800c84c:	7dfb      	ldrb	r3, [r7, #23]
 800c84e:	2b01      	cmp	r3, #1
 800c850:	d919      	bls.n	800c886 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800c852:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c856:	495e      	ldr	r1, [pc, #376]	@ (800c9d0 <etharp_find_entry+0x2d4>)
 800c858:	4613      	mov	r3, r2
 800c85a:	005b      	lsls	r3, r3, #1
 800c85c:	4413      	add	r3, r2
 800c85e:	00db      	lsls	r3, r3, #3
 800c860:	440b      	add	r3, r1
 800c862:	3312      	adds	r3, #18
 800c864:	881b      	ldrh	r3, [r3, #0]
 800c866:	8b3a      	ldrh	r2, [r7, #24]
 800c868:	429a      	cmp	r2, r3
 800c86a:	d80c      	bhi.n	800c886 <etharp_find_entry+0x18a>
            old_stable = i;
 800c86c:	8c3b      	ldrh	r3, [r7, #32]
 800c86e:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800c870:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c874:	4956      	ldr	r1, [pc, #344]	@ (800c9d0 <etharp_find_entry+0x2d4>)
 800c876:	4613      	mov	r3, r2
 800c878:	005b      	lsls	r3, r3, #1
 800c87a:	4413      	add	r3, r2
 800c87c:	00db      	lsls	r3, r3, #3
 800c87e:	440b      	add	r3, r1
 800c880:	3312      	adds	r3, #18
 800c882:	881b      	ldrh	r3, [r3, #0]
 800c884:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c886:	8c3b      	ldrh	r3, [r7, #32]
 800c888:	3301      	adds	r3, #1
 800c88a:	b29b      	uxth	r3, r3
 800c88c:	843b      	strh	r3, [r7, #32]
 800c88e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c892:	2b09      	cmp	r3, #9
 800c894:	f77f af4c 	ble.w	800c730 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800c898:	7afb      	ldrb	r3, [r7, #11]
 800c89a:	f003 0302 	and.w	r3, r3, #2
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d108      	bne.n	800c8b4 <etharp_find_entry+0x1b8>
 800c8a2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800c8a6:	2b0a      	cmp	r3, #10
 800c8a8:	d107      	bne.n	800c8ba <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800c8aa:	7afb      	ldrb	r3, [r7, #11]
 800c8ac:	f003 0301 	and.w	r3, r3, #1
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d102      	bne.n	800c8ba <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800c8b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c8b8:	e085      	b.n	800c9c6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800c8ba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800c8be:	2b09      	cmp	r3, #9
 800c8c0:	dc02      	bgt.n	800c8c8 <etharp_find_entry+0x1cc>
    i = empty;
 800c8c2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c8c4:	843b      	strh	r3, [r7, #32]
 800c8c6:	e039      	b.n	800c93c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800c8c8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800c8cc:	2b09      	cmp	r3, #9
 800c8ce:	dc14      	bgt.n	800c8fa <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800c8d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c8d2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800c8d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c8d8:	493d      	ldr	r1, [pc, #244]	@ (800c9d0 <etharp_find_entry+0x2d4>)
 800c8da:	4613      	mov	r3, r2
 800c8dc:	005b      	lsls	r3, r3, #1
 800c8de:	4413      	add	r3, r2
 800c8e0:	00db      	lsls	r3, r3, #3
 800c8e2:	440b      	add	r3, r1
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d018      	beq.n	800c91c <etharp_find_entry+0x220>
 800c8ea:	4b3a      	ldr	r3, [pc, #232]	@ (800c9d4 <etharp_find_entry+0x2d8>)
 800c8ec:	f240 126d 	movw	r2, #365	@ 0x16d
 800c8f0:	493b      	ldr	r1, [pc, #236]	@ (800c9e0 <etharp_find_entry+0x2e4>)
 800c8f2:	483a      	ldr	r0, [pc, #232]	@ (800c9dc <etharp_find_entry+0x2e0>)
 800c8f4:	f002 fa3c 	bl	800ed70 <iprintf>
 800c8f8:	e010      	b.n	800c91c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800c8fa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800c8fe:	2b09      	cmp	r3, #9
 800c900:	dc02      	bgt.n	800c908 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800c902:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c904:	843b      	strh	r3, [r7, #32]
 800c906:	e009      	b.n	800c91c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800c908:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c90c:	2b09      	cmp	r3, #9
 800c90e:	dc02      	bgt.n	800c916 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800c910:	8bfb      	ldrh	r3, [r7, #30]
 800c912:	843b      	strh	r3, [r7, #32]
 800c914:	e002      	b.n	800c91c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800c916:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c91a:	e054      	b.n	800c9c6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c91c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c920:	2b09      	cmp	r3, #9
 800c922:	dd06      	ble.n	800c932 <etharp_find_entry+0x236>
 800c924:	4b2b      	ldr	r3, [pc, #172]	@ (800c9d4 <etharp_find_entry+0x2d8>)
 800c926:	f240 127f 	movw	r2, #383	@ 0x17f
 800c92a:	492e      	ldr	r1, [pc, #184]	@ (800c9e4 <etharp_find_entry+0x2e8>)
 800c92c:	482b      	ldr	r0, [pc, #172]	@ (800c9dc <etharp_find_entry+0x2e0>)
 800c92e:	f002 fa1f 	bl	800ed70 <iprintf>
    etharp_free_entry(i);
 800c932:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c936:	4618      	mov	r0, r3
 800c938:	f7ff fe06 	bl	800c548 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c93c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c940:	2b09      	cmp	r3, #9
 800c942:	dd06      	ble.n	800c952 <etharp_find_entry+0x256>
 800c944:	4b23      	ldr	r3, [pc, #140]	@ (800c9d4 <etharp_find_entry+0x2d8>)
 800c946:	f240 1283 	movw	r2, #387	@ 0x183
 800c94a:	4926      	ldr	r1, [pc, #152]	@ (800c9e4 <etharp_find_entry+0x2e8>)
 800c94c:	4823      	ldr	r0, [pc, #140]	@ (800c9dc <etharp_find_entry+0x2e0>)
 800c94e:	f002 fa0f 	bl	800ed70 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c952:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c956:	491e      	ldr	r1, [pc, #120]	@ (800c9d0 <etharp_find_entry+0x2d4>)
 800c958:	4613      	mov	r3, r2
 800c95a:	005b      	lsls	r3, r3, #1
 800c95c:	4413      	add	r3, r2
 800c95e:	00db      	lsls	r3, r3, #3
 800c960:	440b      	add	r3, r1
 800c962:	3314      	adds	r3, #20
 800c964:	781b      	ldrb	r3, [r3, #0]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d006      	beq.n	800c978 <etharp_find_entry+0x27c>
 800c96a:	4b1a      	ldr	r3, [pc, #104]	@ (800c9d4 <etharp_find_entry+0x2d8>)
 800c96c:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800c970:	491d      	ldr	r1, [pc, #116]	@ (800c9e8 <etharp_find_entry+0x2ec>)
 800c972:	481a      	ldr	r0, [pc, #104]	@ (800c9dc <etharp_find_entry+0x2e0>)
 800c974:	f002 f9fc 	bl	800ed70 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d00b      	beq.n	800c996 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800c97e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	6819      	ldr	r1, [r3, #0]
 800c986:	4812      	ldr	r0, [pc, #72]	@ (800c9d0 <etharp_find_entry+0x2d4>)
 800c988:	4613      	mov	r3, r2
 800c98a:	005b      	lsls	r3, r3, #1
 800c98c:	4413      	add	r3, r2
 800c98e:	00db      	lsls	r3, r3, #3
 800c990:	4403      	add	r3, r0
 800c992:	3304      	adds	r3, #4
 800c994:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800c996:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c99a:	490d      	ldr	r1, [pc, #52]	@ (800c9d0 <etharp_find_entry+0x2d4>)
 800c99c:	4613      	mov	r3, r2
 800c99e:	005b      	lsls	r3, r3, #1
 800c9a0:	4413      	add	r3, r2
 800c9a2:	00db      	lsls	r3, r3, #3
 800c9a4:	440b      	add	r3, r1
 800c9a6:	3312      	adds	r3, #18
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800c9ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c9b0:	4907      	ldr	r1, [pc, #28]	@ (800c9d0 <etharp_find_entry+0x2d4>)
 800c9b2:	4613      	mov	r3, r2
 800c9b4:	005b      	lsls	r3, r3, #1
 800c9b6:	4413      	add	r3, r2
 800c9b8:	00db      	lsls	r3, r3, #3
 800c9ba:	440b      	add	r3, r1
 800c9bc:	3308      	adds	r3, #8
 800c9be:	687a      	ldr	r2, [r7, #4]
 800c9c0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800c9c2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	3728      	adds	r7, #40	@ 0x28
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}
 800c9ce:	bf00      	nop
 800c9d0:	20007ca0 	.word	0x20007ca0
 800c9d4:	080111e8 	.word	0x080111e8
 800c9d8:	08011220 	.word	0x08011220
 800c9dc:	08011260 	.word	0x08011260
 800c9e0:	08011288 	.word	0x08011288
 800c9e4:	080112a0 	.word	0x080112a0
 800c9e8:	080112b4 	.word	0x080112b4

0800c9ec <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b088      	sub	sp, #32
 800c9f0:	af02      	add	r7, sp, #8
 800c9f2:	60f8      	str	r0, [r7, #12]
 800c9f4:	60b9      	str	r1, [r7, #8]
 800c9f6:	607a      	str	r2, [r7, #4]
 800c9f8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ca00:	2b06      	cmp	r3, #6
 800ca02:	d006      	beq.n	800ca12 <etharp_update_arp_entry+0x26>
 800ca04:	4b48      	ldr	r3, [pc, #288]	@ (800cb28 <etharp_update_arp_entry+0x13c>)
 800ca06:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800ca0a:	4948      	ldr	r1, [pc, #288]	@ (800cb2c <etharp_update_arp_entry+0x140>)
 800ca0c:	4848      	ldr	r0, [pc, #288]	@ (800cb30 <etharp_update_arp_entry+0x144>)
 800ca0e:	f002 f9af 	bl	800ed70 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800ca12:	68bb      	ldr	r3, [r7, #8]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d012      	beq.n	800ca3e <etharp_update_arp_entry+0x52>
 800ca18:	68bb      	ldr	r3, [r7, #8]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d00e      	beq.n	800ca3e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	68f9      	ldr	r1, [r7, #12]
 800ca26:	4618      	mov	r0, r3
 800ca28:	f001 f8f4 	bl	800dc14 <ip4_addr_isbroadcast_u32>
 800ca2c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d105      	bne.n	800ca3e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800ca32:	68bb      	ldr	r3, [r7, #8]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800ca3a:	2be0      	cmp	r3, #224	@ 0xe0
 800ca3c:	d102      	bne.n	800ca44 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800ca3e:	f06f 030f 	mvn.w	r3, #15
 800ca42:	e06c      	b.n	800cb1e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800ca44:	78fb      	ldrb	r3, [r7, #3]
 800ca46:	68fa      	ldr	r2, [r7, #12]
 800ca48:	4619      	mov	r1, r3
 800ca4a:	68b8      	ldr	r0, [r7, #8]
 800ca4c:	f7ff fe56 	bl	800c6fc <etharp_find_entry>
 800ca50:	4603      	mov	r3, r0
 800ca52:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800ca54:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	da02      	bge.n	800ca62 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800ca5c:	8afb      	ldrh	r3, [r7, #22]
 800ca5e:	b25b      	sxtb	r3, r3
 800ca60:	e05d      	b.n	800cb1e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800ca62:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ca66:	4933      	ldr	r1, [pc, #204]	@ (800cb34 <etharp_update_arp_entry+0x148>)
 800ca68:	4613      	mov	r3, r2
 800ca6a:	005b      	lsls	r3, r3, #1
 800ca6c:	4413      	add	r3, r2
 800ca6e:	00db      	lsls	r3, r3, #3
 800ca70:	440b      	add	r3, r1
 800ca72:	3314      	adds	r3, #20
 800ca74:	2202      	movs	r2, #2
 800ca76:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800ca78:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ca7c:	492d      	ldr	r1, [pc, #180]	@ (800cb34 <etharp_update_arp_entry+0x148>)
 800ca7e:	4613      	mov	r3, r2
 800ca80:	005b      	lsls	r3, r3, #1
 800ca82:	4413      	add	r3, r2
 800ca84:	00db      	lsls	r3, r3, #3
 800ca86:	440b      	add	r3, r1
 800ca88:	3308      	adds	r3, #8
 800ca8a:	68fa      	ldr	r2, [r7, #12]
 800ca8c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800ca8e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ca92:	4613      	mov	r3, r2
 800ca94:	005b      	lsls	r3, r3, #1
 800ca96:	4413      	add	r3, r2
 800ca98:	00db      	lsls	r3, r3, #3
 800ca9a:	3308      	adds	r3, #8
 800ca9c:	4a25      	ldr	r2, [pc, #148]	@ (800cb34 <etharp_update_arp_entry+0x148>)
 800ca9e:	4413      	add	r3, r2
 800caa0:	3304      	adds	r3, #4
 800caa2:	2206      	movs	r2, #6
 800caa4:	6879      	ldr	r1, [r7, #4]
 800caa6:	4618      	mov	r0, r3
 800caa8:	f002 fa55 	bl	800ef56 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800caac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cab0:	4920      	ldr	r1, [pc, #128]	@ (800cb34 <etharp_update_arp_entry+0x148>)
 800cab2:	4613      	mov	r3, r2
 800cab4:	005b      	lsls	r3, r3, #1
 800cab6:	4413      	add	r3, r2
 800cab8:	00db      	lsls	r3, r3, #3
 800caba:	440b      	add	r3, r1
 800cabc:	3312      	adds	r3, #18
 800cabe:	2200      	movs	r2, #0
 800cac0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800cac2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cac6:	491b      	ldr	r1, [pc, #108]	@ (800cb34 <etharp_update_arp_entry+0x148>)
 800cac8:	4613      	mov	r3, r2
 800caca:	005b      	lsls	r3, r3, #1
 800cacc:	4413      	add	r3, r2
 800cace:	00db      	lsls	r3, r3, #3
 800cad0:	440b      	add	r3, r1
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d021      	beq.n	800cb1c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800cad8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cadc:	4915      	ldr	r1, [pc, #84]	@ (800cb34 <etharp_update_arp_entry+0x148>)
 800cade:	4613      	mov	r3, r2
 800cae0:	005b      	lsls	r3, r3, #1
 800cae2:	4413      	add	r3, r2
 800cae4:	00db      	lsls	r3, r3, #3
 800cae6:	440b      	add	r3, r1
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800caec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800caf0:	4910      	ldr	r1, [pc, #64]	@ (800cb34 <etharp_update_arp_entry+0x148>)
 800caf2:	4613      	mov	r3, r2
 800caf4:	005b      	lsls	r3, r3, #1
 800caf6:	4413      	add	r3, r2
 800caf8:	00db      	lsls	r3, r3, #3
 800cafa:	440b      	add	r3, r1
 800cafc:	2200      	movs	r2, #0
 800cafe:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800cb06:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800cb0a:	9300      	str	r3, [sp, #0]
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	6939      	ldr	r1, [r7, #16]
 800cb10:	68f8      	ldr	r0, [r7, #12]
 800cb12:	f001 ff8d 	bl	800ea30 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800cb16:	6938      	ldr	r0, [r7, #16]
 800cb18:	f7fe fd1e 	bl	800b558 <pbuf_free>
  }
  return ERR_OK;
 800cb1c:	2300      	movs	r3, #0
}
 800cb1e:	4618      	mov	r0, r3
 800cb20:	3718      	adds	r7, #24
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd80      	pop	{r7, pc}
 800cb26:	bf00      	nop
 800cb28:	080111e8 	.word	0x080111e8
 800cb2c:	080112e0 	.word	0x080112e0
 800cb30:	08011260 	.word	0x08011260
 800cb34:	20007ca0 	.word	0x20007ca0

0800cb38 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b084      	sub	sp, #16
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cb40:	2300      	movs	r3, #0
 800cb42:	60fb      	str	r3, [r7, #12]
 800cb44:	e01e      	b.n	800cb84 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800cb46:	4913      	ldr	r1, [pc, #76]	@ (800cb94 <etharp_cleanup_netif+0x5c>)
 800cb48:	68fa      	ldr	r2, [r7, #12]
 800cb4a:	4613      	mov	r3, r2
 800cb4c:	005b      	lsls	r3, r3, #1
 800cb4e:	4413      	add	r3, r2
 800cb50:	00db      	lsls	r3, r3, #3
 800cb52:	440b      	add	r3, r1
 800cb54:	3314      	adds	r3, #20
 800cb56:	781b      	ldrb	r3, [r3, #0]
 800cb58:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800cb5a:	7afb      	ldrb	r3, [r7, #11]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d00e      	beq.n	800cb7e <etharp_cleanup_netif+0x46>
 800cb60:	490c      	ldr	r1, [pc, #48]	@ (800cb94 <etharp_cleanup_netif+0x5c>)
 800cb62:	68fa      	ldr	r2, [r7, #12]
 800cb64:	4613      	mov	r3, r2
 800cb66:	005b      	lsls	r3, r3, #1
 800cb68:	4413      	add	r3, r2
 800cb6a:	00db      	lsls	r3, r3, #3
 800cb6c:	440b      	add	r3, r1
 800cb6e:	3308      	adds	r3, #8
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	687a      	ldr	r2, [r7, #4]
 800cb74:	429a      	cmp	r2, r3
 800cb76:	d102      	bne.n	800cb7e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800cb78:	68f8      	ldr	r0, [r7, #12]
 800cb7a:	f7ff fce5 	bl	800c548 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	3301      	adds	r3, #1
 800cb82:	60fb      	str	r3, [r7, #12]
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	2b09      	cmp	r3, #9
 800cb88:	dddd      	ble.n	800cb46 <etharp_cleanup_netif+0xe>
    }
  }
}
 800cb8a:	bf00      	nop
 800cb8c:	bf00      	nop
 800cb8e:	3710      	adds	r7, #16
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bd80      	pop	{r7, pc}
 800cb94:	20007ca0 	.word	0x20007ca0

0800cb98 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800cb98:	b5b0      	push	{r4, r5, r7, lr}
 800cb9a:	b08a      	sub	sp, #40	@ 0x28
 800cb9c:	af04      	add	r7, sp, #16
 800cb9e:	6078      	str	r0, [r7, #4]
 800cba0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d107      	bne.n	800cbb8 <etharp_input+0x20>
 800cba8:	4b3d      	ldr	r3, [pc, #244]	@ (800cca0 <etharp_input+0x108>)
 800cbaa:	f240 228a 	movw	r2, #650	@ 0x28a
 800cbae:	493d      	ldr	r1, [pc, #244]	@ (800cca4 <etharp_input+0x10c>)
 800cbb0:	483d      	ldr	r0, [pc, #244]	@ (800cca8 <etharp_input+0x110>)
 800cbb2:	f002 f8dd 	bl	800ed70 <iprintf>
 800cbb6:	e06f      	b.n	800cc98 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	685b      	ldr	r3, [r3, #4]
 800cbbc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800cbbe:	693b      	ldr	r3, [r7, #16]
 800cbc0:	881b      	ldrh	r3, [r3, #0]
 800cbc2:	b29b      	uxth	r3, r3
 800cbc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cbc8:	d10c      	bne.n	800cbe4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800cbca:	693b      	ldr	r3, [r7, #16]
 800cbcc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800cbce:	2b06      	cmp	r3, #6
 800cbd0:	d108      	bne.n	800cbe4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800cbd6:	2b04      	cmp	r3, #4
 800cbd8:	d104      	bne.n	800cbe4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800cbda:	693b      	ldr	r3, [r7, #16]
 800cbdc:	885b      	ldrh	r3, [r3, #2]
 800cbde:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800cbe0:	2b08      	cmp	r3, #8
 800cbe2:	d003      	beq.n	800cbec <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800cbe4:	6878      	ldr	r0, [r7, #4]
 800cbe6:	f7fe fcb7 	bl	800b558 <pbuf_free>
    return;
 800cbea:	e055      	b.n	800cc98 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800cbec:	693b      	ldr	r3, [r7, #16]
 800cbee:	330e      	adds	r3, #14
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800cbf4:	693b      	ldr	r3, [r7, #16]
 800cbf6:	3318      	adds	r3, #24
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	3304      	adds	r3, #4
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d102      	bne.n	800cc0c <etharp_input+0x74>
    for_us = 0;
 800cc06:	2300      	movs	r3, #0
 800cc08:	75fb      	strb	r3, [r7, #23]
 800cc0a:	e009      	b.n	800cc20 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800cc0c:	68ba      	ldr	r2, [r7, #8]
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	3304      	adds	r3, #4
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	429a      	cmp	r2, r3
 800cc16:	bf0c      	ite	eq
 800cc18:	2301      	moveq	r3, #1
 800cc1a:	2300      	movne	r3, #0
 800cc1c:	b2db      	uxtb	r3, r3
 800cc1e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800cc20:	693b      	ldr	r3, [r7, #16]
 800cc22:	f103 0208 	add.w	r2, r3, #8
 800cc26:	7dfb      	ldrb	r3, [r7, #23]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d001      	beq.n	800cc30 <etharp_input+0x98>
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	e000      	b.n	800cc32 <etharp_input+0x9a>
 800cc30:	2302      	movs	r3, #2
 800cc32:	f107 010c 	add.w	r1, r7, #12
 800cc36:	6838      	ldr	r0, [r7, #0]
 800cc38:	f7ff fed8 	bl	800c9ec <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800cc3c:	693b      	ldr	r3, [r7, #16]
 800cc3e:	88db      	ldrh	r3, [r3, #6]
 800cc40:	b29b      	uxth	r3, r3
 800cc42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cc46:	d003      	beq.n	800cc50 <etharp_input+0xb8>
 800cc48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cc4c:	d01e      	beq.n	800cc8c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800cc4e:	e020      	b.n	800cc92 <etharp_input+0xfa>
      if (for_us) {
 800cc50:	7dfb      	ldrb	r3, [r7, #23]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d01c      	beq.n	800cc90 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800cc56:	683b      	ldr	r3, [r7, #0]
 800cc58:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800cc5c:	693b      	ldr	r3, [r7, #16]
 800cc5e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800cc6c:	693a      	ldr	r2, [r7, #16]
 800cc6e:	3208      	adds	r2, #8
        etharp_raw(netif,
 800cc70:	2102      	movs	r1, #2
 800cc72:	9103      	str	r1, [sp, #12]
 800cc74:	f107 010c 	add.w	r1, r7, #12
 800cc78:	9102      	str	r1, [sp, #8]
 800cc7a:	9201      	str	r2, [sp, #4]
 800cc7c:	9300      	str	r3, [sp, #0]
 800cc7e:	462b      	mov	r3, r5
 800cc80:	4622      	mov	r2, r4
 800cc82:	4601      	mov	r1, r0
 800cc84:	6838      	ldr	r0, [r7, #0]
 800cc86:	f000 faeb 	bl	800d260 <etharp_raw>
      break;
 800cc8a:	e001      	b.n	800cc90 <etharp_input+0xf8>
      break;
 800cc8c:	bf00      	nop
 800cc8e:	e000      	b.n	800cc92 <etharp_input+0xfa>
      break;
 800cc90:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800cc92:	6878      	ldr	r0, [r7, #4]
 800cc94:	f7fe fc60 	bl	800b558 <pbuf_free>
}
 800cc98:	3718      	adds	r7, #24
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bdb0      	pop	{r4, r5, r7, pc}
 800cc9e:	bf00      	nop
 800cca0:	080111e8 	.word	0x080111e8
 800cca4:	08011338 	.word	0x08011338
 800cca8:	08011260 	.word	0x08011260

0800ccac <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b086      	sub	sp, #24
 800ccb0:	af02      	add	r7, sp, #8
 800ccb2:	60f8      	str	r0, [r7, #12]
 800ccb4:	60b9      	str	r1, [r7, #8]
 800ccb6:	4613      	mov	r3, r2
 800ccb8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800ccba:	79fa      	ldrb	r2, [r7, #7]
 800ccbc:	4944      	ldr	r1, [pc, #272]	@ (800cdd0 <etharp_output_to_arp_index+0x124>)
 800ccbe:	4613      	mov	r3, r2
 800ccc0:	005b      	lsls	r3, r3, #1
 800ccc2:	4413      	add	r3, r2
 800ccc4:	00db      	lsls	r3, r3, #3
 800ccc6:	440b      	add	r3, r1
 800ccc8:	3314      	adds	r3, #20
 800ccca:	781b      	ldrb	r3, [r3, #0]
 800cccc:	2b01      	cmp	r3, #1
 800ccce:	d806      	bhi.n	800ccde <etharp_output_to_arp_index+0x32>
 800ccd0:	4b40      	ldr	r3, [pc, #256]	@ (800cdd4 <etharp_output_to_arp_index+0x128>)
 800ccd2:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800ccd6:	4940      	ldr	r1, [pc, #256]	@ (800cdd8 <etharp_output_to_arp_index+0x12c>)
 800ccd8:	4840      	ldr	r0, [pc, #256]	@ (800cddc <etharp_output_to_arp_index+0x130>)
 800ccda:	f002 f849 	bl	800ed70 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800ccde:	79fa      	ldrb	r2, [r7, #7]
 800cce0:	493b      	ldr	r1, [pc, #236]	@ (800cdd0 <etharp_output_to_arp_index+0x124>)
 800cce2:	4613      	mov	r3, r2
 800cce4:	005b      	lsls	r3, r3, #1
 800cce6:	4413      	add	r3, r2
 800cce8:	00db      	lsls	r3, r3, #3
 800ccea:	440b      	add	r3, r1
 800ccec:	3314      	adds	r3, #20
 800ccee:	781b      	ldrb	r3, [r3, #0]
 800ccf0:	2b02      	cmp	r3, #2
 800ccf2:	d153      	bne.n	800cd9c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800ccf4:	79fa      	ldrb	r2, [r7, #7]
 800ccf6:	4936      	ldr	r1, [pc, #216]	@ (800cdd0 <etharp_output_to_arp_index+0x124>)
 800ccf8:	4613      	mov	r3, r2
 800ccfa:	005b      	lsls	r3, r3, #1
 800ccfc:	4413      	add	r3, r2
 800ccfe:	00db      	lsls	r3, r3, #3
 800cd00:	440b      	add	r3, r1
 800cd02:	3312      	adds	r3, #18
 800cd04:	881b      	ldrh	r3, [r3, #0]
 800cd06:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800cd0a:	d919      	bls.n	800cd40 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800cd0c:	79fa      	ldrb	r2, [r7, #7]
 800cd0e:	4613      	mov	r3, r2
 800cd10:	005b      	lsls	r3, r3, #1
 800cd12:	4413      	add	r3, r2
 800cd14:	00db      	lsls	r3, r3, #3
 800cd16:	4a2e      	ldr	r2, [pc, #184]	@ (800cdd0 <etharp_output_to_arp_index+0x124>)
 800cd18:	4413      	add	r3, r2
 800cd1a:	3304      	adds	r3, #4
 800cd1c:	4619      	mov	r1, r3
 800cd1e:	68f8      	ldr	r0, [r7, #12]
 800cd20:	f000 fb4c 	bl	800d3bc <etharp_request>
 800cd24:	4603      	mov	r3, r0
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d138      	bne.n	800cd9c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800cd2a:	79fa      	ldrb	r2, [r7, #7]
 800cd2c:	4928      	ldr	r1, [pc, #160]	@ (800cdd0 <etharp_output_to_arp_index+0x124>)
 800cd2e:	4613      	mov	r3, r2
 800cd30:	005b      	lsls	r3, r3, #1
 800cd32:	4413      	add	r3, r2
 800cd34:	00db      	lsls	r3, r3, #3
 800cd36:	440b      	add	r3, r1
 800cd38:	3314      	adds	r3, #20
 800cd3a:	2203      	movs	r2, #3
 800cd3c:	701a      	strb	r2, [r3, #0]
 800cd3e:	e02d      	b.n	800cd9c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800cd40:	79fa      	ldrb	r2, [r7, #7]
 800cd42:	4923      	ldr	r1, [pc, #140]	@ (800cdd0 <etharp_output_to_arp_index+0x124>)
 800cd44:	4613      	mov	r3, r2
 800cd46:	005b      	lsls	r3, r3, #1
 800cd48:	4413      	add	r3, r2
 800cd4a:	00db      	lsls	r3, r3, #3
 800cd4c:	440b      	add	r3, r1
 800cd4e:	3312      	adds	r3, #18
 800cd50:	881b      	ldrh	r3, [r3, #0]
 800cd52:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800cd56:	d321      	bcc.n	800cd9c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800cd58:	79fa      	ldrb	r2, [r7, #7]
 800cd5a:	4613      	mov	r3, r2
 800cd5c:	005b      	lsls	r3, r3, #1
 800cd5e:	4413      	add	r3, r2
 800cd60:	00db      	lsls	r3, r3, #3
 800cd62:	4a1b      	ldr	r2, [pc, #108]	@ (800cdd0 <etharp_output_to_arp_index+0x124>)
 800cd64:	4413      	add	r3, r2
 800cd66:	1d19      	adds	r1, r3, #4
 800cd68:	79fa      	ldrb	r2, [r7, #7]
 800cd6a:	4613      	mov	r3, r2
 800cd6c:	005b      	lsls	r3, r3, #1
 800cd6e:	4413      	add	r3, r2
 800cd70:	00db      	lsls	r3, r3, #3
 800cd72:	3308      	adds	r3, #8
 800cd74:	4a16      	ldr	r2, [pc, #88]	@ (800cdd0 <etharp_output_to_arp_index+0x124>)
 800cd76:	4413      	add	r3, r2
 800cd78:	3304      	adds	r3, #4
 800cd7a:	461a      	mov	r2, r3
 800cd7c:	68f8      	ldr	r0, [r7, #12]
 800cd7e:	f000 fafb 	bl	800d378 <etharp_request_dst>
 800cd82:	4603      	mov	r3, r0
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d109      	bne.n	800cd9c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800cd88:	79fa      	ldrb	r2, [r7, #7]
 800cd8a:	4911      	ldr	r1, [pc, #68]	@ (800cdd0 <etharp_output_to_arp_index+0x124>)
 800cd8c:	4613      	mov	r3, r2
 800cd8e:	005b      	lsls	r3, r3, #1
 800cd90:	4413      	add	r3, r2
 800cd92:	00db      	lsls	r3, r3, #3
 800cd94:	440b      	add	r3, r1
 800cd96:	3314      	adds	r3, #20
 800cd98:	2203      	movs	r2, #3
 800cd9a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800cda2:	79fa      	ldrb	r2, [r7, #7]
 800cda4:	4613      	mov	r3, r2
 800cda6:	005b      	lsls	r3, r3, #1
 800cda8:	4413      	add	r3, r2
 800cdaa:	00db      	lsls	r3, r3, #3
 800cdac:	3308      	adds	r3, #8
 800cdae:	4a08      	ldr	r2, [pc, #32]	@ (800cdd0 <etharp_output_to_arp_index+0x124>)
 800cdb0:	4413      	add	r3, r2
 800cdb2:	3304      	adds	r3, #4
 800cdb4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cdb8:	9200      	str	r2, [sp, #0]
 800cdba:	460a      	mov	r2, r1
 800cdbc:	68b9      	ldr	r1, [r7, #8]
 800cdbe:	68f8      	ldr	r0, [r7, #12]
 800cdc0:	f001 fe36 	bl	800ea30 <ethernet_output>
 800cdc4:	4603      	mov	r3, r0
}
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	3710      	adds	r7, #16
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}
 800cdce:	bf00      	nop
 800cdd0:	20007ca0 	.word	0x20007ca0
 800cdd4:	080111e8 	.word	0x080111e8
 800cdd8:	08011358 	.word	0x08011358
 800cddc:	08011260 	.word	0x08011260

0800cde0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b08a      	sub	sp, #40	@ 0x28
 800cde4:	af02      	add	r7, sp, #8
 800cde6:	60f8      	str	r0, [r7, #12]
 800cde8:	60b9      	str	r1, [r7, #8]
 800cdea:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d106      	bne.n	800ce04 <etharp_output+0x24>
 800cdf6:	4b73      	ldr	r3, [pc, #460]	@ (800cfc4 <etharp_output+0x1e4>)
 800cdf8:	f240 321e 	movw	r2, #798	@ 0x31e
 800cdfc:	4972      	ldr	r1, [pc, #456]	@ (800cfc8 <etharp_output+0x1e8>)
 800cdfe:	4873      	ldr	r0, [pc, #460]	@ (800cfcc <etharp_output+0x1ec>)
 800ce00:	f001 ffb6 	bl	800ed70 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d106      	bne.n	800ce18 <etharp_output+0x38>
 800ce0a:	4b6e      	ldr	r3, [pc, #440]	@ (800cfc4 <etharp_output+0x1e4>)
 800ce0c:	f240 321f 	movw	r2, #799	@ 0x31f
 800ce10:	496f      	ldr	r1, [pc, #444]	@ (800cfd0 <etharp_output+0x1f0>)
 800ce12:	486e      	ldr	r0, [pc, #440]	@ (800cfcc <etharp_output+0x1ec>)
 800ce14:	f001 ffac 	bl	800ed70 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d106      	bne.n	800ce2c <etharp_output+0x4c>
 800ce1e:	4b69      	ldr	r3, [pc, #420]	@ (800cfc4 <etharp_output+0x1e4>)
 800ce20:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800ce24:	496b      	ldr	r1, [pc, #428]	@ (800cfd4 <etharp_output+0x1f4>)
 800ce26:	4869      	ldr	r0, [pc, #420]	@ (800cfcc <etharp_output+0x1ec>)
 800ce28:	f001 ffa2 	bl	800ed70 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	68f9      	ldr	r1, [r7, #12]
 800ce32:	4618      	mov	r0, r3
 800ce34:	f000 feee 	bl	800dc14 <ip4_addr_isbroadcast_u32>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d002      	beq.n	800ce44 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800ce3e:	4b66      	ldr	r3, [pc, #408]	@ (800cfd8 <etharp_output+0x1f8>)
 800ce40:	61fb      	str	r3, [r7, #28]
 800ce42:	e0af      	b.n	800cfa4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ce4c:	2be0      	cmp	r3, #224	@ 0xe0
 800ce4e:	d118      	bne.n	800ce82 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800ce50:	2301      	movs	r3, #1
 800ce52:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800ce54:	2300      	movs	r3, #0
 800ce56:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800ce58:	235e      	movs	r3, #94	@ 0x5e
 800ce5a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	3301      	adds	r3, #1
 800ce60:	781b      	ldrb	r3, [r3, #0]
 800ce62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ce66:	b2db      	uxtb	r3, r3
 800ce68:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	3302      	adds	r3, #2
 800ce6e:	781b      	ldrb	r3, [r3, #0]
 800ce70:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	3303      	adds	r3, #3
 800ce76:	781b      	ldrb	r3, [r3, #0]
 800ce78:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800ce7a:	f107 0310 	add.w	r3, r7, #16
 800ce7e:	61fb      	str	r3, [r7, #28]
 800ce80:	e090      	b.n	800cfa4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681a      	ldr	r2, [r3, #0]
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	3304      	adds	r3, #4
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	405a      	eors	r2, r3
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	3308      	adds	r3, #8
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	4013      	ands	r3, r2
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d012      	beq.n	800cec0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cea0:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800cea4:	4293      	cmp	r3, r2
 800cea6:	d00b      	beq.n	800cec0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	330c      	adds	r3, #12
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d003      	beq.n	800ceba <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	330c      	adds	r3, #12
 800ceb6:	61bb      	str	r3, [r7, #24]
 800ceb8:	e002      	b.n	800cec0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800ceba:	f06f 0303 	mvn.w	r3, #3
 800cebe:	e07d      	b.n	800cfbc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800cec0:	4b46      	ldr	r3, [pc, #280]	@ (800cfdc <etharp_output+0x1fc>)
 800cec2:	781b      	ldrb	r3, [r3, #0]
 800cec4:	4619      	mov	r1, r3
 800cec6:	4a46      	ldr	r2, [pc, #280]	@ (800cfe0 <etharp_output+0x200>)
 800cec8:	460b      	mov	r3, r1
 800ceca:	005b      	lsls	r3, r3, #1
 800cecc:	440b      	add	r3, r1
 800cece:	00db      	lsls	r3, r3, #3
 800ced0:	4413      	add	r3, r2
 800ced2:	3314      	adds	r3, #20
 800ced4:	781b      	ldrb	r3, [r3, #0]
 800ced6:	2b01      	cmp	r3, #1
 800ced8:	d925      	bls.n	800cf26 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ceda:	4b40      	ldr	r3, [pc, #256]	@ (800cfdc <etharp_output+0x1fc>)
 800cedc:	781b      	ldrb	r3, [r3, #0]
 800cede:	4619      	mov	r1, r3
 800cee0:	4a3f      	ldr	r2, [pc, #252]	@ (800cfe0 <etharp_output+0x200>)
 800cee2:	460b      	mov	r3, r1
 800cee4:	005b      	lsls	r3, r3, #1
 800cee6:	440b      	add	r3, r1
 800cee8:	00db      	lsls	r3, r3, #3
 800ceea:	4413      	add	r3, r2
 800ceec:	3308      	adds	r3, #8
 800ceee:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800cef0:	68fa      	ldr	r2, [r7, #12]
 800cef2:	429a      	cmp	r2, r3
 800cef4:	d117      	bne.n	800cf26 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800cef6:	69bb      	ldr	r3, [r7, #24]
 800cef8:	681a      	ldr	r2, [r3, #0]
 800cefa:	4b38      	ldr	r3, [pc, #224]	@ (800cfdc <etharp_output+0x1fc>)
 800cefc:	781b      	ldrb	r3, [r3, #0]
 800cefe:	4618      	mov	r0, r3
 800cf00:	4937      	ldr	r1, [pc, #220]	@ (800cfe0 <etharp_output+0x200>)
 800cf02:	4603      	mov	r3, r0
 800cf04:	005b      	lsls	r3, r3, #1
 800cf06:	4403      	add	r3, r0
 800cf08:	00db      	lsls	r3, r3, #3
 800cf0a:	440b      	add	r3, r1
 800cf0c:	3304      	adds	r3, #4
 800cf0e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800cf10:	429a      	cmp	r2, r3
 800cf12:	d108      	bne.n	800cf26 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800cf14:	4b31      	ldr	r3, [pc, #196]	@ (800cfdc <etharp_output+0x1fc>)
 800cf16:	781b      	ldrb	r3, [r3, #0]
 800cf18:	461a      	mov	r2, r3
 800cf1a:	68b9      	ldr	r1, [r7, #8]
 800cf1c:	68f8      	ldr	r0, [r7, #12]
 800cf1e:	f7ff fec5 	bl	800ccac <etharp_output_to_arp_index>
 800cf22:	4603      	mov	r3, r0
 800cf24:	e04a      	b.n	800cfbc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800cf26:	2300      	movs	r3, #0
 800cf28:	75fb      	strb	r3, [r7, #23]
 800cf2a:	e031      	b.n	800cf90 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800cf2c:	7dfa      	ldrb	r2, [r7, #23]
 800cf2e:	492c      	ldr	r1, [pc, #176]	@ (800cfe0 <etharp_output+0x200>)
 800cf30:	4613      	mov	r3, r2
 800cf32:	005b      	lsls	r3, r3, #1
 800cf34:	4413      	add	r3, r2
 800cf36:	00db      	lsls	r3, r3, #3
 800cf38:	440b      	add	r3, r1
 800cf3a:	3314      	adds	r3, #20
 800cf3c:	781b      	ldrb	r3, [r3, #0]
 800cf3e:	2b01      	cmp	r3, #1
 800cf40:	d923      	bls.n	800cf8a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800cf42:	7dfa      	ldrb	r2, [r7, #23]
 800cf44:	4926      	ldr	r1, [pc, #152]	@ (800cfe0 <etharp_output+0x200>)
 800cf46:	4613      	mov	r3, r2
 800cf48:	005b      	lsls	r3, r3, #1
 800cf4a:	4413      	add	r3, r2
 800cf4c:	00db      	lsls	r3, r3, #3
 800cf4e:	440b      	add	r3, r1
 800cf50:	3308      	adds	r3, #8
 800cf52:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800cf54:	68fa      	ldr	r2, [r7, #12]
 800cf56:	429a      	cmp	r2, r3
 800cf58:	d117      	bne.n	800cf8a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800cf5a:	69bb      	ldr	r3, [r7, #24]
 800cf5c:	6819      	ldr	r1, [r3, #0]
 800cf5e:	7dfa      	ldrb	r2, [r7, #23]
 800cf60:	481f      	ldr	r0, [pc, #124]	@ (800cfe0 <etharp_output+0x200>)
 800cf62:	4613      	mov	r3, r2
 800cf64:	005b      	lsls	r3, r3, #1
 800cf66:	4413      	add	r3, r2
 800cf68:	00db      	lsls	r3, r3, #3
 800cf6a:	4403      	add	r3, r0
 800cf6c:	3304      	adds	r3, #4
 800cf6e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800cf70:	4299      	cmp	r1, r3
 800cf72:	d10a      	bne.n	800cf8a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800cf74:	4a19      	ldr	r2, [pc, #100]	@ (800cfdc <etharp_output+0x1fc>)
 800cf76:	7dfb      	ldrb	r3, [r7, #23]
 800cf78:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800cf7a:	7dfb      	ldrb	r3, [r7, #23]
 800cf7c:	461a      	mov	r2, r3
 800cf7e:	68b9      	ldr	r1, [r7, #8]
 800cf80:	68f8      	ldr	r0, [r7, #12]
 800cf82:	f7ff fe93 	bl	800ccac <etharp_output_to_arp_index>
 800cf86:	4603      	mov	r3, r0
 800cf88:	e018      	b.n	800cfbc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800cf8a:	7dfb      	ldrb	r3, [r7, #23]
 800cf8c:	3301      	adds	r3, #1
 800cf8e:	75fb      	strb	r3, [r7, #23]
 800cf90:	7dfb      	ldrb	r3, [r7, #23]
 800cf92:	2b09      	cmp	r3, #9
 800cf94:	d9ca      	bls.n	800cf2c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800cf96:	68ba      	ldr	r2, [r7, #8]
 800cf98:	69b9      	ldr	r1, [r7, #24]
 800cf9a:	68f8      	ldr	r0, [r7, #12]
 800cf9c:	f000 f822 	bl	800cfe4 <etharp_query>
 800cfa0:	4603      	mov	r3, r0
 800cfa2:	e00b      	b.n	800cfbc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800cfaa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800cfae:	9300      	str	r3, [sp, #0]
 800cfb0:	69fb      	ldr	r3, [r7, #28]
 800cfb2:	68b9      	ldr	r1, [r7, #8]
 800cfb4:	68f8      	ldr	r0, [r7, #12]
 800cfb6:	f001 fd3b 	bl	800ea30 <ethernet_output>
 800cfba:	4603      	mov	r3, r0
}
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	3720      	adds	r7, #32
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bd80      	pop	{r7, pc}
 800cfc4:	080111e8 	.word	0x080111e8
 800cfc8:	08011338 	.word	0x08011338
 800cfcc:	08011260 	.word	0x08011260
 800cfd0:	08011388 	.word	0x08011388
 800cfd4:	08011328 	.word	0x08011328
 800cfd8:	08011944 	.word	0x08011944
 800cfdc:	20007d90 	.word	0x20007d90
 800cfe0:	20007ca0 	.word	0x20007ca0

0800cfe4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b08c      	sub	sp, #48	@ 0x30
 800cfe8:	af02      	add	r7, sp, #8
 800cfea:	60f8      	str	r0, [r7, #12]
 800cfec:	60b9      	str	r1, [r7, #8]
 800cfee:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	3326      	adds	r3, #38	@ 0x26
 800cff4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800cff6:	23ff      	movs	r3, #255	@ 0xff
 800cff8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800cffc:	2300      	movs	r3, #0
 800cffe:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d000:	68bb      	ldr	r3, [r7, #8]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	68f9      	ldr	r1, [r7, #12]
 800d006:	4618      	mov	r0, r3
 800d008:	f000 fe04 	bl	800dc14 <ip4_addr_isbroadcast_u32>
 800d00c:	4603      	mov	r3, r0
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d10c      	bne.n	800d02c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d012:	68bb      	ldr	r3, [r7, #8]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d01a:	2be0      	cmp	r3, #224	@ 0xe0
 800d01c:	d006      	beq.n	800d02c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d01e:	68bb      	ldr	r3, [r7, #8]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d003      	beq.n	800d02c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800d024:	68bb      	ldr	r3, [r7, #8]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d102      	bne.n	800d032 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d02c:	f06f 030f 	mvn.w	r3, #15
 800d030:	e101      	b.n	800d236 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800d032:	68fa      	ldr	r2, [r7, #12]
 800d034:	2101      	movs	r1, #1
 800d036:	68b8      	ldr	r0, [r7, #8]
 800d038:	f7ff fb60 	bl	800c6fc <etharp_find_entry>
 800d03c:	4603      	mov	r3, r0
 800d03e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800d040:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d044:	2b00      	cmp	r3, #0
 800d046:	da02      	bge.n	800d04e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800d048:	8a7b      	ldrh	r3, [r7, #18]
 800d04a:	b25b      	sxtb	r3, r3
 800d04c:	e0f3      	b.n	800d236 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800d04e:	8a7b      	ldrh	r3, [r7, #18]
 800d050:	2b7e      	cmp	r3, #126	@ 0x7e
 800d052:	d906      	bls.n	800d062 <etharp_query+0x7e>
 800d054:	4b7a      	ldr	r3, [pc, #488]	@ (800d240 <etharp_query+0x25c>)
 800d056:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800d05a:	497a      	ldr	r1, [pc, #488]	@ (800d244 <etharp_query+0x260>)
 800d05c:	487a      	ldr	r0, [pc, #488]	@ (800d248 <etharp_query+0x264>)
 800d05e:	f001 fe87 	bl	800ed70 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800d062:	8a7b      	ldrh	r3, [r7, #18]
 800d064:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800d066:	7c7a      	ldrb	r2, [r7, #17]
 800d068:	4978      	ldr	r1, [pc, #480]	@ (800d24c <etharp_query+0x268>)
 800d06a:	4613      	mov	r3, r2
 800d06c:	005b      	lsls	r3, r3, #1
 800d06e:	4413      	add	r3, r2
 800d070:	00db      	lsls	r3, r3, #3
 800d072:	440b      	add	r3, r1
 800d074:	3314      	adds	r3, #20
 800d076:	781b      	ldrb	r3, [r3, #0]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d115      	bne.n	800d0a8 <etharp_query+0xc4>
    is_new_entry = 1;
 800d07c:	2301      	movs	r3, #1
 800d07e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800d080:	7c7a      	ldrb	r2, [r7, #17]
 800d082:	4972      	ldr	r1, [pc, #456]	@ (800d24c <etharp_query+0x268>)
 800d084:	4613      	mov	r3, r2
 800d086:	005b      	lsls	r3, r3, #1
 800d088:	4413      	add	r3, r2
 800d08a:	00db      	lsls	r3, r3, #3
 800d08c:	440b      	add	r3, r1
 800d08e:	3314      	adds	r3, #20
 800d090:	2201      	movs	r2, #1
 800d092:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800d094:	7c7a      	ldrb	r2, [r7, #17]
 800d096:	496d      	ldr	r1, [pc, #436]	@ (800d24c <etharp_query+0x268>)
 800d098:	4613      	mov	r3, r2
 800d09a:	005b      	lsls	r3, r3, #1
 800d09c:	4413      	add	r3, r2
 800d09e:	00db      	lsls	r3, r3, #3
 800d0a0:	440b      	add	r3, r1
 800d0a2:	3308      	adds	r3, #8
 800d0a4:	68fa      	ldr	r2, [r7, #12]
 800d0a6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800d0a8:	7c7a      	ldrb	r2, [r7, #17]
 800d0aa:	4968      	ldr	r1, [pc, #416]	@ (800d24c <etharp_query+0x268>)
 800d0ac:	4613      	mov	r3, r2
 800d0ae:	005b      	lsls	r3, r3, #1
 800d0b0:	4413      	add	r3, r2
 800d0b2:	00db      	lsls	r3, r3, #3
 800d0b4:	440b      	add	r3, r1
 800d0b6:	3314      	adds	r3, #20
 800d0b8:	781b      	ldrb	r3, [r3, #0]
 800d0ba:	2b01      	cmp	r3, #1
 800d0bc:	d011      	beq.n	800d0e2 <etharp_query+0xfe>
 800d0be:	7c7a      	ldrb	r2, [r7, #17]
 800d0c0:	4962      	ldr	r1, [pc, #392]	@ (800d24c <etharp_query+0x268>)
 800d0c2:	4613      	mov	r3, r2
 800d0c4:	005b      	lsls	r3, r3, #1
 800d0c6:	4413      	add	r3, r2
 800d0c8:	00db      	lsls	r3, r3, #3
 800d0ca:	440b      	add	r3, r1
 800d0cc:	3314      	adds	r3, #20
 800d0ce:	781b      	ldrb	r3, [r3, #0]
 800d0d0:	2b01      	cmp	r3, #1
 800d0d2:	d806      	bhi.n	800d0e2 <etharp_query+0xfe>
 800d0d4:	4b5a      	ldr	r3, [pc, #360]	@ (800d240 <etharp_query+0x25c>)
 800d0d6:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800d0da:	495d      	ldr	r1, [pc, #372]	@ (800d250 <etharp_query+0x26c>)
 800d0dc:	485a      	ldr	r0, [pc, #360]	@ (800d248 <etharp_query+0x264>)
 800d0de:	f001 fe47 	bl	800ed70 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800d0e2:	6a3b      	ldr	r3, [r7, #32]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d102      	bne.n	800d0ee <etharp_query+0x10a>
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d10c      	bne.n	800d108 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800d0ee:	68b9      	ldr	r1, [r7, #8]
 800d0f0:	68f8      	ldr	r0, [r7, #12]
 800d0f2:	f000 f963 	bl	800d3bc <etharp_request>
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d102      	bne.n	800d108 <etharp_query+0x124>
      return result;
 800d102:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d106:	e096      	b.n	800d236 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d106      	bne.n	800d11c <etharp_query+0x138>
 800d10e:	4b4c      	ldr	r3, [pc, #304]	@ (800d240 <etharp_query+0x25c>)
 800d110:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800d114:	494f      	ldr	r1, [pc, #316]	@ (800d254 <etharp_query+0x270>)
 800d116:	484c      	ldr	r0, [pc, #304]	@ (800d248 <etharp_query+0x264>)
 800d118:	f001 fe2a 	bl	800ed70 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800d11c:	7c7a      	ldrb	r2, [r7, #17]
 800d11e:	494b      	ldr	r1, [pc, #300]	@ (800d24c <etharp_query+0x268>)
 800d120:	4613      	mov	r3, r2
 800d122:	005b      	lsls	r3, r3, #1
 800d124:	4413      	add	r3, r2
 800d126:	00db      	lsls	r3, r3, #3
 800d128:	440b      	add	r3, r1
 800d12a:	3314      	adds	r3, #20
 800d12c:	781b      	ldrb	r3, [r3, #0]
 800d12e:	2b01      	cmp	r3, #1
 800d130:	d917      	bls.n	800d162 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800d132:	4a49      	ldr	r2, [pc, #292]	@ (800d258 <etharp_query+0x274>)
 800d134:	7c7b      	ldrb	r3, [r7, #17]
 800d136:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800d138:	7c7a      	ldrb	r2, [r7, #17]
 800d13a:	4613      	mov	r3, r2
 800d13c:	005b      	lsls	r3, r3, #1
 800d13e:	4413      	add	r3, r2
 800d140:	00db      	lsls	r3, r3, #3
 800d142:	3308      	adds	r3, #8
 800d144:	4a41      	ldr	r2, [pc, #260]	@ (800d24c <etharp_query+0x268>)
 800d146:	4413      	add	r3, r2
 800d148:	3304      	adds	r3, #4
 800d14a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d14e:	9200      	str	r2, [sp, #0]
 800d150:	697a      	ldr	r2, [r7, #20]
 800d152:	6879      	ldr	r1, [r7, #4]
 800d154:	68f8      	ldr	r0, [r7, #12]
 800d156:	f001 fc6b 	bl	800ea30 <ethernet_output>
 800d15a:	4603      	mov	r3, r0
 800d15c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d160:	e067      	b.n	800d232 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d162:	7c7a      	ldrb	r2, [r7, #17]
 800d164:	4939      	ldr	r1, [pc, #228]	@ (800d24c <etharp_query+0x268>)
 800d166:	4613      	mov	r3, r2
 800d168:	005b      	lsls	r3, r3, #1
 800d16a:	4413      	add	r3, r2
 800d16c:	00db      	lsls	r3, r3, #3
 800d16e:	440b      	add	r3, r1
 800d170:	3314      	adds	r3, #20
 800d172:	781b      	ldrb	r3, [r3, #0]
 800d174:	2b01      	cmp	r3, #1
 800d176:	d15c      	bne.n	800d232 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800d178:	2300      	movs	r3, #0
 800d17a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d180:	e01c      	b.n	800d1bc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d182:	69fb      	ldr	r3, [r7, #28]
 800d184:	895a      	ldrh	r2, [r3, #10]
 800d186:	69fb      	ldr	r3, [r7, #28]
 800d188:	891b      	ldrh	r3, [r3, #8]
 800d18a:	429a      	cmp	r2, r3
 800d18c:	d10a      	bne.n	800d1a4 <etharp_query+0x1c0>
 800d18e:	69fb      	ldr	r3, [r7, #28]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d006      	beq.n	800d1a4 <etharp_query+0x1c0>
 800d196:	4b2a      	ldr	r3, [pc, #168]	@ (800d240 <etharp_query+0x25c>)
 800d198:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800d19c:	492f      	ldr	r1, [pc, #188]	@ (800d25c <etharp_query+0x278>)
 800d19e:	482a      	ldr	r0, [pc, #168]	@ (800d248 <etharp_query+0x264>)
 800d1a0:	f001 fde6 	bl	800ed70 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800d1a4:	69fb      	ldr	r3, [r7, #28]
 800d1a6:	7b1b      	ldrb	r3, [r3, #12]
 800d1a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d002      	beq.n	800d1b6 <etharp_query+0x1d2>
        copy_needed = 1;
 800d1b0:	2301      	movs	r3, #1
 800d1b2:	61bb      	str	r3, [r7, #24]
        break;
 800d1b4:	e005      	b.n	800d1c2 <etharp_query+0x1de>
      }
      p = p->next;
 800d1b6:	69fb      	ldr	r3, [r7, #28]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d1bc:	69fb      	ldr	r3, [r7, #28]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d1df      	bne.n	800d182 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800d1c2:	69bb      	ldr	r3, [r7, #24]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d007      	beq.n	800d1d8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800d1c8:	687a      	ldr	r2, [r7, #4]
 800d1ca:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800d1ce:	200e      	movs	r0, #14
 800d1d0:	f7fe fbbc 	bl	800b94c <pbuf_clone>
 800d1d4:	61f8      	str	r0, [r7, #28]
 800d1d6:	e004      	b.n	800d1e2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800d1dc:	69f8      	ldr	r0, [r7, #28]
 800d1de:	f7fe fa5b 	bl	800b698 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800d1e2:	69fb      	ldr	r3, [r7, #28]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d021      	beq.n	800d22c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800d1e8:	7c7a      	ldrb	r2, [r7, #17]
 800d1ea:	4918      	ldr	r1, [pc, #96]	@ (800d24c <etharp_query+0x268>)
 800d1ec:	4613      	mov	r3, r2
 800d1ee:	005b      	lsls	r3, r3, #1
 800d1f0:	4413      	add	r3, r2
 800d1f2:	00db      	lsls	r3, r3, #3
 800d1f4:	440b      	add	r3, r1
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d00a      	beq.n	800d212 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800d1fc:	7c7a      	ldrb	r2, [r7, #17]
 800d1fe:	4913      	ldr	r1, [pc, #76]	@ (800d24c <etharp_query+0x268>)
 800d200:	4613      	mov	r3, r2
 800d202:	005b      	lsls	r3, r3, #1
 800d204:	4413      	add	r3, r2
 800d206:	00db      	lsls	r3, r3, #3
 800d208:	440b      	add	r3, r1
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	4618      	mov	r0, r3
 800d20e:	f7fe f9a3 	bl	800b558 <pbuf_free>
      }
      arp_table[i].q = p;
 800d212:	7c7a      	ldrb	r2, [r7, #17]
 800d214:	490d      	ldr	r1, [pc, #52]	@ (800d24c <etharp_query+0x268>)
 800d216:	4613      	mov	r3, r2
 800d218:	005b      	lsls	r3, r3, #1
 800d21a:	4413      	add	r3, r2
 800d21c:	00db      	lsls	r3, r3, #3
 800d21e:	440b      	add	r3, r1
 800d220:	69fa      	ldr	r2, [r7, #28]
 800d222:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800d224:	2300      	movs	r3, #0
 800d226:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d22a:	e002      	b.n	800d232 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800d22c:	23ff      	movs	r3, #255	@ 0xff
 800d22e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800d232:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800d236:	4618      	mov	r0, r3
 800d238:	3728      	adds	r7, #40	@ 0x28
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bd80      	pop	{r7, pc}
 800d23e:	bf00      	nop
 800d240:	080111e8 	.word	0x080111e8
 800d244:	08011394 	.word	0x08011394
 800d248:	08011260 	.word	0x08011260
 800d24c:	20007ca0 	.word	0x20007ca0
 800d250:	080113a4 	.word	0x080113a4
 800d254:	08011388 	.word	0x08011388
 800d258:	20007d90 	.word	0x20007d90
 800d25c:	080113cc 	.word	0x080113cc

0800d260 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b08a      	sub	sp, #40	@ 0x28
 800d264:	af02      	add	r7, sp, #8
 800d266:	60f8      	str	r0, [r7, #12]
 800d268:	60b9      	str	r1, [r7, #8]
 800d26a:	607a      	str	r2, [r7, #4]
 800d26c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800d26e:	2300      	movs	r3, #0
 800d270:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d106      	bne.n	800d286 <etharp_raw+0x26>
 800d278:	4b3a      	ldr	r3, [pc, #232]	@ (800d364 <etharp_raw+0x104>)
 800d27a:	f240 4257 	movw	r2, #1111	@ 0x457
 800d27e:	493a      	ldr	r1, [pc, #232]	@ (800d368 <etharp_raw+0x108>)
 800d280:	483a      	ldr	r0, [pc, #232]	@ (800d36c <etharp_raw+0x10c>)
 800d282:	f001 fd75 	bl	800ed70 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d286:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d28a:	211c      	movs	r1, #28
 800d28c:	200e      	movs	r0, #14
 800d28e:	f7fd fe81 	bl	800af94 <pbuf_alloc>
 800d292:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d294:	69bb      	ldr	r3, [r7, #24]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d102      	bne.n	800d2a0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800d29a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d29e:	e05d      	b.n	800d35c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d2a0:	69bb      	ldr	r3, [r7, #24]
 800d2a2:	895b      	ldrh	r3, [r3, #10]
 800d2a4:	2b1b      	cmp	r3, #27
 800d2a6:	d806      	bhi.n	800d2b6 <etharp_raw+0x56>
 800d2a8:	4b2e      	ldr	r3, [pc, #184]	@ (800d364 <etharp_raw+0x104>)
 800d2aa:	f240 4262 	movw	r2, #1122	@ 0x462
 800d2ae:	4930      	ldr	r1, [pc, #192]	@ (800d370 <etharp_raw+0x110>)
 800d2b0:	482e      	ldr	r0, [pc, #184]	@ (800d36c <etharp_raw+0x10c>)
 800d2b2:	f001 fd5d 	bl	800ed70 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d2b6:	69bb      	ldr	r3, [r7, #24]
 800d2b8:	685b      	ldr	r3, [r3, #4]
 800d2ba:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d2bc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f7fc fe3c 	bl	8009f3c <lwip_htons>
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	461a      	mov	r2, r3
 800d2c8:	697b      	ldr	r3, [r7, #20]
 800d2ca:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d2d2:	2b06      	cmp	r3, #6
 800d2d4:	d006      	beq.n	800d2e4 <etharp_raw+0x84>
 800d2d6:	4b23      	ldr	r3, [pc, #140]	@ (800d364 <etharp_raw+0x104>)
 800d2d8:	f240 4269 	movw	r2, #1129	@ 0x469
 800d2dc:	4925      	ldr	r1, [pc, #148]	@ (800d374 <etharp_raw+0x114>)
 800d2de:	4823      	ldr	r0, [pc, #140]	@ (800d36c <etharp_raw+0x10c>)
 800d2e0:	f001 fd46 	bl	800ed70 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800d2e4:	697b      	ldr	r3, [r7, #20]
 800d2e6:	3308      	adds	r3, #8
 800d2e8:	2206      	movs	r2, #6
 800d2ea:	6839      	ldr	r1, [r7, #0]
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	f001 fe32 	bl	800ef56 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800d2f2:	697b      	ldr	r3, [r7, #20]
 800d2f4:	3312      	adds	r3, #18
 800d2f6:	2206      	movs	r2, #6
 800d2f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	f001 fe2b 	bl	800ef56 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800d300:	697b      	ldr	r3, [r7, #20]
 800d302:	330e      	adds	r3, #14
 800d304:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d306:	6812      	ldr	r2, [r2, #0]
 800d308:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800d30a:	697b      	ldr	r3, [r7, #20]
 800d30c:	3318      	adds	r3, #24
 800d30e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d310:	6812      	ldr	r2, [r2, #0]
 800d312:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800d314:	697b      	ldr	r3, [r7, #20]
 800d316:	2200      	movs	r2, #0
 800d318:	701a      	strb	r2, [r3, #0]
 800d31a:	2200      	movs	r2, #0
 800d31c:	f042 0201 	orr.w	r2, r2, #1
 800d320:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d322:	697b      	ldr	r3, [r7, #20]
 800d324:	2200      	movs	r2, #0
 800d326:	f042 0208 	orr.w	r2, r2, #8
 800d32a:	709a      	strb	r2, [r3, #2]
 800d32c:	2200      	movs	r2, #0
 800d32e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800d330:	697b      	ldr	r3, [r7, #20]
 800d332:	2206      	movs	r2, #6
 800d334:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d336:	697b      	ldr	r3, [r7, #20]
 800d338:	2204      	movs	r2, #4
 800d33a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d33c:	f640 0306 	movw	r3, #2054	@ 0x806
 800d340:	9300      	str	r3, [sp, #0]
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	68ba      	ldr	r2, [r7, #8]
 800d346:	69b9      	ldr	r1, [r7, #24]
 800d348:	68f8      	ldr	r0, [r7, #12]
 800d34a:	f001 fb71 	bl	800ea30 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d34e:	69b8      	ldr	r0, [r7, #24]
 800d350:	f7fe f902 	bl	800b558 <pbuf_free>
  p = NULL;
 800d354:	2300      	movs	r3, #0
 800d356:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800d358:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d35c:	4618      	mov	r0, r3
 800d35e:	3720      	adds	r7, #32
 800d360:	46bd      	mov	sp, r7
 800d362:	bd80      	pop	{r7, pc}
 800d364:	080111e8 	.word	0x080111e8
 800d368:	08011338 	.word	0x08011338
 800d36c:	08011260 	.word	0x08011260
 800d370:	080113e8 	.word	0x080113e8
 800d374:	0801141c 	.word	0x0801141c

0800d378 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b088      	sub	sp, #32
 800d37c:	af04      	add	r7, sp, #16
 800d37e:	60f8      	str	r0, [r7, #12]
 800d380:	60b9      	str	r1, [r7, #8]
 800d382:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d394:	2201      	movs	r2, #1
 800d396:	9203      	str	r2, [sp, #12]
 800d398:	68ba      	ldr	r2, [r7, #8]
 800d39a:	9202      	str	r2, [sp, #8]
 800d39c:	4a06      	ldr	r2, [pc, #24]	@ (800d3b8 <etharp_request_dst+0x40>)
 800d39e:	9201      	str	r2, [sp, #4]
 800d3a0:	9300      	str	r3, [sp, #0]
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	687a      	ldr	r2, [r7, #4]
 800d3a6:	68f8      	ldr	r0, [r7, #12]
 800d3a8:	f7ff ff5a 	bl	800d260 <etharp_raw>
 800d3ac:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	3710      	adds	r7, #16
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bd80      	pop	{r7, pc}
 800d3b6:	bf00      	nop
 800d3b8:	0801194c 	.word	0x0801194c

0800d3bc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b082      	sub	sp, #8
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
 800d3c4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800d3c6:	4a05      	ldr	r2, [pc, #20]	@ (800d3dc <etharp_request+0x20>)
 800d3c8:	6839      	ldr	r1, [r7, #0]
 800d3ca:	6878      	ldr	r0, [r7, #4]
 800d3cc:	f7ff ffd4 	bl	800d378 <etharp_request_dst>
 800d3d0:	4603      	mov	r3, r0
}
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	3708      	adds	r7, #8
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}
 800d3da:	bf00      	nop
 800d3dc:	08011944 	.word	0x08011944

0800d3e0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b08e      	sub	sp, #56	@ 0x38
 800d3e4:	af04      	add	r7, sp, #16
 800d3e6:	6078      	str	r0, [r7, #4]
 800d3e8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800d3ea:	4b79      	ldr	r3, [pc, #484]	@ (800d5d0 <icmp_input+0x1f0>)
 800d3ec:	689b      	ldr	r3, [r3, #8]
 800d3ee:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800d3f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3f2:	781b      	ldrb	r3, [r3, #0]
 800d3f4:	f003 030f 	and.w	r3, r3, #15
 800d3f8:	b2db      	uxtb	r3, r3
 800d3fa:	009b      	lsls	r3, r3, #2
 800d3fc:	b2db      	uxtb	r3, r3
 800d3fe:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800d400:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d402:	2b13      	cmp	r3, #19
 800d404:	f240 80cd 	bls.w	800d5a2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	895b      	ldrh	r3, [r3, #10]
 800d40c:	2b03      	cmp	r3, #3
 800d40e:	f240 80ca 	bls.w	800d5a6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	685b      	ldr	r3, [r3, #4]
 800d416:	781b      	ldrb	r3, [r3, #0]
 800d418:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800d41c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800d420:	2b00      	cmp	r3, #0
 800d422:	f000 80b7 	beq.w	800d594 <icmp_input+0x1b4>
 800d426:	2b08      	cmp	r3, #8
 800d428:	f040 80b7 	bne.w	800d59a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800d42c:	4b69      	ldr	r3, [pc, #420]	@ (800d5d4 <icmp_input+0x1f4>)
 800d42e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d430:	4b67      	ldr	r3, [pc, #412]	@ (800d5d0 <icmp_input+0x1f0>)
 800d432:	695b      	ldr	r3, [r3, #20]
 800d434:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d438:	2be0      	cmp	r3, #224	@ 0xe0
 800d43a:	f000 80bb 	beq.w	800d5b4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800d43e:	4b64      	ldr	r3, [pc, #400]	@ (800d5d0 <icmp_input+0x1f0>)
 800d440:	695b      	ldr	r3, [r3, #20]
 800d442:	4a63      	ldr	r2, [pc, #396]	@ (800d5d0 <icmp_input+0x1f0>)
 800d444:	6812      	ldr	r2, [r2, #0]
 800d446:	4611      	mov	r1, r2
 800d448:	4618      	mov	r0, r3
 800d44a:	f000 fbe3 	bl	800dc14 <ip4_addr_isbroadcast_u32>
 800d44e:	4603      	mov	r3, r0
 800d450:	2b00      	cmp	r3, #0
 800d452:	f040 80b1 	bne.w	800d5b8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	891b      	ldrh	r3, [r3, #8]
 800d45a:	2b07      	cmp	r3, #7
 800d45c:	f240 80a5 	bls.w	800d5aa <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d460:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d462:	330e      	adds	r3, #14
 800d464:	4619      	mov	r1, r3
 800d466:	6878      	ldr	r0, [r7, #4]
 800d468:	f7fd ffe0 	bl	800b42c <pbuf_add_header>
 800d46c:	4603      	mov	r3, r0
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d04b      	beq.n	800d50a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	891a      	ldrh	r2, [r3, #8]
 800d476:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d478:	4413      	add	r3, r2
 800d47a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	891b      	ldrh	r3, [r3, #8]
 800d480:	8b7a      	ldrh	r2, [r7, #26]
 800d482:	429a      	cmp	r2, r3
 800d484:	f0c0 809a 	bcc.w	800d5bc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800d488:	8b7b      	ldrh	r3, [r7, #26]
 800d48a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d48e:	4619      	mov	r1, r3
 800d490:	200e      	movs	r0, #14
 800d492:	f7fd fd7f 	bl	800af94 <pbuf_alloc>
 800d496:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800d498:	697b      	ldr	r3, [r7, #20]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	f000 8090 	beq.w	800d5c0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800d4a0:	697b      	ldr	r3, [r7, #20]
 800d4a2:	895b      	ldrh	r3, [r3, #10]
 800d4a4:	461a      	mov	r2, r3
 800d4a6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d4a8:	3308      	adds	r3, #8
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	d203      	bcs.n	800d4b6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800d4ae:	6978      	ldr	r0, [r7, #20]
 800d4b0:	f7fe f852 	bl	800b558 <pbuf_free>
          goto icmperr;
 800d4b4:	e085      	b.n	800d5c2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800d4b6:	697b      	ldr	r3, [r7, #20]
 800d4b8:	685b      	ldr	r3, [r3, #4]
 800d4ba:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800d4bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f001 fd49 	bl	800ef56 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800d4c4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d4c6:	4619      	mov	r1, r3
 800d4c8:	6978      	ldr	r0, [r7, #20]
 800d4ca:	f7fd ffbf 	bl	800b44c <pbuf_remove_header>
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d009      	beq.n	800d4e8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800d4d4:	4b40      	ldr	r3, [pc, #256]	@ (800d5d8 <icmp_input+0x1f8>)
 800d4d6:	22b6      	movs	r2, #182	@ 0xb6
 800d4d8:	4940      	ldr	r1, [pc, #256]	@ (800d5dc <icmp_input+0x1fc>)
 800d4da:	4841      	ldr	r0, [pc, #260]	@ (800d5e0 <icmp_input+0x200>)
 800d4dc:	f001 fc48 	bl	800ed70 <iprintf>
          pbuf_free(r);
 800d4e0:	6978      	ldr	r0, [r7, #20]
 800d4e2:	f7fe f839 	bl	800b558 <pbuf_free>
          goto icmperr;
 800d4e6:	e06c      	b.n	800d5c2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800d4e8:	6879      	ldr	r1, [r7, #4]
 800d4ea:	6978      	ldr	r0, [r7, #20]
 800d4ec:	f7fe f95c 	bl	800b7a8 <pbuf_copy>
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d003      	beq.n	800d4fe <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800d4f6:	6978      	ldr	r0, [r7, #20]
 800d4f8:	f7fe f82e 	bl	800b558 <pbuf_free>
          goto icmperr;
 800d4fc:	e061      	b.n	800d5c2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800d4fe:	6878      	ldr	r0, [r7, #4]
 800d500:	f7fe f82a 	bl	800b558 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800d504:	697b      	ldr	r3, [r7, #20]
 800d506:	607b      	str	r3, [r7, #4]
 800d508:	e00f      	b.n	800d52a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d50a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d50c:	330e      	adds	r3, #14
 800d50e:	4619      	mov	r1, r3
 800d510:	6878      	ldr	r0, [r7, #4]
 800d512:	f7fd ff9b 	bl	800b44c <pbuf_remove_header>
 800d516:	4603      	mov	r3, r0
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d006      	beq.n	800d52a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800d51c:	4b2e      	ldr	r3, [pc, #184]	@ (800d5d8 <icmp_input+0x1f8>)
 800d51e:	22c7      	movs	r2, #199	@ 0xc7
 800d520:	4930      	ldr	r1, [pc, #192]	@ (800d5e4 <icmp_input+0x204>)
 800d522:	482f      	ldr	r0, [pc, #188]	@ (800d5e0 <icmp_input+0x200>)
 800d524:	f001 fc24 	bl	800ed70 <iprintf>
          goto icmperr;
 800d528:	e04b      	b.n	800d5c2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	685b      	ldr	r3, [r3, #4]
 800d52e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800d530:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d532:	4619      	mov	r1, r3
 800d534:	6878      	ldr	r0, [r7, #4]
 800d536:	f7fd ff79 	bl	800b42c <pbuf_add_header>
 800d53a:	4603      	mov	r3, r0
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d12b      	bne.n	800d598 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	685b      	ldr	r3, [r3, #4]
 800d544:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800d546:	69fb      	ldr	r3, [r7, #28]
 800d548:	681a      	ldr	r2, [r3, #0]
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800d54e:	4b20      	ldr	r3, [pc, #128]	@ (800d5d0 <icmp_input+0x1f0>)
 800d550:	691a      	ldr	r2, [r3, #16]
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800d556:	693b      	ldr	r3, [r7, #16]
 800d558:	2200      	movs	r2, #0
 800d55a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800d55c:	693b      	ldr	r3, [r7, #16]
 800d55e:	2200      	movs	r2, #0
 800d560:	709a      	strb	r2, [r3, #2]
 800d562:	2200      	movs	r2, #0
 800d564:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	22ff      	movs	r2, #255	@ 0xff
 800d56a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	2200      	movs	r2, #0
 800d570:	729a      	strb	r2, [r3, #10]
 800d572:	2200      	movs	r2, #0
 800d574:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	9302      	str	r3, [sp, #8]
 800d57a:	2301      	movs	r3, #1
 800d57c:	9301      	str	r3, [sp, #4]
 800d57e:	2300      	movs	r3, #0
 800d580:	9300      	str	r3, [sp, #0]
 800d582:	23ff      	movs	r3, #255	@ 0xff
 800d584:	2200      	movs	r2, #0
 800d586:	69f9      	ldr	r1, [r7, #28]
 800d588:	6878      	ldr	r0, [r7, #4]
 800d58a:	f000 fa6b 	bl	800da64 <ip4_output_if>
 800d58e:	4603      	mov	r3, r0
 800d590:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800d592:	e001      	b.n	800d598 <icmp_input+0x1b8>
      break;
 800d594:	bf00      	nop
 800d596:	e000      	b.n	800d59a <icmp_input+0x1ba>
      break;
 800d598:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800d59a:	6878      	ldr	r0, [r7, #4]
 800d59c:	f7fd ffdc 	bl	800b558 <pbuf_free>
  return;
 800d5a0:	e013      	b.n	800d5ca <icmp_input+0x1ea>
    goto lenerr;
 800d5a2:	bf00      	nop
 800d5a4:	e002      	b.n	800d5ac <icmp_input+0x1cc>
    goto lenerr;
 800d5a6:	bf00      	nop
 800d5a8:	e000      	b.n	800d5ac <icmp_input+0x1cc>
        goto lenerr;
 800d5aa:	bf00      	nop
lenerr:
  pbuf_free(p);
 800d5ac:	6878      	ldr	r0, [r7, #4]
 800d5ae:	f7fd ffd3 	bl	800b558 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d5b2:	e00a      	b.n	800d5ca <icmp_input+0x1ea>
        goto icmperr;
 800d5b4:	bf00      	nop
 800d5b6:	e004      	b.n	800d5c2 <icmp_input+0x1e2>
        goto icmperr;
 800d5b8:	bf00      	nop
 800d5ba:	e002      	b.n	800d5c2 <icmp_input+0x1e2>
          goto icmperr;
 800d5bc:	bf00      	nop
 800d5be:	e000      	b.n	800d5c2 <icmp_input+0x1e2>
          goto icmperr;
 800d5c0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800d5c2:	6878      	ldr	r0, [r7, #4]
 800d5c4:	f7fd ffc8 	bl	800b558 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d5c8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800d5ca:	3728      	adds	r7, #40	@ 0x28
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	bd80      	pop	{r7, pc}
 800d5d0:	2000528c 	.word	0x2000528c
 800d5d4:	200052a0 	.word	0x200052a0
 800d5d8:	08011460 	.word	0x08011460
 800d5dc:	08011498 	.word	0x08011498
 800d5e0:	080114d0 	.word	0x080114d0
 800d5e4:	080114f8 	.word	0x080114f8

0800d5e8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b082      	sub	sp, #8
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
 800d5f0:	460b      	mov	r3, r1
 800d5f2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800d5f4:	78fb      	ldrb	r3, [r7, #3]
 800d5f6:	461a      	mov	r2, r3
 800d5f8:	2103      	movs	r1, #3
 800d5fa:	6878      	ldr	r0, [r7, #4]
 800d5fc:	f000 f814 	bl	800d628 <icmp_send_response>
}
 800d600:	bf00      	nop
 800d602:	3708      	adds	r7, #8
 800d604:	46bd      	mov	sp, r7
 800d606:	bd80      	pop	{r7, pc}

0800d608 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b082      	sub	sp, #8
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
 800d610:	460b      	mov	r3, r1
 800d612:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800d614:	78fb      	ldrb	r3, [r7, #3]
 800d616:	461a      	mov	r2, r3
 800d618:	210b      	movs	r1, #11
 800d61a:	6878      	ldr	r0, [r7, #4]
 800d61c:	f000 f804 	bl	800d628 <icmp_send_response>
}
 800d620:	bf00      	nop
 800d622:	3708      	adds	r7, #8
 800d624:	46bd      	mov	sp, r7
 800d626:	bd80      	pop	{r7, pc}

0800d628 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b08c      	sub	sp, #48	@ 0x30
 800d62c:	af04      	add	r7, sp, #16
 800d62e:	6078      	str	r0, [r7, #4]
 800d630:	460b      	mov	r3, r1
 800d632:	70fb      	strb	r3, [r7, #3]
 800d634:	4613      	mov	r3, r2
 800d636:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800d638:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d63c:	2124      	movs	r1, #36	@ 0x24
 800d63e:	2022      	movs	r0, #34	@ 0x22
 800d640:	f7fd fca8 	bl	800af94 <pbuf_alloc>
 800d644:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800d646:	69fb      	ldr	r3, [r7, #28]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d04c      	beq.n	800d6e6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800d64c:	69fb      	ldr	r3, [r7, #28]
 800d64e:	895b      	ldrh	r3, [r3, #10]
 800d650:	2b23      	cmp	r3, #35	@ 0x23
 800d652:	d806      	bhi.n	800d662 <icmp_send_response+0x3a>
 800d654:	4b26      	ldr	r3, [pc, #152]	@ (800d6f0 <icmp_send_response+0xc8>)
 800d656:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800d65a:	4926      	ldr	r1, [pc, #152]	@ (800d6f4 <icmp_send_response+0xcc>)
 800d65c:	4826      	ldr	r0, [pc, #152]	@ (800d6f8 <icmp_send_response+0xd0>)
 800d65e:	f001 fb87 	bl	800ed70 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	685b      	ldr	r3, [r3, #4]
 800d666:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800d668:	69fb      	ldr	r3, [r7, #28]
 800d66a:	685b      	ldr	r3, [r3, #4]
 800d66c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800d66e:	697b      	ldr	r3, [r7, #20]
 800d670:	78fa      	ldrb	r2, [r7, #3]
 800d672:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800d674:	697b      	ldr	r3, [r7, #20]
 800d676:	78ba      	ldrb	r2, [r7, #2]
 800d678:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800d67a:	697b      	ldr	r3, [r7, #20]
 800d67c:	2200      	movs	r2, #0
 800d67e:	711a      	strb	r2, [r3, #4]
 800d680:	2200      	movs	r2, #0
 800d682:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800d684:	697b      	ldr	r3, [r7, #20]
 800d686:	2200      	movs	r2, #0
 800d688:	719a      	strb	r2, [r3, #6]
 800d68a:	2200      	movs	r2, #0
 800d68c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800d68e:	69fb      	ldr	r3, [r7, #28]
 800d690:	685b      	ldr	r3, [r3, #4]
 800d692:	f103 0008 	add.w	r0, r3, #8
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	685b      	ldr	r3, [r3, #4]
 800d69a:	221c      	movs	r2, #28
 800d69c:	4619      	mov	r1, r3
 800d69e:	f001 fc5a 	bl	800ef56 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800d6a2:	69bb      	ldr	r3, [r7, #24]
 800d6a4:	68db      	ldr	r3, [r3, #12]
 800d6a6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800d6a8:	f107 030c 	add.w	r3, r7, #12
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	f000 f825 	bl	800d6fc <ip4_route>
 800d6b2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800d6b4:	693b      	ldr	r3, [r7, #16]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d011      	beq.n	800d6de <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800d6ba:	697b      	ldr	r3, [r7, #20]
 800d6bc:	2200      	movs	r2, #0
 800d6be:	709a      	strb	r2, [r3, #2]
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800d6c4:	f107 020c 	add.w	r2, r7, #12
 800d6c8:	693b      	ldr	r3, [r7, #16]
 800d6ca:	9302      	str	r3, [sp, #8]
 800d6cc:	2301      	movs	r3, #1
 800d6ce:	9301      	str	r3, [sp, #4]
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	9300      	str	r3, [sp, #0]
 800d6d4:	23ff      	movs	r3, #255	@ 0xff
 800d6d6:	2100      	movs	r1, #0
 800d6d8:	69f8      	ldr	r0, [r7, #28]
 800d6da:	f000 f9c3 	bl	800da64 <ip4_output_if>
  }
  pbuf_free(q);
 800d6de:	69f8      	ldr	r0, [r7, #28]
 800d6e0:	f7fd ff3a 	bl	800b558 <pbuf_free>
 800d6e4:	e000      	b.n	800d6e8 <icmp_send_response+0xc0>
    return;
 800d6e6:	bf00      	nop
}
 800d6e8:	3720      	adds	r7, #32
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd80      	pop	{r7, pc}
 800d6ee:	bf00      	nop
 800d6f0:	08011460 	.word	0x08011460
 800d6f4:	0801152c 	.word	0x0801152c
 800d6f8:	080114d0 	.word	0x080114d0

0800d6fc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800d6fc:	b480      	push	{r7}
 800d6fe:	b085      	sub	sp, #20
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800d704:	4b33      	ldr	r3, [pc, #204]	@ (800d7d4 <ip4_route+0xd8>)
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	60fb      	str	r3, [r7, #12]
 800d70a:	e036      	b.n	800d77a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d712:	f003 0301 	and.w	r3, r3, #1
 800d716:	b2db      	uxtb	r3, r3
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d02b      	beq.n	800d774 <ip4_route+0x78>
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d722:	089b      	lsrs	r3, r3, #2
 800d724:	f003 0301 	and.w	r3, r3, #1
 800d728:	b2db      	uxtb	r3, r3
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d022      	beq.n	800d774 <ip4_route+0x78>
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	3304      	adds	r3, #4
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d01d      	beq.n	800d774 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681a      	ldr	r2, [r3, #0]
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	3304      	adds	r3, #4
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	405a      	eors	r2, r3
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	3308      	adds	r3, #8
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	4013      	ands	r3, r2
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d101      	bne.n	800d754 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	e038      	b.n	800d7c6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d75a:	f003 0302 	and.w	r3, r3, #2
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d108      	bne.n	800d774 <ip4_route+0x78>
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681a      	ldr	r2, [r3, #0]
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	330c      	adds	r3, #12
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	429a      	cmp	r2, r3
 800d76e:	d101      	bne.n	800d774 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	e028      	b.n	800d7c6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	60fb      	str	r3, [r7, #12]
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d1c5      	bne.n	800d70c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d780:	4b15      	ldr	r3, [pc, #84]	@ (800d7d8 <ip4_route+0xdc>)
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d01a      	beq.n	800d7be <ip4_route+0xc2>
 800d788:	4b13      	ldr	r3, [pc, #76]	@ (800d7d8 <ip4_route+0xdc>)
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d790:	f003 0301 	and.w	r3, r3, #1
 800d794:	2b00      	cmp	r3, #0
 800d796:	d012      	beq.n	800d7be <ip4_route+0xc2>
 800d798:	4b0f      	ldr	r3, [pc, #60]	@ (800d7d8 <ip4_route+0xdc>)
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d7a0:	f003 0304 	and.w	r3, r3, #4
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d00a      	beq.n	800d7be <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d7a8:	4b0b      	ldr	r3, [pc, #44]	@ (800d7d8 <ip4_route+0xdc>)
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	3304      	adds	r3, #4
 800d7ae:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d004      	beq.n	800d7be <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	b2db      	uxtb	r3, r3
 800d7ba:	2b7f      	cmp	r3, #127	@ 0x7f
 800d7bc:	d101      	bne.n	800d7c2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800d7be:	2300      	movs	r3, #0
 800d7c0:	e001      	b.n	800d7c6 <ip4_route+0xca>
  }

  return netif_default;
 800d7c2:	4b05      	ldr	r3, [pc, #20]	@ (800d7d8 <ip4_route+0xdc>)
 800d7c4:	681b      	ldr	r3, [r3, #0]
}
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	3714      	adds	r7, #20
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d0:	4770      	bx	lr
 800d7d2:	bf00      	nop
 800d7d4:	20007c88 	.word	0x20007c88
 800d7d8:	20007c8c 	.word	0x20007c8c

0800d7dc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b082      	sub	sp, #8
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d7ea:	f003 0301 	and.w	r3, r3, #1
 800d7ee:	b2db      	uxtb	r3, r3
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d016      	beq.n	800d822 <ip4_input_accept+0x46>
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	3304      	adds	r3, #4
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d011      	beq.n	800d822 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d7fe:	4b0b      	ldr	r3, [pc, #44]	@ (800d82c <ip4_input_accept+0x50>)
 800d800:	695a      	ldr	r2, [r3, #20]
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	3304      	adds	r3, #4
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	429a      	cmp	r2, r3
 800d80a:	d008      	beq.n	800d81e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d80c:	4b07      	ldr	r3, [pc, #28]	@ (800d82c <ip4_input_accept+0x50>)
 800d80e:	695b      	ldr	r3, [r3, #20]
 800d810:	6879      	ldr	r1, [r7, #4]
 800d812:	4618      	mov	r0, r3
 800d814:	f000 f9fe 	bl	800dc14 <ip4_addr_isbroadcast_u32>
 800d818:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d001      	beq.n	800d822 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800d81e:	2301      	movs	r3, #1
 800d820:	e000      	b.n	800d824 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800d822:	2300      	movs	r3, #0
}
 800d824:	4618      	mov	r0, r3
 800d826:	3708      	adds	r7, #8
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}
 800d82c:	2000528c 	.word	0x2000528c

0800d830 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b086      	sub	sp, #24
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
 800d838:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	685b      	ldr	r3, [r3, #4]
 800d83e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800d840:	697b      	ldr	r3, [r7, #20]
 800d842:	781b      	ldrb	r3, [r3, #0]
 800d844:	091b      	lsrs	r3, r3, #4
 800d846:	b2db      	uxtb	r3, r3
 800d848:	2b04      	cmp	r3, #4
 800d84a:	d004      	beq.n	800d856 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800d84c:	6878      	ldr	r0, [r7, #4]
 800d84e:	f7fd fe83 	bl	800b558 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800d852:	2300      	movs	r3, #0
 800d854:	e0fd      	b.n	800da52 <ip4_input+0x222>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800d856:	697b      	ldr	r3, [r7, #20]
 800d858:	781b      	ldrb	r3, [r3, #0]
 800d85a:	f003 030f 	and.w	r3, r3, #15
 800d85e:	b2db      	uxtb	r3, r3
 800d860:	009b      	lsls	r3, r3, #2
 800d862:	b2db      	uxtb	r3, r3
 800d864:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d866:	697b      	ldr	r3, [r7, #20]
 800d868:	885b      	ldrh	r3, [r3, #2]
 800d86a:	b29b      	uxth	r3, r3
 800d86c:	4618      	mov	r0, r3
 800d86e:	f7fc fb65 	bl	8009f3c <lwip_htons>
 800d872:	4603      	mov	r3, r0
 800d874:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	891b      	ldrh	r3, [r3, #8]
 800d87a:	89ba      	ldrh	r2, [r7, #12]
 800d87c:	429a      	cmp	r2, r3
 800d87e:	d204      	bcs.n	800d88a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800d880:	89bb      	ldrh	r3, [r7, #12]
 800d882:	4619      	mov	r1, r3
 800d884:	6878      	ldr	r0, [r7, #4]
 800d886:	f7fd fce1 	bl	800b24c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	895b      	ldrh	r3, [r3, #10]
 800d88e:	89fa      	ldrh	r2, [r7, #14]
 800d890:	429a      	cmp	r2, r3
 800d892:	d807      	bhi.n	800d8a4 <ip4_input+0x74>
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	891b      	ldrh	r3, [r3, #8]
 800d898:	89ba      	ldrh	r2, [r7, #12]
 800d89a:	429a      	cmp	r2, r3
 800d89c:	d802      	bhi.n	800d8a4 <ip4_input+0x74>
 800d89e:	89fb      	ldrh	r3, [r7, #14]
 800d8a0:	2b13      	cmp	r3, #19
 800d8a2:	d804      	bhi.n	800d8ae <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800d8a4:	6878      	ldr	r0, [r7, #4]
 800d8a6:	f7fd fe57 	bl	800b558 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	e0d1      	b.n	800da52 <ip4_input+0x222>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800d8ae:	697b      	ldr	r3, [r7, #20]
 800d8b0:	691b      	ldr	r3, [r3, #16]
 800d8b2:	4a6a      	ldr	r2, [pc, #424]	@ (800da5c <ip4_input+0x22c>)
 800d8b4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800d8b6:	697b      	ldr	r3, [r7, #20]
 800d8b8:	68db      	ldr	r3, [r3, #12]
 800d8ba:	4a68      	ldr	r2, [pc, #416]	@ (800da5c <ip4_input+0x22c>)
 800d8bc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d8be:	4b67      	ldr	r3, [pc, #412]	@ (800da5c <ip4_input+0x22c>)
 800d8c0:	695b      	ldr	r3, [r3, #20]
 800d8c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d8c6:	2be0      	cmp	r3, #224	@ 0xe0
 800d8c8:	d112      	bne.n	800d8f0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d8d0:	f003 0301 	and.w	r3, r3, #1
 800d8d4:	b2db      	uxtb	r3, r3
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d007      	beq.n	800d8ea <ip4_input+0xba>
 800d8da:	683b      	ldr	r3, [r7, #0]
 800d8dc:	3304      	adds	r3, #4
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d002      	beq.n	800d8ea <ip4_input+0xba>
      netif = inp;
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	613b      	str	r3, [r7, #16]
 800d8e8:	e02a      	b.n	800d940 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	613b      	str	r3, [r7, #16]
 800d8ee:	e027      	b.n	800d940 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800d8f0:	6838      	ldr	r0, [r7, #0]
 800d8f2:	f7ff ff73 	bl	800d7dc <ip4_input_accept>
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d002      	beq.n	800d902 <ip4_input+0xd2>
      netif = inp;
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	613b      	str	r3, [r7, #16]
 800d900:	e01e      	b.n	800d940 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d902:	2300      	movs	r3, #0
 800d904:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800d906:	4b55      	ldr	r3, [pc, #340]	@ (800da5c <ip4_input+0x22c>)
 800d908:	695b      	ldr	r3, [r3, #20]
 800d90a:	b2db      	uxtb	r3, r3
 800d90c:	2b7f      	cmp	r3, #127	@ 0x7f
 800d90e:	d017      	beq.n	800d940 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800d910:	4b53      	ldr	r3, [pc, #332]	@ (800da60 <ip4_input+0x230>)
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	613b      	str	r3, [r7, #16]
 800d916:	e00e      	b.n	800d936 <ip4_input+0x106>
          if (netif == inp) {
 800d918:	693a      	ldr	r2, [r7, #16]
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	429a      	cmp	r2, r3
 800d91e:	d006      	beq.n	800d92e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800d920:	6938      	ldr	r0, [r7, #16]
 800d922:	f7ff ff5b 	bl	800d7dc <ip4_input_accept>
 800d926:	4603      	mov	r3, r0
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d108      	bne.n	800d93e <ip4_input+0x10e>
 800d92c:	e000      	b.n	800d930 <ip4_input+0x100>
            continue;
 800d92e:	bf00      	nop
        NETIF_FOREACH(netif) {
 800d930:	693b      	ldr	r3, [r7, #16]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	613b      	str	r3, [r7, #16]
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d1ed      	bne.n	800d918 <ip4_input+0xe8>
 800d93c:	e000      	b.n	800d940 <ip4_input+0x110>
            break;
 800d93e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d940:	4b46      	ldr	r3, [pc, #280]	@ (800da5c <ip4_input+0x22c>)
 800d942:	691b      	ldr	r3, [r3, #16]
 800d944:	6839      	ldr	r1, [r7, #0]
 800d946:	4618      	mov	r0, r3
 800d948:	f000 f964 	bl	800dc14 <ip4_addr_isbroadcast_u32>
 800d94c:	4603      	mov	r3, r0
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d105      	bne.n	800d95e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800d952:	4b42      	ldr	r3, [pc, #264]	@ (800da5c <ip4_input+0x22c>)
 800d954:	691b      	ldr	r3, [r3, #16]
 800d956:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d95a:	2be0      	cmp	r3, #224	@ 0xe0
 800d95c:	d104      	bne.n	800d968 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f7fd fdfa 	bl	800b558 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800d964:	2300      	movs	r3, #0
 800d966:	e074      	b.n	800da52 <ip4_input+0x222>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800d968:	693b      	ldr	r3, [r7, #16]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d104      	bne.n	800d978 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800d96e:	6878      	ldr	r0, [r7, #4]
 800d970:	f7fd fdf2 	bl	800b558 <pbuf_free>
    return ERR_OK;
 800d974:	2300      	movs	r3, #0
 800d976:	e06c      	b.n	800da52 <ip4_input+0x222>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800d978:	697b      	ldr	r3, [r7, #20]
 800d97a:	88db      	ldrh	r3, [r3, #6]
 800d97c:	b29b      	uxth	r3, r3
 800d97e:	461a      	mov	r2, r3
 800d980:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800d984:	4013      	ands	r3, r2
 800d986:	2b00      	cmp	r3, #0
 800d988:	d00b      	beq.n	800d9a2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800d98a:	6878      	ldr	r0, [r7, #4]
 800d98c:	f000 fc88 	bl	800e2a0 <ip4_reass>
 800d990:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d101      	bne.n	800d99c <ip4_input+0x16c>
      return ERR_OK;
 800d998:	2300      	movs	r3, #0
 800d99a:	e05a      	b.n	800da52 <ip4_input+0x222>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	685b      	ldr	r3, [r3, #4]
 800d9a0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800d9a2:	4a2e      	ldr	r2, [pc, #184]	@ (800da5c <ip4_input+0x22c>)
 800d9a4:	693b      	ldr	r3, [r7, #16]
 800d9a6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800d9a8:	4a2c      	ldr	r2, [pc, #176]	@ (800da5c <ip4_input+0x22c>)
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800d9ae:	4a2b      	ldr	r2, [pc, #172]	@ (800da5c <ip4_input+0x22c>)
 800d9b0:	697b      	ldr	r3, [r7, #20]
 800d9b2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800d9b4:	697b      	ldr	r3, [r7, #20]
 800d9b6:	781b      	ldrb	r3, [r3, #0]
 800d9b8:	f003 030f 	and.w	r3, r3, #15
 800d9bc:	b2db      	uxtb	r3, r3
 800d9be:	009b      	lsls	r3, r3, #2
 800d9c0:	b2db      	uxtb	r3, r3
 800d9c2:	461a      	mov	r2, r3
 800d9c4:	4b25      	ldr	r3, [pc, #148]	@ (800da5c <ip4_input+0x22c>)
 800d9c6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800d9c8:	89fb      	ldrh	r3, [r7, #14]
 800d9ca:	4619      	mov	r1, r3
 800d9cc:	6878      	ldr	r0, [r7, #4]
 800d9ce:	f7fd fd3d 	bl	800b44c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800d9d2:	697b      	ldr	r3, [r7, #20]
 800d9d4:	7a5b      	ldrb	r3, [r3, #9]
 800d9d6:	2b01      	cmp	r3, #1
 800d9d8:	d006      	beq.n	800d9e8 <ip4_input+0x1b8>
 800d9da:	2b11      	cmp	r3, #17
 800d9dc:	d109      	bne.n	800d9f2 <ip4_input+0x1c2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800d9de:	6839      	ldr	r1, [r7, #0]
 800d9e0:	6878      	ldr	r0, [r7, #4]
 800d9e2:	f7fe f9b5 	bl	800bd50 <udp_input>
        break;
 800d9e6:	e021      	b.n	800da2c <ip4_input+0x1fc>
        break;
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800d9e8:	6839      	ldr	r1, [r7, #0]
 800d9ea:	6878      	ldr	r0, [r7, #4]
 800d9ec:	f7ff fcf8 	bl	800d3e0 <icmp_input>
        break;
 800d9f0:	e01c      	b.n	800da2c <ip4_input+0x1fc>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d9f2:	4b1a      	ldr	r3, [pc, #104]	@ (800da5c <ip4_input+0x22c>)
 800d9f4:	695b      	ldr	r3, [r3, #20]
 800d9f6:	6939      	ldr	r1, [r7, #16]
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	f000 f90b 	bl	800dc14 <ip4_addr_isbroadcast_u32>
 800d9fe:	4603      	mov	r3, r0
 800da00:	2b00      	cmp	r3, #0
 800da02:	d10f      	bne.n	800da24 <ip4_input+0x1f4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800da04:	4b15      	ldr	r3, [pc, #84]	@ (800da5c <ip4_input+0x22c>)
 800da06:	695b      	ldr	r3, [r3, #20]
 800da08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800da0c:	2be0      	cmp	r3, #224	@ 0xe0
 800da0e:	d009      	beq.n	800da24 <ip4_input+0x1f4>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800da10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800da14:	4619      	mov	r1, r3
 800da16:	6878      	ldr	r0, [r7, #4]
 800da18:	f7fd fd8b 	bl	800b532 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800da1c:	2102      	movs	r1, #2
 800da1e:	6878      	ldr	r0, [r7, #4]
 800da20:	f7ff fde2 	bl	800d5e8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800da24:	6878      	ldr	r0, [r7, #4]
 800da26:	f7fd fd97 	bl	800b558 <pbuf_free>
        break;
 800da2a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800da2c:	4b0b      	ldr	r3, [pc, #44]	@ (800da5c <ip4_input+0x22c>)
 800da2e:	2200      	movs	r2, #0
 800da30:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800da32:	4b0a      	ldr	r3, [pc, #40]	@ (800da5c <ip4_input+0x22c>)
 800da34:	2200      	movs	r2, #0
 800da36:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800da38:	4b08      	ldr	r3, [pc, #32]	@ (800da5c <ip4_input+0x22c>)
 800da3a:	2200      	movs	r2, #0
 800da3c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800da3e:	4b07      	ldr	r3, [pc, #28]	@ (800da5c <ip4_input+0x22c>)
 800da40:	2200      	movs	r2, #0
 800da42:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800da44:	4b05      	ldr	r3, [pc, #20]	@ (800da5c <ip4_input+0x22c>)
 800da46:	2200      	movs	r2, #0
 800da48:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800da4a:	4b04      	ldr	r3, [pc, #16]	@ (800da5c <ip4_input+0x22c>)
 800da4c:	2200      	movs	r2, #0
 800da4e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800da50:	2300      	movs	r3, #0
}
 800da52:	4618      	mov	r0, r3
 800da54:	3718      	adds	r7, #24
 800da56:	46bd      	mov	sp, r7
 800da58:	bd80      	pop	{r7, pc}
 800da5a:	bf00      	nop
 800da5c:	2000528c 	.word	0x2000528c
 800da60:	20007c88 	.word	0x20007c88

0800da64 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b08a      	sub	sp, #40	@ 0x28
 800da68:	af04      	add	r7, sp, #16
 800da6a:	60f8      	str	r0, [r7, #12]
 800da6c:	60b9      	str	r1, [r7, #8]
 800da6e:	607a      	str	r2, [r7, #4]
 800da70:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800da72:	68bb      	ldr	r3, [r7, #8]
 800da74:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d009      	beq.n	800da90 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d003      	beq.n	800da8a <ip4_output_if+0x26>
 800da82:	68bb      	ldr	r3, [r7, #8]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d102      	bne.n	800da90 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800da8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da8c:	3304      	adds	r3, #4
 800da8e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800da90:	78fa      	ldrb	r2, [r7, #3]
 800da92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da94:	9302      	str	r3, [sp, #8]
 800da96:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800da9a:	9301      	str	r3, [sp, #4]
 800da9c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800daa0:	9300      	str	r3, [sp, #0]
 800daa2:	4613      	mov	r3, r2
 800daa4:	687a      	ldr	r2, [r7, #4]
 800daa6:	6979      	ldr	r1, [r7, #20]
 800daa8:	68f8      	ldr	r0, [r7, #12]
 800daaa:	f000 f805 	bl	800dab8 <ip4_output_if_src>
 800daae:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800dab0:	4618      	mov	r0, r3
 800dab2:	3718      	adds	r7, #24
 800dab4:	46bd      	mov	sp, r7
 800dab6:	bd80      	pop	{r7, pc}

0800dab8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b088      	sub	sp, #32
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	60f8      	str	r0, [r7, #12]
 800dac0:	60b9      	str	r1, [r7, #8]
 800dac2:	607a      	str	r2, [r7, #4]
 800dac4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	7b9b      	ldrb	r3, [r3, #14]
 800daca:	2b01      	cmp	r3, #1
 800dacc:	d006      	beq.n	800dadc <ip4_output_if_src+0x24>
 800dace:	4b4b      	ldr	r3, [pc, #300]	@ (800dbfc <ip4_output_if_src+0x144>)
 800dad0:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800dad4:	494a      	ldr	r1, [pc, #296]	@ (800dc00 <ip4_output_if_src+0x148>)
 800dad6:	484b      	ldr	r0, [pc, #300]	@ (800dc04 <ip4_output_if_src+0x14c>)
 800dad8:	f001 f94a 	bl	800ed70 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d060      	beq.n	800dba4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800dae2:	2314      	movs	r3, #20
 800dae4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800dae6:	2114      	movs	r1, #20
 800dae8:	68f8      	ldr	r0, [r7, #12]
 800daea:	f7fd fc9f 	bl	800b42c <pbuf_add_header>
 800daee:	4603      	mov	r3, r0
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d002      	beq.n	800dafa <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800daf4:	f06f 0301 	mvn.w	r3, #1
 800daf8:	e07c      	b.n	800dbf4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	685b      	ldr	r3, [r3, #4]
 800dafe:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	895b      	ldrh	r3, [r3, #10]
 800db04:	2b13      	cmp	r3, #19
 800db06:	d806      	bhi.n	800db16 <ip4_output_if_src+0x5e>
 800db08:	4b3c      	ldr	r3, [pc, #240]	@ (800dbfc <ip4_output_if_src+0x144>)
 800db0a:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800db0e:	493e      	ldr	r1, [pc, #248]	@ (800dc08 <ip4_output_if_src+0x150>)
 800db10:	483c      	ldr	r0, [pc, #240]	@ (800dc04 <ip4_output_if_src+0x14c>)
 800db12:	f001 f92d 	bl	800ed70 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800db16:	69fb      	ldr	r3, [r7, #28]
 800db18:	78fa      	ldrb	r2, [r7, #3]
 800db1a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800db1c:	69fb      	ldr	r3, [r7, #28]
 800db1e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800db22:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681a      	ldr	r2, [r3, #0]
 800db28:	69fb      	ldr	r3, [r7, #28]
 800db2a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800db2c:	8b7b      	ldrh	r3, [r7, #26]
 800db2e:	089b      	lsrs	r3, r3, #2
 800db30:	b29b      	uxth	r3, r3
 800db32:	b2db      	uxtb	r3, r3
 800db34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db38:	b2da      	uxtb	r2, r3
 800db3a:	69fb      	ldr	r3, [r7, #28]
 800db3c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800db3e:	69fb      	ldr	r3, [r7, #28]
 800db40:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800db44:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	891b      	ldrh	r3, [r3, #8]
 800db4a:	4618      	mov	r0, r3
 800db4c:	f7fc f9f6 	bl	8009f3c <lwip_htons>
 800db50:	4603      	mov	r3, r0
 800db52:	461a      	mov	r2, r3
 800db54:	69fb      	ldr	r3, [r7, #28]
 800db56:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800db58:	69fb      	ldr	r3, [r7, #28]
 800db5a:	2200      	movs	r2, #0
 800db5c:	719a      	strb	r2, [r3, #6]
 800db5e:	2200      	movs	r2, #0
 800db60:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800db62:	4b2a      	ldr	r3, [pc, #168]	@ (800dc0c <ip4_output_if_src+0x154>)
 800db64:	881b      	ldrh	r3, [r3, #0]
 800db66:	4618      	mov	r0, r3
 800db68:	f7fc f9e8 	bl	8009f3c <lwip_htons>
 800db6c:	4603      	mov	r3, r0
 800db6e:	461a      	mov	r2, r3
 800db70:	69fb      	ldr	r3, [r7, #28]
 800db72:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800db74:	4b25      	ldr	r3, [pc, #148]	@ (800dc0c <ip4_output_if_src+0x154>)
 800db76:	881b      	ldrh	r3, [r3, #0]
 800db78:	3301      	adds	r3, #1
 800db7a:	b29a      	uxth	r2, r3
 800db7c:	4b23      	ldr	r3, [pc, #140]	@ (800dc0c <ip4_output_if_src+0x154>)
 800db7e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800db80:	68bb      	ldr	r3, [r7, #8]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d104      	bne.n	800db90 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800db86:	4b22      	ldr	r3, [pc, #136]	@ (800dc10 <ip4_output_if_src+0x158>)
 800db88:	681a      	ldr	r2, [r3, #0]
 800db8a:	69fb      	ldr	r3, [r7, #28]
 800db8c:	60da      	str	r2, [r3, #12]
 800db8e:	e003      	b.n	800db98 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	681a      	ldr	r2, [r3, #0]
 800db94:	69fb      	ldr	r3, [r7, #28]
 800db96:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800db98:	69fb      	ldr	r3, [r7, #28]
 800db9a:	2200      	movs	r2, #0
 800db9c:	729a      	strb	r2, [r3, #10]
 800db9e:	2200      	movs	r2, #0
 800dba0:	72da      	strb	r2, [r3, #11]
 800dba2:	e00f      	b.n	800dbc4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	895b      	ldrh	r3, [r3, #10]
 800dba8:	2b13      	cmp	r3, #19
 800dbaa:	d802      	bhi.n	800dbb2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800dbac:	f06f 0301 	mvn.w	r3, #1
 800dbb0:	e020      	b.n	800dbf4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	685b      	ldr	r3, [r3, #4]
 800dbb6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800dbb8:	69fb      	ldr	r3, [r7, #28]
 800dbba:	691b      	ldr	r3, [r3, #16]
 800dbbc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800dbbe:	f107 0314 	add.w	r3, r7, #20
 800dbc2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800dbc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbc6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d00c      	beq.n	800dbe6 <ip4_output_if_src+0x12e>
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	891a      	ldrh	r2, [r3, #8]
 800dbd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbd2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800dbd4:	429a      	cmp	r2, r3
 800dbd6:	d906      	bls.n	800dbe6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800dbd8:	687a      	ldr	r2, [r7, #4]
 800dbda:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800dbdc:	68f8      	ldr	r0, [r7, #12]
 800dbde:	f000 fd53 	bl	800e688 <ip4_frag>
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	e006      	b.n	800dbf4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800dbe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbe8:	695b      	ldr	r3, [r3, #20]
 800dbea:	687a      	ldr	r2, [r7, #4]
 800dbec:	68f9      	ldr	r1, [r7, #12]
 800dbee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dbf0:	4798      	blx	r3
 800dbf2:	4603      	mov	r3, r0
}
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	3720      	adds	r7, #32
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	bd80      	pop	{r7, pc}
 800dbfc:	08011558 	.word	0x08011558
 800dc00:	0801158c 	.word	0x0801158c
 800dc04:	08011598 	.word	0x08011598
 800dc08:	080115c0 	.word	0x080115c0
 800dc0c:	20007d92 	.word	0x20007d92
 800dc10:	08011940 	.word	0x08011940

0800dc14 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800dc14:	b480      	push	{r7}
 800dc16:	b085      	sub	sp, #20
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
 800dc1c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dc28:	d002      	beq.n	800dc30 <ip4_addr_isbroadcast_u32+0x1c>
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d101      	bne.n	800dc34 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800dc30:	2301      	movs	r3, #1
 800dc32:	e02a      	b.n	800dc8a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800dc34:	683b      	ldr	r3, [r7, #0]
 800dc36:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dc3a:	f003 0302 	and.w	r3, r3, #2
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d101      	bne.n	800dc46 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800dc42:	2300      	movs	r3, #0
 800dc44:	e021      	b.n	800dc8a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800dc46:	683b      	ldr	r3, [r7, #0]
 800dc48:	3304      	adds	r3, #4
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	687a      	ldr	r2, [r7, #4]
 800dc4e:	429a      	cmp	r2, r3
 800dc50:	d101      	bne.n	800dc56 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800dc52:	2300      	movs	r3, #0
 800dc54:	e019      	b.n	800dc8a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800dc56:	68fa      	ldr	r2, [r7, #12]
 800dc58:	683b      	ldr	r3, [r7, #0]
 800dc5a:	3304      	adds	r3, #4
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	405a      	eors	r2, r3
 800dc60:	683b      	ldr	r3, [r7, #0]
 800dc62:	3308      	adds	r3, #8
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	4013      	ands	r3, r2
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d10d      	bne.n	800dc88 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	3308      	adds	r3, #8
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	43da      	mvns	r2, r3
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	3308      	adds	r3, #8
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800dc80:	429a      	cmp	r2, r3
 800dc82:	d101      	bne.n	800dc88 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800dc84:	2301      	movs	r3, #1
 800dc86:	e000      	b.n	800dc8a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800dc88:	2300      	movs	r3, #0
  }
}
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	3714      	adds	r7, #20
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc94:	4770      	bx	lr
	...

0800dc98 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b084      	sub	sp, #16
 800dc9c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800dc9e:	2300      	movs	r3, #0
 800dca0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800dca2:	4b12      	ldr	r3, [pc, #72]	@ (800dcec <ip_reass_tmr+0x54>)
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800dca8:	e018      	b.n	800dcdc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	7fdb      	ldrb	r3, [r3, #31]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d00b      	beq.n	800dcca <ip_reass_tmr+0x32>
      r->timer--;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	7fdb      	ldrb	r3, [r3, #31]
 800dcb6:	3b01      	subs	r3, #1
 800dcb8:	b2da      	uxtb	r2, r3
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	60fb      	str	r3, [r7, #12]
 800dcc8:	e008      	b.n	800dcdc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800dcd4:	68b9      	ldr	r1, [r7, #8]
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	f000 f80a 	bl	800dcf0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d1e3      	bne.n	800dcaa <ip_reass_tmr+0x12>
    }
  }
}
 800dce2:	bf00      	nop
 800dce4:	bf00      	nop
 800dce6:	3710      	adds	r7, #16
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}
 800dcec:	20007d94 	.word	0x20007d94

0800dcf0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b088      	sub	sp, #32
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
 800dcf8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800dcfe:	683a      	ldr	r2, [r7, #0]
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	429a      	cmp	r2, r3
 800dd04:	d105      	bne.n	800dd12 <ip_reass_free_complete_datagram+0x22>
 800dd06:	4b45      	ldr	r3, [pc, #276]	@ (800de1c <ip_reass_free_complete_datagram+0x12c>)
 800dd08:	22ab      	movs	r2, #171	@ 0xab
 800dd0a:	4945      	ldr	r1, [pc, #276]	@ (800de20 <ip_reass_free_complete_datagram+0x130>)
 800dd0c:	4845      	ldr	r0, [pc, #276]	@ (800de24 <ip_reass_free_complete_datagram+0x134>)
 800dd0e:	f001 f82f 	bl	800ed70 <iprintf>
  if (prev != NULL) {
 800dd12:	683b      	ldr	r3, [r7, #0]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d00a      	beq.n	800dd2e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800dd18:	683b      	ldr	r3, [r7, #0]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	687a      	ldr	r2, [r7, #4]
 800dd1e:	429a      	cmp	r2, r3
 800dd20:	d005      	beq.n	800dd2e <ip_reass_free_complete_datagram+0x3e>
 800dd22:	4b3e      	ldr	r3, [pc, #248]	@ (800de1c <ip_reass_free_complete_datagram+0x12c>)
 800dd24:	22ad      	movs	r2, #173	@ 0xad
 800dd26:	4940      	ldr	r1, [pc, #256]	@ (800de28 <ip_reass_free_complete_datagram+0x138>)
 800dd28:	483e      	ldr	r0, [pc, #248]	@ (800de24 <ip_reass_free_complete_datagram+0x134>)
 800dd2a:	f001 f821 	bl	800ed70 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	685b      	ldr	r3, [r3, #4]
 800dd32:	685b      	ldr	r3, [r3, #4]
 800dd34:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800dd36:	697b      	ldr	r3, [r7, #20]
 800dd38:	889b      	ldrh	r3, [r3, #4]
 800dd3a:	b29b      	uxth	r3, r3
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d12a      	bne.n	800dd96 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	685b      	ldr	r3, [r3, #4]
 800dd44:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800dd46:	697b      	ldr	r3, [r7, #20]
 800dd48:	681a      	ldr	r2, [r3, #0]
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800dd4e:	69bb      	ldr	r3, [r7, #24]
 800dd50:	6858      	ldr	r0, [r3, #4]
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	3308      	adds	r3, #8
 800dd56:	2214      	movs	r2, #20
 800dd58:	4619      	mov	r1, r3
 800dd5a:	f001 f8fc 	bl	800ef56 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800dd5e:	2101      	movs	r1, #1
 800dd60:	69b8      	ldr	r0, [r7, #24]
 800dd62:	f7ff fc51 	bl	800d608 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800dd66:	69b8      	ldr	r0, [r7, #24]
 800dd68:	f7fd fc7e 	bl	800b668 <pbuf_clen>
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800dd70:	8bfa      	ldrh	r2, [r7, #30]
 800dd72:	8a7b      	ldrh	r3, [r7, #18]
 800dd74:	4413      	add	r3, r2
 800dd76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dd7a:	db05      	blt.n	800dd88 <ip_reass_free_complete_datagram+0x98>
 800dd7c:	4b27      	ldr	r3, [pc, #156]	@ (800de1c <ip_reass_free_complete_datagram+0x12c>)
 800dd7e:	22bc      	movs	r2, #188	@ 0xbc
 800dd80:	492a      	ldr	r1, [pc, #168]	@ (800de2c <ip_reass_free_complete_datagram+0x13c>)
 800dd82:	4828      	ldr	r0, [pc, #160]	@ (800de24 <ip_reass_free_complete_datagram+0x134>)
 800dd84:	f000 fff4 	bl	800ed70 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800dd88:	8bfa      	ldrh	r2, [r7, #30]
 800dd8a:	8a7b      	ldrh	r3, [r7, #18]
 800dd8c:	4413      	add	r3, r2
 800dd8e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800dd90:	69b8      	ldr	r0, [r7, #24]
 800dd92:	f7fd fbe1 	bl	800b558 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	685b      	ldr	r3, [r3, #4]
 800dd9a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800dd9c:	e01f      	b.n	800ddde <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800dd9e:	69bb      	ldr	r3, [r7, #24]
 800dda0:	685b      	ldr	r3, [r3, #4]
 800dda2:	617b      	str	r3, [r7, #20]
    pcur = p;
 800dda4:	69bb      	ldr	r3, [r7, #24]
 800dda6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800dda8:	697b      	ldr	r3, [r7, #20]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800ddae:	68f8      	ldr	r0, [r7, #12]
 800ddb0:	f7fd fc5a 	bl	800b668 <pbuf_clen>
 800ddb4:	4603      	mov	r3, r0
 800ddb6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ddb8:	8bfa      	ldrh	r2, [r7, #30]
 800ddba:	8a7b      	ldrh	r3, [r7, #18]
 800ddbc:	4413      	add	r3, r2
 800ddbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ddc2:	db05      	blt.n	800ddd0 <ip_reass_free_complete_datagram+0xe0>
 800ddc4:	4b15      	ldr	r3, [pc, #84]	@ (800de1c <ip_reass_free_complete_datagram+0x12c>)
 800ddc6:	22cc      	movs	r2, #204	@ 0xcc
 800ddc8:	4918      	ldr	r1, [pc, #96]	@ (800de2c <ip_reass_free_complete_datagram+0x13c>)
 800ddca:	4816      	ldr	r0, [pc, #88]	@ (800de24 <ip_reass_free_complete_datagram+0x134>)
 800ddcc:	f000 ffd0 	bl	800ed70 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800ddd0:	8bfa      	ldrh	r2, [r7, #30]
 800ddd2:	8a7b      	ldrh	r3, [r7, #18]
 800ddd4:	4413      	add	r3, r2
 800ddd6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800ddd8:	68f8      	ldr	r0, [r7, #12]
 800ddda:	f7fd fbbd 	bl	800b558 <pbuf_free>
  while (p != NULL) {
 800ddde:	69bb      	ldr	r3, [r7, #24]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d1dc      	bne.n	800dd9e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800dde4:	6839      	ldr	r1, [r7, #0]
 800dde6:	6878      	ldr	r0, [r7, #4]
 800dde8:	f000 f8c2 	bl	800df70 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800ddec:	4b10      	ldr	r3, [pc, #64]	@ (800de30 <ip_reass_free_complete_datagram+0x140>)
 800ddee:	881b      	ldrh	r3, [r3, #0]
 800ddf0:	8bfa      	ldrh	r2, [r7, #30]
 800ddf2:	429a      	cmp	r2, r3
 800ddf4:	d905      	bls.n	800de02 <ip_reass_free_complete_datagram+0x112>
 800ddf6:	4b09      	ldr	r3, [pc, #36]	@ (800de1c <ip_reass_free_complete_datagram+0x12c>)
 800ddf8:	22d2      	movs	r2, #210	@ 0xd2
 800ddfa:	490e      	ldr	r1, [pc, #56]	@ (800de34 <ip_reass_free_complete_datagram+0x144>)
 800ddfc:	4809      	ldr	r0, [pc, #36]	@ (800de24 <ip_reass_free_complete_datagram+0x134>)
 800ddfe:	f000 ffb7 	bl	800ed70 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800de02:	4b0b      	ldr	r3, [pc, #44]	@ (800de30 <ip_reass_free_complete_datagram+0x140>)
 800de04:	881a      	ldrh	r2, [r3, #0]
 800de06:	8bfb      	ldrh	r3, [r7, #30]
 800de08:	1ad3      	subs	r3, r2, r3
 800de0a:	b29a      	uxth	r2, r3
 800de0c:	4b08      	ldr	r3, [pc, #32]	@ (800de30 <ip_reass_free_complete_datagram+0x140>)
 800de0e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800de10:	8bfb      	ldrh	r3, [r7, #30]
}
 800de12:	4618      	mov	r0, r3
 800de14:	3720      	adds	r7, #32
 800de16:	46bd      	mov	sp, r7
 800de18:	bd80      	pop	{r7, pc}
 800de1a:	bf00      	nop
 800de1c:	080115f0 	.word	0x080115f0
 800de20:	0801162c 	.word	0x0801162c
 800de24:	08011638 	.word	0x08011638
 800de28:	08011660 	.word	0x08011660
 800de2c:	08011674 	.word	0x08011674
 800de30:	20007d98 	.word	0x20007d98
 800de34:	08011694 	.word	0x08011694

0800de38 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b08a      	sub	sp, #40	@ 0x28
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
 800de40:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800de42:	2300      	movs	r3, #0
 800de44:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800de46:	2300      	movs	r3, #0
 800de48:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800de4a:	2300      	movs	r3, #0
 800de4c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800de4e:	2300      	movs	r3, #0
 800de50:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800de52:	2300      	movs	r3, #0
 800de54:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800de56:	4b28      	ldr	r3, [pc, #160]	@ (800def8 <ip_reass_remove_oldest_datagram+0xc0>)
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800de5c:	e030      	b.n	800dec0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800de5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de60:	695a      	ldr	r2, [r3, #20]
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	68db      	ldr	r3, [r3, #12]
 800de66:	429a      	cmp	r2, r3
 800de68:	d10c      	bne.n	800de84 <ip_reass_remove_oldest_datagram+0x4c>
 800de6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de6c:	699a      	ldr	r2, [r3, #24]
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	691b      	ldr	r3, [r3, #16]
 800de72:	429a      	cmp	r2, r3
 800de74:	d106      	bne.n	800de84 <ip_reass_remove_oldest_datagram+0x4c>
 800de76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de78:	899a      	ldrh	r2, [r3, #12]
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	889b      	ldrh	r3, [r3, #4]
 800de7e:	b29b      	uxth	r3, r3
 800de80:	429a      	cmp	r2, r3
 800de82:	d014      	beq.n	800deae <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800de84:	693b      	ldr	r3, [r7, #16]
 800de86:	3301      	adds	r3, #1
 800de88:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800de8a:	6a3b      	ldr	r3, [r7, #32]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d104      	bne.n	800de9a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800de90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de92:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800de94:	69fb      	ldr	r3, [r7, #28]
 800de96:	61bb      	str	r3, [r7, #24]
 800de98:	e009      	b.n	800deae <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800de9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de9c:	7fda      	ldrb	r2, [r3, #31]
 800de9e:	6a3b      	ldr	r3, [r7, #32]
 800dea0:	7fdb      	ldrb	r3, [r3, #31]
 800dea2:	429a      	cmp	r2, r3
 800dea4:	d803      	bhi.n	800deae <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800dea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dea8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800deaa:	69fb      	ldr	r3, [r7, #28]
 800deac:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800deae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d001      	beq.n	800deba <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800deb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deb8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800deba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800dec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d1cb      	bne.n	800de5e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800dec6:	6a3b      	ldr	r3, [r7, #32]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d008      	beq.n	800dede <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800decc:	69b9      	ldr	r1, [r7, #24]
 800dece:	6a38      	ldr	r0, [r7, #32]
 800ded0:	f7ff ff0e 	bl	800dcf0 <ip_reass_free_complete_datagram>
 800ded4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800ded6:	697a      	ldr	r2, [r7, #20]
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	4413      	add	r3, r2
 800dedc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800dede:	697a      	ldr	r2, [r7, #20]
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	429a      	cmp	r2, r3
 800dee4:	da02      	bge.n	800deec <ip_reass_remove_oldest_datagram+0xb4>
 800dee6:	693b      	ldr	r3, [r7, #16]
 800dee8:	2b01      	cmp	r3, #1
 800deea:	dcac      	bgt.n	800de46 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800deec:	697b      	ldr	r3, [r7, #20]
}
 800deee:	4618      	mov	r0, r3
 800def0:	3728      	adds	r7, #40	@ 0x28
 800def2:	46bd      	mov	sp, r7
 800def4:	bd80      	pop	{r7, pc}
 800def6:	bf00      	nop
 800def8:	20007d94 	.word	0x20007d94

0800defc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b084      	sub	sp, #16
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
 800df04:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800df06:	2001      	movs	r0, #1
 800df08:	f7fc fc72 	bl	800a7f0 <memp_malloc>
 800df0c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d110      	bne.n	800df36 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800df14:	6839      	ldr	r1, [r7, #0]
 800df16:	6878      	ldr	r0, [r7, #4]
 800df18:	f7ff ff8e 	bl	800de38 <ip_reass_remove_oldest_datagram>
 800df1c:	4602      	mov	r2, r0
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	4293      	cmp	r3, r2
 800df22:	dc03      	bgt.n	800df2c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800df24:	2001      	movs	r0, #1
 800df26:	f7fc fc63 	bl	800a7f0 <memp_malloc>
 800df2a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d101      	bne.n	800df36 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800df32:	2300      	movs	r3, #0
 800df34:	e016      	b.n	800df64 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800df36:	2220      	movs	r2, #32
 800df38:	2100      	movs	r1, #0
 800df3a:	68f8      	ldr	r0, [r7, #12]
 800df3c:	f000 ffb2 	bl	800eea4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	220f      	movs	r2, #15
 800df44:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800df46:	4b09      	ldr	r3, [pc, #36]	@ (800df6c <ip_reass_enqueue_new_datagram+0x70>)
 800df48:	681a      	ldr	r2, [r3, #0]
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800df4e:	4a07      	ldr	r2, [pc, #28]	@ (800df6c <ip_reass_enqueue_new_datagram+0x70>)
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	3308      	adds	r3, #8
 800df58:	2214      	movs	r2, #20
 800df5a:	6879      	ldr	r1, [r7, #4]
 800df5c:	4618      	mov	r0, r3
 800df5e:	f000 fffa 	bl	800ef56 <memcpy>
  return ipr;
 800df62:	68fb      	ldr	r3, [r7, #12]
}
 800df64:	4618      	mov	r0, r3
 800df66:	3710      	adds	r7, #16
 800df68:	46bd      	mov	sp, r7
 800df6a:	bd80      	pop	{r7, pc}
 800df6c:	20007d94 	.word	0x20007d94

0800df70 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b082      	sub	sp, #8
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
 800df78:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800df7a:	4b10      	ldr	r3, [pc, #64]	@ (800dfbc <ip_reass_dequeue_datagram+0x4c>)
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	687a      	ldr	r2, [r7, #4]
 800df80:	429a      	cmp	r2, r3
 800df82:	d104      	bne.n	800df8e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	4a0c      	ldr	r2, [pc, #48]	@ (800dfbc <ip_reass_dequeue_datagram+0x4c>)
 800df8a:	6013      	str	r3, [r2, #0]
 800df8c:	e00d      	b.n	800dfaa <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800df8e:	683b      	ldr	r3, [r7, #0]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d106      	bne.n	800dfa2 <ip_reass_dequeue_datagram+0x32>
 800df94:	4b0a      	ldr	r3, [pc, #40]	@ (800dfc0 <ip_reass_dequeue_datagram+0x50>)
 800df96:	f240 1245 	movw	r2, #325	@ 0x145
 800df9a:	490a      	ldr	r1, [pc, #40]	@ (800dfc4 <ip_reass_dequeue_datagram+0x54>)
 800df9c:	480a      	ldr	r0, [pc, #40]	@ (800dfc8 <ip_reass_dequeue_datagram+0x58>)
 800df9e:	f000 fee7 	bl	800ed70 <iprintf>
    prev->next = ipr->next;
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681a      	ldr	r2, [r3, #0]
 800dfa6:	683b      	ldr	r3, [r7, #0]
 800dfa8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800dfaa:	6879      	ldr	r1, [r7, #4]
 800dfac:	2001      	movs	r0, #1
 800dfae:	f7fc fc8f 	bl	800a8d0 <memp_free>
}
 800dfb2:	bf00      	nop
 800dfb4:	3708      	adds	r7, #8
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	bd80      	pop	{r7, pc}
 800dfba:	bf00      	nop
 800dfbc:	20007d94 	.word	0x20007d94
 800dfc0:	080115f0 	.word	0x080115f0
 800dfc4:	080116b8 	.word	0x080116b8
 800dfc8:	08011638 	.word	0x08011638

0800dfcc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b08c      	sub	sp, #48	@ 0x30
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	60f8      	str	r0, [r7, #12]
 800dfd4:	60b9      	str	r1, [r7, #8]
 800dfd6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800dfd8:	2300      	movs	r3, #0
 800dfda:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800dfdc:	2301      	movs	r3, #1
 800dfde:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800dfe0:	68bb      	ldr	r3, [r7, #8]
 800dfe2:	685b      	ldr	r3, [r3, #4]
 800dfe4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800dfe6:	69fb      	ldr	r3, [r7, #28]
 800dfe8:	885b      	ldrh	r3, [r3, #2]
 800dfea:	b29b      	uxth	r3, r3
 800dfec:	4618      	mov	r0, r3
 800dfee:	f7fb ffa5 	bl	8009f3c <lwip_htons>
 800dff2:	4603      	mov	r3, r0
 800dff4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800dff6:	69fb      	ldr	r3, [r7, #28]
 800dff8:	781b      	ldrb	r3, [r3, #0]
 800dffa:	f003 030f 	and.w	r3, r3, #15
 800dffe:	b2db      	uxtb	r3, r3
 800e000:	009b      	lsls	r3, r3, #2
 800e002:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800e004:	7e7b      	ldrb	r3, [r7, #25]
 800e006:	b29b      	uxth	r3, r3
 800e008:	8b7a      	ldrh	r2, [r7, #26]
 800e00a:	429a      	cmp	r2, r3
 800e00c:	d202      	bcs.n	800e014 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e00e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e012:	e135      	b.n	800e280 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800e014:	7e7b      	ldrb	r3, [r7, #25]
 800e016:	b29b      	uxth	r3, r3
 800e018:	8b7a      	ldrh	r2, [r7, #26]
 800e01a:	1ad3      	subs	r3, r2, r3
 800e01c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e01e:	69fb      	ldr	r3, [r7, #28]
 800e020:	88db      	ldrh	r3, [r3, #6]
 800e022:	b29b      	uxth	r3, r3
 800e024:	4618      	mov	r0, r3
 800e026:	f7fb ff89 	bl	8009f3c <lwip_htons>
 800e02a:	4603      	mov	r3, r0
 800e02c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e030:	b29b      	uxth	r3, r3
 800e032:	00db      	lsls	r3, r3, #3
 800e034:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800e036:	68bb      	ldr	r3, [r7, #8]
 800e038:	685b      	ldr	r3, [r3, #4]
 800e03a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800e03c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e03e:	2200      	movs	r2, #0
 800e040:	701a      	strb	r2, [r3, #0]
 800e042:	2200      	movs	r2, #0
 800e044:	705a      	strb	r2, [r3, #1]
 800e046:	2200      	movs	r2, #0
 800e048:	709a      	strb	r2, [r3, #2]
 800e04a:	2200      	movs	r2, #0
 800e04c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800e04e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e050:	8afa      	ldrh	r2, [r7, #22]
 800e052:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800e054:	8afa      	ldrh	r2, [r7, #22]
 800e056:	8b7b      	ldrh	r3, [r7, #26]
 800e058:	4413      	add	r3, r2
 800e05a:	b29a      	uxth	r2, r3
 800e05c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e05e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800e060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e062:	88db      	ldrh	r3, [r3, #6]
 800e064:	b29b      	uxth	r3, r3
 800e066:	8afa      	ldrh	r2, [r7, #22]
 800e068:	429a      	cmp	r2, r3
 800e06a:	d902      	bls.n	800e072 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e06c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e070:	e106      	b.n	800e280 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	685b      	ldr	r3, [r3, #4]
 800e076:	627b      	str	r3, [r7, #36]	@ 0x24
 800e078:	e068      	b.n	800e14c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800e07a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e07c:	685b      	ldr	r3, [r3, #4]
 800e07e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800e080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e082:	889b      	ldrh	r3, [r3, #4]
 800e084:	b29a      	uxth	r2, r3
 800e086:	693b      	ldr	r3, [r7, #16]
 800e088:	889b      	ldrh	r3, [r3, #4]
 800e08a:	b29b      	uxth	r3, r3
 800e08c:	429a      	cmp	r2, r3
 800e08e:	d235      	bcs.n	800e0fc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800e090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e092:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e094:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800e096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d020      	beq.n	800e0de <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e09c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e09e:	889b      	ldrh	r3, [r3, #4]
 800e0a0:	b29a      	uxth	r2, r3
 800e0a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0a4:	88db      	ldrh	r3, [r3, #6]
 800e0a6:	b29b      	uxth	r3, r3
 800e0a8:	429a      	cmp	r2, r3
 800e0aa:	d307      	bcc.n	800e0bc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800e0ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0ae:	88db      	ldrh	r3, [r3, #6]
 800e0b0:	b29a      	uxth	r2, r3
 800e0b2:	693b      	ldr	r3, [r7, #16]
 800e0b4:	889b      	ldrh	r3, [r3, #4]
 800e0b6:	b29b      	uxth	r3, r3
 800e0b8:	429a      	cmp	r2, r3
 800e0ba:	d902      	bls.n	800e0c2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e0bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e0c0:	e0de      	b.n	800e280 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800e0c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0c4:	68ba      	ldr	r2, [r7, #8]
 800e0c6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800e0c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0ca:	88db      	ldrh	r3, [r3, #6]
 800e0cc:	b29a      	uxth	r2, r3
 800e0ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0d0:	889b      	ldrh	r3, [r3, #4]
 800e0d2:	b29b      	uxth	r3, r3
 800e0d4:	429a      	cmp	r2, r3
 800e0d6:	d03d      	beq.n	800e154 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e0d8:	2300      	movs	r3, #0
 800e0da:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800e0dc:	e03a      	b.n	800e154 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800e0de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0e0:	88db      	ldrh	r3, [r3, #6]
 800e0e2:	b29a      	uxth	r2, r3
 800e0e4:	693b      	ldr	r3, [r7, #16]
 800e0e6:	889b      	ldrh	r3, [r3, #4]
 800e0e8:	b29b      	uxth	r3, r3
 800e0ea:	429a      	cmp	r2, r3
 800e0ec:	d902      	bls.n	800e0f4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e0ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e0f2:	e0c5      	b.n	800e280 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	68ba      	ldr	r2, [r7, #8]
 800e0f8:	605a      	str	r2, [r3, #4]
      break;
 800e0fa:	e02b      	b.n	800e154 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800e0fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0fe:	889b      	ldrh	r3, [r3, #4]
 800e100:	b29a      	uxth	r2, r3
 800e102:	693b      	ldr	r3, [r7, #16]
 800e104:	889b      	ldrh	r3, [r3, #4]
 800e106:	b29b      	uxth	r3, r3
 800e108:	429a      	cmp	r2, r3
 800e10a:	d102      	bne.n	800e112 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e10c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e110:	e0b6      	b.n	800e280 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800e112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e114:	889b      	ldrh	r3, [r3, #4]
 800e116:	b29a      	uxth	r2, r3
 800e118:	693b      	ldr	r3, [r7, #16]
 800e11a:	88db      	ldrh	r3, [r3, #6]
 800e11c:	b29b      	uxth	r3, r3
 800e11e:	429a      	cmp	r2, r3
 800e120:	d202      	bcs.n	800e128 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e122:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e126:	e0ab      	b.n	800e280 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800e128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d009      	beq.n	800e142 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800e12e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e130:	88db      	ldrh	r3, [r3, #6]
 800e132:	b29a      	uxth	r2, r3
 800e134:	693b      	ldr	r3, [r7, #16]
 800e136:	889b      	ldrh	r3, [r3, #4]
 800e138:	b29b      	uxth	r3, r3
 800e13a:	429a      	cmp	r2, r3
 800e13c:	d001      	beq.n	800e142 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e13e:	2300      	movs	r3, #0
 800e140:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800e142:	693b      	ldr	r3, [r7, #16]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800e148:	693b      	ldr	r3, [r7, #16]
 800e14a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800e14c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d193      	bne.n	800e07a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800e152:	e000      	b.n	800e156 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800e154:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800e156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d12d      	bne.n	800e1b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800e15c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d01c      	beq.n	800e19c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800e162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e164:	88db      	ldrh	r3, [r3, #6]
 800e166:	b29a      	uxth	r2, r3
 800e168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e16a:	889b      	ldrh	r3, [r3, #4]
 800e16c:	b29b      	uxth	r3, r3
 800e16e:	429a      	cmp	r2, r3
 800e170:	d906      	bls.n	800e180 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800e172:	4b45      	ldr	r3, [pc, #276]	@ (800e288 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e174:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800e178:	4944      	ldr	r1, [pc, #272]	@ (800e28c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e17a:	4845      	ldr	r0, [pc, #276]	@ (800e290 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e17c:	f000 fdf8 	bl	800ed70 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800e180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e182:	68ba      	ldr	r2, [r7, #8]
 800e184:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800e186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e188:	88db      	ldrh	r3, [r3, #6]
 800e18a:	b29a      	uxth	r2, r3
 800e18c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e18e:	889b      	ldrh	r3, [r3, #4]
 800e190:	b29b      	uxth	r3, r3
 800e192:	429a      	cmp	r2, r3
 800e194:	d010      	beq.n	800e1b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800e196:	2300      	movs	r3, #0
 800e198:	623b      	str	r3, [r7, #32]
 800e19a:	e00d      	b.n	800e1b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	685b      	ldr	r3, [r3, #4]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d006      	beq.n	800e1b2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800e1a4:	4b38      	ldr	r3, [pc, #224]	@ (800e288 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e1a6:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800e1aa:	493a      	ldr	r1, [pc, #232]	@ (800e294 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800e1ac:	4838      	ldr	r0, [pc, #224]	@ (800e290 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e1ae:	f000 fddf 	bl	800ed70 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	68ba      	ldr	r2, [r7, #8]
 800e1b6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d105      	bne.n	800e1ca <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	7f9b      	ldrb	r3, [r3, #30]
 800e1c2:	f003 0301 	and.w	r3, r3, #1
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d059      	beq.n	800e27e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800e1ca:	6a3b      	ldr	r3, [r7, #32]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d04f      	beq.n	800e270 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	685b      	ldr	r3, [r3, #4]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d006      	beq.n	800e1e6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	685b      	ldr	r3, [r3, #4]
 800e1dc:	685b      	ldr	r3, [r3, #4]
 800e1de:	889b      	ldrh	r3, [r3, #4]
 800e1e0:	b29b      	uxth	r3, r3
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d002      	beq.n	800e1ec <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	623b      	str	r3, [r7, #32]
 800e1ea:	e041      	b.n	800e270 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800e1ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1ee:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800e1f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800e1f6:	e012      	b.n	800e21e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800e1f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1fa:	685b      	ldr	r3, [r3, #4]
 800e1fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800e1fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e200:	88db      	ldrh	r3, [r3, #6]
 800e202:	b29a      	uxth	r2, r3
 800e204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e206:	889b      	ldrh	r3, [r3, #4]
 800e208:	b29b      	uxth	r3, r3
 800e20a:	429a      	cmp	r2, r3
 800e20c:	d002      	beq.n	800e214 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800e20e:	2300      	movs	r3, #0
 800e210:	623b      	str	r3, [r7, #32]
            break;
 800e212:	e007      	b.n	800e224 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800e214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e216:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800e218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800e21e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e220:	2b00      	cmp	r3, #0
 800e222:	d1e9      	bne.n	800e1f8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800e224:	6a3b      	ldr	r3, [r7, #32]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d022      	beq.n	800e270 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	685b      	ldr	r3, [r3, #4]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d106      	bne.n	800e240 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800e232:	4b15      	ldr	r3, [pc, #84]	@ (800e288 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e234:	f240 12df 	movw	r2, #479	@ 0x1df
 800e238:	4917      	ldr	r1, [pc, #92]	@ (800e298 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e23a:	4815      	ldr	r0, [pc, #84]	@ (800e290 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e23c:	f000 fd98 	bl	800ed70 <iprintf>
          LWIP_ASSERT("sanity check",
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	685b      	ldr	r3, [r3, #4]
 800e244:	685b      	ldr	r3, [r3, #4]
 800e246:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e248:	429a      	cmp	r2, r3
 800e24a:	d106      	bne.n	800e25a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800e24c:	4b0e      	ldr	r3, [pc, #56]	@ (800e288 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e24e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800e252:	4911      	ldr	r1, [pc, #68]	@ (800e298 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e254:	480e      	ldr	r0, [pc, #56]	@ (800e290 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e256:	f000 fd8b 	bl	800ed70 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e25a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d006      	beq.n	800e270 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800e262:	4b09      	ldr	r3, [pc, #36]	@ (800e288 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e264:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800e268:	490c      	ldr	r1, [pc, #48]	@ (800e29c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e26a:	4809      	ldr	r0, [pc, #36]	@ (800e290 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e26c:	f000 fd80 	bl	800ed70 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e270:	6a3b      	ldr	r3, [r7, #32]
 800e272:	2b00      	cmp	r3, #0
 800e274:	bf14      	ite	ne
 800e276:	2301      	movne	r3, #1
 800e278:	2300      	moveq	r3, #0
 800e27a:	b2db      	uxtb	r3, r3
 800e27c:	e000      	b.n	800e280 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800e27e:	2300      	movs	r3, #0
}
 800e280:	4618      	mov	r0, r3
 800e282:	3730      	adds	r7, #48	@ 0x30
 800e284:	46bd      	mov	sp, r7
 800e286:	bd80      	pop	{r7, pc}
 800e288:	080115f0 	.word	0x080115f0
 800e28c:	080116d4 	.word	0x080116d4
 800e290:	08011638 	.word	0x08011638
 800e294:	080116f4 	.word	0x080116f4
 800e298:	0801172c 	.word	0x0801172c
 800e29c:	0801173c 	.word	0x0801173c

0800e2a0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b08e      	sub	sp, #56	@ 0x38
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	685b      	ldr	r3, [r3, #4]
 800e2ac:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800e2ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2b0:	781b      	ldrb	r3, [r3, #0]
 800e2b2:	f003 030f 	and.w	r3, r3, #15
 800e2b6:	b2db      	uxtb	r3, r3
 800e2b8:	009b      	lsls	r3, r3, #2
 800e2ba:	b2db      	uxtb	r3, r3
 800e2bc:	2b14      	cmp	r3, #20
 800e2be:	f040 8171 	bne.w	800e5a4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800e2c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2c4:	88db      	ldrh	r3, [r3, #6]
 800e2c6:	b29b      	uxth	r3, r3
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	f7fb fe37 	bl	8009f3c <lwip_htons>
 800e2ce:	4603      	mov	r3, r0
 800e2d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e2d4:	b29b      	uxth	r3, r3
 800e2d6:	00db      	lsls	r3, r3, #3
 800e2d8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e2da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2dc:	885b      	ldrh	r3, [r3, #2]
 800e2de:	b29b      	uxth	r3, r3
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	f7fb fe2b 	bl	8009f3c <lwip_htons>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800e2ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2ec:	781b      	ldrb	r3, [r3, #0]
 800e2ee:	f003 030f 	and.w	r3, r3, #15
 800e2f2:	b2db      	uxtb	r3, r3
 800e2f4:	009b      	lsls	r3, r3, #2
 800e2f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800e2fa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e2fe:	b29b      	uxth	r3, r3
 800e300:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e302:	429a      	cmp	r2, r3
 800e304:	f0c0 8150 	bcc.w	800e5a8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800e308:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e30c:	b29b      	uxth	r3, r3
 800e30e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e310:	1ad3      	subs	r3, r2, r3
 800e312:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800e314:	6878      	ldr	r0, [r7, #4]
 800e316:	f7fd f9a7 	bl	800b668 <pbuf_clen>
 800e31a:	4603      	mov	r3, r0
 800e31c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e31e:	4b8c      	ldr	r3, [pc, #560]	@ (800e550 <ip4_reass+0x2b0>)
 800e320:	881b      	ldrh	r3, [r3, #0]
 800e322:	461a      	mov	r2, r3
 800e324:	8c3b      	ldrh	r3, [r7, #32]
 800e326:	4413      	add	r3, r2
 800e328:	2b0a      	cmp	r3, #10
 800e32a:	dd10      	ble.n	800e34e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e32c:	8c3b      	ldrh	r3, [r7, #32]
 800e32e:	4619      	mov	r1, r3
 800e330:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e332:	f7ff fd81 	bl	800de38 <ip_reass_remove_oldest_datagram>
 800e336:	4603      	mov	r3, r0
 800e338:	2b00      	cmp	r3, #0
 800e33a:	f000 8137 	beq.w	800e5ac <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e33e:	4b84      	ldr	r3, [pc, #528]	@ (800e550 <ip4_reass+0x2b0>)
 800e340:	881b      	ldrh	r3, [r3, #0]
 800e342:	461a      	mov	r2, r3
 800e344:	8c3b      	ldrh	r3, [r7, #32]
 800e346:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e348:	2b0a      	cmp	r3, #10
 800e34a:	f300 812f 	bgt.w	800e5ac <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e34e:	4b81      	ldr	r3, [pc, #516]	@ (800e554 <ip4_reass+0x2b4>)
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	633b      	str	r3, [r7, #48]	@ 0x30
 800e354:	e015      	b.n	800e382 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e358:	695a      	ldr	r2, [r3, #20]
 800e35a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e35c:	68db      	ldr	r3, [r3, #12]
 800e35e:	429a      	cmp	r2, r3
 800e360:	d10c      	bne.n	800e37c <ip4_reass+0xdc>
 800e362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e364:	699a      	ldr	r2, [r3, #24]
 800e366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e368:	691b      	ldr	r3, [r3, #16]
 800e36a:	429a      	cmp	r2, r3
 800e36c:	d106      	bne.n	800e37c <ip4_reass+0xdc>
 800e36e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e370:	899a      	ldrh	r2, [r3, #12]
 800e372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e374:	889b      	ldrh	r3, [r3, #4]
 800e376:	b29b      	uxth	r3, r3
 800e378:	429a      	cmp	r2, r3
 800e37a:	d006      	beq.n	800e38a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e37c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	633b      	str	r3, [r7, #48]	@ 0x30
 800e382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e384:	2b00      	cmp	r3, #0
 800e386:	d1e6      	bne.n	800e356 <ip4_reass+0xb6>
 800e388:	e000      	b.n	800e38c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800e38a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800e38c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d109      	bne.n	800e3a6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800e392:	8c3b      	ldrh	r3, [r7, #32]
 800e394:	4619      	mov	r1, r3
 800e396:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e398:	f7ff fdb0 	bl	800defc <ip_reass_enqueue_new_datagram>
 800e39c:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800e39e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d11c      	bne.n	800e3de <ip4_reass+0x13e>
      goto nullreturn;
 800e3a4:	e105      	b.n	800e5b2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e3a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3a8:	88db      	ldrh	r3, [r3, #6]
 800e3aa:	b29b      	uxth	r3, r3
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	f7fb fdc5 	bl	8009f3c <lwip_htons>
 800e3b2:	4603      	mov	r3, r0
 800e3b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d110      	bne.n	800e3de <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800e3bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3be:	89db      	ldrh	r3, [r3, #14]
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	f7fb fdbb 	bl	8009f3c <lwip_htons>
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d006      	beq.n	800e3de <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800e3d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3d2:	3308      	adds	r3, #8
 800e3d4:	2214      	movs	r2, #20
 800e3d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e3d8:	4618      	mov	r0, r3
 800e3da:	f000 fdbc 	bl	800ef56 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800e3de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3e0:	88db      	ldrh	r3, [r3, #6]
 800e3e2:	b29b      	uxth	r3, r3
 800e3e4:	f003 0320 	and.w	r3, r3, #32
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	bf0c      	ite	eq
 800e3ec:	2301      	moveq	r3, #1
 800e3ee:	2300      	movne	r3, #0
 800e3f0:	b2db      	uxtb	r3, r3
 800e3f2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800e3f4:	69fb      	ldr	r3, [r7, #28]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d00e      	beq.n	800e418 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800e3fa:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800e3fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e3fe:	4413      	add	r3, r2
 800e400:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800e402:	8b7a      	ldrh	r2, [r7, #26]
 800e404:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e406:	429a      	cmp	r2, r3
 800e408:	f0c0 80a0 	bcc.w	800e54c <ip4_reass+0x2ac>
 800e40c:	8b7b      	ldrh	r3, [r7, #26]
 800e40e:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800e412:	4293      	cmp	r3, r2
 800e414:	f200 809a 	bhi.w	800e54c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800e418:	69fa      	ldr	r2, [r7, #28]
 800e41a:	6879      	ldr	r1, [r7, #4]
 800e41c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e41e:	f7ff fdd5 	bl	800dfcc <ip_reass_chain_frag_into_datagram_and_validate>
 800e422:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800e424:	697b      	ldr	r3, [r7, #20]
 800e426:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e42a:	f000 809b 	beq.w	800e564 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800e42e:	4b48      	ldr	r3, [pc, #288]	@ (800e550 <ip4_reass+0x2b0>)
 800e430:	881a      	ldrh	r2, [r3, #0]
 800e432:	8c3b      	ldrh	r3, [r7, #32]
 800e434:	4413      	add	r3, r2
 800e436:	b29a      	uxth	r2, r3
 800e438:	4b45      	ldr	r3, [pc, #276]	@ (800e550 <ip4_reass+0x2b0>)
 800e43a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800e43c:	69fb      	ldr	r3, [r7, #28]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d00d      	beq.n	800e45e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800e442:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800e444:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e446:	4413      	add	r3, r2
 800e448:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800e44a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e44c:	8a7a      	ldrh	r2, [r7, #18]
 800e44e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800e450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e452:	7f9b      	ldrb	r3, [r3, #30]
 800e454:	f043 0301 	orr.w	r3, r3, #1
 800e458:	b2da      	uxtb	r2, r3
 800e45a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e45c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800e45e:	697b      	ldr	r3, [r7, #20]
 800e460:	2b01      	cmp	r3, #1
 800e462:	d171      	bne.n	800e548 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800e464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e466:	8b9b      	ldrh	r3, [r3, #28]
 800e468:	3314      	adds	r3, #20
 800e46a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800e46c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e46e:	685b      	ldr	r3, [r3, #4]
 800e470:	685b      	ldr	r3, [r3, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800e476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e478:	685b      	ldr	r3, [r3, #4]
 800e47a:	685b      	ldr	r3, [r3, #4]
 800e47c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800e47e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e480:	3308      	adds	r3, #8
 800e482:	2214      	movs	r2, #20
 800e484:	4619      	mov	r1, r3
 800e486:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e488:	f000 fd65 	bl	800ef56 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800e48c:	8a3b      	ldrh	r3, [r7, #16]
 800e48e:	4618      	mov	r0, r3
 800e490:	f7fb fd54 	bl	8009f3c <lwip_htons>
 800e494:	4603      	mov	r3, r0
 800e496:	461a      	mov	r2, r3
 800e498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e49a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800e49c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e49e:	2200      	movs	r2, #0
 800e4a0:	719a      	strb	r2, [r3, #6]
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800e4a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	729a      	strb	r2, [r3, #10]
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800e4b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4b2:	685b      	ldr	r3, [r3, #4]
 800e4b4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800e4b6:	e00d      	b.n	800e4d4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800e4b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e4ba:	685b      	ldr	r3, [r3, #4]
 800e4bc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800e4be:	2114      	movs	r1, #20
 800e4c0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800e4c2:	f7fc ffc3 	bl	800b44c <pbuf_remove_header>
      pbuf_cat(p, r);
 800e4c6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e4c8:	6878      	ldr	r0, [r7, #4]
 800e4ca:	f7fd f907 	bl	800b6dc <pbuf_cat>
      r = iprh->next_pbuf;
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800e4d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d1ee      	bne.n	800e4b8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800e4da:	4b1e      	ldr	r3, [pc, #120]	@ (800e554 <ip4_reass+0x2b4>)
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e4e0:	429a      	cmp	r2, r3
 800e4e2:	d102      	bne.n	800e4ea <ip4_reass+0x24a>
      ipr_prev = NULL;
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e4e8:	e010      	b.n	800e50c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e4ea:	4b1a      	ldr	r3, [pc, #104]	@ (800e554 <ip4_reass+0x2b4>)
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e4f0:	e007      	b.n	800e502 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800e4f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e4f8:	429a      	cmp	r2, r3
 800e4fa:	d006      	beq.n	800e50a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e4fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e504:	2b00      	cmp	r3, #0
 800e506:	d1f4      	bne.n	800e4f2 <ip4_reass+0x252>
 800e508:	e000      	b.n	800e50c <ip4_reass+0x26c>
          break;
 800e50a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800e50c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e50e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e510:	f7ff fd2e 	bl	800df70 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800e514:	6878      	ldr	r0, [r7, #4]
 800e516:	f7fd f8a7 	bl	800b668 <pbuf_clen>
 800e51a:	4603      	mov	r3, r0
 800e51c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800e51e:	4b0c      	ldr	r3, [pc, #48]	@ (800e550 <ip4_reass+0x2b0>)
 800e520:	881b      	ldrh	r3, [r3, #0]
 800e522:	8c3a      	ldrh	r2, [r7, #32]
 800e524:	429a      	cmp	r2, r3
 800e526:	d906      	bls.n	800e536 <ip4_reass+0x296>
 800e528:	4b0b      	ldr	r3, [pc, #44]	@ (800e558 <ip4_reass+0x2b8>)
 800e52a:	f240 229b 	movw	r2, #667	@ 0x29b
 800e52e:	490b      	ldr	r1, [pc, #44]	@ (800e55c <ip4_reass+0x2bc>)
 800e530:	480b      	ldr	r0, [pc, #44]	@ (800e560 <ip4_reass+0x2c0>)
 800e532:	f000 fc1d 	bl	800ed70 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800e536:	4b06      	ldr	r3, [pc, #24]	@ (800e550 <ip4_reass+0x2b0>)
 800e538:	881a      	ldrh	r2, [r3, #0]
 800e53a:	8c3b      	ldrh	r3, [r7, #32]
 800e53c:	1ad3      	subs	r3, r2, r3
 800e53e:	b29a      	uxth	r2, r3
 800e540:	4b03      	ldr	r3, [pc, #12]	@ (800e550 <ip4_reass+0x2b0>)
 800e542:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	e038      	b.n	800e5ba <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800e548:	2300      	movs	r3, #0
 800e54a:	e036      	b.n	800e5ba <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800e54c:	bf00      	nop
 800e54e:	e00a      	b.n	800e566 <ip4_reass+0x2c6>
 800e550:	20007d98 	.word	0x20007d98
 800e554:	20007d94 	.word	0x20007d94
 800e558:	080115f0 	.word	0x080115f0
 800e55c:	08011760 	.word	0x08011760
 800e560:	08011638 	.word	0x08011638
    goto nullreturn_ipr;
 800e564:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800e566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d106      	bne.n	800e57a <ip4_reass+0x2da>
 800e56c:	4b15      	ldr	r3, [pc, #84]	@ (800e5c4 <ip4_reass+0x324>)
 800e56e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800e572:	4915      	ldr	r1, [pc, #84]	@ (800e5c8 <ip4_reass+0x328>)
 800e574:	4815      	ldr	r0, [pc, #84]	@ (800e5cc <ip4_reass+0x32c>)
 800e576:	f000 fbfb 	bl	800ed70 <iprintf>
  if (ipr->p == NULL) {
 800e57a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e57c:	685b      	ldr	r3, [r3, #4]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d116      	bne.n	800e5b0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800e582:	4b13      	ldr	r3, [pc, #76]	@ (800e5d0 <ip4_reass+0x330>)
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e588:	429a      	cmp	r2, r3
 800e58a:	d006      	beq.n	800e59a <ip4_reass+0x2fa>
 800e58c:	4b0d      	ldr	r3, [pc, #52]	@ (800e5c4 <ip4_reass+0x324>)
 800e58e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800e592:	4910      	ldr	r1, [pc, #64]	@ (800e5d4 <ip4_reass+0x334>)
 800e594:	480d      	ldr	r0, [pc, #52]	@ (800e5cc <ip4_reass+0x32c>)
 800e596:	f000 fbeb 	bl	800ed70 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800e59a:	2100      	movs	r1, #0
 800e59c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e59e:	f7ff fce7 	bl	800df70 <ip_reass_dequeue_datagram>
 800e5a2:	e006      	b.n	800e5b2 <ip4_reass+0x312>
    goto nullreturn;
 800e5a4:	bf00      	nop
 800e5a6:	e004      	b.n	800e5b2 <ip4_reass+0x312>
    goto nullreturn;
 800e5a8:	bf00      	nop
 800e5aa:	e002      	b.n	800e5b2 <ip4_reass+0x312>
      goto nullreturn;
 800e5ac:	bf00      	nop
 800e5ae:	e000      	b.n	800e5b2 <ip4_reass+0x312>
  }

nullreturn:
 800e5b0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800e5b2:	6878      	ldr	r0, [r7, #4]
 800e5b4:	f7fc ffd0 	bl	800b558 <pbuf_free>
  return NULL;
 800e5b8:	2300      	movs	r3, #0
}
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	3738      	adds	r7, #56	@ 0x38
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	bd80      	pop	{r7, pc}
 800e5c2:	bf00      	nop
 800e5c4:	080115f0 	.word	0x080115f0
 800e5c8:	0801177c 	.word	0x0801177c
 800e5cc:	08011638 	.word	0x08011638
 800e5d0:	20007d94 	.word	0x20007d94
 800e5d4:	08011788 	.word	0x08011788

0800e5d8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800e5dc:	2002      	movs	r0, #2
 800e5de:	f7fc f907 	bl	800a7f0 <memp_malloc>
 800e5e2:	4603      	mov	r3, r0
}
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	bd80      	pop	{r7, pc}

0800e5e8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	b082      	sub	sp, #8
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d106      	bne.n	800e604 <ip_frag_free_pbuf_custom_ref+0x1c>
 800e5f6:	4b07      	ldr	r3, [pc, #28]	@ (800e614 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800e5f8:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 800e5fc:	4906      	ldr	r1, [pc, #24]	@ (800e618 <ip_frag_free_pbuf_custom_ref+0x30>)
 800e5fe:	4807      	ldr	r0, [pc, #28]	@ (800e61c <ip_frag_free_pbuf_custom_ref+0x34>)
 800e600:	f000 fbb6 	bl	800ed70 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800e604:	6879      	ldr	r1, [r7, #4]
 800e606:	2002      	movs	r0, #2
 800e608:	f7fc f962 	bl	800a8d0 <memp_free>
}
 800e60c:	bf00      	nop
 800e60e:	3708      	adds	r7, #8
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}
 800e614:	080115f0 	.word	0x080115f0
 800e618:	080117a8 	.word	0x080117a8
 800e61c:	08011638 	.word	0x08011638

0800e620 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b084      	sub	sp, #16
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d106      	bne.n	800e640 <ipfrag_free_pbuf_custom+0x20>
 800e632:	4b11      	ldr	r3, [pc, #68]	@ (800e678 <ipfrag_free_pbuf_custom+0x58>)
 800e634:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800e638:	4910      	ldr	r1, [pc, #64]	@ (800e67c <ipfrag_free_pbuf_custom+0x5c>)
 800e63a:	4811      	ldr	r0, [pc, #68]	@ (800e680 <ipfrag_free_pbuf_custom+0x60>)
 800e63c:	f000 fb98 	bl	800ed70 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800e640:	68fa      	ldr	r2, [r7, #12]
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	429a      	cmp	r2, r3
 800e646:	d006      	beq.n	800e656 <ipfrag_free_pbuf_custom+0x36>
 800e648:	4b0b      	ldr	r3, [pc, #44]	@ (800e678 <ipfrag_free_pbuf_custom+0x58>)
 800e64a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800e64e:	490d      	ldr	r1, [pc, #52]	@ (800e684 <ipfrag_free_pbuf_custom+0x64>)
 800e650:	480b      	ldr	r0, [pc, #44]	@ (800e680 <ipfrag_free_pbuf_custom+0x60>)
 800e652:	f000 fb8d 	bl	800ed70 <iprintf>
  if (pcr->original != NULL) {
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	695b      	ldr	r3, [r3, #20]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d004      	beq.n	800e668 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	695b      	ldr	r3, [r3, #20]
 800e662:	4618      	mov	r0, r3
 800e664:	f7fc ff78 	bl	800b558 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800e668:	68f8      	ldr	r0, [r7, #12]
 800e66a:	f7ff ffbd 	bl	800e5e8 <ip_frag_free_pbuf_custom_ref>
}
 800e66e:	bf00      	nop
 800e670:	3710      	adds	r7, #16
 800e672:	46bd      	mov	sp, r7
 800e674:	bd80      	pop	{r7, pc}
 800e676:	bf00      	nop
 800e678:	080115f0 	.word	0x080115f0
 800e67c:	080117b4 	.word	0x080117b4
 800e680:	08011638 	.word	0x08011638
 800e684:	080117c0 	.word	0x080117c0

0800e688 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b094      	sub	sp, #80	@ 0x50
 800e68c:	af02      	add	r7, sp, #8
 800e68e:	60f8      	str	r0, [r7, #12]
 800e690:	60b9      	str	r1, [r7, #8]
 800e692:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800e694:	2300      	movs	r3, #0
 800e696:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800e69a:	68bb      	ldr	r3, [r7, #8]
 800e69c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800e69e:	3b14      	subs	r3, #20
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	da00      	bge.n	800e6a6 <ip4_frag+0x1e>
 800e6a4:	3307      	adds	r3, #7
 800e6a6:	10db      	asrs	r3, r3, #3
 800e6a8:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800e6aa:	2314      	movs	r3, #20
 800e6ac:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	685b      	ldr	r3, [r3, #4]
 800e6b2:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 800e6b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e6b6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800e6b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6ba:	781b      	ldrb	r3, [r3, #0]
 800e6bc:	f003 030f 	and.w	r3, r3, #15
 800e6c0:	b2db      	uxtb	r3, r3
 800e6c2:	009b      	lsls	r3, r3, #2
 800e6c4:	b2db      	uxtb	r3, r3
 800e6c6:	2b14      	cmp	r3, #20
 800e6c8:	d002      	beq.n	800e6d0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800e6ca:	f06f 0305 	mvn.w	r3, #5
 800e6ce:	e110      	b.n	800e8f2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	895b      	ldrh	r3, [r3, #10]
 800e6d4:	2b13      	cmp	r3, #19
 800e6d6:	d809      	bhi.n	800e6ec <ip4_frag+0x64>
 800e6d8:	4b88      	ldr	r3, [pc, #544]	@ (800e8fc <ip4_frag+0x274>)
 800e6da:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800e6de:	4988      	ldr	r1, [pc, #544]	@ (800e900 <ip4_frag+0x278>)
 800e6e0:	4888      	ldr	r0, [pc, #544]	@ (800e904 <ip4_frag+0x27c>)
 800e6e2:	f000 fb45 	bl	800ed70 <iprintf>
 800e6e6:	f06f 0305 	mvn.w	r3, #5
 800e6ea:	e102      	b.n	800e8f2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800e6ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6ee:	88db      	ldrh	r3, [r3, #6]
 800e6f0:	b29b      	uxth	r3, r3
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	f7fb fc22 	bl	8009f3c <lwip_htons>
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 800e6fc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800e6fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e702:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800e706:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800e708:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e70c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	891b      	ldrh	r3, [r3, #8]
 800e712:	3b14      	subs	r3, #20
 800e714:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 800e718:	e0e1      	b.n	800e8de <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800e71a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800e71c:	00db      	lsls	r3, r3, #3
 800e71e:	b29b      	uxth	r3, r3
 800e720:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800e724:	4293      	cmp	r3, r2
 800e726:	bf28      	it	cs
 800e728:	4613      	movcs	r3, r2
 800e72a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800e72c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e730:	2114      	movs	r1, #20
 800e732:	200e      	movs	r0, #14
 800e734:	f7fc fc2e 	bl	800af94 <pbuf_alloc>
 800e738:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 800e73a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	f000 80d5 	beq.w	800e8ec <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800e742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e744:	895b      	ldrh	r3, [r3, #10]
 800e746:	2b13      	cmp	r3, #19
 800e748:	d806      	bhi.n	800e758 <ip4_frag+0xd0>
 800e74a:	4b6c      	ldr	r3, [pc, #432]	@ (800e8fc <ip4_frag+0x274>)
 800e74c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800e750:	496d      	ldr	r1, [pc, #436]	@ (800e908 <ip4_frag+0x280>)
 800e752:	486c      	ldr	r0, [pc, #432]	@ (800e904 <ip4_frag+0x27c>)
 800e754:	f000 fb0c 	bl	800ed70 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800e758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e75a:	685b      	ldr	r3, [r3, #4]
 800e75c:	2214      	movs	r2, #20
 800e75e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e760:	4618      	mov	r0, r3
 800e762:	f000 fbf8 	bl	800ef56 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800e766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e768:	685b      	ldr	r3, [r3, #4]
 800e76a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 800e76c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e76e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 800e772:	e064      	b.n	800e83e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	895a      	ldrh	r2, [r3, #10]
 800e778:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800e77a:	1ad3      	subs	r3, r2, r3
 800e77c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	895b      	ldrh	r3, [r3, #10]
 800e782:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800e784:	429a      	cmp	r2, r3
 800e786:	d906      	bls.n	800e796 <ip4_frag+0x10e>
 800e788:	4b5c      	ldr	r3, [pc, #368]	@ (800e8fc <ip4_frag+0x274>)
 800e78a:	f240 322d 	movw	r2, #813	@ 0x32d
 800e78e:	495f      	ldr	r1, [pc, #380]	@ (800e90c <ip4_frag+0x284>)
 800e790:	485c      	ldr	r0, [pc, #368]	@ (800e904 <ip4_frag+0x27c>)
 800e792:	f000 faed 	bl	800ed70 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800e796:	8bfa      	ldrh	r2, [r7, #30]
 800e798:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800e79c:	4293      	cmp	r3, r2
 800e79e:	bf28      	it	cs
 800e7a0:	4613      	movcs	r3, r2
 800e7a2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800e7a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d105      	bne.n	800e7ba <ip4_frag+0x132>
        poff = 0;
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	60fb      	str	r3, [r7, #12]
        continue;
 800e7b8:	e041      	b.n	800e83e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800e7ba:	f7ff ff0d 	bl	800e5d8 <ip_frag_alloc_pbuf_custom_ref>
 800e7be:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800e7c0:	69bb      	ldr	r3, [r7, #24]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d103      	bne.n	800e7ce <ip4_frag+0x146>
        pbuf_free(rambuf);
 800e7c6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e7c8:	f7fc fec6 	bl	800b558 <pbuf_free>
        goto memerr;
 800e7cc:	e08f      	b.n	800e8ee <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e7ce:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e7d4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800e7d6:	4413      	add	r3, r2
 800e7d8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 800e7dc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800e7e0:	9201      	str	r2, [sp, #4]
 800e7e2:	9300      	str	r3, [sp, #0]
 800e7e4:	4603      	mov	r3, r0
 800e7e6:	2241      	movs	r2, #65	@ 0x41
 800e7e8:	2000      	movs	r0, #0
 800e7ea:	f7fc fcfb 	bl	800b1e4 <pbuf_alloced_custom>
 800e7ee:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800e7f0:	697b      	ldr	r3, [r7, #20]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d106      	bne.n	800e804 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800e7f6:	69b8      	ldr	r0, [r7, #24]
 800e7f8:	f7ff fef6 	bl	800e5e8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800e7fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e7fe:	f7fc feab 	bl	800b558 <pbuf_free>
        goto memerr;
 800e802:	e074      	b.n	800e8ee <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800e804:	68f8      	ldr	r0, [r7, #12]
 800e806:	f7fc ff47 	bl	800b698 <pbuf_ref>
      pcr->original = p;
 800e80a:	69bb      	ldr	r3, [r7, #24]
 800e80c:	68fa      	ldr	r2, [r7, #12]
 800e80e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800e810:	69bb      	ldr	r3, [r7, #24]
 800e812:	4a3f      	ldr	r2, [pc, #252]	@ (800e910 <ip4_frag+0x288>)
 800e814:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800e816:	6979      	ldr	r1, [r7, #20]
 800e818:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e81a:	f7fc ff5f 	bl	800b6dc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800e81e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800e822:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800e826:	1ad3      	subs	r3, r2, r3
 800e828:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 800e82c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800e830:	2b00      	cmp	r3, #0
 800e832:	d004      	beq.n	800e83e <ip4_frag+0x1b6>
        poff = 0;
 800e834:	2300      	movs	r3, #0
 800e836:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800e83e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800e842:	2b00      	cmp	r3, #0
 800e844:	d196      	bne.n	800e774 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800e846:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800e848:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800e84c:	4413      	add	r3, r2
 800e84e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800e850:	68bb      	ldr	r3, [r7, #8]
 800e852:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800e854:	f1a3 0213 	sub.w	r2, r3, #19
 800e858:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800e85c:	429a      	cmp	r2, r3
 800e85e:	bfcc      	ite	gt
 800e860:	2301      	movgt	r3, #1
 800e862:	2300      	movle	r3, #0
 800e864:	b2db      	uxtb	r3, r3
 800e866:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800e868:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800e86c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e870:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 800e872:	6a3b      	ldr	r3, [r7, #32]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d002      	beq.n	800e87e <ip4_frag+0x1f6>
 800e878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d003      	beq.n	800e886 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800e87e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800e880:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800e884:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800e886:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800e888:	4618      	mov	r0, r3
 800e88a:	f7fb fb57 	bl	8009f3c <lwip_htons>
 800e88e:	4603      	mov	r3, r0
 800e890:	461a      	mov	r2, r3
 800e892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e894:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800e896:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e898:	3314      	adds	r3, #20
 800e89a:	b29b      	uxth	r3, r3
 800e89c:	4618      	mov	r0, r3
 800e89e:	f7fb fb4d 	bl	8009f3c <lwip_htons>
 800e8a2:	4603      	mov	r3, r0
 800e8a4:	461a      	mov	r2, r3
 800e8a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8a8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800e8aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	729a      	strb	r2, [r3, #10]
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800e8b4:	68bb      	ldr	r3, [r7, #8]
 800e8b6:	695b      	ldr	r3, [r3, #20]
 800e8b8:	687a      	ldr	r2, [r7, #4]
 800e8ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e8bc:	68b8      	ldr	r0, [r7, #8]
 800e8be:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800e8c0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e8c2:	f7fc fe49 	bl	800b558 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800e8c6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800e8ca:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e8cc:	1ad3      	subs	r3, r2, r3
 800e8ce:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 800e8d2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800e8d6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800e8d8:	4413      	add	r3, r2
 800e8da:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 800e8de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	f47f af19 	bne.w	800e71a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	e002      	b.n	800e8f2 <ip4_frag+0x26a>
      goto memerr;
 800e8ec:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800e8ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	3748      	adds	r7, #72	@ 0x48
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	bd80      	pop	{r7, pc}
 800e8fa:	bf00      	nop
 800e8fc:	080115f0 	.word	0x080115f0
 800e900:	080117cc 	.word	0x080117cc
 800e904:	08011638 	.word	0x08011638
 800e908:	080117e8 	.word	0x080117e8
 800e90c:	08011808 	.word	0x08011808
 800e910:	0800e621 	.word	0x0800e621

0800e914 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800e914:	b580      	push	{r7, lr}
 800e916:	b086      	sub	sp, #24
 800e918:	af00      	add	r7, sp, #0
 800e91a:	6078      	str	r0, [r7, #4]
 800e91c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800e91e:	230e      	movs	r3, #14
 800e920:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	895b      	ldrh	r3, [r3, #10]
 800e926:	2b0e      	cmp	r3, #14
 800e928:	d96e      	bls.n	800ea08 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	7bdb      	ldrb	r3, [r3, #15]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d106      	bne.n	800e940 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800e932:	683b      	ldr	r3, [r7, #0]
 800e934:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e938:	3301      	adds	r3, #1
 800e93a:	b2da      	uxtb	r2, r3
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	685b      	ldr	r3, [r3, #4]
 800e944:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800e946:	693b      	ldr	r3, [r7, #16]
 800e948:	7b1a      	ldrb	r2, [r3, #12]
 800e94a:	7b5b      	ldrb	r3, [r3, #13]
 800e94c:	021b      	lsls	r3, r3, #8
 800e94e:	4313      	orrs	r3, r2
 800e950:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800e952:	693b      	ldr	r3, [r7, #16]
 800e954:	781b      	ldrb	r3, [r3, #0]
 800e956:	f003 0301 	and.w	r3, r3, #1
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d023      	beq.n	800e9a6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800e95e:	693b      	ldr	r3, [r7, #16]
 800e960:	781b      	ldrb	r3, [r3, #0]
 800e962:	2b01      	cmp	r3, #1
 800e964:	d10f      	bne.n	800e986 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e966:	693b      	ldr	r3, [r7, #16]
 800e968:	785b      	ldrb	r3, [r3, #1]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d11b      	bne.n	800e9a6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800e96e:	693b      	ldr	r3, [r7, #16]
 800e970:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e972:	2b5e      	cmp	r3, #94	@ 0x5e
 800e974:	d117      	bne.n	800e9a6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	7b5b      	ldrb	r3, [r3, #13]
 800e97a:	f043 0310 	orr.w	r3, r3, #16
 800e97e:	b2da      	uxtb	r2, r3
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	735a      	strb	r2, [r3, #13]
 800e984:	e00f      	b.n	800e9a6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800e986:	693b      	ldr	r3, [r7, #16]
 800e988:	2206      	movs	r2, #6
 800e98a:	4928      	ldr	r1, [pc, #160]	@ (800ea2c <ethernet_input+0x118>)
 800e98c:	4618      	mov	r0, r3
 800e98e:	f000 fa5f 	bl	800ee50 <memcmp>
 800e992:	4603      	mov	r3, r0
 800e994:	2b00      	cmp	r3, #0
 800e996:	d106      	bne.n	800e9a6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	7b5b      	ldrb	r3, [r3, #13]
 800e99c:	f043 0308 	orr.w	r3, r3, #8
 800e9a0:	b2da      	uxtb	r2, r3
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800e9a6:	89fb      	ldrh	r3, [r7, #14]
 800e9a8:	2b08      	cmp	r3, #8
 800e9aa:	d003      	beq.n	800e9b4 <ethernet_input+0xa0>
 800e9ac:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800e9b0:	d014      	beq.n	800e9dc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800e9b2:	e032      	b.n	800ea1a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e9ba:	f003 0308 	and.w	r3, r3, #8
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d024      	beq.n	800ea0c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e9c2:	8afb      	ldrh	r3, [r7, #22]
 800e9c4:	4619      	mov	r1, r3
 800e9c6:	6878      	ldr	r0, [r7, #4]
 800e9c8:	f7fc fd40 	bl	800b44c <pbuf_remove_header>
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d11e      	bne.n	800ea10 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800e9d2:	6839      	ldr	r1, [r7, #0]
 800e9d4:	6878      	ldr	r0, [r7, #4]
 800e9d6:	f7fe ff2b 	bl	800d830 <ip4_input>
      break;
 800e9da:	e013      	b.n	800ea04 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e9dc:	683b      	ldr	r3, [r7, #0]
 800e9de:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e9e2:	f003 0308 	and.w	r3, r3, #8
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d014      	beq.n	800ea14 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e9ea:	8afb      	ldrh	r3, [r7, #22]
 800e9ec:	4619      	mov	r1, r3
 800e9ee:	6878      	ldr	r0, [r7, #4]
 800e9f0:	f7fc fd2c 	bl	800b44c <pbuf_remove_header>
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d10e      	bne.n	800ea18 <ethernet_input+0x104>
        etharp_input(p, netif);
 800e9fa:	6839      	ldr	r1, [r7, #0]
 800e9fc:	6878      	ldr	r0, [r7, #4]
 800e9fe:	f7fe f8cb 	bl	800cb98 <etharp_input>
      break;
 800ea02:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800ea04:	2300      	movs	r3, #0
 800ea06:	e00c      	b.n	800ea22 <ethernet_input+0x10e>
    goto free_and_return;
 800ea08:	bf00      	nop
 800ea0a:	e006      	b.n	800ea1a <ethernet_input+0x106>
        goto free_and_return;
 800ea0c:	bf00      	nop
 800ea0e:	e004      	b.n	800ea1a <ethernet_input+0x106>
        goto free_and_return;
 800ea10:	bf00      	nop
 800ea12:	e002      	b.n	800ea1a <ethernet_input+0x106>
        goto free_and_return;
 800ea14:	bf00      	nop
 800ea16:	e000      	b.n	800ea1a <ethernet_input+0x106>
        goto free_and_return;
 800ea18:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800ea1a:	6878      	ldr	r0, [r7, #4]
 800ea1c:	f7fc fd9c 	bl	800b558 <pbuf_free>
  return ERR_OK;
 800ea20:	2300      	movs	r3, #0
}
 800ea22:	4618      	mov	r0, r3
 800ea24:	3718      	adds	r7, #24
 800ea26:	46bd      	mov	sp, r7
 800ea28:	bd80      	pop	{r7, pc}
 800ea2a:	bf00      	nop
 800ea2c:	08011944 	.word	0x08011944

0800ea30 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b086      	sub	sp, #24
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	60f8      	str	r0, [r7, #12]
 800ea38:	60b9      	str	r1, [r7, #8]
 800ea3a:	607a      	str	r2, [r7, #4]
 800ea3c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800ea3e:	8c3b      	ldrh	r3, [r7, #32]
 800ea40:	4618      	mov	r0, r3
 800ea42:	f7fb fa7b 	bl	8009f3c <lwip_htons>
 800ea46:	4603      	mov	r3, r0
 800ea48:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800ea4a:	210e      	movs	r1, #14
 800ea4c:	68b8      	ldr	r0, [r7, #8]
 800ea4e:	f7fc fced 	bl	800b42c <pbuf_add_header>
 800ea52:	4603      	mov	r3, r0
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d125      	bne.n	800eaa4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800ea58:	68bb      	ldr	r3, [r7, #8]
 800ea5a:	685b      	ldr	r3, [r3, #4]
 800ea5c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800ea5e:	693b      	ldr	r3, [r7, #16]
 800ea60:	8afa      	ldrh	r2, [r7, #22]
 800ea62:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800ea64:	693b      	ldr	r3, [r7, #16]
 800ea66:	2206      	movs	r2, #6
 800ea68:	6839      	ldr	r1, [r7, #0]
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	f000 fa73 	bl	800ef56 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800ea70:	693b      	ldr	r3, [r7, #16]
 800ea72:	3306      	adds	r3, #6
 800ea74:	2206      	movs	r2, #6
 800ea76:	6879      	ldr	r1, [r7, #4]
 800ea78:	4618      	mov	r0, r3
 800ea7a:	f000 fa6c 	bl	800ef56 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ea84:	2b06      	cmp	r3, #6
 800ea86:	d006      	beq.n	800ea96 <ethernet_output+0x66>
 800ea88:	4b0a      	ldr	r3, [pc, #40]	@ (800eab4 <ethernet_output+0x84>)
 800ea8a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 800ea8e:	490a      	ldr	r1, [pc, #40]	@ (800eab8 <ethernet_output+0x88>)
 800ea90:	480a      	ldr	r0, [pc, #40]	@ (800eabc <ethernet_output+0x8c>)
 800ea92:	f000 f96d 	bl	800ed70 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	699b      	ldr	r3, [r3, #24]
 800ea9a:	68b9      	ldr	r1, [r7, #8]
 800ea9c:	68f8      	ldr	r0, [r7, #12]
 800ea9e:	4798      	blx	r3
 800eaa0:	4603      	mov	r3, r0
 800eaa2:	e002      	b.n	800eaaa <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800eaa4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800eaa6:	f06f 0301 	mvn.w	r3, #1
}
 800eaaa:	4618      	mov	r0, r3
 800eaac:	3718      	adds	r7, #24
 800eaae:	46bd      	mov	sp, r7
 800eab0:	bd80      	pop	{r7, pc}
 800eab2:	bf00      	nop
 800eab4:	08011818 	.word	0x08011818
 800eab8:	08011850 	.word	0x08011850
 800eabc:	08011884 	.word	0x08011884

0800eac0 <sniprintf>:
 800eac0:	b40c      	push	{r2, r3}
 800eac2:	b530      	push	{r4, r5, lr}
 800eac4:	4b18      	ldr	r3, [pc, #96]	@ (800eb28 <sniprintf+0x68>)
 800eac6:	1e0c      	subs	r4, r1, #0
 800eac8:	681d      	ldr	r5, [r3, #0]
 800eaca:	b09d      	sub	sp, #116	@ 0x74
 800eacc:	da08      	bge.n	800eae0 <sniprintf+0x20>
 800eace:	238b      	movs	r3, #139	@ 0x8b
 800ead0:	602b      	str	r3, [r5, #0]
 800ead2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ead6:	b01d      	add	sp, #116	@ 0x74
 800ead8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eadc:	b002      	add	sp, #8
 800eade:	4770      	bx	lr
 800eae0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800eae4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800eae8:	f04f 0300 	mov.w	r3, #0
 800eaec:	931b      	str	r3, [sp, #108]	@ 0x6c
 800eaee:	bf14      	ite	ne
 800eaf0:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800eaf4:	4623      	moveq	r3, r4
 800eaf6:	9304      	str	r3, [sp, #16]
 800eaf8:	9307      	str	r3, [sp, #28]
 800eafa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800eafe:	9002      	str	r0, [sp, #8]
 800eb00:	9006      	str	r0, [sp, #24]
 800eb02:	f8ad 3016 	strh.w	r3, [sp, #22]
 800eb06:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800eb08:	ab21      	add	r3, sp, #132	@ 0x84
 800eb0a:	a902      	add	r1, sp, #8
 800eb0c:	4628      	mov	r0, r5
 800eb0e:	9301      	str	r3, [sp, #4]
 800eb10:	f000 faf4 	bl	800f0fc <_svfiprintf_r>
 800eb14:	1c43      	adds	r3, r0, #1
 800eb16:	bfbc      	itt	lt
 800eb18:	238b      	movlt	r3, #139	@ 0x8b
 800eb1a:	602b      	strlt	r3, [r5, #0]
 800eb1c:	2c00      	cmp	r4, #0
 800eb1e:	d0da      	beq.n	800ead6 <sniprintf+0x16>
 800eb20:	9b02      	ldr	r3, [sp, #8]
 800eb22:	2200      	movs	r2, #0
 800eb24:	701a      	strb	r2, [r3, #0]
 800eb26:	e7d6      	b.n	800ead6 <sniprintf+0x16>
 800eb28:	20000034 	.word	0x20000034

0800eb2c <siprintf>:
 800eb2c:	b40e      	push	{r1, r2, r3}
 800eb2e:	b510      	push	{r4, lr}
 800eb30:	b09d      	sub	sp, #116	@ 0x74
 800eb32:	ab1f      	add	r3, sp, #124	@ 0x7c
 800eb34:	9002      	str	r0, [sp, #8]
 800eb36:	9006      	str	r0, [sp, #24]
 800eb38:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800eb3c:	480a      	ldr	r0, [pc, #40]	@ (800eb68 <siprintf+0x3c>)
 800eb3e:	9107      	str	r1, [sp, #28]
 800eb40:	9104      	str	r1, [sp, #16]
 800eb42:	490a      	ldr	r1, [pc, #40]	@ (800eb6c <siprintf+0x40>)
 800eb44:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb48:	9105      	str	r1, [sp, #20]
 800eb4a:	2400      	movs	r4, #0
 800eb4c:	a902      	add	r1, sp, #8
 800eb4e:	6800      	ldr	r0, [r0, #0]
 800eb50:	9301      	str	r3, [sp, #4]
 800eb52:	941b      	str	r4, [sp, #108]	@ 0x6c
 800eb54:	f000 fad2 	bl	800f0fc <_svfiprintf_r>
 800eb58:	9b02      	ldr	r3, [sp, #8]
 800eb5a:	701c      	strb	r4, [r3, #0]
 800eb5c:	b01d      	add	sp, #116	@ 0x74
 800eb5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb62:	b003      	add	sp, #12
 800eb64:	4770      	bx	lr
 800eb66:	bf00      	nop
 800eb68:	20000034 	.word	0x20000034
 800eb6c:	ffff0208 	.word	0xffff0208

0800eb70 <rand>:
 800eb70:	4b16      	ldr	r3, [pc, #88]	@ (800ebcc <rand+0x5c>)
 800eb72:	b510      	push	{r4, lr}
 800eb74:	681c      	ldr	r4, [r3, #0]
 800eb76:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800eb78:	b9b3      	cbnz	r3, 800eba8 <rand+0x38>
 800eb7a:	2018      	movs	r0, #24
 800eb7c:	f000 fcfc 	bl	800f578 <malloc>
 800eb80:	4602      	mov	r2, r0
 800eb82:	6320      	str	r0, [r4, #48]	@ 0x30
 800eb84:	b920      	cbnz	r0, 800eb90 <rand+0x20>
 800eb86:	4b12      	ldr	r3, [pc, #72]	@ (800ebd0 <rand+0x60>)
 800eb88:	4812      	ldr	r0, [pc, #72]	@ (800ebd4 <rand+0x64>)
 800eb8a:	2152      	movs	r1, #82	@ 0x52
 800eb8c:	f000 f9f2 	bl	800ef74 <__assert_func>
 800eb90:	4911      	ldr	r1, [pc, #68]	@ (800ebd8 <rand+0x68>)
 800eb92:	4b12      	ldr	r3, [pc, #72]	@ (800ebdc <rand+0x6c>)
 800eb94:	e9c0 1300 	strd	r1, r3, [r0]
 800eb98:	4b11      	ldr	r3, [pc, #68]	@ (800ebe0 <rand+0x70>)
 800eb9a:	6083      	str	r3, [r0, #8]
 800eb9c:	230b      	movs	r3, #11
 800eb9e:	8183      	strh	r3, [r0, #12]
 800eba0:	2100      	movs	r1, #0
 800eba2:	2001      	movs	r0, #1
 800eba4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800eba8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ebaa:	480e      	ldr	r0, [pc, #56]	@ (800ebe4 <rand+0x74>)
 800ebac:	690b      	ldr	r3, [r1, #16]
 800ebae:	694c      	ldr	r4, [r1, #20]
 800ebb0:	4a0d      	ldr	r2, [pc, #52]	@ (800ebe8 <rand+0x78>)
 800ebb2:	4358      	muls	r0, r3
 800ebb4:	fb02 0004 	mla	r0, r2, r4, r0
 800ebb8:	fba3 3202 	umull	r3, r2, r3, r2
 800ebbc:	3301      	adds	r3, #1
 800ebbe:	eb40 0002 	adc.w	r0, r0, r2
 800ebc2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800ebc6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800ebca:	bd10      	pop	{r4, pc}
 800ebcc:	20000034 	.word	0x20000034
 800ebd0:	08011952 	.word	0x08011952
 800ebd4:	08011969 	.word	0x08011969
 800ebd8:	abcd330e 	.word	0xabcd330e
 800ebdc:	e66d1234 	.word	0xe66d1234
 800ebe0:	0005deec 	.word	0x0005deec
 800ebe4:	5851f42d 	.word	0x5851f42d
 800ebe8:	4c957f2d 	.word	0x4c957f2d

0800ebec <std>:
 800ebec:	2300      	movs	r3, #0
 800ebee:	b510      	push	{r4, lr}
 800ebf0:	4604      	mov	r4, r0
 800ebf2:	e9c0 3300 	strd	r3, r3, [r0]
 800ebf6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ebfa:	6083      	str	r3, [r0, #8]
 800ebfc:	8181      	strh	r1, [r0, #12]
 800ebfe:	6643      	str	r3, [r0, #100]	@ 0x64
 800ec00:	81c2      	strh	r2, [r0, #14]
 800ec02:	6183      	str	r3, [r0, #24]
 800ec04:	4619      	mov	r1, r3
 800ec06:	2208      	movs	r2, #8
 800ec08:	305c      	adds	r0, #92	@ 0x5c
 800ec0a:	f000 f94b 	bl	800eea4 <memset>
 800ec0e:	4b0d      	ldr	r3, [pc, #52]	@ (800ec44 <std+0x58>)
 800ec10:	6263      	str	r3, [r4, #36]	@ 0x24
 800ec12:	4b0d      	ldr	r3, [pc, #52]	@ (800ec48 <std+0x5c>)
 800ec14:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ec16:	4b0d      	ldr	r3, [pc, #52]	@ (800ec4c <std+0x60>)
 800ec18:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ec1a:	4b0d      	ldr	r3, [pc, #52]	@ (800ec50 <std+0x64>)
 800ec1c:	6323      	str	r3, [r4, #48]	@ 0x30
 800ec1e:	4b0d      	ldr	r3, [pc, #52]	@ (800ec54 <std+0x68>)
 800ec20:	6224      	str	r4, [r4, #32]
 800ec22:	429c      	cmp	r4, r3
 800ec24:	d006      	beq.n	800ec34 <std+0x48>
 800ec26:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ec2a:	4294      	cmp	r4, r2
 800ec2c:	d002      	beq.n	800ec34 <std+0x48>
 800ec2e:	33d0      	adds	r3, #208	@ 0xd0
 800ec30:	429c      	cmp	r4, r3
 800ec32:	d105      	bne.n	800ec40 <std+0x54>
 800ec34:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ec38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec3c:	f000 b988 	b.w	800ef50 <__retarget_lock_init_recursive>
 800ec40:	bd10      	pop	{r4, pc}
 800ec42:	bf00      	nop
 800ec44:	0800fb55 	.word	0x0800fb55
 800ec48:	0800fb77 	.word	0x0800fb77
 800ec4c:	0800fbaf 	.word	0x0800fbaf
 800ec50:	0800fbd3 	.word	0x0800fbd3
 800ec54:	20007d9c 	.word	0x20007d9c

0800ec58 <stdio_exit_handler>:
 800ec58:	4a02      	ldr	r2, [pc, #8]	@ (800ec64 <stdio_exit_handler+0xc>)
 800ec5a:	4903      	ldr	r1, [pc, #12]	@ (800ec68 <stdio_exit_handler+0x10>)
 800ec5c:	4803      	ldr	r0, [pc, #12]	@ (800ec6c <stdio_exit_handler+0x14>)
 800ec5e:	f000 b869 	b.w	800ed34 <_fwalk_sglue>
 800ec62:	bf00      	nop
 800ec64:	20000028 	.word	0x20000028
 800ec68:	0800faed 	.word	0x0800faed
 800ec6c:	20000038 	.word	0x20000038

0800ec70 <cleanup_stdio>:
 800ec70:	6841      	ldr	r1, [r0, #4]
 800ec72:	4b0c      	ldr	r3, [pc, #48]	@ (800eca4 <cleanup_stdio+0x34>)
 800ec74:	4299      	cmp	r1, r3
 800ec76:	b510      	push	{r4, lr}
 800ec78:	4604      	mov	r4, r0
 800ec7a:	d001      	beq.n	800ec80 <cleanup_stdio+0x10>
 800ec7c:	f000 ff36 	bl	800faec <_fflush_r>
 800ec80:	68a1      	ldr	r1, [r4, #8]
 800ec82:	4b09      	ldr	r3, [pc, #36]	@ (800eca8 <cleanup_stdio+0x38>)
 800ec84:	4299      	cmp	r1, r3
 800ec86:	d002      	beq.n	800ec8e <cleanup_stdio+0x1e>
 800ec88:	4620      	mov	r0, r4
 800ec8a:	f000 ff2f 	bl	800faec <_fflush_r>
 800ec8e:	68e1      	ldr	r1, [r4, #12]
 800ec90:	4b06      	ldr	r3, [pc, #24]	@ (800ecac <cleanup_stdio+0x3c>)
 800ec92:	4299      	cmp	r1, r3
 800ec94:	d004      	beq.n	800eca0 <cleanup_stdio+0x30>
 800ec96:	4620      	mov	r0, r4
 800ec98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec9c:	f000 bf26 	b.w	800faec <_fflush_r>
 800eca0:	bd10      	pop	{r4, pc}
 800eca2:	bf00      	nop
 800eca4:	20007d9c 	.word	0x20007d9c
 800eca8:	20007e04 	.word	0x20007e04
 800ecac:	20007e6c 	.word	0x20007e6c

0800ecb0 <global_stdio_init.part.0>:
 800ecb0:	b510      	push	{r4, lr}
 800ecb2:	4b0b      	ldr	r3, [pc, #44]	@ (800ece0 <global_stdio_init.part.0+0x30>)
 800ecb4:	4c0b      	ldr	r4, [pc, #44]	@ (800ece4 <global_stdio_init.part.0+0x34>)
 800ecb6:	4a0c      	ldr	r2, [pc, #48]	@ (800ece8 <global_stdio_init.part.0+0x38>)
 800ecb8:	601a      	str	r2, [r3, #0]
 800ecba:	4620      	mov	r0, r4
 800ecbc:	2200      	movs	r2, #0
 800ecbe:	2104      	movs	r1, #4
 800ecc0:	f7ff ff94 	bl	800ebec <std>
 800ecc4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ecc8:	2201      	movs	r2, #1
 800ecca:	2109      	movs	r1, #9
 800eccc:	f7ff ff8e 	bl	800ebec <std>
 800ecd0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ecd4:	2202      	movs	r2, #2
 800ecd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ecda:	2112      	movs	r1, #18
 800ecdc:	f7ff bf86 	b.w	800ebec <std>
 800ece0:	20007ed4 	.word	0x20007ed4
 800ece4:	20007d9c 	.word	0x20007d9c
 800ece8:	0800ec59 	.word	0x0800ec59

0800ecec <__sfp_lock_acquire>:
 800ecec:	4801      	ldr	r0, [pc, #4]	@ (800ecf4 <__sfp_lock_acquire+0x8>)
 800ecee:	f000 b930 	b.w	800ef52 <__retarget_lock_acquire_recursive>
 800ecf2:	bf00      	nop
 800ecf4:	20007ed9 	.word	0x20007ed9

0800ecf8 <__sfp_lock_release>:
 800ecf8:	4801      	ldr	r0, [pc, #4]	@ (800ed00 <__sfp_lock_release+0x8>)
 800ecfa:	f000 b92b 	b.w	800ef54 <__retarget_lock_release_recursive>
 800ecfe:	bf00      	nop
 800ed00:	20007ed9 	.word	0x20007ed9

0800ed04 <__sinit>:
 800ed04:	b510      	push	{r4, lr}
 800ed06:	4604      	mov	r4, r0
 800ed08:	f7ff fff0 	bl	800ecec <__sfp_lock_acquire>
 800ed0c:	6a23      	ldr	r3, [r4, #32]
 800ed0e:	b11b      	cbz	r3, 800ed18 <__sinit+0x14>
 800ed10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed14:	f7ff bff0 	b.w	800ecf8 <__sfp_lock_release>
 800ed18:	4b04      	ldr	r3, [pc, #16]	@ (800ed2c <__sinit+0x28>)
 800ed1a:	6223      	str	r3, [r4, #32]
 800ed1c:	4b04      	ldr	r3, [pc, #16]	@ (800ed30 <__sinit+0x2c>)
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d1f5      	bne.n	800ed10 <__sinit+0xc>
 800ed24:	f7ff ffc4 	bl	800ecb0 <global_stdio_init.part.0>
 800ed28:	e7f2      	b.n	800ed10 <__sinit+0xc>
 800ed2a:	bf00      	nop
 800ed2c:	0800ec71 	.word	0x0800ec71
 800ed30:	20007ed4 	.word	0x20007ed4

0800ed34 <_fwalk_sglue>:
 800ed34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed38:	4607      	mov	r7, r0
 800ed3a:	4688      	mov	r8, r1
 800ed3c:	4614      	mov	r4, r2
 800ed3e:	2600      	movs	r6, #0
 800ed40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ed44:	f1b9 0901 	subs.w	r9, r9, #1
 800ed48:	d505      	bpl.n	800ed56 <_fwalk_sglue+0x22>
 800ed4a:	6824      	ldr	r4, [r4, #0]
 800ed4c:	2c00      	cmp	r4, #0
 800ed4e:	d1f7      	bne.n	800ed40 <_fwalk_sglue+0xc>
 800ed50:	4630      	mov	r0, r6
 800ed52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed56:	89ab      	ldrh	r3, [r5, #12]
 800ed58:	2b01      	cmp	r3, #1
 800ed5a:	d907      	bls.n	800ed6c <_fwalk_sglue+0x38>
 800ed5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ed60:	3301      	adds	r3, #1
 800ed62:	d003      	beq.n	800ed6c <_fwalk_sglue+0x38>
 800ed64:	4629      	mov	r1, r5
 800ed66:	4638      	mov	r0, r7
 800ed68:	47c0      	blx	r8
 800ed6a:	4306      	orrs	r6, r0
 800ed6c:	3568      	adds	r5, #104	@ 0x68
 800ed6e:	e7e9      	b.n	800ed44 <_fwalk_sglue+0x10>

0800ed70 <iprintf>:
 800ed70:	b40f      	push	{r0, r1, r2, r3}
 800ed72:	b507      	push	{r0, r1, r2, lr}
 800ed74:	4906      	ldr	r1, [pc, #24]	@ (800ed90 <iprintf+0x20>)
 800ed76:	ab04      	add	r3, sp, #16
 800ed78:	6808      	ldr	r0, [r1, #0]
 800ed7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed7e:	6881      	ldr	r1, [r0, #8]
 800ed80:	9301      	str	r3, [sp, #4]
 800ed82:	f000 fae1 	bl	800f348 <_vfiprintf_r>
 800ed86:	b003      	add	sp, #12
 800ed88:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed8c:	b004      	add	sp, #16
 800ed8e:	4770      	bx	lr
 800ed90:	20000034 	.word	0x20000034

0800ed94 <_puts_r>:
 800ed94:	6a03      	ldr	r3, [r0, #32]
 800ed96:	b570      	push	{r4, r5, r6, lr}
 800ed98:	6884      	ldr	r4, [r0, #8]
 800ed9a:	4605      	mov	r5, r0
 800ed9c:	460e      	mov	r6, r1
 800ed9e:	b90b      	cbnz	r3, 800eda4 <_puts_r+0x10>
 800eda0:	f7ff ffb0 	bl	800ed04 <__sinit>
 800eda4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800eda6:	07db      	lsls	r3, r3, #31
 800eda8:	d405      	bmi.n	800edb6 <_puts_r+0x22>
 800edaa:	89a3      	ldrh	r3, [r4, #12]
 800edac:	0598      	lsls	r0, r3, #22
 800edae:	d402      	bmi.n	800edb6 <_puts_r+0x22>
 800edb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800edb2:	f000 f8ce 	bl	800ef52 <__retarget_lock_acquire_recursive>
 800edb6:	89a3      	ldrh	r3, [r4, #12]
 800edb8:	0719      	lsls	r1, r3, #28
 800edba:	d502      	bpl.n	800edc2 <_puts_r+0x2e>
 800edbc:	6923      	ldr	r3, [r4, #16]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d135      	bne.n	800ee2e <_puts_r+0x9a>
 800edc2:	4621      	mov	r1, r4
 800edc4:	4628      	mov	r0, r5
 800edc6:	f000 ff87 	bl	800fcd8 <__swsetup_r>
 800edca:	b380      	cbz	r0, 800ee2e <_puts_r+0x9a>
 800edcc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800edd0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800edd2:	07da      	lsls	r2, r3, #31
 800edd4:	d405      	bmi.n	800ede2 <_puts_r+0x4e>
 800edd6:	89a3      	ldrh	r3, [r4, #12]
 800edd8:	059b      	lsls	r3, r3, #22
 800edda:	d402      	bmi.n	800ede2 <_puts_r+0x4e>
 800eddc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800edde:	f000 f8b9 	bl	800ef54 <__retarget_lock_release_recursive>
 800ede2:	4628      	mov	r0, r5
 800ede4:	bd70      	pop	{r4, r5, r6, pc}
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	da04      	bge.n	800edf4 <_puts_r+0x60>
 800edea:	69a2      	ldr	r2, [r4, #24]
 800edec:	429a      	cmp	r2, r3
 800edee:	dc17      	bgt.n	800ee20 <_puts_r+0x8c>
 800edf0:	290a      	cmp	r1, #10
 800edf2:	d015      	beq.n	800ee20 <_puts_r+0x8c>
 800edf4:	6823      	ldr	r3, [r4, #0]
 800edf6:	1c5a      	adds	r2, r3, #1
 800edf8:	6022      	str	r2, [r4, #0]
 800edfa:	7019      	strb	r1, [r3, #0]
 800edfc:	68a3      	ldr	r3, [r4, #8]
 800edfe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ee02:	3b01      	subs	r3, #1
 800ee04:	60a3      	str	r3, [r4, #8]
 800ee06:	2900      	cmp	r1, #0
 800ee08:	d1ed      	bne.n	800ede6 <_puts_r+0x52>
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	da11      	bge.n	800ee32 <_puts_r+0x9e>
 800ee0e:	4622      	mov	r2, r4
 800ee10:	210a      	movs	r1, #10
 800ee12:	4628      	mov	r0, r5
 800ee14:	f000 ff22 	bl	800fc5c <__swbuf_r>
 800ee18:	3001      	adds	r0, #1
 800ee1a:	d0d7      	beq.n	800edcc <_puts_r+0x38>
 800ee1c:	250a      	movs	r5, #10
 800ee1e:	e7d7      	b.n	800edd0 <_puts_r+0x3c>
 800ee20:	4622      	mov	r2, r4
 800ee22:	4628      	mov	r0, r5
 800ee24:	f000 ff1a 	bl	800fc5c <__swbuf_r>
 800ee28:	3001      	adds	r0, #1
 800ee2a:	d1e7      	bne.n	800edfc <_puts_r+0x68>
 800ee2c:	e7ce      	b.n	800edcc <_puts_r+0x38>
 800ee2e:	3e01      	subs	r6, #1
 800ee30:	e7e4      	b.n	800edfc <_puts_r+0x68>
 800ee32:	6823      	ldr	r3, [r4, #0]
 800ee34:	1c5a      	adds	r2, r3, #1
 800ee36:	6022      	str	r2, [r4, #0]
 800ee38:	220a      	movs	r2, #10
 800ee3a:	701a      	strb	r2, [r3, #0]
 800ee3c:	e7ee      	b.n	800ee1c <_puts_r+0x88>
	...

0800ee40 <puts>:
 800ee40:	4b02      	ldr	r3, [pc, #8]	@ (800ee4c <puts+0xc>)
 800ee42:	4601      	mov	r1, r0
 800ee44:	6818      	ldr	r0, [r3, #0]
 800ee46:	f7ff bfa5 	b.w	800ed94 <_puts_r>
 800ee4a:	bf00      	nop
 800ee4c:	20000034 	.word	0x20000034

0800ee50 <memcmp>:
 800ee50:	b510      	push	{r4, lr}
 800ee52:	3901      	subs	r1, #1
 800ee54:	4402      	add	r2, r0
 800ee56:	4290      	cmp	r0, r2
 800ee58:	d101      	bne.n	800ee5e <memcmp+0xe>
 800ee5a:	2000      	movs	r0, #0
 800ee5c:	e005      	b.n	800ee6a <memcmp+0x1a>
 800ee5e:	7803      	ldrb	r3, [r0, #0]
 800ee60:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ee64:	42a3      	cmp	r3, r4
 800ee66:	d001      	beq.n	800ee6c <memcmp+0x1c>
 800ee68:	1b18      	subs	r0, r3, r4
 800ee6a:	bd10      	pop	{r4, pc}
 800ee6c:	3001      	adds	r0, #1
 800ee6e:	e7f2      	b.n	800ee56 <memcmp+0x6>

0800ee70 <memmove>:
 800ee70:	4288      	cmp	r0, r1
 800ee72:	b510      	push	{r4, lr}
 800ee74:	eb01 0402 	add.w	r4, r1, r2
 800ee78:	d902      	bls.n	800ee80 <memmove+0x10>
 800ee7a:	4284      	cmp	r4, r0
 800ee7c:	4623      	mov	r3, r4
 800ee7e:	d807      	bhi.n	800ee90 <memmove+0x20>
 800ee80:	1e43      	subs	r3, r0, #1
 800ee82:	42a1      	cmp	r1, r4
 800ee84:	d008      	beq.n	800ee98 <memmove+0x28>
 800ee86:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ee8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ee8e:	e7f8      	b.n	800ee82 <memmove+0x12>
 800ee90:	4402      	add	r2, r0
 800ee92:	4601      	mov	r1, r0
 800ee94:	428a      	cmp	r2, r1
 800ee96:	d100      	bne.n	800ee9a <memmove+0x2a>
 800ee98:	bd10      	pop	{r4, pc}
 800ee9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ee9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800eea2:	e7f7      	b.n	800ee94 <memmove+0x24>

0800eea4 <memset>:
 800eea4:	4402      	add	r2, r0
 800eea6:	4603      	mov	r3, r0
 800eea8:	4293      	cmp	r3, r2
 800eeaa:	d100      	bne.n	800eeae <memset+0xa>
 800eeac:	4770      	bx	lr
 800eeae:	f803 1b01 	strb.w	r1, [r3], #1
 800eeb2:	e7f9      	b.n	800eea8 <memset+0x4>

0800eeb4 <strncpy>:
 800eeb4:	b510      	push	{r4, lr}
 800eeb6:	3901      	subs	r1, #1
 800eeb8:	4603      	mov	r3, r0
 800eeba:	b132      	cbz	r2, 800eeca <strncpy+0x16>
 800eebc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800eec0:	f803 4b01 	strb.w	r4, [r3], #1
 800eec4:	3a01      	subs	r2, #1
 800eec6:	2c00      	cmp	r4, #0
 800eec8:	d1f7      	bne.n	800eeba <strncpy+0x6>
 800eeca:	441a      	add	r2, r3
 800eecc:	2100      	movs	r1, #0
 800eece:	4293      	cmp	r3, r2
 800eed0:	d100      	bne.n	800eed4 <strncpy+0x20>
 800eed2:	bd10      	pop	{r4, pc}
 800eed4:	f803 1b01 	strb.w	r1, [r3], #1
 800eed8:	e7f9      	b.n	800eece <strncpy+0x1a>

0800eeda <strstr>:
 800eeda:	780a      	ldrb	r2, [r1, #0]
 800eedc:	b570      	push	{r4, r5, r6, lr}
 800eede:	b96a      	cbnz	r2, 800eefc <strstr+0x22>
 800eee0:	bd70      	pop	{r4, r5, r6, pc}
 800eee2:	429a      	cmp	r2, r3
 800eee4:	d109      	bne.n	800eefa <strstr+0x20>
 800eee6:	460c      	mov	r4, r1
 800eee8:	4605      	mov	r5, r0
 800eeea:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d0f6      	beq.n	800eee0 <strstr+0x6>
 800eef2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800eef6:	429e      	cmp	r6, r3
 800eef8:	d0f7      	beq.n	800eeea <strstr+0x10>
 800eefa:	3001      	adds	r0, #1
 800eefc:	7803      	ldrb	r3, [r0, #0]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d1ef      	bne.n	800eee2 <strstr+0x8>
 800ef02:	4618      	mov	r0, r3
 800ef04:	e7ec      	b.n	800eee0 <strstr+0x6>
	...

0800ef08 <__libc_init_array>:
 800ef08:	b570      	push	{r4, r5, r6, lr}
 800ef0a:	4d0d      	ldr	r5, [pc, #52]	@ (800ef40 <__libc_init_array+0x38>)
 800ef0c:	4c0d      	ldr	r4, [pc, #52]	@ (800ef44 <__libc_init_array+0x3c>)
 800ef0e:	1b64      	subs	r4, r4, r5
 800ef10:	10a4      	asrs	r4, r4, #2
 800ef12:	2600      	movs	r6, #0
 800ef14:	42a6      	cmp	r6, r4
 800ef16:	d109      	bne.n	800ef2c <__libc_init_array+0x24>
 800ef18:	4d0b      	ldr	r5, [pc, #44]	@ (800ef48 <__libc_init_array+0x40>)
 800ef1a:	4c0c      	ldr	r4, [pc, #48]	@ (800ef4c <__libc_init_array+0x44>)
 800ef1c:	f001 f860 	bl	800ffe0 <_init>
 800ef20:	1b64      	subs	r4, r4, r5
 800ef22:	10a4      	asrs	r4, r4, #2
 800ef24:	2600      	movs	r6, #0
 800ef26:	42a6      	cmp	r6, r4
 800ef28:	d105      	bne.n	800ef36 <__libc_init_array+0x2e>
 800ef2a:	bd70      	pop	{r4, r5, r6, pc}
 800ef2c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef30:	4798      	blx	r3
 800ef32:	3601      	adds	r6, #1
 800ef34:	e7ee      	b.n	800ef14 <__libc_init_array+0xc>
 800ef36:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef3a:	4798      	blx	r3
 800ef3c:	3601      	adds	r6, #1
 800ef3e:	e7f2      	b.n	800ef26 <__libc_init_array+0x1e>
 800ef40:	08011a38 	.word	0x08011a38
 800ef44:	08011a38 	.word	0x08011a38
 800ef48:	08011a38 	.word	0x08011a38
 800ef4c:	08011a3c 	.word	0x08011a3c

0800ef50 <__retarget_lock_init_recursive>:
 800ef50:	4770      	bx	lr

0800ef52 <__retarget_lock_acquire_recursive>:
 800ef52:	4770      	bx	lr

0800ef54 <__retarget_lock_release_recursive>:
 800ef54:	4770      	bx	lr

0800ef56 <memcpy>:
 800ef56:	440a      	add	r2, r1
 800ef58:	4291      	cmp	r1, r2
 800ef5a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ef5e:	d100      	bne.n	800ef62 <memcpy+0xc>
 800ef60:	4770      	bx	lr
 800ef62:	b510      	push	{r4, lr}
 800ef64:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef68:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef6c:	4291      	cmp	r1, r2
 800ef6e:	d1f9      	bne.n	800ef64 <memcpy+0xe>
 800ef70:	bd10      	pop	{r4, pc}
	...

0800ef74 <__assert_func>:
 800ef74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ef76:	4614      	mov	r4, r2
 800ef78:	461a      	mov	r2, r3
 800ef7a:	4b09      	ldr	r3, [pc, #36]	@ (800efa0 <__assert_func+0x2c>)
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	4605      	mov	r5, r0
 800ef80:	68d8      	ldr	r0, [r3, #12]
 800ef82:	b14c      	cbz	r4, 800ef98 <__assert_func+0x24>
 800ef84:	4b07      	ldr	r3, [pc, #28]	@ (800efa4 <__assert_func+0x30>)
 800ef86:	9100      	str	r1, [sp, #0]
 800ef88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ef8c:	4906      	ldr	r1, [pc, #24]	@ (800efa8 <__assert_func+0x34>)
 800ef8e:	462b      	mov	r3, r5
 800ef90:	f000 fe24 	bl	800fbdc <fiprintf>
 800ef94:	f000 ffd0 	bl	800ff38 <abort>
 800ef98:	4b04      	ldr	r3, [pc, #16]	@ (800efac <__assert_func+0x38>)
 800ef9a:	461c      	mov	r4, r3
 800ef9c:	e7f3      	b.n	800ef86 <__assert_func+0x12>
 800ef9e:	bf00      	nop
 800efa0:	20000034 	.word	0x20000034
 800efa4:	080119c1 	.word	0x080119c1
 800efa8:	080119ce 	.word	0x080119ce
 800efac:	080119fc 	.word	0x080119fc

0800efb0 <_free_r>:
 800efb0:	b538      	push	{r3, r4, r5, lr}
 800efb2:	4605      	mov	r5, r0
 800efb4:	2900      	cmp	r1, #0
 800efb6:	d041      	beq.n	800f03c <_free_r+0x8c>
 800efb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800efbc:	1f0c      	subs	r4, r1, #4
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	bfb8      	it	lt
 800efc2:	18e4      	addlt	r4, r4, r3
 800efc4:	f000 fdba 	bl	800fb3c <__malloc_lock>
 800efc8:	4a1d      	ldr	r2, [pc, #116]	@ (800f040 <_free_r+0x90>)
 800efca:	6813      	ldr	r3, [r2, #0]
 800efcc:	b933      	cbnz	r3, 800efdc <_free_r+0x2c>
 800efce:	6063      	str	r3, [r4, #4]
 800efd0:	6014      	str	r4, [r2, #0]
 800efd2:	4628      	mov	r0, r5
 800efd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800efd8:	f000 bdb6 	b.w	800fb48 <__malloc_unlock>
 800efdc:	42a3      	cmp	r3, r4
 800efde:	d908      	bls.n	800eff2 <_free_r+0x42>
 800efe0:	6820      	ldr	r0, [r4, #0]
 800efe2:	1821      	adds	r1, r4, r0
 800efe4:	428b      	cmp	r3, r1
 800efe6:	bf01      	itttt	eq
 800efe8:	6819      	ldreq	r1, [r3, #0]
 800efea:	685b      	ldreq	r3, [r3, #4]
 800efec:	1809      	addeq	r1, r1, r0
 800efee:	6021      	streq	r1, [r4, #0]
 800eff0:	e7ed      	b.n	800efce <_free_r+0x1e>
 800eff2:	461a      	mov	r2, r3
 800eff4:	685b      	ldr	r3, [r3, #4]
 800eff6:	b10b      	cbz	r3, 800effc <_free_r+0x4c>
 800eff8:	42a3      	cmp	r3, r4
 800effa:	d9fa      	bls.n	800eff2 <_free_r+0x42>
 800effc:	6811      	ldr	r1, [r2, #0]
 800effe:	1850      	adds	r0, r2, r1
 800f000:	42a0      	cmp	r0, r4
 800f002:	d10b      	bne.n	800f01c <_free_r+0x6c>
 800f004:	6820      	ldr	r0, [r4, #0]
 800f006:	4401      	add	r1, r0
 800f008:	1850      	adds	r0, r2, r1
 800f00a:	4283      	cmp	r3, r0
 800f00c:	6011      	str	r1, [r2, #0]
 800f00e:	d1e0      	bne.n	800efd2 <_free_r+0x22>
 800f010:	6818      	ldr	r0, [r3, #0]
 800f012:	685b      	ldr	r3, [r3, #4]
 800f014:	6053      	str	r3, [r2, #4]
 800f016:	4408      	add	r0, r1
 800f018:	6010      	str	r0, [r2, #0]
 800f01a:	e7da      	b.n	800efd2 <_free_r+0x22>
 800f01c:	d902      	bls.n	800f024 <_free_r+0x74>
 800f01e:	230c      	movs	r3, #12
 800f020:	602b      	str	r3, [r5, #0]
 800f022:	e7d6      	b.n	800efd2 <_free_r+0x22>
 800f024:	6820      	ldr	r0, [r4, #0]
 800f026:	1821      	adds	r1, r4, r0
 800f028:	428b      	cmp	r3, r1
 800f02a:	bf04      	itt	eq
 800f02c:	6819      	ldreq	r1, [r3, #0]
 800f02e:	685b      	ldreq	r3, [r3, #4]
 800f030:	6063      	str	r3, [r4, #4]
 800f032:	bf04      	itt	eq
 800f034:	1809      	addeq	r1, r1, r0
 800f036:	6021      	streq	r1, [r4, #0]
 800f038:	6054      	str	r4, [r2, #4]
 800f03a:	e7ca      	b.n	800efd2 <_free_r+0x22>
 800f03c:	bd38      	pop	{r3, r4, r5, pc}
 800f03e:	bf00      	nop
 800f040:	20007ee4 	.word	0x20007ee4

0800f044 <__ssputs_r>:
 800f044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f048:	688e      	ldr	r6, [r1, #8]
 800f04a:	461f      	mov	r7, r3
 800f04c:	42be      	cmp	r6, r7
 800f04e:	680b      	ldr	r3, [r1, #0]
 800f050:	4682      	mov	sl, r0
 800f052:	460c      	mov	r4, r1
 800f054:	4690      	mov	r8, r2
 800f056:	d82d      	bhi.n	800f0b4 <__ssputs_r+0x70>
 800f058:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f05c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f060:	d026      	beq.n	800f0b0 <__ssputs_r+0x6c>
 800f062:	6965      	ldr	r5, [r4, #20]
 800f064:	6909      	ldr	r1, [r1, #16]
 800f066:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f06a:	eba3 0901 	sub.w	r9, r3, r1
 800f06e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f072:	1c7b      	adds	r3, r7, #1
 800f074:	444b      	add	r3, r9
 800f076:	106d      	asrs	r5, r5, #1
 800f078:	429d      	cmp	r5, r3
 800f07a:	bf38      	it	cc
 800f07c:	461d      	movcc	r5, r3
 800f07e:	0553      	lsls	r3, r2, #21
 800f080:	d527      	bpl.n	800f0d2 <__ssputs_r+0x8e>
 800f082:	4629      	mov	r1, r5
 800f084:	f000 faa2 	bl	800f5cc <_malloc_r>
 800f088:	4606      	mov	r6, r0
 800f08a:	b360      	cbz	r0, 800f0e6 <__ssputs_r+0xa2>
 800f08c:	6921      	ldr	r1, [r4, #16]
 800f08e:	464a      	mov	r2, r9
 800f090:	f7ff ff61 	bl	800ef56 <memcpy>
 800f094:	89a3      	ldrh	r3, [r4, #12]
 800f096:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f09a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f09e:	81a3      	strh	r3, [r4, #12]
 800f0a0:	6126      	str	r6, [r4, #16]
 800f0a2:	6165      	str	r5, [r4, #20]
 800f0a4:	444e      	add	r6, r9
 800f0a6:	eba5 0509 	sub.w	r5, r5, r9
 800f0aa:	6026      	str	r6, [r4, #0]
 800f0ac:	60a5      	str	r5, [r4, #8]
 800f0ae:	463e      	mov	r6, r7
 800f0b0:	42be      	cmp	r6, r7
 800f0b2:	d900      	bls.n	800f0b6 <__ssputs_r+0x72>
 800f0b4:	463e      	mov	r6, r7
 800f0b6:	6820      	ldr	r0, [r4, #0]
 800f0b8:	4632      	mov	r2, r6
 800f0ba:	4641      	mov	r1, r8
 800f0bc:	f7ff fed8 	bl	800ee70 <memmove>
 800f0c0:	68a3      	ldr	r3, [r4, #8]
 800f0c2:	1b9b      	subs	r3, r3, r6
 800f0c4:	60a3      	str	r3, [r4, #8]
 800f0c6:	6823      	ldr	r3, [r4, #0]
 800f0c8:	4433      	add	r3, r6
 800f0ca:	6023      	str	r3, [r4, #0]
 800f0cc:	2000      	movs	r0, #0
 800f0ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0d2:	462a      	mov	r2, r5
 800f0d4:	f000 fd94 	bl	800fc00 <_realloc_r>
 800f0d8:	4606      	mov	r6, r0
 800f0da:	2800      	cmp	r0, #0
 800f0dc:	d1e0      	bne.n	800f0a0 <__ssputs_r+0x5c>
 800f0de:	6921      	ldr	r1, [r4, #16]
 800f0e0:	4650      	mov	r0, sl
 800f0e2:	f7ff ff65 	bl	800efb0 <_free_r>
 800f0e6:	230c      	movs	r3, #12
 800f0e8:	f8ca 3000 	str.w	r3, [sl]
 800f0ec:	89a3      	ldrh	r3, [r4, #12]
 800f0ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f0f2:	81a3      	strh	r3, [r4, #12]
 800f0f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f0f8:	e7e9      	b.n	800f0ce <__ssputs_r+0x8a>
	...

0800f0fc <_svfiprintf_r>:
 800f0fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f100:	4698      	mov	r8, r3
 800f102:	898b      	ldrh	r3, [r1, #12]
 800f104:	061b      	lsls	r3, r3, #24
 800f106:	b09d      	sub	sp, #116	@ 0x74
 800f108:	4607      	mov	r7, r0
 800f10a:	460d      	mov	r5, r1
 800f10c:	4614      	mov	r4, r2
 800f10e:	d510      	bpl.n	800f132 <_svfiprintf_r+0x36>
 800f110:	690b      	ldr	r3, [r1, #16]
 800f112:	b973      	cbnz	r3, 800f132 <_svfiprintf_r+0x36>
 800f114:	2140      	movs	r1, #64	@ 0x40
 800f116:	f000 fa59 	bl	800f5cc <_malloc_r>
 800f11a:	6028      	str	r0, [r5, #0]
 800f11c:	6128      	str	r0, [r5, #16]
 800f11e:	b930      	cbnz	r0, 800f12e <_svfiprintf_r+0x32>
 800f120:	230c      	movs	r3, #12
 800f122:	603b      	str	r3, [r7, #0]
 800f124:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f128:	b01d      	add	sp, #116	@ 0x74
 800f12a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f12e:	2340      	movs	r3, #64	@ 0x40
 800f130:	616b      	str	r3, [r5, #20]
 800f132:	2300      	movs	r3, #0
 800f134:	9309      	str	r3, [sp, #36]	@ 0x24
 800f136:	2320      	movs	r3, #32
 800f138:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f13c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f140:	2330      	movs	r3, #48	@ 0x30
 800f142:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f2e0 <_svfiprintf_r+0x1e4>
 800f146:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f14a:	f04f 0901 	mov.w	r9, #1
 800f14e:	4623      	mov	r3, r4
 800f150:	469a      	mov	sl, r3
 800f152:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f156:	b10a      	cbz	r2, 800f15c <_svfiprintf_r+0x60>
 800f158:	2a25      	cmp	r2, #37	@ 0x25
 800f15a:	d1f9      	bne.n	800f150 <_svfiprintf_r+0x54>
 800f15c:	ebba 0b04 	subs.w	fp, sl, r4
 800f160:	d00b      	beq.n	800f17a <_svfiprintf_r+0x7e>
 800f162:	465b      	mov	r3, fp
 800f164:	4622      	mov	r2, r4
 800f166:	4629      	mov	r1, r5
 800f168:	4638      	mov	r0, r7
 800f16a:	f7ff ff6b 	bl	800f044 <__ssputs_r>
 800f16e:	3001      	adds	r0, #1
 800f170:	f000 80a7 	beq.w	800f2c2 <_svfiprintf_r+0x1c6>
 800f174:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f176:	445a      	add	r2, fp
 800f178:	9209      	str	r2, [sp, #36]	@ 0x24
 800f17a:	f89a 3000 	ldrb.w	r3, [sl]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	f000 809f 	beq.w	800f2c2 <_svfiprintf_r+0x1c6>
 800f184:	2300      	movs	r3, #0
 800f186:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f18a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f18e:	f10a 0a01 	add.w	sl, sl, #1
 800f192:	9304      	str	r3, [sp, #16]
 800f194:	9307      	str	r3, [sp, #28]
 800f196:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f19a:	931a      	str	r3, [sp, #104]	@ 0x68
 800f19c:	4654      	mov	r4, sl
 800f19e:	2205      	movs	r2, #5
 800f1a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1a4:	484e      	ldr	r0, [pc, #312]	@ (800f2e0 <_svfiprintf_r+0x1e4>)
 800f1a6:	f7f1 f83b 	bl	8000220 <memchr>
 800f1aa:	9a04      	ldr	r2, [sp, #16]
 800f1ac:	b9d8      	cbnz	r0, 800f1e6 <_svfiprintf_r+0xea>
 800f1ae:	06d0      	lsls	r0, r2, #27
 800f1b0:	bf44      	itt	mi
 800f1b2:	2320      	movmi	r3, #32
 800f1b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f1b8:	0711      	lsls	r1, r2, #28
 800f1ba:	bf44      	itt	mi
 800f1bc:	232b      	movmi	r3, #43	@ 0x2b
 800f1be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f1c2:	f89a 3000 	ldrb.w	r3, [sl]
 800f1c6:	2b2a      	cmp	r3, #42	@ 0x2a
 800f1c8:	d015      	beq.n	800f1f6 <_svfiprintf_r+0xfa>
 800f1ca:	9a07      	ldr	r2, [sp, #28]
 800f1cc:	4654      	mov	r4, sl
 800f1ce:	2000      	movs	r0, #0
 800f1d0:	f04f 0c0a 	mov.w	ip, #10
 800f1d4:	4621      	mov	r1, r4
 800f1d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f1da:	3b30      	subs	r3, #48	@ 0x30
 800f1dc:	2b09      	cmp	r3, #9
 800f1de:	d94b      	bls.n	800f278 <_svfiprintf_r+0x17c>
 800f1e0:	b1b0      	cbz	r0, 800f210 <_svfiprintf_r+0x114>
 800f1e2:	9207      	str	r2, [sp, #28]
 800f1e4:	e014      	b.n	800f210 <_svfiprintf_r+0x114>
 800f1e6:	eba0 0308 	sub.w	r3, r0, r8
 800f1ea:	fa09 f303 	lsl.w	r3, r9, r3
 800f1ee:	4313      	orrs	r3, r2
 800f1f0:	9304      	str	r3, [sp, #16]
 800f1f2:	46a2      	mov	sl, r4
 800f1f4:	e7d2      	b.n	800f19c <_svfiprintf_r+0xa0>
 800f1f6:	9b03      	ldr	r3, [sp, #12]
 800f1f8:	1d19      	adds	r1, r3, #4
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	9103      	str	r1, [sp, #12]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	bfbb      	ittet	lt
 800f202:	425b      	neglt	r3, r3
 800f204:	f042 0202 	orrlt.w	r2, r2, #2
 800f208:	9307      	strge	r3, [sp, #28]
 800f20a:	9307      	strlt	r3, [sp, #28]
 800f20c:	bfb8      	it	lt
 800f20e:	9204      	strlt	r2, [sp, #16]
 800f210:	7823      	ldrb	r3, [r4, #0]
 800f212:	2b2e      	cmp	r3, #46	@ 0x2e
 800f214:	d10a      	bne.n	800f22c <_svfiprintf_r+0x130>
 800f216:	7863      	ldrb	r3, [r4, #1]
 800f218:	2b2a      	cmp	r3, #42	@ 0x2a
 800f21a:	d132      	bne.n	800f282 <_svfiprintf_r+0x186>
 800f21c:	9b03      	ldr	r3, [sp, #12]
 800f21e:	1d1a      	adds	r2, r3, #4
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	9203      	str	r2, [sp, #12]
 800f224:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f228:	3402      	adds	r4, #2
 800f22a:	9305      	str	r3, [sp, #20]
 800f22c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f2f0 <_svfiprintf_r+0x1f4>
 800f230:	7821      	ldrb	r1, [r4, #0]
 800f232:	2203      	movs	r2, #3
 800f234:	4650      	mov	r0, sl
 800f236:	f7f0 fff3 	bl	8000220 <memchr>
 800f23a:	b138      	cbz	r0, 800f24c <_svfiprintf_r+0x150>
 800f23c:	9b04      	ldr	r3, [sp, #16]
 800f23e:	eba0 000a 	sub.w	r0, r0, sl
 800f242:	2240      	movs	r2, #64	@ 0x40
 800f244:	4082      	lsls	r2, r0
 800f246:	4313      	orrs	r3, r2
 800f248:	3401      	adds	r4, #1
 800f24a:	9304      	str	r3, [sp, #16]
 800f24c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f250:	4824      	ldr	r0, [pc, #144]	@ (800f2e4 <_svfiprintf_r+0x1e8>)
 800f252:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f256:	2206      	movs	r2, #6
 800f258:	f7f0 ffe2 	bl	8000220 <memchr>
 800f25c:	2800      	cmp	r0, #0
 800f25e:	d036      	beq.n	800f2ce <_svfiprintf_r+0x1d2>
 800f260:	4b21      	ldr	r3, [pc, #132]	@ (800f2e8 <_svfiprintf_r+0x1ec>)
 800f262:	bb1b      	cbnz	r3, 800f2ac <_svfiprintf_r+0x1b0>
 800f264:	9b03      	ldr	r3, [sp, #12]
 800f266:	3307      	adds	r3, #7
 800f268:	f023 0307 	bic.w	r3, r3, #7
 800f26c:	3308      	adds	r3, #8
 800f26e:	9303      	str	r3, [sp, #12]
 800f270:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f272:	4433      	add	r3, r6
 800f274:	9309      	str	r3, [sp, #36]	@ 0x24
 800f276:	e76a      	b.n	800f14e <_svfiprintf_r+0x52>
 800f278:	fb0c 3202 	mla	r2, ip, r2, r3
 800f27c:	460c      	mov	r4, r1
 800f27e:	2001      	movs	r0, #1
 800f280:	e7a8      	b.n	800f1d4 <_svfiprintf_r+0xd8>
 800f282:	2300      	movs	r3, #0
 800f284:	3401      	adds	r4, #1
 800f286:	9305      	str	r3, [sp, #20]
 800f288:	4619      	mov	r1, r3
 800f28a:	f04f 0c0a 	mov.w	ip, #10
 800f28e:	4620      	mov	r0, r4
 800f290:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f294:	3a30      	subs	r2, #48	@ 0x30
 800f296:	2a09      	cmp	r2, #9
 800f298:	d903      	bls.n	800f2a2 <_svfiprintf_r+0x1a6>
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d0c6      	beq.n	800f22c <_svfiprintf_r+0x130>
 800f29e:	9105      	str	r1, [sp, #20]
 800f2a0:	e7c4      	b.n	800f22c <_svfiprintf_r+0x130>
 800f2a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800f2a6:	4604      	mov	r4, r0
 800f2a8:	2301      	movs	r3, #1
 800f2aa:	e7f0      	b.n	800f28e <_svfiprintf_r+0x192>
 800f2ac:	ab03      	add	r3, sp, #12
 800f2ae:	9300      	str	r3, [sp, #0]
 800f2b0:	462a      	mov	r2, r5
 800f2b2:	4b0e      	ldr	r3, [pc, #56]	@ (800f2ec <_svfiprintf_r+0x1f0>)
 800f2b4:	a904      	add	r1, sp, #16
 800f2b6:	4638      	mov	r0, r7
 800f2b8:	f3af 8000 	nop.w
 800f2bc:	1c42      	adds	r2, r0, #1
 800f2be:	4606      	mov	r6, r0
 800f2c0:	d1d6      	bne.n	800f270 <_svfiprintf_r+0x174>
 800f2c2:	89ab      	ldrh	r3, [r5, #12]
 800f2c4:	065b      	lsls	r3, r3, #25
 800f2c6:	f53f af2d 	bmi.w	800f124 <_svfiprintf_r+0x28>
 800f2ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f2cc:	e72c      	b.n	800f128 <_svfiprintf_r+0x2c>
 800f2ce:	ab03      	add	r3, sp, #12
 800f2d0:	9300      	str	r3, [sp, #0]
 800f2d2:	462a      	mov	r2, r5
 800f2d4:	4b05      	ldr	r3, [pc, #20]	@ (800f2ec <_svfiprintf_r+0x1f0>)
 800f2d6:	a904      	add	r1, sp, #16
 800f2d8:	4638      	mov	r0, r7
 800f2da:	f000 fa65 	bl	800f7a8 <_printf_i>
 800f2de:	e7ed      	b.n	800f2bc <_svfiprintf_r+0x1c0>
 800f2e0:	080119fd 	.word	0x080119fd
 800f2e4:	08011a07 	.word	0x08011a07
 800f2e8:	00000000 	.word	0x00000000
 800f2ec:	0800f045 	.word	0x0800f045
 800f2f0:	08011a03 	.word	0x08011a03

0800f2f4 <__sfputc_r>:
 800f2f4:	6893      	ldr	r3, [r2, #8]
 800f2f6:	3b01      	subs	r3, #1
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	b410      	push	{r4}
 800f2fc:	6093      	str	r3, [r2, #8]
 800f2fe:	da08      	bge.n	800f312 <__sfputc_r+0x1e>
 800f300:	6994      	ldr	r4, [r2, #24]
 800f302:	42a3      	cmp	r3, r4
 800f304:	db01      	blt.n	800f30a <__sfputc_r+0x16>
 800f306:	290a      	cmp	r1, #10
 800f308:	d103      	bne.n	800f312 <__sfputc_r+0x1e>
 800f30a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f30e:	f000 bca5 	b.w	800fc5c <__swbuf_r>
 800f312:	6813      	ldr	r3, [r2, #0]
 800f314:	1c58      	adds	r0, r3, #1
 800f316:	6010      	str	r0, [r2, #0]
 800f318:	7019      	strb	r1, [r3, #0]
 800f31a:	4608      	mov	r0, r1
 800f31c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f320:	4770      	bx	lr

0800f322 <__sfputs_r>:
 800f322:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f324:	4606      	mov	r6, r0
 800f326:	460f      	mov	r7, r1
 800f328:	4614      	mov	r4, r2
 800f32a:	18d5      	adds	r5, r2, r3
 800f32c:	42ac      	cmp	r4, r5
 800f32e:	d101      	bne.n	800f334 <__sfputs_r+0x12>
 800f330:	2000      	movs	r0, #0
 800f332:	e007      	b.n	800f344 <__sfputs_r+0x22>
 800f334:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f338:	463a      	mov	r2, r7
 800f33a:	4630      	mov	r0, r6
 800f33c:	f7ff ffda 	bl	800f2f4 <__sfputc_r>
 800f340:	1c43      	adds	r3, r0, #1
 800f342:	d1f3      	bne.n	800f32c <__sfputs_r+0xa>
 800f344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f348 <_vfiprintf_r>:
 800f348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f34c:	460d      	mov	r5, r1
 800f34e:	b09d      	sub	sp, #116	@ 0x74
 800f350:	4614      	mov	r4, r2
 800f352:	4698      	mov	r8, r3
 800f354:	4606      	mov	r6, r0
 800f356:	b118      	cbz	r0, 800f360 <_vfiprintf_r+0x18>
 800f358:	6a03      	ldr	r3, [r0, #32]
 800f35a:	b90b      	cbnz	r3, 800f360 <_vfiprintf_r+0x18>
 800f35c:	f7ff fcd2 	bl	800ed04 <__sinit>
 800f360:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f362:	07d9      	lsls	r1, r3, #31
 800f364:	d405      	bmi.n	800f372 <_vfiprintf_r+0x2a>
 800f366:	89ab      	ldrh	r3, [r5, #12]
 800f368:	059a      	lsls	r2, r3, #22
 800f36a:	d402      	bmi.n	800f372 <_vfiprintf_r+0x2a>
 800f36c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f36e:	f7ff fdf0 	bl	800ef52 <__retarget_lock_acquire_recursive>
 800f372:	89ab      	ldrh	r3, [r5, #12]
 800f374:	071b      	lsls	r3, r3, #28
 800f376:	d501      	bpl.n	800f37c <_vfiprintf_r+0x34>
 800f378:	692b      	ldr	r3, [r5, #16]
 800f37a:	b99b      	cbnz	r3, 800f3a4 <_vfiprintf_r+0x5c>
 800f37c:	4629      	mov	r1, r5
 800f37e:	4630      	mov	r0, r6
 800f380:	f000 fcaa 	bl	800fcd8 <__swsetup_r>
 800f384:	b170      	cbz	r0, 800f3a4 <_vfiprintf_r+0x5c>
 800f386:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f388:	07dc      	lsls	r4, r3, #31
 800f38a:	d504      	bpl.n	800f396 <_vfiprintf_r+0x4e>
 800f38c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f390:	b01d      	add	sp, #116	@ 0x74
 800f392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f396:	89ab      	ldrh	r3, [r5, #12]
 800f398:	0598      	lsls	r0, r3, #22
 800f39a:	d4f7      	bmi.n	800f38c <_vfiprintf_r+0x44>
 800f39c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f39e:	f7ff fdd9 	bl	800ef54 <__retarget_lock_release_recursive>
 800f3a2:	e7f3      	b.n	800f38c <_vfiprintf_r+0x44>
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800f3a8:	2320      	movs	r3, #32
 800f3aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f3ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800f3b2:	2330      	movs	r3, #48	@ 0x30
 800f3b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f564 <_vfiprintf_r+0x21c>
 800f3b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f3bc:	f04f 0901 	mov.w	r9, #1
 800f3c0:	4623      	mov	r3, r4
 800f3c2:	469a      	mov	sl, r3
 800f3c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f3c8:	b10a      	cbz	r2, 800f3ce <_vfiprintf_r+0x86>
 800f3ca:	2a25      	cmp	r2, #37	@ 0x25
 800f3cc:	d1f9      	bne.n	800f3c2 <_vfiprintf_r+0x7a>
 800f3ce:	ebba 0b04 	subs.w	fp, sl, r4
 800f3d2:	d00b      	beq.n	800f3ec <_vfiprintf_r+0xa4>
 800f3d4:	465b      	mov	r3, fp
 800f3d6:	4622      	mov	r2, r4
 800f3d8:	4629      	mov	r1, r5
 800f3da:	4630      	mov	r0, r6
 800f3dc:	f7ff ffa1 	bl	800f322 <__sfputs_r>
 800f3e0:	3001      	adds	r0, #1
 800f3e2:	f000 80a7 	beq.w	800f534 <_vfiprintf_r+0x1ec>
 800f3e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f3e8:	445a      	add	r2, fp
 800f3ea:	9209      	str	r2, [sp, #36]	@ 0x24
 800f3ec:	f89a 3000 	ldrb.w	r3, [sl]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	f000 809f 	beq.w	800f534 <_vfiprintf_r+0x1ec>
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f3fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f400:	f10a 0a01 	add.w	sl, sl, #1
 800f404:	9304      	str	r3, [sp, #16]
 800f406:	9307      	str	r3, [sp, #28]
 800f408:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f40c:	931a      	str	r3, [sp, #104]	@ 0x68
 800f40e:	4654      	mov	r4, sl
 800f410:	2205      	movs	r2, #5
 800f412:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f416:	4853      	ldr	r0, [pc, #332]	@ (800f564 <_vfiprintf_r+0x21c>)
 800f418:	f7f0 ff02 	bl	8000220 <memchr>
 800f41c:	9a04      	ldr	r2, [sp, #16]
 800f41e:	b9d8      	cbnz	r0, 800f458 <_vfiprintf_r+0x110>
 800f420:	06d1      	lsls	r1, r2, #27
 800f422:	bf44      	itt	mi
 800f424:	2320      	movmi	r3, #32
 800f426:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f42a:	0713      	lsls	r3, r2, #28
 800f42c:	bf44      	itt	mi
 800f42e:	232b      	movmi	r3, #43	@ 0x2b
 800f430:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f434:	f89a 3000 	ldrb.w	r3, [sl]
 800f438:	2b2a      	cmp	r3, #42	@ 0x2a
 800f43a:	d015      	beq.n	800f468 <_vfiprintf_r+0x120>
 800f43c:	9a07      	ldr	r2, [sp, #28]
 800f43e:	4654      	mov	r4, sl
 800f440:	2000      	movs	r0, #0
 800f442:	f04f 0c0a 	mov.w	ip, #10
 800f446:	4621      	mov	r1, r4
 800f448:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f44c:	3b30      	subs	r3, #48	@ 0x30
 800f44e:	2b09      	cmp	r3, #9
 800f450:	d94b      	bls.n	800f4ea <_vfiprintf_r+0x1a2>
 800f452:	b1b0      	cbz	r0, 800f482 <_vfiprintf_r+0x13a>
 800f454:	9207      	str	r2, [sp, #28]
 800f456:	e014      	b.n	800f482 <_vfiprintf_r+0x13a>
 800f458:	eba0 0308 	sub.w	r3, r0, r8
 800f45c:	fa09 f303 	lsl.w	r3, r9, r3
 800f460:	4313      	orrs	r3, r2
 800f462:	9304      	str	r3, [sp, #16]
 800f464:	46a2      	mov	sl, r4
 800f466:	e7d2      	b.n	800f40e <_vfiprintf_r+0xc6>
 800f468:	9b03      	ldr	r3, [sp, #12]
 800f46a:	1d19      	adds	r1, r3, #4
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	9103      	str	r1, [sp, #12]
 800f470:	2b00      	cmp	r3, #0
 800f472:	bfbb      	ittet	lt
 800f474:	425b      	neglt	r3, r3
 800f476:	f042 0202 	orrlt.w	r2, r2, #2
 800f47a:	9307      	strge	r3, [sp, #28]
 800f47c:	9307      	strlt	r3, [sp, #28]
 800f47e:	bfb8      	it	lt
 800f480:	9204      	strlt	r2, [sp, #16]
 800f482:	7823      	ldrb	r3, [r4, #0]
 800f484:	2b2e      	cmp	r3, #46	@ 0x2e
 800f486:	d10a      	bne.n	800f49e <_vfiprintf_r+0x156>
 800f488:	7863      	ldrb	r3, [r4, #1]
 800f48a:	2b2a      	cmp	r3, #42	@ 0x2a
 800f48c:	d132      	bne.n	800f4f4 <_vfiprintf_r+0x1ac>
 800f48e:	9b03      	ldr	r3, [sp, #12]
 800f490:	1d1a      	adds	r2, r3, #4
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	9203      	str	r2, [sp, #12]
 800f496:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f49a:	3402      	adds	r4, #2
 800f49c:	9305      	str	r3, [sp, #20]
 800f49e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f574 <_vfiprintf_r+0x22c>
 800f4a2:	7821      	ldrb	r1, [r4, #0]
 800f4a4:	2203      	movs	r2, #3
 800f4a6:	4650      	mov	r0, sl
 800f4a8:	f7f0 feba 	bl	8000220 <memchr>
 800f4ac:	b138      	cbz	r0, 800f4be <_vfiprintf_r+0x176>
 800f4ae:	9b04      	ldr	r3, [sp, #16]
 800f4b0:	eba0 000a 	sub.w	r0, r0, sl
 800f4b4:	2240      	movs	r2, #64	@ 0x40
 800f4b6:	4082      	lsls	r2, r0
 800f4b8:	4313      	orrs	r3, r2
 800f4ba:	3401      	adds	r4, #1
 800f4bc:	9304      	str	r3, [sp, #16]
 800f4be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4c2:	4829      	ldr	r0, [pc, #164]	@ (800f568 <_vfiprintf_r+0x220>)
 800f4c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f4c8:	2206      	movs	r2, #6
 800f4ca:	f7f0 fea9 	bl	8000220 <memchr>
 800f4ce:	2800      	cmp	r0, #0
 800f4d0:	d03f      	beq.n	800f552 <_vfiprintf_r+0x20a>
 800f4d2:	4b26      	ldr	r3, [pc, #152]	@ (800f56c <_vfiprintf_r+0x224>)
 800f4d4:	bb1b      	cbnz	r3, 800f51e <_vfiprintf_r+0x1d6>
 800f4d6:	9b03      	ldr	r3, [sp, #12]
 800f4d8:	3307      	adds	r3, #7
 800f4da:	f023 0307 	bic.w	r3, r3, #7
 800f4de:	3308      	adds	r3, #8
 800f4e0:	9303      	str	r3, [sp, #12]
 800f4e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4e4:	443b      	add	r3, r7
 800f4e6:	9309      	str	r3, [sp, #36]	@ 0x24
 800f4e8:	e76a      	b.n	800f3c0 <_vfiprintf_r+0x78>
 800f4ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800f4ee:	460c      	mov	r4, r1
 800f4f0:	2001      	movs	r0, #1
 800f4f2:	e7a8      	b.n	800f446 <_vfiprintf_r+0xfe>
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	3401      	adds	r4, #1
 800f4f8:	9305      	str	r3, [sp, #20]
 800f4fa:	4619      	mov	r1, r3
 800f4fc:	f04f 0c0a 	mov.w	ip, #10
 800f500:	4620      	mov	r0, r4
 800f502:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f506:	3a30      	subs	r2, #48	@ 0x30
 800f508:	2a09      	cmp	r2, #9
 800f50a:	d903      	bls.n	800f514 <_vfiprintf_r+0x1cc>
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d0c6      	beq.n	800f49e <_vfiprintf_r+0x156>
 800f510:	9105      	str	r1, [sp, #20]
 800f512:	e7c4      	b.n	800f49e <_vfiprintf_r+0x156>
 800f514:	fb0c 2101 	mla	r1, ip, r1, r2
 800f518:	4604      	mov	r4, r0
 800f51a:	2301      	movs	r3, #1
 800f51c:	e7f0      	b.n	800f500 <_vfiprintf_r+0x1b8>
 800f51e:	ab03      	add	r3, sp, #12
 800f520:	9300      	str	r3, [sp, #0]
 800f522:	462a      	mov	r2, r5
 800f524:	4b12      	ldr	r3, [pc, #72]	@ (800f570 <_vfiprintf_r+0x228>)
 800f526:	a904      	add	r1, sp, #16
 800f528:	4630      	mov	r0, r6
 800f52a:	f3af 8000 	nop.w
 800f52e:	4607      	mov	r7, r0
 800f530:	1c78      	adds	r0, r7, #1
 800f532:	d1d6      	bne.n	800f4e2 <_vfiprintf_r+0x19a>
 800f534:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f536:	07d9      	lsls	r1, r3, #31
 800f538:	d405      	bmi.n	800f546 <_vfiprintf_r+0x1fe>
 800f53a:	89ab      	ldrh	r3, [r5, #12]
 800f53c:	059a      	lsls	r2, r3, #22
 800f53e:	d402      	bmi.n	800f546 <_vfiprintf_r+0x1fe>
 800f540:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f542:	f7ff fd07 	bl	800ef54 <__retarget_lock_release_recursive>
 800f546:	89ab      	ldrh	r3, [r5, #12]
 800f548:	065b      	lsls	r3, r3, #25
 800f54a:	f53f af1f 	bmi.w	800f38c <_vfiprintf_r+0x44>
 800f54e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f550:	e71e      	b.n	800f390 <_vfiprintf_r+0x48>
 800f552:	ab03      	add	r3, sp, #12
 800f554:	9300      	str	r3, [sp, #0]
 800f556:	462a      	mov	r2, r5
 800f558:	4b05      	ldr	r3, [pc, #20]	@ (800f570 <_vfiprintf_r+0x228>)
 800f55a:	a904      	add	r1, sp, #16
 800f55c:	4630      	mov	r0, r6
 800f55e:	f000 f923 	bl	800f7a8 <_printf_i>
 800f562:	e7e4      	b.n	800f52e <_vfiprintf_r+0x1e6>
 800f564:	080119fd 	.word	0x080119fd
 800f568:	08011a07 	.word	0x08011a07
 800f56c:	00000000 	.word	0x00000000
 800f570:	0800f323 	.word	0x0800f323
 800f574:	08011a03 	.word	0x08011a03

0800f578 <malloc>:
 800f578:	4b02      	ldr	r3, [pc, #8]	@ (800f584 <malloc+0xc>)
 800f57a:	4601      	mov	r1, r0
 800f57c:	6818      	ldr	r0, [r3, #0]
 800f57e:	f000 b825 	b.w	800f5cc <_malloc_r>
 800f582:	bf00      	nop
 800f584:	20000034 	.word	0x20000034

0800f588 <sbrk_aligned>:
 800f588:	b570      	push	{r4, r5, r6, lr}
 800f58a:	4e0f      	ldr	r6, [pc, #60]	@ (800f5c8 <sbrk_aligned+0x40>)
 800f58c:	460c      	mov	r4, r1
 800f58e:	6831      	ldr	r1, [r6, #0]
 800f590:	4605      	mov	r5, r0
 800f592:	b911      	cbnz	r1, 800f59a <sbrk_aligned+0x12>
 800f594:	f000 fc8c 	bl	800feb0 <_sbrk_r>
 800f598:	6030      	str	r0, [r6, #0]
 800f59a:	4621      	mov	r1, r4
 800f59c:	4628      	mov	r0, r5
 800f59e:	f000 fc87 	bl	800feb0 <_sbrk_r>
 800f5a2:	1c43      	adds	r3, r0, #1
 800f5a4:	d103      	bne.n	800f5ae <sbrk_aligned+0x26>
 800f5a6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800f5aa:	4620      	mov	r0, r4
 800f5ac:	bd70      	pop	{r4, r5, r6, pc}
 800f5ae:	1cc4      	adds	r4, r0, #3
 800f5b0:	f024 0403 	bic.w	r4, r4, #3
 800f5b4:	42a0      	cmp	r0, r4
 800f5b6:	d0f8      	beq.n	800f5aa <sbrk_aligned+0x22>
 800f5b8:	1a21      	subs	r1, r4, r0
 800f5ba:	4628      	mov	r0, r5
 800f5bc:	f000 fc78 	bl	800feb0 <_sbrk_r>
 800f5c0:	3001      	adds	r0, #1
 800f5c2:	d1f2      	bne.n	800f5aa <sbrk_aligned+0x22>
 800f5c4:	e7ef      	b.n	800f5a6 <sbrk_aligned+0x1e>
 800f5c6:	bf00      	nop
 800f5c8:	20007ee0 	.word	0x20007ee0

0800f5cc <_malloc_r>:
 800f5cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5d0:	1ccd      	adds	r5, r1, #3
 800f5d2:	f025 0503 	bic.w	r5, r5, #3
 800f5d6:	3508      	adds	r5, #8
 800f5d8:	2d0c      	cmp	r5, #12
 800f5da:	bf38      	it	cc
 800f5dc:	250c      	movcc	r5, #12
 800f5de:	2d00      	cmp	r5, #0
 800f5e0:	4606      	mov	r6, r0
 800f5e2:	db01      	blt.n	800f5e8 <_malloc_r+0x1c>
 800f5e4:	42a9      	cmp	r1, r5
 800f5e6:	d904      	bls.n	800f5f2 <_malloc_r+0x26>
 800f5e8:	230c      	movs	r3, #12
 800f5ea:	6033      	str	r3, [r6, #0]
 800f5ec:	2000      	movs	r0, #0
 800f5ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f6c8 <_malloc_r+0xfc>
 800f5f6:	f000 faa1 	bl	800fb3c <__malloc_lock>
 800f5fa:	f8d8 3000 	ldr.w	r3, [r8]
 800f5fe:	461c      	mov	r4, r3
 800f600:	bb44      	cbnz	r4, 800f654 <_malloc_r+0x88>
 800f602:	4629      	mov	r1, r5
 800f604:	4630      	mov	r0, r6
 800f606:	f7ff ffbf 	bl	800f588 <sbrk_aligned>
 800f60a:	1c43      	adds	r3, r0, #1
 800f60c:	4604      	mov	r4, r0
 800f60e:	d158      	bne.n	800f6c2 <_malloc_r+0xf6>
 800f610:	f8d8 4000 	ldr.w	r4, [r8]
 800f614:	4627      	mov	r7, r4
 800f616:	2f00      	cmp	r7, #0
 800f618:	d143      	bne.n	800f6a2 <_malloc_r+0xd6>
 800f61a:	2c00      	cmp	r4, #0
 800f61c:	d04b      	beq.n	800f6b6 <_malloc_r+0xea>
 800f61e:	6823      	ldr	r3, [r4, #0]
 800f620:	4639      	mov	r1, r7
 800f622:	4630      	mov	r0, r6
 800f624:	eb04 0903 	add.w	r9, r4, r3
 800f628:	f000 fc42 	bl	800feb0 <_sbrk_r>
 800f62c:	4581      	cmp	r9, r0
 800f62e:	d142      	bne.n	800f6b6 <_malloc_r+0xea>
 800f630:	6821      	ldr	r1, [r4, #0]
 800f632:	1a6d      	subs	r5, r5, r1
 800f634:	4629      	mov	r1, r5
 800f636:	4630      	mov	r0, r6
 800f638:	f7ff ffa6 	bl	800f588 <sbrk_aligned>
 800f63c:	3001      	adds	r0, #1
 800f63e:	d03a      	beq.n	800f6b6 <_malloc_r+0xea>
 800f640:	6823      	ldr	r3, [r4, #0]
 800f642:	442b      	add	r3, r5
 800f644:	6023      	str	r3, [r4, #0]
 800f646:	f8d8 3000 	ldr.w	r3, [r8]
 800f64a:	685a      	ldr	r2, [r3, #4]
 800f64c:	bb62      	cbnz	r2, 800f6a8 <_malloc_r+0xdc>
 800f64e:	f8c8 7000 	str.w	r7, [r8]
 800f652:	e00f      	b.n	800f674 <_malloc_r+0xa8>
 800f654:	6822      	ldr	r2, [r4, #0]
 800f656:	1b52      	subs	r2, r2, r5
 800f658:	d420      	bmi.n	800f69c <_malloc_r+0xd0>
 800f65a:	2a0b      	cmp	r2, #11
 800f65c:	d917      	bls.n	800f68e <_malloc_r+0xc2>
 800f65e:	1961      	adds	r1, r4, r5
 800f660:	42a3      	cmp	r3, r4
 800f662:	6025      	str	r5, [r4, #0]
 800f664:	bf18      	it	ne
 800f666:	6059      	strne	r1, [r3, #4]
 800f668:	6863      	ldr	r3, [r4, #4]
 800f66a:	bf08      	it	eq
 800f66c:	f8c8 1000 	streq.w	r1, [r8]
 800f670:	5162      	str	r2, [r4, r5]
 800f672:	604b      	str	r3, [r1, #4]
 800f674:	4630      	mov	r0, r6
 800f676:	f000 fa67 	bl	800fb48 <__malloc_unlock>
 800f67a:	f104 000b 	add.w	r0, r4, #11
 800f67e:	1d23      	adds	r3, r4, #4
 800f680:	f020 0007 	bic.w	r0, r0, #7
 800f684:	1ac2      	subs	r2, r0, r3
 800f686:	bf1c      	itt	ne
 800f688:	1a1b      	subne	r3, r3, r0
 800f68a:	50a3      	strne	r3, [r4, r2]
 800f68c:	e7af      	b.n	800f5ee <_malloc_r+0x22>
 800f68e:	6862      	ldr	r2, [r4, #4]
 800f690:	42a3      	cmp	r3, r4
 800f692:	bf0c      	ite	eq
 800f694:	f8c8 2000 	streq.w	r2, [r8]
 800f698:	605a      	strne	r2, [r3, #4]
 800f69a:	e7eb      	b.n	800f674 <_malloc_r+0xa8>
 800f69c:	4623      	mov	r3, r4
 800f69e:	6864      	ldr	r4, [r4, #4]
 800f6a0:	e7ae      	b.n	800f600 <_malloc_r+0x34>
 800f6a2:	463c      	mov	r4, r7
 800f6a4:	687f      	ldr	r7, [r7, #4]
 800f6a6:	e7b6      	b.n	800f616 <_malloc_r+0x4a>
 800f6a8:	461a      	mov	r2, r3
 800f6aa:	685b      	ldr	r3, [r3, #4]
 800f6ac:	42a3      	cmp	r3, r4
 800f6ae:	d1fb      	bne.n	800f6a8 <_malloc_r+0xdc>
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	6053      	str	r3, [r2, #4]
 800f6b4:	e7de      	b.n	800f674 <_malloc_r+0xa8>
 800f6b6:	230c      	movs	r3, #12
 800f6b8:	6033      	str	r3, [r6, #0]
 800f6ba:	4630      	mov	r0, r6
 800f6bc:	f000 fa44 	bl	800fb48 <__malloc_unlock>
 800f6c0:	e794      	b.n	800f5ec <_malloc_r+0x20>
 800f6c2:	6005      	str	r5, [r0, #0]
 800f6c4:	e7d6      	b.n	800f674 <_malloc_r+0xa8>
 800f6c6:	bf00      	nop
 800f6c8:	20007ee4 	.word	0x20007ee4

0800f6cc <_printf_common>:
 800f6cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6d0:	4616      	mov	r6, r2
 800f6d2:	4698      	mov	r8, r3
 800f6d4:	688a      	ldr	r2, [r1, #8]
 800f6d6:	690b      	ldr	r3, [r1, #16]
 800f6d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f6dc:	4293      	cmp	r3, r2
 800f6de:	bfb8      	it	lt
 800f6e0:	4613      	movlt	r3, r2
 800f6e2:	6033      	str	r3, [r6, #0]
 800f6e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f6e8:	4607      	mov	r7, r0
 800f6ea:	460c      	mov	r4, r1
 800f6ec:	b10a      	cbz	r2, 800f6f2 <_printf_common+0x26>
 800f6ee:	3301      	adds	r3, #1
 800f6f0:	6033      	str	r3, [r6, #0]
 800f6f2:	6823      	ldr	r3, [r4, #0]
 800f6f4:	0699      	lsls	r1, r3, #26
 800f6f6:	bf42      	ittt	mi
 800f6f8:	6833      	ldrmi	r3, [r6, #0]
 800f6fa:	3302      	addmi	r3, #2
 800f6fc:	6033      	strmi	r3, [r6, #0]
 800f6fe:	6825      	ldr	r5, [r4, #0]
 800f700:	f015 0506 	ands.w	r5, r5, #6
 800f704:	d106      	bne.n	800f714 <_printf_common+0x48>
 800f706:	f104 0a19 	add.w	sl, r4, #25
 800f70a:	68e3      	ldr	r3, [r4, #12]
 800f70c:	6832      	ldr	r2, [r6, #0]
 800f70e:	1a9b      	subs	r3, r3, r2
 800f710:	42ab      	cmp	r3, r5
 800f712:	dc26      	bgt.n	800f762 <_printf_common+0x96>
 800f714:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f718:	6822      	ldr	r2, [r4, #0]
 800f71a:	3b00      	subs	r3, #0
 800f71c:	bf18      	it	ne
 800f71e:	2301      	movne	r3, #1
 800f720:	0692      	lsls	r2, r2, #26
 800f722:	d42b      	bmi.n	800f77c <_printf_common+0xb0>
 800f724:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f728:	4641      	mov	r1, r8
 800f72a:	4638      	mov	r0, r7
 800f72c:	47c8      	blx	r9
 800f72e:	3001      	adds	r0, #1
 800f730:	d01e      	beq.n	800f770 <_printf_common+0xa4>
 800f732:	6823      	ldr	r3, [r4, #0]
 800f734:	6922      	ldr	r2, [r4, #16]
 800f736:	f003 0306 	and.w	r3, r3, #6
 800f73a:	2b04      	cmp	r3, #4
 800f73c:	bf02      	ittt	eq
 800f73e:	68e5      	ldreq	r5, [r4, #12]
 800f740:	6833      	ldreq	r3, [r6, #0]
 800f742:	1aed      	subeq	r5, r5, r3
 800f744:	68a3      	ldr	r3, [r4, #8]
 800f746:	bf0c      	ite	eq
 800f748:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f74c:	2500      	movne	r5, #0
 800f74e:	4293      	cmp	r3, r2
 800f750:	bfc4      	itt	gt
 800f752:	1a9b      	subgt	r3, r3, r2
 800f754:	18ed      	addgt	r5, r5, r3
 800f756:	2600      	movs	r6, #0
 800f758:	341a      	adds	r4, #26
 800f75a:	42b5      	cmp	r5, r6
 800f75c:	d11a      	bne.n	800f794 <_printf_common+0xc8>
 800f75e:	2000      	movs	r0, #0
 800f760:	e008      	b.n	800f774 <_printf_common+0xa8>
 800f762:	2301      	movs	r3, #1
 800f764:	4652      	mov	r2, sl
 800f766:	4641      	mov	r1, r8
 800f768:	4638      	mov	r0, r7
 800f76a:	47c8      	blx	r9
 800f76c:	3001      	adds	r0, #1
 800f76e:	d103      	bne.n	800f778 <_printf_common+0xac>
 800f770:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f778:	3501      	adds	r5, #1
 800f77a:	e7c6      	b.n	800f70a <_printf_common+0x3e>
 800f77c:	18e1      	adds	r1, r4, r3
 800f77e:	1c5a      	adds	r2, r3, #1
 800f780:	2030      	movs	r0, #48	@ 0x30
 800f782:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f786:	4422      	add	r2, r4
 800f788:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f78c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f790:	3302      	adds	r3, #2
 800f792:	e7c7      	b.n	800f724 <_printf_common+0x58>
 800f794:	2301      	movs	r3, #1
 800f796:	4622      	mov	r2, r4
 800f798:	4641      	mov	r1, r8
 800f79a:	4638      	mov	r0, r7
 800f79c:	47c8      	blx	r9
 800f79e:	3001      	adds	r0, #1
 800f7a0:	d0e6      	beq.n	800f770 <_printf_common+0xa4>
 800f7a2:	3601      	adds	r6, #1
 800f7a4:	e7d9      	b.n	800f75a <_printf_common+0x8e>
	...

0800f7a8 <_printf_i>:
 800f7a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f7ac:	7e0f      	ldrb	r7, [r1, #24]
 800f7ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f7b0:	2f78      	cmp	r7, #120	@ 0x78
 800f7b2:	4691      	mov	r9, r2
 800f7b4:	4680      	mov	r8, r0
 800f7b6:	460c      	mov	r4, r1
 800f7b8:	469a      	mov	sl, r3
 800f7ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f7be:	d807      	bhi.n	800f7d0 <_printf_i+0x28>
 800f7c0:	2f62      	cmp	r7, #98	@ 0x62
 800f7c2:	d80a      	bhi.n	800f7da <_printf_i+0x32>
 800f7c4:	2f00      	cmp	r7, #0
 800f7c6:	f000 80d1 	beq.w	800f96c <_printf_i+0x1c4>
 800f7ca:	2f58      	cmp	r7, #88	@ 0x58
 800f7cc:	f000 80b8 	beq.w	800f940 <_printf_i+0x198>
 800f7d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f7d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f7d8:	e03a      	b.n	800f850 <_printf_i+0xa8>
 800f7da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f7de:	2b15      	cmp	r3, #21
 800f7e0:	d8f6      	bhi.n	800f7d0 <_printf_i+0x28>
 800f7e2:	a101      	add	r1, pc, #4	@ (adr r1, 800f7e8 <_printf_i+0x40>)
 800f7e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f7e8:	0800f841 	.word	0x0800f841
 800f7ec:	0800f855 	.word	0x0800f855
 800f7f0:	0800f7d1 	.word	0x0800f7d1
 800f7f4:	0800f7d1 	.word	0x0800f7d1
 800f7f8:	0800f7d1 	.word	0x0800f7d1
 800f7fc:	0800f7d1 	.word	0x0800f7d1
 800f800:	0800f855 	.word	0x0800f855
 800f804:	0800f7d1 	.word	0x0800f7d1
 800f808:	0800f7d1 	.word	0x0800f7d1
 800f80c:	0800f7d1 	.word	0x0800f7d1
 800f810:	0800f7d1 	.word	0x0800f7d1
 800f814:	0800f953 	.word	0x0800f953
 800f818:	0800f87f 	.word	0x0800f87f
 800f81c:	0800f90d 	.word	0x0800f90d
 800f820:	0800f7d1 	.word	0x0800f7d1
 800f824:	0800f7d1 	.word	0x0800f7d1
 800f828:	0800f975 	.word	0x0800f975
 800f82c:	0800f7d1 	.word	0x0800f7d1
 800f830:	0800f87f 	.word	0x0800f87f
 800f834:	0800f7d1 	.word	0x0800f7d1
 800f838:	0800f7d1 	.word	0x0800f7d1
 800f83c:	0800f915 	.word	0x0800f915
 800f840:	6833      	ldr	r3, [r6, #0]
 800f842:	1d1a      	adds	r2, r3, #4
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	6032      	str	r2, [r6, #0]
 800f848:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f84c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f850:	2301      	movs	r3, #1
 800f852:	e09c      	b.n	800f98e <_printf_i+0x1e6>
 800f854:	6833      	ldr	r3, [r6, #0]
 800f856:	6820      	ldr	r0, [r4, #0]
 800f858:	1d19      	adds	r1, r3, #4
 800f85a:	6031      	str	r1, [r6, #0]
 800f85c:	0606      	lsls	r6, r0, #24
 800f85e:	d501      	bpl.n	800f864 <_printf_i+0xbc>
 800f860:	681d      	ldr	r5, [r3, #0]
 800f862:	e003      	b.n	800f86c <_printf_i+0xc4>
 800f864:	0645      	lsls	r5, r0, #25
 800f866:	d5fb      	bpl.n	800f860 <_printf_i+0xb8>
 800f868:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f86c:	2d00      	cmp	r5, #0
 800f86e:	da03      	bge.n	800f878 <_printf_i+0xd0>
 800f870:	232d      	movs	r3, #45	@ 0x2d
 800f872:	426d      	negs	r5, r5
 800f874:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f878:	4858      	ldr	r0, [pc, #352]	@ (800f9dc <_printf_i+0x234>)
 800f87a:	230a      	movs	r3, #10
 800f87c:	e011      	b.n	800f8a2 <_printf_i+0xfa>
 800f87e:	6821      	ldr	r1, [r4, #0]
 800f880:	6833      	ldr	r3, [r6, #0]
 800f882:	0608      	lsls	r0, r1, #24
 800f884:	f853 5b04 	ldr.w	r5, [r3], #4
 800f888:	d402      	bmi.n	800f890 <_printf_i+0xe8>
 800f88a:	0649      	lsls	r1, r1, #25
 800f88c:	bf48      	it	mi
 800f88e:	b2ad      	uxthmi	r5, r5
 800f890:	2f6f      	cmp	r7, #111	@ 0x6f
 800f892:	4852      	ldr	r0, [pc, #328]	@ (800f9dc <_printf_i+0x234>)
 800f894:	6033      	str	r3, [r6, #0]
 800f896:	bf14      	ite	ne
 800f898:	230a      	movne	r3, #10
 800f89a:	2308      	moveq	r3, #8
 800f89c:	2100      	movs	r1, #0
 800f89e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f8a2:	6866      	ldr	r6, [r4, #4]
 800f8a4:	60a6      	str	r6, [r4, #8]
 800f8a6:	2e00      	cmp	r6, #0
 800f8a8:	db05      	blt.n	800f8b6 <_printf_i+0x10e>
 800f8aa:	6821      	ldr	r1, [r4, #0]
 800f8ac:	432e      	orrs	r6, r5
 800f8ae:	f021 0104 	bic.w	r1, r1, #4
 800f8b2:	6021      	str	r1, [r4, #0]
 800f8b4:	d04b      	beq.n	800f94e <_printf_i+0x1a6>
 800f8b6:	4616      	mov	r6, r2
 800f8b8:	fbb5 f1f3 	udiv	r1, r5, r3
 800f8bc:	fb03 5711 	mls	r7, r3, r1, r5
 800f8c0:	5dc7      	ldrb	r7, [r0, r7]
 800f8c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f8c6:	462f      	mov	r7, r5
 800f8c8:	42bb      	cmp	r3, r7
 800f8ca:	460d      	mov	r5, r1
 800f8cc:	d9f4      	bls.n	800f8b8 <_printf_i+0x110>
 800f8ce:	2b08      	cmp	r3, #8
 800f8d0:	d10b      	bne.n	800f8ea <_printf_i+0x142>
 800f8d2:	6823      	ldr	r3, [r4, #0]
 800f8d4:	07df      	lsls	r7, r3, #31
 800f8d6:	d508      	bpl.n	800f8ea <_printf_i+0x142>
 800f8d8:	6923      	ldr	r3, [r4, #16]
 800f8da:	6861      	ldr	r1, [r4, #4]
 800f8dc:	4299      	cmp	r1, r3
 800f8de:	bfde      	ittt	le
 800f8e0:	2330      	movle	r3, #48	@ 0x30
 800f8e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f8e6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800f8ea:	1b92      	subs	r2, r2, r6
 800f8ec:	6122      	str	r2, [r4, #16]
 800f8ee:	f8cd a000 	str.w	sl, [sp]
 800f8f2:	464b      	mov	r3, r9
 800f8f4:	aa03      	add	r2, sp, #12
 800f8f6:	4621      	mov	r1, r4
 800f8f8:	4640      	mov	r0, r8
 800f8fa:	f7ff fee7 	bl	800f6cc <_printf_common>
 800f8fe:	3001      	adds	r0, #1
 800f900:	d14a      	bne.n	800f998 <_printf_i+0x1f0>
 800f902:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f906:	b004      	add	sp, #16
 800f908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f90c:	6823      	ldr	r3, [r4, #0]
 800f90e:	f043 0320 	orr.w	r3, r3, #32
 800f912:	6023      	str	r3, [r4, #0]
 800f914:	4832      	ldr	r0, [pc, #200]	@ (800f9e0 <_printf_i+0x238>)
 800f916:	2778      	movs	r7, #120	@ 0x78
 800f918:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f91c:	6823      	ldr	r3, [r4, #0]
 800f91e:	6831      	ldr	r1, [r6, #0]
 800f920:	061f      	lsls	r7, r3, #24
 800f922:	f851 5b04 	ldr.w	r5, [r1], #4
 800f926:	d402      	bmi.n	800f92e <_printf_i+0x186>
 800f928:	065f      	lsls	r7, r3, #25
 800f92a:	bf48      	it	mi
 800f92c:	b2ad      	uxthmi	r5, r5
 800f92e:	6031      	str	r1, [r6, #0]
 800f930:	07d9      	lsls	r1, r3, #31
 800f932:	bf44      	itt	mi
 800f934:	f043 0320 	orrmi.w	r3, r3, #32
 800f938:	6023      	strmi	r3, [r4, #0]
 800f93a:	b11d      	cbz	r5, 800f944 <_printf_i+0x19c>
 800f93c:	2310      	movs	r3, #16
 800f93e:	e7ad      	b.n	800f89c <_printf_i+0xf4>
 800f940:	4826      	ldr	r0, [pc, #152]	@ (800f9dc <_printf_i+0x234>)
 800f942:	e7e9      	b.n	800f918 <_printf_i+0x170>
 800f944:	6823      	ldr	r3, [r4, #0]
 800f946:	f023 0320 	bic.w	r3, r3, #32
 800f94a:	6023      	str	r3, [r4, #0]
 800f94c:	e7f6      	b.n	800f93c <_printf_i+0x194>
 800f94e:	4616      	mov	r6, r2
 800f950:	e7bd      	b.n	800f8ce <_printf_i+0x126>
 800f952:	6833      	ldr	r3, [r6, #0]
 800f954:	6825      	ldr	r5, [r4, #0]
 800f956:	6961      	ldr	r1, [r4, #20]
 800f958:	1d18      	adds	r0, r3, #4
 800f95a:	6030      	str	r0, [r6, #0]
 800f95c:	062e      	lsls	r6, r5, #24
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	d501      	bpl.n	800f966 <_printf_i+0x1be>
 800f962:	6019      	str	r1, [r3, #0]
 800f964:	e002      	b.n	800f96c <_printf_i+0x1c4>
 800f966:	0668      	lsls	r0, r5, #25
 800f968:	d5fb      	bpl.n	800f962 <_printf_i+0x1ba>
 800f96a:	8019      	strh	r1, [r3, #0]
 800f96c:	2300      	movs	r3, #0
 800f96e:	6123      	str	r3, [r4, #16]
 800f970:	4616      	mov	r6, r2
 800f972:	e7bc      	b.n	800f8ee <_printf_i+0x146>
 800f974:	6833      	ldr	r3, [r6, #0]
 800f976:	1d1a      	adds	r2, r3, #4
 800f978:	6032      	str	r2, [r6, #0]
 800f97a:	681e      	ldr	r6, [r3, #0]
 800f97c:	6862      	ldr	r2, [r4, #4]
 800f97e:	2100      	movs	r1, #0
 800f980:	4630      	mov	r0, r6
 800f982:	f7f0 fc4d 	bl	8000220 <memchr>
 800f986:	b108      	cbz	r0, 800f98c <_printf_i+0x1e4>
 800f988:	1b80      	subs	r0, r0, r6
 800f98a:	6060      	str	r0, [r4, #4]
 800f98c:	6863      	ldr	r3, [r4, #4]
 800f98e:	6123      	str	r3, [r4, #16]
 800f990:	2300      	movs	r3, #0
 800f992:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f996:	e7aa      	b.n	800f8ee <_printf_i+0x146>
 800f998:	6923      	ldr	r3, [r4, #16]
 800f99a:	4632      	mov	r2, r6
 800f99c:	4649      	mov	r1, r9
 800f99e:	4640      	mov	r0, r8
 800f9a0:	47d0      	blx	sl
 800f9a2:	3001      	adds	r0, #1
 800f9a4:	d0ad      	beq.n	800f902 <_printf_i+0x15a>
 800f9a6:	6823      	ldr	r3, [r4, #0]
 800f9a8:	079b      	lsls	r3, r3, #30
 800f9aa:	d413      	bmi.n	800f9d4 <_printf_i+0x22c>
 800f9ac:	68e0      	ldr	r0, [r4, #12]
 800f9ae:	9b03      	ldr	r3, [sp, #12]
 800f9b0:	4298      	cmp	r0, r3
 800f9b2:	bfb8      	it	lt
 800f9b4:	4618      	movlt	r0, r3
 800f9b6:	e7a6      	b.n	800f906 <_printf_i+0x15e>
 800f9b8:	2301      	movs	r3, #1
 800f9ba:	4632      	mov	r2, r6
 800f9bc:	4649      	mov	r1, r9
 800f9be:	4640      	mov	r0, r8
 800f9c0:	47d0      	blx	sl
 800f9c2:	3001      	adds	r0, #1
 800f9c4:	d09d      	beq.n	800f902 <_printf_i+0x15a>
 800f9c6:	3501      	adds	r5, #1
 800f9c8:	68e3      	ldr	r3, [r4, #12]
 800f9ca:	9903      	ldr	r1, [sp, #12]
 800f9cc:	1a5b      	subs	r3, r3, r1
 800f9ce:	42ab      	cmp	r3, r5
 800f9d0:	dcf2      	bgt.n	800f9b8 <_printf_i+0x210>
 800f9d2:	e7eb      	b.n	800f9ac <_printf_i+0x204>
 800f9d4:	2500      	movs	r5, #0
 800f9d6:	f104 0619 	add.w	r6, r4, #25
 800f9da:	e7f5      	b.n	800f9c8 <_printf_i+0x220>
 800f9dc:	08011a0e 	.word	0x08011a0e
 800f9e0:	08011a1f 	.word	0x08011a1f

0800f9e4 <__sflush_r>:
 800f9e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f9e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9ec:	0716      	lsls	r6, r2, #28
 800f9ee:	4605      	mov	r5, r0
 800f9f0:	460c      	mov	r4, r1
 800f9f2:	d454      	bmi.n	800fa9e <__sflush_r+0xba>
 800f9f4:	684b      	ldr	r3, [r1, #4]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	dc02      	bgt.n	800fa00 <__sflush_r+0x1c>
 800f9fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	dd48      	ble.n	800fa92 <__sflush_r+0xae>
 800fa00:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fa02:	2e00      	cmp	r6, #0
 800fa04:	d045      	beq.n	800fa92 <__sflush_r+0xae>
 800fa06:	2300      	movs	r3, #0
 800fa08:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fa0c:	682f      	ldr	r7, [r5, #0]
 800fa0e:	6a21      	ldr	r1, [r4, #32]
 800fa10:	602b      	str	r3, [r5, #0]
 800fa12:	d030      	beq.n	800fa76 <__sflush_r+0x92>
 800fa14:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fa16:	89a3      	ldrh	r3, [r4, #12]
 800fa18:	0759      	lsls	r1, r3, #29
 800fa1a:	d505      	bpl.n	800fa28 <__sflush_r+0x44>
 800fa1c:	6863      	ldr	r3, [r4, #4]
 800fa1e:	1ad2      	subs	r2, r2, r3
 800fa20:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fa22:	b10b      	cbz	r3, 800fa28 <__sflush_r+0x44>
 800fa24:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fa26:	1ad2      	subs	r2, r2, r3
 800fa28:	2300      	movs	r3, #0
 800fa2a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fa2c:	6a21      	ldr	r1, [r4, #32]
 800fa2e:	4628      	mov	r0, r5
 800fa30:	47b0      	blx	r6
 800fa32:	1c43      	adds	r3, r0, #1
 800fa34:	89a3      	ldrh	r3, [r4, #12]
 800fa36:	d106      	bne.n	800fa46 <__sflush_r+0x62>
 800fa38:	6829      	ldr	r1, [r5, #0]
 800fa3a:	291d      	cmp	r1, #29
 800fa3c:	d82b      	bhi.n	800fa96 <__sflush_r+0xb2>
 800fa3e:	4a2a      	ldr	r2, [pc, #168]	@ (800fae8 <__sflush_r+0x104>)
 800fa40:	40ca      	lsrs	r2, r1
 800fa42:	07d6      	lsls	r6, r2, #31
 800fa44:	d527      	bpl.n	800fa96 <__sflush_r+0xb2>
 800fa46:	2200      	movs	r2, #0
 800fa48:	6062      	str	r2, [r4, #4]
 800fa4a:	04d9      	lsls	r1, r3, #19
 800fa4c:	6922      	ldr	r2, [r4, #16]
 800fa4e:	6022      	str	r2, [r4, #0]
 800fa50:	d504      	bpl.n	800fa5c <__sflush_r+0x78>
 800fa52:	1c42      	adds	r2, r0, #1
 800fa54:	d101      	bne.n	800fa5a <__sflush_r+0x76>
 800fa56:	682b      	ldr	r3, [r5, #0]
 800fa58:	b903      	cbnz	r3, 800fa5c <__sflush_r+0x78>
 800fa5a:	6560      	str	r0, [r4, #84]	@ 0x54
 800fa5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fa5e:	602f      	str	r7, [r5, #0]
 800fa60:	b1b9      	cbz	r1, 800fa92 <__sflush_r+0xae>
 800fa62:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fa66:	4299      	cmp	r1, r3
 800fa68:	d002      	beq.n	800fa70 <__sflush_r+0x8c>
 800fa6a:	4628      	mov	r0, r5
 800fa6c:	f7ff faa0 	bl	800efb0 <_free_r>
 800fa70:	2300      	movs	r3, #0
 800fa72:	6363      	str	r3, [r4, #52]	@ 0x34
 800fa74:	e00d      	b.n	800fa92 <__sflush_r+0xae>
 800fa76:	2301      	movs	r3, #1
 800fa78:	4628      	mov	r0, r5
 800fa7a:	47b0      	blx	r6
 800fa7c:	4602      	mov	r2, r0
 800fa7e:	1c50      	adds	r0, r2, #1
 800fa80:	d1c9      	bne.n	800fa16 <__sflush_r+0x32>
 800fa82:	682b      	ldr	r3, [r5, #0]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d0c6      	beq.n	800fa16 <__sflush_r+0x32>
 800fa88:	2b1d      	cmp	r3, #29
 800fa8a:	d001      	beq.n	800fa90 <__sflush_r+0xac>
 800fa8c:	2b16      	cmp	r3, #22
 800fa8e:	d11e      	bne.n	800face <__sflush_r+0xea>
 800fa90:	602f      	str	r7, [r5, #0]
 800fa92:	2000      	movs	r0, #0
 800fa94:	e022      	b.n	800fadc <__sflush_r+0xf8>
 800fa96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fa9a:	b21b      	sxth	r3, r3
 800fa9c:	e01b      	b.n	800fad6 <__sflush_r+0xf2>
 800fa9e:	690f      	ldr	r7, [r1, #16]
 800faa0:	2f00      	cmp	r7, #0
 800faa2:	d0f6      	beq.n	800fa92 <__sflush_r+0xae>
 800faa4:	0793      	lsls	r3, r2, #30
 800faa6:	680e      	ldr	r6, [r1, #0]
 800faa8:	bf08      	it	eq
 800faaa:	694b      	ldreq	r3, [r1, #20]
 800faac:	600f      	str	r7, [r1, #0]
 800faae:	bf18      	it	ne
 800fab0:	2300      	movne	r3, #0
 800fab2:	eba6 0807 	sub.w	r8, r6, r7
 800fab6:	608b      	str	r3, [r1, #8]
 800fab8:	f1b8 0f00 	cmp.w	r8, #0
 800fabc:	dde9      	ble.n	800fa92 <__sflush_r+0xae>
 800fabe:	6a21      	ldr	r1, [r4, #32]
 800fac0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fac2:	4643      	mov	r3, r8
 800fac4:	463a      	mov	r2, r7
 800fac6:	4628      	mov	r0, r5
 800fac8:	47b0      	blx	r6
 800faca:	2800      	cmp	r0, #0
 800facc:	dc08      	bgt.n	800fae0 <__sflush_r+0xfc>
 800face:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fad2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fad6:	81a3      	strh	r3, [r4, #12]
 800fad8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fadc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fae0:	4407      	add	r7, r0
 800fae2:	eba8 0800 	sub.w	r8, r8, r0
 800fae6:	e7e7      	b.n	800fab8 <__sflush_r+0xd4>
 800fae8:	20400001 	.word	0x20400001

0800faec <_fflush_r>:
 800faec:	b538      	push	{r3, r4, r5, lr}
 800faee:	690b      	ldr	r3, [r1, #16]
 800faf0:	4605      	mov	r5, r0
 800faf2:	460c      	mov	r4, r1
 800faf4:	b913      	cbnz	r3, 800fafc <_fflush_r+0x10>
 800faf6:	2500      	movs	r5, #0
 800faf8:	4628      	mov	r0, r5
 800fafa:	bd38      	pop	{r3, r4, r5, pc}
 800fafc:	b118      	cbz	r0, 800fb06 <_fflush_r+0x1a>
 800fafe:	6a03      	ldr	r3, [r0, #32]
 800fb00:	b90b      	cbnz	r3, 800fb06 <_fflush_r+0x1a>
 800fb02:	f7ff f8ff 	bl	800ed04 <__sinit>
 800fb06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d0f3      	beq.n	800faf6 <_fflush_r+0xa>
 800fb0e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fb10:	07d0      	lsls	r0, r2, #31
 800fb12:	d404      	bmi.n	800fb1e <_fflush_r+0x32>
 800fb14:	0599      	lsls	r1, r3, #22
 800fb16:	d402      	bmi.n	800fb1e <_fflush_r+0x32>
 800fb18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fb1a:	f7ff fa1a 	bl	800ef52 <__retarget_lock_acquire_recursive>
 800fb1e:	4628      	mov	r0, r5
 800fb20:	4621      	mov	r1, r4
 800fb22:	f7ff ff5f 	bl	800f9e4 <__sflush_r>
 800fb26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fb28:	07da      	lsls	r2, r3, #31
 800fb2a:	4605      	mov	r5, r0
 800fb2c:	d4e4      	bmi.n	800faf8 <_fflush_r+0xc>
 800fb2e:	89a3      	ldrh	r3, [r4, #12]
 800fb30:	059b      	lsls	r3, r3, #22
 800fb32:	d4e1      	bmi.n	800faf8 <_fflush_r+0xc>
 800fb34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fb36:	f7ff fa0d 	bl	800ef54 <__retarget_lock_release_recursive>
 800fb3a:	e7dd      	b.n	800faf8 <_fflush_r+0xc>

0800fb3c <__malloc_lock>:
 800fb3c:	4801      	ldr	r0, [pc, #4]	@ (800fb44 <__malloc_lock+0x8>)
 800fb3e:	f7ff ba08 	b.w	800ef52 <__retarget_lock_acquire_recursive>
 800fb42:	bf00      	nop
 800fb44:	20007ed8 	.word	0x20007ed8

0800fb48 <__malloc_unlock>:
 800fb48:	4801      	ldr	r0, [pc, #4]	@ (800fb50 <__malloc_unlock+0x8>)
 800fb4a:	f7ff ba03 	b.w	800ef54 <__retarget_lock_release_recursive>
 800fb4e:	bf00      	nop
 800fb50:	20007ed8 	.word	0x20007ed8

0800fb54 <__sread>:
 800fb54:	b510      	push	{r4, lr}
 800fb56:	460c      	mov	r4, r1
 800fb58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb5c:	f000 f996 	bl	800fe8c <_read_r>
 800fb60:	2800      	cmp	r0, #0
 800fb62:	bfab      	itete	ge
 800fb64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fb66:	89a3      	ldrhlt	r3, [r4, #12]
 800fb68:	181b      	addge	r3, r3, r0
 800fb6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fb6e:	bfac      	ite	ge
 800fb70:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fb72:	81a3      	strhlt	r3, [r4, #12]
 800fb74:	bd10      	pop	{r4, pc}

0800fb76 <__swrite>:
 800fb76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb7a:	461f      	mov	r7, r3
 800fb7c:	898b      	ldrh	r3, [r1, #12]
 800fb7e:	05db      	lsls	r3, r3, #23
 800fb80:	4605      	mov	r5, r0
 800fb82:	460c      	mov	r4, r1
 800fb84:	4616      	mov	r6, r2
 800fb86:	d505      	bpl.n	800fb94 <__swrite+0x1e>
 800fb88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb8c:	2302      	movs	r3, #2
 800fb8e:	2200      	movs	r2, #0
 800fb90:	f000 f96a 	bl	800fe68 <_lseek_r>
 800fb94:	89a3      	ldrh	r3, [r4, #12]
 800fb96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fb9e:	81a3      	strh	r3, [r4, #12]
 800fba0:	4632      	mov	r2, r6
 800fba2:	463b      	mov	r3, r7
 800fba4:	4628      	mov	r0, r5
 800fba6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fbaa:	f000 b991 	b.w	800fed0 <_write_r>

0800fbae <__sseek>:
 800fbae:	b510      	push	{r4, lr}
 800fbb0:	460c      	mov	r4, r1
 800fbb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbb6:	f000 f957 	bl	800fe68 <_lseek_r>
 800fbba:	1c43      	adds	r3, r0, #1
 800fbbc:	89a3      	ldrh	r3, [r4, #12]
 800fbbe:	bf15      	itete	ne
 800fbc0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fbc2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fbc6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fbca:	81a3      	strheq	r3, [r4, #12]
 800fbcc:	bf18      	it	ne
 800fbce:	81a3      	strhne	r3, [r4, #12]
 800fbd0:	bd10      	pop	{r4, pc}

0800fbd2 <__sclose>:
 800fbd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbd6:	f000 b98d 	b.w	800fef4 <_close_r>
	...

0800fbdc <fiprintf>:
 800fbdc:	b40e      	push	{r1, r2, r3}
 800fbde:	b503      	push	{r0, r1, lr}
 800fbe0:	4601      	mov	r1, r0
 800fbe2:	ab03      	add	r3, sp, #12
 800fbe4:	4805      	ldr	r0, [pc, #20]	@ (800fbfc <fiprintf+0x20>)
 800fbe6:	f853 2b04 	ldr.w	r2, [r3], #4
 800fbea:	6800      	ldr	r0, [r0, #0]
 800fbec:	9301      	str	r3, [sp, #4]
 800fbee:	f7ff fbab 	bl	800f348 <_vfiprintf_r>
 800fbf2:	b002      	add	sp, #8
 800fbf4:	f85d eb04 	ldr.w	lr, [sp], #4
 800fbf8:	b003      	add	sp, #12
 800fbfa:	4770      	bx	lr
 800fbfc:	20000034 	.word	0x20000034

0800fc00 <_realloc_r>:
 800fc00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc04:	4607      	mov	r7, r0
 800fc06:	4614      	mov	r4, r2
 800fc08:	460d      	mov	r5, r1
 800fc0a:	b921      	cbnz	r1, 800fc16 <_realloc_r+0x16>
 800fc0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc10:	4611      	mov	r1, r2
 800fc12:	f7ff bcdb 	b.w	800f5cc <_malloc_r>
 800fc16:	b92a      	cbnz	r2, 800fc24 <_realloc_r+0x24>
 800fc18:	f7ff f9ca 	bl	800efb0 <_free_r>
 800fc1c:	4625      	mov	r5, r4
 800fc1e:	4628      	mov	r0, r5
 800fc20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc24:	f000 f98f 	bl	800ff46 <_malloc_usable_size_r>
 800fc28:	4284      	cmp	r4, r0
 800fc2a:	4606      	mov	r6, r0
 800fc2c:	d802      	bhi.n	800fc34 <_realloc_r+0x34>
 800fc2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fc32:	d8f4      	bhi.n	800fc1e <_realloc_r+0x1e>
 800fc34:	4621      	mov	r1, r4
 800fc36:	4638      	mov	r0, r7
 800fc38:	f7ff fcc8 	bl	800f5cc <_malloc_r>
 800fc3c:	4680      	mov	r8, r0
 800fc3e:	b908      	cbnz	r0, 800fc44 <_realloc_r+0x44>
 800fc40:	4645      	mov	r5, r8
 800fc42:	e7ec      	b.n	800fc1e <_realloc_r+0x1e>
 800fc44:	42b4      	cmp	r4, r6
 800fc46:	4622      	mov	r2, r4
 800fc48:	4629      	mov	r1, r5
 800fc4a:	bf28      	it	cs
 800fc4c:	4632      	movcs	r2, r6
 800fc4e:	f7ff f982 	bl	800ef56 <memcpy>
 800fc52:	4629      	mov	r1, r5
 800fc54:	4638      	mov	r0, r7
 800fc56:	f7ff f9ab 	bl	800efb0 <_free_r>
 800fc5a:	e7f1      	b.n	800fc40 <_realloc_r+0x40>

0800fc5c <__swbuf_r>:
 800fc5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc5e:	460e      	mov	r6, r1
 800fc60:	4614      	mov	r4, r2
 800fc62:	4605      	mov	r5, r0
 800fc64:	b118      	cbz	r0, 800fc6e <__swbuf_r+0x12>
 800fc66:	6a03      	ldr	r3, [r0, #32]
 800fc68:	b90b      	cbnz	r3, 800fc6e <__swbuf_r+0x12>
 800fc6a:	f7ff f84b 	bl	800ed04 <__sinit>
 800fc6e:	69a3      	ldr	r3, [r4, #24]
 800fc70:	60a3      	str	r3, [r4, #8]
 800fc72:	89a3      	ldrh	r3, [r4, #12]
 800fc74:	071a      	lsls	r2, r3, #28
 800fc76:	d501      	bpl.n	800fc7c <__swbuf_r+0x20>
 800fc78:	6923      	ldr	r3, [r4, #16]
 800fc7a:	b943      	cbnz	r3, 800fc8e <__swbuf_r+0x32>
 800fc7c:	4621      	mov	r1, r4
 800fc7e:	4628      	mov	r0, r5
 800fc80:	f000 f82a 	bl	800fcd8 <__swsetup_r>
 800fc84:	b118      	cbz	r0, 800fc8e <__swbuf_r+0x32>
 800fc86:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800fc8a:	4638      	mov	r0, r7
 800fc8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc8e:	6823      	ldr	r3, [r4, #0]
 800fc90:	6922      	ldr	r2, [r4, #16]
 800fc92:	1a98      	subs	r0, r3, r2
 800fc94:	6963      	ldr	r3, [r4, #20]
 800fc96:	b2f6      	uxtb	r6, r6
 800fc98:	4283      	cmp	r3, r0
 800fc9a:	4637      	mov	r7, r6
 800fc9c:	dc05      	bgt.n	800fcaa <__swbuf_r+0x4e>
 800fc9e:	4621      	mov	r1, r4
 800fca0:	4628      	mov	r0, r5
 800fca2:	f7ff ff23 	bl	800faec <_fflush_r>
 800fca6:	2800      	cmp	r0, #0
 800fca8:	d1ed      	bne.n	800fc86 <__swbuf_r+0x2a>
 800fcaa:	68a3      	ldr	r3, [r4, #8]
 800fcac:	3b01      	subs	r3, #1
 800fcae:	60a3      	str	r3, [r4, #8]
 800fcb0:	6823      	ldr	r3, [r4, #0]
 800fcb2:	1c5a      	adds	r2, r3, #1
 800fcb4:	6022      	str	r2, [r4, #0]
 800fcb6:	701e      	strb	r6, [r3, #0]
 800fcb8:	6962      	ldr	r2, [r4, #20]
 800fcba:	1c43      	adds	r3, r0, #1
 800fcbc:	429a      	cmp	r2, r3
 800fcbe:	d004      	beq.n	800fcca <__swbuf_r+0x6e>
 800fcc0:	89a3      	ldrh	r3, [r4, #12]
 800fcc2:	07db      	lsls	r3, r3, #31
 800fcc4:	d5e1      	bpl.n	800fc8a <__swbuf_r+0x2e>
 800fcc6:	2e0a      	cmp	r6, #10
 800fcc8:	d1df      	bne.n	800fc8a <__swbuf_r+0x2e>
 800fcca:	4621      	mov	r1, r4
 800fccc:	4628      	mov	r0, r5
 800fcce:	f7ff ff0d 	bl	800faec <_fflush_r>
 800fcd2:	2800      	cmp	r0, #0
 800fcd4:	d0d9      	beq.n	800fc8a <__swbuf_r+0x2e>
 800fcd6:	e7d6      	b.n	800fc86 <__swbuf_r+0x2a>

0800fcd8 <__swsetup_r>:
 800fcd8:	b538      	push	{r3, r4, r5, lr}
 800fcda:	4b29      	ldr	r3, [pc, #164]	@ (800fd80 <__swsetup_r+0xa8>)
 800fcdc:	4605      	mov	r5, r0
 800fcde:	6818      	ldr	r0, [r3, #0]
 800fce0:	460c      	mov	r4, r1
 800fce2:	b118      	cbz	r0, 800fcec <__swsetup_r+0x14>
 800fce4:	6a03      	ldr	r3, [r0, #32]
 800fce6:	b90b      	cbnz	r3, 800fcec <__swsetup_r+0x14>
 800fce8:	f7ff f80c 	bl	800ed04 <__sinit>
 800fcec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fcf0:	0719      	lsls	r1, r3, #28
 800fcf2:	d422      	bmi.n	800fd3a <__swsetup_r+0x62>
 800fcf4:	06da      	lsls	r2, r3, #27
 800fcf6:	d407      	bmi.n	800fd08 <__swsetup_r+0x30>
 800fcf8:	2209      	movs	r2, #9
 800fcfa:	602a      	str	r2, [r5, #0]
 800fcfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fd00:	81a3      	strh	r3, [r4, #12]
 800fd02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fd06:	e033      	b.n	800fd70 <__swsetup_r+0x98>
 800fd08:	0758      	lsls	r0, r3, #29
 800fd0a:	d512      	bpl.n	800fd32 <__swsetup_r+0x5a>
 800fd0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fd0e:	b141      	cbz	r1, 800fd22 <__swsetup_r+0x4a>
 800fd10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fd14:	4299      	cmp	r1, r3
 800fd16:	d002      	beq.n	800fd1e <__swsetup_r+0x46>
 800fd18:	4628      	mov	r0, r5
 800fd1a:	f7ff f949 	bl	800efb0 <_free_r>
 800fd1e:	2300      	movs	r3, #0
 800fd20:	6363      	str	r3, [r4, #52]	@ 0x34
 800fd22:	89a3      	ldrh	r3, [r4, #12]
 800fd24:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fd28:	81a3      	strh	r3, [r4, #12]
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	6063      	str	r3, [r4, #4]
 800fd2e:	6923      	ldr	r3, [r4, #16]
 800fd30:	6023      	str	r3, [r4, #0]
 800fd32:	89a3      	ldrh	r3, [r4, #12]
 800fd34:	f043 0308 	orr.w	r3, r3, #8
 800fd38:	81a3      	strh	r3, [r4, #12]
 800fd3a:	6923      	ldr	r3, [r4, #16]
 800fd3c:	b94b      	cbnz	r3, 800fd52 <__swsetup_r+0x7a>
 800fd3e:	89a3      	ldrh	r3, [r4, #12]
 800fd40:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fd44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fd48:	d003      	beq.n	800fd52 <__swsetup_r+0x7a>
 800fd4a:	4621      	mov	r1, r4
 800fd4c:	4628      	mov	r0, r5
 800fd4e:	f000 f83f 	bl	800fdd0 <__smakebuf_r>
 800fd52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd56:	f013 0201 	ands.w	r2, r3, #1
 800fd5a:	d00a      	beq.n	800fd72 <__swsetup_r+0x9a>
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	60a2      	str	r2, [r4, #8]
 800fd60:	6962      	ldr	r2, [r4, #20]
 800fd62:	4252      	negs	r2, r2
 800fd64:	61a2      	str	r2, [r4, #24]
 800fd66:	6922      	ldr	r2, [r4, #16]
 800fd68:	b942      	cbnz	r2, 800fd7c <__swsetup_r+0xa4>
 800fd6a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fd6e:	d1c5      	bne.n	800fcfc <__swsetup_r+0x24>
 800fd70:	bd38      	pop	{r3, r4, r5, pc}
 800fd72:	0799      	lsls	r1, r3, #30
 800fd74:	bf58      	it	pl
 800fd76:	6962      	ldrpl	r2, [r4, #20]
 800fd78:	60a2      	str	r2, [r4, #8]
 800fd7a:	e7f4      	b.n	800fd66 <__swsetup_r+0x8e>
 800fd7c:	2000      	movs	r0, #0
 800fd7e:	e7f7      	b.n	800fd70 <__swsetup_r+0x98>
 800fd80:	20000034 	.word	0x20000034

0800fd84 <__swhatbuf_r>:
 800fd84:	b570      	push	{r4, r5, r6, lr}
 800fd86:	460c      	mov	r4, r1
 800fd88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd8c:	2900      	cmp	r1, #0
 800fd8e:	b096      	sub	sp, #88	@ 0x58
 800fd90:	4615      	mov	r5, r2
 800fd92:	461e      	mov	r6, r3
 800fd94:	da0d      	bge.n	800fdb2 <__swhatbuf_r+0x2e>
 800fd96:	89a3      	ldrh	r3, [r4, #12]
 800fd98:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fd9c:	f04f 0100 	mov.w	r1, #0
 800fda0:	bf14      	ite	ne
 800fda2:	2340      	movne	r3, #64	@ 0x40
 800fda4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fda8:	2000      	movs	r0, #0
 800fdaa:	6031      	str	r1, [r6, #0]
 800fdac:	602b      	str	r3, [r5, #0]
 800fdae:	b016      	add	sp, #88	@ 0x58
 800fdb0:	bd70      	pop	{r4, r5, r6, pc}
 800fdb2:	466a      	mov	r2, sp
 800fdb4:	f000 f8ae 	bl	800ff14 <_fstat_r>
 800fdb8:	2800      	cmp	r0, #0
 800fdba:	dbec      	blt.n	800fd96 <__swhatbuf_r+0x12>
 800fdbc:	9901      	ldr	r1, [sp, #4]
 800fdbe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fdc2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fdc6:	4259      	negs	r1, r3
 800fdc8:	4159      	adcs	r1, r3
 800fdca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fdce:	e7eb      	b.n	800fda8 <__swhatbuf_r+0x24>

0800fdd0 <__smakebuf_r>:
 800fdd0:	898b      	ldrh	r3, [r1, #12]
 800fdd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fdd4:	079d      	lsls	r5, r3, #30
 800fdd6:	4606      	mov	r6, r0
 800fdd8:	460c      	mov	r4, r1
 800fdda:	d507      	bpl.n	800fdec <__smakebuf_r+0x1c>
 800fddc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fde0:	6023      	str	r3, [r4, #0]
 800fde2:	6123      	str	r3, [r4, #16]
 800fde4:	2301      	movs	r3, #1
 800fde6:	6163      	str	r3, [r4, #20]
 800fde8:	b003      	add	sp, #12
 800fdea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdec:	ab01      	add	r3, sp, #4
 800fdee:	466a      	mov	r2, sp
 800fdf0:	f7ff ffc8 	bl	800fd84 <__swhatbuf_r>
 800fdf4:	9f00      	ldr	r7, [sp, #0]
 800fdf6:	4605      	mov	r5, r0
 800fdf8:	4639      	mov	r1, r7
 800fdfa:	4630      	mov	r0, r6
 800fdfc:	f7ff fbe6 	bl	800f5cc <_malloc_r>
 800fe00:	b948      	cbnz	r0, 800fe16 <__smakebuf_r+0x46>
 800fe02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe06:	059a      	lsls	r2, r3, #22
 800fe08:	d4ee      	bmi.n	800fde8 <__smakebuf_r+0x18>
 800fe0a:	f023 0303 	bic.w	r3, r3, #3
 800fe0e:	f043 0302 	orr.w	r3, r3, #2
 800fe12:	81a3      	strh	r3, [r4, #12]
 800fe14:	e7e2      	b.n	800fddc <__smakebuf_r+0xc>
 800fe16:	89a3      	ldrh	r3, [r4, #12]
 800fe18:	6020      	str	r0, [r4, #0]
 800fe1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fe1e:	81a3      	strh	r3, [r4, #12]
 800fe20:	9b01      	ldr	r3, [sp, #4]
 800fe22:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fe26:	b15b      	cbz	r3, 800fe40 <__smakebuf_r+0x70>
 800fe28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fe2c:	4630      	mov	r0, r6
 800fe2e:	f000 f80b 	bl	800fe48 <_isatty_r>
 800fe32:	b128      	cbz	r0, 800fe40 <__smakebuf_r+0x70>
 800fe34:	89a3      	ldrh	r3, [r4, #12]
 800fe36:	f023 0303 	bic.w	r3, r3, #3
 800fe3a:	f043 0301 	orr.w	r3, r3, #1
 800fe3e:	81a3      	strh	r3, [r4, #12]
 800fe40:	89a3      	ldrh	r3, [r4, #12]
 800fe42:	431d      	orrs	r5, r3
 800fe44:	81a5      	strh	r5, [r4, #12]
 800fe46:	e7cf      	b.n	800fde8 <__smakebuf_r+0x18>

0800fe48 <_isatty_r>:
 800fe48:	b538      	push	{r3, r4, r5, lr}
 800fe4a:	4d06      	ldr	r5, [pc, #24]	@ (800fe64 <_isatty_r+0x1c>)
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	4604      	mov	r4, r0
 800fe50:	4608      	mov	r0, r1
 800fe52:	602b      	str	r3, [r5, #0]
 800fe54:	f7f3 fa0c 	bl	8003270 <_isatty>
 800fe58:	1c43      	adds	r3, r0, #1
 800fe5a:	d102      	bne.n	800fe62 <_isatty_r+0x1a>
 800fe5c:	682b      	ldr	r3, [r5, #0]
 800fe5e:	b103      	cbz	r3, 800fe62 <_isatty_r+0x1a>
 800fe60:	6023      	str	r3, [r4, #0]
 800fe62:	bd38      	pop	{r3, r4, r5, pc}
 800fe64:	20007edc 	.word	0x20007edc

0800fe68 <_lseek_r>:
 800fe68:	b538      	push	{r3, r4, r5, lr}
 800fe6a:	4d07      	ldr	r5, [pc, #28]	@ (800fe88 <_lseek_r+0x20>)
 800fe6c:	4604      	mov	r4, r0
 800fe6e:	4608      	mov	r0, r1
 800fe70:	4611      	mov	r1, r2
 800fe72:	2200      	movs	r2, #0
 800fe74:	602a      	str	r2, [r5, #0]
 800fe76:	461a      	mov	r2, r3
 800fe78:	f7f3 fa05 	bl	8003286 <_lseek>
 800fe7c:	1c43      	adds	r3, r0, #1
 800fe7e:	d102      	bne.n	800fe86 <_lseek_r+0x1e>
 800fe80:	682b      	ldr	r3, [r5, #0]
 800fe82:	b103      	cbz	r3, 800fe86 <_lseek_r+0x1e>
 800fe84:	6023      	str	r3, [r4, #0]
 800fe86:	bd38      	pop	{r3, r4, r5, pc}
 800fe88:	20007edc 	.word	0x20007edc

0800fe8c <_read_r>:
 800fe8c:	b538      	push	{r3, r4, r5, lr}
 800fe8e:	4d07      	ldr	r5, [pc, #28]	@ (800feac <_read_r+0x20>)
 800fe90:	4604      	mov	r4, r0
 800fe92:	4608      	mov	r0, r1
 800fe94:	4611      	mov	r1, r2
 800fe96:	2200      	movs	r2, #0
 800fe98:	602a      	str	r2, [r5, #0]
 800fe9a:	461a      	mov	r2, r3
 800fe9c:	f7f3 f993 	bl	80031c6 <_read>
 800fea0:	1c43      	adds	r3, r0, #1
 800fea2:	d102      	bne.n	800feaa <_read_r+0x1e>
 800fea4:	682b      	ldr	r3, [r5, #0]
 800fea6:	b103      	cbz	r3, 800feaa <_read_r+0x1e>
 800fea8:	6023      	str	r3, [r4, #0]
 800feaa:	bd38      	pop	{r3, r4, r5, pc}
 800feac:	20007edc 	.word	0x20007edc

0800feb0 <_sbrk_r>:
 800feb0:	b538      	push	{r3, r4, r5, lr}
 800feb2:	4d06      	ldr	r5, [pc, #24]	@ (800fecc <_sbrk_r+0x1c>)
 800feb4:	2300      	movs	r3, #0
 800feb6:	4604      	mov	r4, r0
 800feb8:	4608      	mov	r0, r1
 800feba:	602b      	str	r3, [r5, #0]
 800febc:	f7f3 f9f0 	bl	80032a0 <_sbrk>
 800fec0:	1c43      	adds	r3, r0, #1
 800fec2:	d102      	bne.n	800feca <_sbrk_r+0x1a>
 800fec4:	682b      	ldr	r3, [r5, #0]
 800fec6:	b103      	cbz	r3, 800feca <_sbrk_r+0x1a>
 800fec8:	6023      	str	r3, [r4, #0]
 800feca:	bd38      	pop	{r3, r4, r5, pc}
 800fecc:	20007edc 	.word	0x20007edc

0800fed0 <_write_r>:
 800fed0:	b538      	push	{r3, r4, r5, lr}
 800fed2:	4d07      	ldr	r5, [pc, #28]	@ (800fef0 <_write_r+0x20>)
 800fed4:	4604      	mov	r4, r0
 800fed6:	4608      	mov	r0, r1
 800fed8:	4611      	mov	r1, r2
 800feda:	2200      	movs	r2, #0
 800fedc:	602a      	str	r2, [r5, #0]
 800fede:	461a      	mov	r2, r3
 800fee0:	f7f3 f98e 	bl	8003200 <_write>
 800fee4:	1c43      	adds	r3, r0, #1
 800fee6:	d102      	bne.n	800feee <_write_r+0x1e>
 800fee8:	682b      	ldr	r3, [r5, #0]
 800feea:	b103      	cbz	r3, 800feee <_write_r+0x1e>
 800feec:	6023      	str	r3, [r4, #0]
 800feee:	bd38      	pop	{r3, r4, r5, pc}
 800fef0:	20007edc 	.word	0x20007edc

0800fef4 <_close_r>:
 800fef4:	b538      	push	{r3, r4, r5, lr}
 800fef6:	4d06      	ldr	r5, [pc, #24]	@ (800ff10 <_close_r+0x1c>)
 800fef8:	2300      	movs	r3, #0
 800fefa:	4604      	mov	r4, r0
 800fefc:	4608      	mov	r0, r1
 800fefe:	602b      	str	r3, [r5, #0]
 800ff00:	f7f3 f99a 	bl	8003238 <_close>
 800ff04:	1c43      	adds	r3, r0, #1
 800ff06:	d102      	bne.n	800ff0e <_close_r+0x1a>
 800ff08:	682b      	ldr	r3, [r5, #0]
 800ff0a:	b103      	cbz	r3, 800ff0e <_close_r+0x1a>
 800ff0c:	6023      	str	r3, [r4, #0]
 800ff0e:	bd38      	pop	{r3, r4, r5, pc}
 800ff10:	20007edc 	.word	0x20007edc

0800ff14 <_fstat_r>:
 800ff14:	b538      	push	{r3, r4, r5, lr}
 800ff16:	4d07      	ldr	r5, [pc, #28]	@ (800ff34 <_fstat_r+0x20>)
 800ff18:	2300      	movs	r3, #0
 800ff1a:	4604      	mov	r4, r0
 800ff1c:	4608      	mov	r0, r1
 800ff1e:	4611      	mov	r1, r2
 800ff20:	602b      	str	r3, [r5, #0]
 800ff22:	f7f3 f995 	bl	8003250 <_fstat>
 800ff26:	1c43      	adds	r3, r0, #1
 800ff28:	d102      	bne.n	800ff30 <_fstat_r+0x1c>
 800ff2a:	682b      	ldr	r3, [r5, #0]
 800ff2c:	b103      	cbz	r3, 800ff30 <_fstat_r+0x1c>
 800ff2e:	6023      	str	r3, [r4, #0]
 800ff30:	bd38      	pop	{r3, r4, r5, pc}
 800ff32:	bf00      	nop
 800ff34:	20007edc 	.word	0x20007edc

0800ff38 <abort>:
 800ff38:	b508      	push	{r3, lr}
 800ff3a:	2006      	movs	r0, #6
 800ff3c:	f000 f834 	bl	800ffa8 <raise>
 800ff40:	2001      	movs	r0, #1
 800ff42:	f7f3 f935 	bl	80031b0 <_exit>

0800ff46 <_malloc_usable_size_r>:
 800ff46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff4a:	1f18      	subs	r0, r3, #4
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	bfbc      	itt	lt
 800ff50:	580b      	ldrlt	r3, [r1, r0]
 800ff52:	18c0      	addlt	r0, r0, r3
 800ff54:	4770      	bx	lr

0800ff56 <_raise_r>:
 800ff56:	291f      	cmp	r1, #31
 800ff58:	b538      	push	{r3, r4, r5, lr}
 800ff5a:	4605      	mov	r5, r0
 800ff5c:	460c      	mov	r4, r1
 800ff5e:	d904      	bls.n	800ff6a <_raise_r+0x14>
 800ff60:	2316      	movs	r3, #22
 800ff62:	6003      	str	r3, [r0, #0]
 800ff64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ff68:	bd38      	pop	{r3, r4, r5, pc}
 800ff6a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ff6c:	b112      	cbz	r2, 800ff74 <_raise_r+0x1e>
 800ff6e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ff72:	b94b      	cbnz	r3, 800ff88 <_raise_r+0x32>
 800ff74:	4628      	mov	r0, r5
 800ff76:	f000 f831 	bl	800ffdc <_getpid_r>
 800ff7a:	4622      	mov	r2, r4
 800ff7c:	4601      	mov	r1, r0
 800ff7e:	4628      	mov	r0, r5
 800ff80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff84:	f000 b818 	b.w	800ffb8 <_kill_r>
 800ff88:	2b01      	cmp	r3, #1
 800ff8a:	d00a      	beq.n	800ffa2 <_raise_r+0x4c>
 800ff8c:	1c59      	adds	r1, r3, #1
 800ff8e:	d103      	bne.n	800ff98 <_raise_r+0x42>
 800ff90:	2316      	movs	r3, #22
 800ff92:	6003      	str	r3, [r0, #0]
 800ff94:	2001      	movs	r0, #1
 800ff96:	e7e7      	b.n	800ff68 <_raise_r+0x12>
 800ff98:	2100      	movs	r1, #0
 800ff9a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ff9e:	4620      	mov	r0, r4
 800ffa0:	4798      	blx	r3
 800ffa2:	2000      	movs	r0, #0
 800ffa4:	e7e0      	b.n	800ff68 <_raise_r+0x12>
	...

0800ffa8 <raise>:
 800ffa8:	4b02      	ldr	r3, [pc, #8]	@ (800ffb4 <raise+0xc>)
 800ffaa:	4601      	mov	r1, r0
 800ffac:	6818      	ldr	r0, [r3, #0]
 800ffae:	f7ff bfd2 	b.w	800ff56 <_raise_r>
 800ffb2:	bf00      	nop
 800ffb4:	20000034 	.word	0x20000034

0800ffb8 <_kill_r>:
 800ffb8:	b538      	push	{r3, r4, r5, lr}
 800ffba:	4d07      	ldr	r5, [pc, #28]	@ (800ffd8 <_kill_r+0x20>)
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	4604      	mov	r4, r0
 800ffc0:	4608      	mov	r0, r1
 800ffc2:	4611      	mov	r1, r2
 800ffc4:	602b      	str	r3, [r5, #0]
 800ffc6:	f7f3 f8e1 	bl	800318c <_kill>
 800ffca:	1c43      	adds	r3, r0, #1
 800ffcc:	d102      	bne.n	800ffd4 <_kill_r+0x1c>
 800ffce:	682b      	ldr	r3, [r5, #0]
 800ffd0:	b103      	cbz	r3, 800ffd4 <_kill_r+0x1c>
 800ffd2:	6023      	str	r3, [r4, #0]
 800ffd4:	bd38      	pop	{r3, r4, r5, pc}
 800ffd6:	bf00      	nop
 800ffd8:	20007edc 	.word	0x20007edc

0800ffdc <_getpid_r>:
 800ffdc:	f7f3 b8cd 	b.w	800317a <_getpid>

0800ffe0 <_init>:
 800ffe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffe2:	bf00      	nop
 800ffe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ffe6:	bc08      	pop	{r3}
 800ffe8:	469e      	mov	lr, r3
 800ffea:	4770      	bx	lr

0800ffec <_fini>:
 800ffec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffee:	bf00      	nop
 800fff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fff2:	bc08      	pop	{r3}
 800fff4:	469e      	mov	lr, r3
 800fff6:	4770      	bx	lr
