
HYPERUSJ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006438  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  08006608  08006608  00007608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006838  08006838  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006838  08006838  00007838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006840  08006840  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006840  08006840  00007840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006844  08006844  00007844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006848  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005ac  20000060  080068a8  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000060c  080068a8  0000860c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b1f  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027ca  00000000  00000000  0001bbaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001148  00000000  00000000  0001e380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d94  00000000  00000000  0001f4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002764f  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000144a3  00000000  00000000  000478ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4b74  00000000  00000000  0005bd4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001508c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f14  00000000  00000000  00150908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0015581c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080065f0 	.word	0x080065f0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	080065f0 	.word	0x080065f0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b10:	f000 b988 	b.w	8000e24 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9d08      	ldr	r5, [sp, #32]
 8000b32:	468e      	mov	lr, r1
 8000b34:	4604      	mov	r4, r0
 8000b36:	4688      	mov	r8, r1
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d14a      	bne.n	8000bd2 <__udivmoddi4+0xa6>
 8000b3c:	428a      	cmp	r2, r1
 8000b3e:	4617      	mov	r7, r2
 8000b40:	d962      	bls.n	8000c08 <__udivmoddi4+0xdc>
 8000b42:	fab2 f682 	clz	r6, r2
 8000b46:	b14e      	cbz	r6, 8000b5c <__udivmoddi4+0x30>
 8000b48:	f1c6 0320 	rsb	r3, r6, #32
 8000b4c:	fa01 f806 	lsl.w	r8, r1, r6
 8000b50:	fa20 f303 	lsr.w	r3, r0, r3
 8000b54:	40b7      	lsls	r7, r6
 8000b56:	ea43 0808 	orr.w	r8, r3, r8
 8000b5a:	40b4      	lsls	r4, r6
 8000b5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b60:	fa1f fc87 	uxth.w	ip, r7
 8000b64:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b68:	0c23      	lsrs	r3, r4, #16
 8000b6a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b6e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b72:	fb01 f20c 	mul.w	r2, r1, ip
 8000b76:	429a      	cmp	r2, r3
 8000b78:	d909      	bls.n	8000b8e <__udivmoddi4+0x62>
 8000b7a:	18fb      	adds	r3, r7, r3
 8000b7c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000b80:	f080 80ea 	bcs.w	8000d58 <__udivmoddi4+0x22c>
 8000b84:	429a      	cmp	r2, r3
 8000b86:	f240 80e7 	bls.w	8000d58 <__udivmoddi4+0x22c>
 8000b8a:	3902      	subs	r1, #2
 8000b8c:	443b      	add	r3, r7
 8000b8e:	1a9a      	subs	r2, r3, r2
 8000b90:	b2a3      	uxth	r3, r4
 8000b92:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b96:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b9e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ba2:	459c      	cmp	ip, r3
 8000ba4:	d909      	bls.n	8000bba <__udivmoddi4+0x8e>
 8000ba6:	18fb      	adds	r3, r7, r3
 8000ba8:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000bac:	f080 80d6 	bcs.w	8000d5c <__udivmoddi4+0x230>
 8000bb0:	459c      	cmp	ip, r3
 8000bb2:	f240 80d3 	bls.w	8000d5c <__udivmoddi4+0x230>
 8000bb6:	443b      	add	r3, r7
 8000bb8:	3802      	subs	r0, #2
 8000bba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bbe:	eba3 030c 	sub.w	r3, r3, ip
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	b11d      	cbz	r5, 8000bce <__udivmoddi4+0xa2>
 8000bc6:	40f3      	lsrs	r3, r6
 8000bc8:	2200      	movs	r2, #0
 8000bca:	e9c5 3200 	strd	r3, r2, [r5]
 8000bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d905      	bls.n	8000be2 <__udivmoddi4+0xb6>
 8000bd6:	b10d      	cbz	r5, 8000bdc <__udivmoddi4+0xb0>
 8000bd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4608      	mov	r0, r1
 8000be0:	e7f5      	b.n	8000bce <__udivmoddi4+0xa2>
 8000be2:	fab3 f183 	clz	r1, r3
 8000be6:	2900      	cmp	r1, #0
 8000be8:	d146      	bne.n	8000c78 <__udivmoddi4+0x14c>
 8000bea:	4573      	cmp	r3, lr
 8000bec:	d302      	bcc.n	8000bf4 <__udivmoddi4+0xc8>
 8000bee:	4282      	cmp	r2, r0
 8000bf0:	f200 8105 	bhi.w	8000dfe <__udivmoddi4+0x2d2>
 8000bf4:	1a84      	subs	r4, r0, r2
 8000bf6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	4690      	mov	r8, r2
 8000bfe:	2d00      	cmp	r5, #0
 8000c00:	d0e5      	beq.n	8000bce <__udivmoddi4+0xa2>
 8000c02:	e9c5 4800 	strd	r4, r8, [r5]
 8000c06:	e7e2      	b.n	8000bce <__udivmoddi4+0xa2>
 8000c08:	2a00      	cmp	r2, #0
 8000c0a:	f000 8090 	beq.w	8000d2e <__udivmoddi4+0x202>
 8000c0e:	fab2 f682 	clz	r6, r2
 8000c12:	2e00      	cmp	r6, #0
 8000c14:	f040 80a4 	bne.w	8000d60 <__udivmoddi4+0x234>
 8000c18:	1a8a      	subs	r2, r1, r2
 8000c1a:	0c03      	lsrs	r3, r0, #16
 8000c1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c20:	b280      	uxth	r0, r0
 8000c22:	b2bc      	uxth	r4, r7
 8000c24:	2101      	movs	r1, #1
 8000c26:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c2a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c32:	fb04 f20c 	mul.w	r2, r4, ip
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d907      	bls.n	8000c4a <__udivmoddi4+0x11e>
 8000c3a:	18fb      	adds	r3, r7, r3
 8000c3c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000c40:	d202      	bcs.n	8000c48 <__udivmoddi4+0x11c>
 8000c42:	429a      	cmp	r2, r3
 8000c44:	f200 80e0 	bhi.w	8000e08 <__udivmoddi4+0x2dc>
 8000c48:	46c4      	mov	ip, r8
 8000c4a:	1a9b      	subs	r3, r3, r2
 8000c4c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c50:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c54:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c58:	fb02 f404 	mul.w	r4, r2, r4
 8000c5c:	429c      	cmp	r4, r3
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0x144>
 8000c60:	18fb      	adds	r3, r7, r3
 8000c62:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0x142>
 8000c68:	429c      	cmp	r4, r3
 8000c6a:	f200 80ca 	bhi.w	8000e02 <__udivmoddi4+0x2d6>
 8000c6e:	4602      	mov	r2, r0
 8000c70:	1b1b      	subs	r3, r3, r4
 8000c72:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c76:	e7a5      	b.n	8000bc4 <__udivmoddi4+0x98>
 8000c78:	f1c1 0620 	rsb	r6, r1, #32
 8000c7c:	408b      	lsls	r3, r1
 8000c7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000c82:	431f      	orrs	r7, r3
 8000c84:	fa0e f401 	lsl.w	r4, lr, r1
 8000c88:	fa20 f306 	lsr.w	r3, r0, r6
 8000c8c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c90:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c94:	4323      	orrs	r3, r4
 8000c96:	fa00 f801 	lsl.w	r8, r0, r1
 8000c9a:	fa1f fc87 	uxth.w	ip, r7
 8000c9e:	fbbe f0f9 	udiv	r0, lr, r9
 8000ca2:	0c1c      	lsrs	r4, r3, #16
 8000ca4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ca8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000cac:	fb00 fe0c 	mul.w	lr, r0, ip
 8000cb0:	45a6      	cmp	lr, r4
 8000cb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000cb6:	d909      	bls.n	8000ccc <__udivmoddi4+0x1a0>
 8000cb8:	193c      	adds	r4, r7, r4
 8000cba:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000cbe:	f080 809c 	bcs.w	8000dfa <__udivmoddi4+0x2ce>
 8000cc2:	45a6      	cmp	lr, r4
 8000cc4:	f240 8099 	bls.w	8000dfa <__udivmoddi4+0x2ce>
 8000cc8:	3802      	subs	r0, #2
 8000cca:	443c      	add	r4, r7
 8000ccc:	eba4 040e 	sub.w	r4, r4, lr
 8000cd0:	fa1f fe83 	uxth.w	lr, r3
 8000cd4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cd8:	fb09 4413 	mls	r4, r9, r3, r4
 8000cdc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ce0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ce4:	45a4      	cmp	ip, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x1ce>
 8000ce8:	193c      	adds	r4, r7, r4
 8000cea:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000cee:	f080 8082 	bcs.w	8000df6 <__udivmoddi4+0x2ca>
 8000cf2:	45a4      	cmp	ip, r4
 8000cf4:	d97f      	bls.n	8000df6 <__udivmoddi4+0x2ca>
 8000cf6:	3b02      	subs	r3, #2
 8000cf8:	443c      	add	r4, r7
 8000cfa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000cfe:	eba4 040c 	sub.w	r4, r4, ip
 8000d02:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d06:	4564      	cmp	r4, ip
 8000d08:	4673      	mov	r3, lr
 8000d0a:	46e1      	mov	r9, ip
 8000d0c:	d362      	bcc.n	8000dd4 <__udivmoddi4+0x2a8>
 8000d0e:	d05f      	beq.n	8000dd0 <__udivmoddi4+0x2a4>
 8000d10:	b15d      	cbz	r5, 8000d2a <__udivmoddi4+0x1fe>
 8000d12:	ebb8 0203 	subs.w	r2, r8, r3
 8000d16:	eb64 0409 	sbc.w	r4, r4, r9
 8000d1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d1e:	fa22 f301 	lsr.w	r3, r2, r1
 8000d22:	431e      	orrs	r6, r3
 8000d24:	40cc      	lsrs	r4, r1
 8000d26:	e9c5 6400 	strd	r6, r4, [r5]
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	e74f      	b.n	8000bce <__udivmoddi4+0xa2>
 8000d2e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d32:	0c01      	lsrs	r1, r0, #16
 8000d34:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d38:	b280      	uxth	r0, r0
 8000d3a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d3e:	463b      	mov	r3, r7
 8000d40:	4638      	mov	r0, r7
 8000d42:	463c      	mov	r4, r7
 8000d44:	46b8      	mov	r8, r7
 8000d46:	46be      	mov	lr, r7
 8000d48:	2620      	movs	r6, #32
 8000d4a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d4e:	eba2 0208 	sub.w	r2, r2, r8
 8000d52:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d56:	e766      	b.n	8000c26 <__udivmoddi4+0xfa>
 8000d58:	4601      	mov	r1, r0
 8000d5a:	e718      	b.n	8000b8e <__udivmoddi4+0x62>
 8000d5c:	4610      	mov	r0, r2
 8000d5e:	e72c      	b.n	8000bba <__udivmoddi4+0x8e>
 8000d60:	f1c6 0220 	rsb	r2, r6, #32
 8000d64:	fa2e f302 	lsr.w	r3, lr, r2
 8000d68:	40b7      	lsls	r7, r6
 8000d6a:	40b1      	lsls	r1, r6
 8000d6c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d70:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d74:	430a      	orrs	r2, r1
 8000d76:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d7a:	b2bc      	uxth	r4, r7
 8000d7c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d80:	0c11      	lsrs	r1, r2, #16
 8000d82:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d86:	fb08 f904 	mul.w	r9, r8, r4
 8000d8a:	40b0      	lsls	r0, r6
 8000d8c:	4589      	cmp	r9, r1
 8000d8e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d92:	b280      	uxth	r0, r0
 8000d94:	d93e      	bls.n	8000e14 <__udivmoddi4+0x2e8>
 8000d96:	1879      	adds	r1, r7, r1
 8000d98:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000d9c:	d201      	bcs.n	8000da2 <__udivmoddi4+0x276>
 8000d9e:	4589      	cmp	r9, r1
 8000da0:	d81f      	bhi.n	8000de2 <__udivmoddi4+0x2b6>
 8000da2:	eba1 0109 	sub.w	r1, r1, r9
 8000da6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000daa:	fb09 f804 	mul.w	r8, r9, r4
 8000dae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000db2:	b292      	uxth	r2, r2
 8000db4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000db8:	4542      	cmp	r2, r8
 8000dba:	d229      	bcs.n	8000e10 <__udivmoddi4+0x2e4>
 8000dbc:	18ba      	adds	r2, r7, r2
 8000dbe:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000dc2:	d2c4      	bcs.n	8000d4e <__udivmoddi4+0x222>
 8000dc4:	4542      	cmp	r2, r8
 8000dc6:	d2c2      	bcs.n	8000d4e <__udivmoddi4+0x222>
 8000dc8:	f1a9 0102 	sub.w	r1, r9, #2
 8000dcc:	443a      	add	r2, r7
 8000dce:	e7be      	b.n	8000d4e <__udivmoddi4+0x222>
 8000dd0:	45f0      	cmp	r8, lr
 8000dd2:	d29d      	bcs.n	8000d10 <__udivmoddi4+0x1e4>
 8000dd4:	ebbe 0302 	subs.w	r3, lr, r2
 8000dd8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ddc:	3801      	subs	r0, #1
 8000dde:	46e1      	mov	r9, ip
 8000de0:	e796      	b.n	8000d10 <__udivmoddi4+0x1e4>
 8000de2:	eba7 0909 	sub.w	r9, r7, r9
 8000de6:	4449      	add	r1, r9
 8000de8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000dec:	fbb1 f9fe 	udiv	r9, r1, lr
 8000df0:	fb09 f804 	mul.w	r8, r9, r4
 8000df4:	e7db      	b.n	8000dae <__udivmoddi4+0x282>
 8000df6:	4673      	mov	r3, lr
 8000df8:	e77f      	b.n	8000cfa <__udivmoddi4+0x1ce>
 8000dfa:	4650      	mov	r0, sl
 8000dfc:	e766      	b.n	8000ccc <__udivmoddi4+0x1a0>
 8000dfe:	4608      	mov	r0, r1
 8000e00:	e6fd      	b.n	8000bfe <__udivmoddi4+0xd2>
 8000e02:	443b      	add	r3, r7
 8000e04:	3a02      	subs	r2, #2
 8000e06:	e733      	b.n	8000c70 <__udivmoddi4+0x144>
 8000e08:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e0c:	443b      	add	r3, r7
 8000e0e:	e71c      	b.n	8000c4a <__udivmoddi4+0x11e>
 8000e10:	4649      	mov	r1, r9
 8000e12:	e79c      	b.n	8000d4e <__udivmoddi4+0x222>
 8000e14:	eba1 0109 	sub.w	r1, r1, r9
 8000e18:	46c4      	mov	ip, r8
 8000e1a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1e:	fb09 f804 	mul.w	r8, r9, r4
 8000e22:	e7c4      	b.n	8000dae <__udivmoddi4+0x282>

08000e24 <__aeabi_idiv0>:
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop

08000e28 <INA226_INIT>:
void INA226_I2C_Write(uint8_t pByte, uint16_t Data);
void INA226_I2C_Read(uint8_t pByte, uint16_t* pData);
void INA226_I2C_ReadBuff(uint8_t pByte, uint8_t* pData, uint16_t size);

void INA226_INIT(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
	INA226_I2C_Write(INA226_CONFIG_REG, 0x4127); // Default
 8000e2c:	f244 1127 	movw	r1, #16679	@ 0x4127
 8000e30:	2000      	movs	r0, #0
 8000e32:	f000 f8d5 	bl	8000fe0 <INA226_I2C_Write>
	INA226_SetCalibration(R_SHUNT,8);
 8000e36:	eef2 0a00 	vmov.f32	s1, #32	@ 0x41000000  8.0
 8000e3a:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8000e48 <INA226_INIT+0x20>
 8000e3e:	f000 f885 	bl	8000f4c <INA226_SetCalibration>
//	INA226_Config(ShuntAndBusCont, ConvTime_1ms1, ConvTime_1ms1, Num_AVG_1); // Default
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	3c23d70a 	.word	0x3c23d70a

08000e4c <INA226_ID>:
	
	INA226_I2C_Write(INA226_CONFIG_REG, reg);
}

uint16_t INA226_ID(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
	INA226_I2C_Read(INA226_DIE_ID_REG,Buff);
 8000e50:	4905      	ldr	r1, [pc, #20]	@ (8000e68 <INA226_ID+0x1c>)
 8000e52:	20ff      	movs	r0, #255	@ 0xff
 8000e54:	f000 f8e8 	bl	8001028 <INA226_I2C_Read>
	tempReg = Buff[0]; 
 8000e58:	4b03      	ldr	r3, [pc, #12]	@ (8000e68 <INA226_ID+0x1c>)
 8000e5a:	881a      	ldrh	r2, [r3, #0]
 8000e5c:	4b03      	ldr	r3, [pc, #12]	@ (8000e6c <INA226_ID+0x20>)
 8000e5e:	801a      	strh	r2, [r3, #0]
	return tempReg;
 8000e60:	4b02      	ldr	r3, [pc, #8]	@ (8000e6c <INA226_ID+0x20>)
 8000e62:	881b      	ldrh	r3, [r3, #0]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	2000007c 	.word	0x2000007c
 8000e6c:	20000090 	.word	0x20000090

08000e70 <INA226_ShuntVoltage>:
//	*current = INA226_values.Current * 1e-03;
//	*power   = INA226_values.Power * 25e-03;
	
}

float INA226_ShuntVoltage (void){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0

	INA226_I2C_Read(INA226_SHUNT_VOLTAGE_REG,&tempReg);
 8000e74:	490e      	ldr	r1, [pc, #56]	@ (8000eb0 <INA226_ShuntVoltage+0x40>)
 8000e76:	2001      	movs	r0, #1
 8000e78:	f000 f8d6 	bl	8001028 <INA226_I2C_Read>
	return tempReg * 2.5e-06;
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb0 <INA226_ShuntVoltage+0x40>)
 8000e7e:	881b      	ldrh	r3, [r3, #0]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fb6f 	bl	8000564 <__aeabi_i2d>
 8000e86:	a308      	add	r3, pc, #32	@ (adr r3, 8000ea8 <INA226_ShuntVoltage+0x38>)
 8000e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e8c:	f7ff fbd4 	bl	8000638 <__aeabi_dmul>
 8000e90:	4602      	mov	r2, r0
 8000e92:	460b      	mov	r3, r1
 8000e94:	4610      	mov	r0, r2
 8000e96:	4619      	mov	r1, r3
 8000e98:	f7ff fde0 	bl	8000a5c <__aeabi_d2f>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	ee07 3a90 	vmov	s15, r3

}
 8000ea2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	88e368f1 	.word	0x88e368f1
 8000eac:	3ec4f8b5 	.word	0x3ec4f8b5
 8000eb0:	20000090 	.word	0x20000090

08000eb4 <INA226_BusVoltage>:

float INA226_BusVoltage (void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	INA226_I2C_Read(INA226_BUS_VOLTAGE_REG,&tempReg);
 8000eb8:	4908      	ldr	r1, [pc, #32]	@ (8000edc <INA226_BusVoltage+0x28>)
 8000eba:	2002      	movs	r0, #2
 8000ebc:	f000 f8b4 	bl	8001028 <INA226_I2C_Read>
	return tempReg * 1.25e-03f;	
 8000ec0:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <INA226_BusVoltage+0x28>)
 8000ec2:	881b      	ldrh	r3, [r3, #0]
 8000ec4:	ee07 3a90 	vmov	s15, r3
 8000ec8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ecc:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 8000ee0 <INA226_BusVoltage+0x2c>
 8000ed0:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000ed4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000090 	.word	0x20000090
 8000ee0:	3aa3d70a 	.word	0x3aa3d70a

08000ee4 <INA226_Power>:

float INA226_Power (void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
	INA226_I2C_Read(INA226_POWER_REG,&tempReg);
 8000ee8:	490a      	ldr	r1, [pc, #40]	@ (8000f14 <INA226_Power+0x30>)
 8000eea:	2003      	movs	r0, #3
 8000eec:	f000 f89c 	bl	8001028 <INA226_I2C_Read>
	
	return tempReg * (INA226_values.CurrentLSB*25);
 8000ef0:	4b08      	ldr	r3, [pc, #32]	@ (8000f14 <INA226_Power+0x30>)
 8000ef2:	881b      	ldrh	r3, [r3, #0]
 8000ef4:	ee07 3a90 	vmov	s15, r3
 8000ef8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000efc:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <INA226_Power+0x34>)
 8000efe:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f02:	eef3 6a09 	vmov.f32	s13, #57	@ 0x41c80000  25.0
 8000f06:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8000f0e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000090 	.word	0x20000090
 8000f18:	20000094 	.word	0x20000094

08000f1c <INA226_Current>:

float INA226_Current (void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	INA226_I2C_Read(INA226_CURRENT_REG,&tempReg);
 8000f20:	4908      	ldr	r1, [pc, #32]	@ (8000f44 <INA226_Current+0x28>)
 8000f22:	2004      	movs	r0, #4
 8000f24:	f000 f880 	bl	8001028 <INA226_I2C_Read>
	
	return tempReg * INA226_values.CurrentLSB;
 8000f28:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <INA226_Current+0x28>)
 8000f2a:	881b      	ldrh	r3, [r3, #0]
 8000f2c:	ee07 3a90 	vmov	s15, r3
 8000f30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f34:	4b04      	ldr	r3, [pc, #16]	@ (8000f48 <INA226_Current+0x2c>)
 8000f36:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
//	return ((INA226_ShuntVoltage()*INA226_values.Calibration)/2048) * INA226_values.CurrentLSB;
}
 8000f3e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000090 	.word	0x20000090
 8000f48:	20000094 	.word	0x20000094

08000f4c <INA226_SetCalibration>:

void INA226_SetCalibration (float R_Shunt,float MaxExpCurrent)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f56:	edc7 0a00 	vstr	s1, [r7]
	float Current_LSB;
	float CAL;
	
	if(MaxExpCurrent > 8)
 8000f5a:	edd7 7a00 	vldr	s15, [r7]
 8000f5e:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8000f62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f6a:	dd01      	ble.n	8000f70 <INA226_SetCalibration+0x24>
	{
		MaxExpCurrent = 8.192f;
 8000f6c:	4b18      	ldr	r3, [pc, #96]	@ (8000fd0 <INA226_SetCalibration+0x84>)
 8000f6e:	603b      	str	r3, [r7, #0]
	}
	
	Current_LSB = MaxExpCurrent / 32768.0f;
 8000f70:	ed97 7a00 	vldr	s14, [r7]
 8000f74:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8000fd4 <INA226_SetCalibration+0x88>
 8000f78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f7c:	edc7 7a03 	vstr	s15, [r7, #12]
	
	CAL = 0.00512f/(Current_LSB*R_Shunt);
 8000f80:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f84:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f8c:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8000fd8 <INA226_SetCalibration+0x8c>
 8000f90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f94:	edc7 7a02 	vstr	s15, [r7, #8]
	INA226_values.Calibration = CAL;
 8000f98:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fa0:	ee17 3a90 	vmov	r3, s15
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8000fdc <INA226_SetCalibration+0x90>)
 8000fa8:	811a      	strh	r2, [r3, #8]
	INA226_values.CurrentLSB = Current_LSB;
 8000faa:	4a0c      	ldr	r2, [pc, #48]	@ (8000fdc <INA226_SetCalibration+0x90>)
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	60d3      	str	r3, [r2, #12]
	INA226_I2C_Write(INA226_CALIBRATION_REG, (uint16_t)CAL);
 8000fb0:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fb8:	ee17 3a90 	vmov	r3, s15
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	2005      	movs	r0, #5
 8000fc2:	f000 f80d 	bl	8000fe0 <INA226_I2C_Write>
}
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	4103126f 	.word	0x4103126f
 8000fd4:	47000000 	.word	0x47000000
 8000fd8:	3ba7c5ac 	.word	0x3ba7c5ac
 8000fdc:	20000094 	.word	0x20000094

08000fe0 <INA226_I2C_Write>:
}

/*	*/

void INA226_I2C_Write(uint8_t pByte, uint16_t Data)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af04      	add	r7, sp, #16
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	460a      	mov	r2, r1
 8000fea:	71fb      	strb	r3, [r7, #7]
 8000fec:	4613      	mov	r3, r2
 8000fee:	80bb      	strh	r3, [r7, #4]
	uint8_t reg[2];
	
	reg[0] = (Data & 0xFF00) >> 8;
 8000ff0:	88bb      	ldrh	r3, [r7, #4]
 8000ff2:	0a1b      	lsrs	r3, r3, #8
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	733b      	strb	r3, [r7, #12]
	reg[1] =  Data & 0xFF;
 8000ffa:	88bb      	ldrh	r3, [r7, #4]
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	737b      	strb	r3, [r7, #13]
	
	HAL_I2C_Mem_Write(&hi2c2, INA226_ADDRESS << 1, pByte, 1, reg, 2, 100);
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	b29a      	uxth	r2, r3
 8001004:	2364      	movs	r3, #100	@ 0x64
 8001006:	9302      	str	r3, [sp, #8]
 8001008:	2302      	movs	r3, #2
 800100a:	9301      	str	r3, [sp, #4]
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	2301      	movs	r3, #1
 8001014:	2180      	movs	r1, #128	@ 0x80
 8001016:	4803      	ldr	r0, [pc, #12]	@ (8001024 <INA226_I2C_Write+0x44>)
 8001018:	f001 ff5e 	bl	8002ed8 <HAL_I2C_Mem_Write>
	
}
 800101c:	bf00      	nop
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000118 	.word	0x20000118

08001028 <INA226_I2C_Read>:

void INA226_I2C_Read(uint8_t pByte, uint16_t* pData)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af04      	add	r7, sp, #16
 800102e:	4603      	mov	r3, r0
 8001030:	6039      	str	r1, [r7, #0]
 8001032:	71fb      	strb	r3, [r7, #7]
	uint8_t reg[2];

	HAL_I2C_Mem_Read(&hi2c2, INA226_ADDRESS << 1, pByte, 1, reg, 2, 100);
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	b29a      	uxth	r2, r3
 8001038:	2364      	movs	r3, #100	@ 0x64
 800103a:	9302      	str	r3, [sp, #8]
 800103c:	2302      	movs	r3, #2
 800103e:	9301      	str	r3, [sp, #4]
 8001040:	f107 030c 	add.w	r3, r7, #12
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	2301      	movs	r3, #1
 8001048:	2180      	movs	r1, #128	@ 0x80
 800104a:	4809      	ldr	r0, [pc, #36]	@ (8001070 <INA226_I2C_Read+0x48>)
 800104c:	f002 f858 	bl	8003100 <HAL_I2C_Mem_Read>
	*pData = (reg[0] << 8) | reg[1];
 8001050:	7b3b      	ldrb	r3, [r7, #12]
 8001052:	b21b      	sxth	r3, r3
 8001054:	021b      	lsls	r3, r3, #8
 8001056:	b21a      	sxth	r2, r3
 8001058:	7b7b      	ldrb	r3, [r7, #13]
 800105a:	b21b      	sxth	r3, r3
 800105c:	4313      	orrs	r3, r2
 800105e:	b21b      	sxth	r3, r3
 8001060:	b29a      	uxth	r2, r3
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	801a      	strh	r2, [r3, #0]
	
}
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000118 	.word	0x20000118

08001074 <Encoder_Update>:
/**
  * @brief  Update encoder position and calculate distance
  * @param  None
  * @retval None
  */
void Encoder_Update(void) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
    uint32_t current_tick = HAL_GetTick();
 800107a:	f001 fb25 	bl	80026c8 <HAL_GetTick>
 800107e:	60f8      	str	r0, [r7, #12]
    int32_t count = __HAL_TIM_GET_COUNTER(&htim3);
 8001080:	4b30      	ldr	r3, [pc, #192]	@ (8001144 <Encoder_Update+0xd0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001086:	60bb      	str	r3, [r7, #8]

    encoder_velocity = count - encoder_last;
 8001088:	4b2f      	ldr	r3, [pc, #188]	@ (8001148 <Encoder_Update+0xd4>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	68ba      	ldr	r2, [r7, #8]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	4a2e      	ldr	r2, [pc, #184]	@ (800114c <Encoder_Update+0xd8>)
 8001092:	6013      	str	r3, [r2, #0]
    encoder_last = count;
 8001094:	4a2c      	ldr	r2, [pc, #176]	@ (8001148 <Encoder_Update+0xd4>)
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	6013      	str	r3, [r2, #0]

    // Timer sayacı taşması kontrolü
    if (encoder_velocity > 32767)
 800109a:	4b2c      	ldr	r3, [pc, #176]	@ (800114c <Encoder_Update+0xd8>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80010a2:	db06      	blt.n	80010b2 <Encoder_Update+0x3e>
        encoder_velocity -= 65536;
 80010a4:	4b29      	ldr	r3, [pc, #164]	@ (800114c <Encoder_Update+0xd8>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 80010ac:	4a27      	ldr	r2, [pc, #156]	@ (800114c <Encoder_Update+0xd8>)
 80010ae:	6013      	str	r3, [r2, #0]
 80010b0:	e00a      	b.n	80010c8 <Encoder_Update+0x54>
    else if (encoder_velocity < -32767)
 80010b2:	4b26      	ldr	r3, [pc, #152]	@ (800114c <Encoder_Update+0xd8>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80010ba:	dc05      	bgt.n	80010c8 <Encoder_Update+0x54>
        encoder_velocity += 65536;
 80010bc:	4b23      	ldr	r3, [pc, #140]	@ (800114c <Encoder_Update+0xd8>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80010c4:	4a21      	ldr	r2, [pc, #132]	@ (800114c <Encoder_Update+0xd8>)
 80010c6:	6013      	str	r3, [r2, #0]

    // Toplam pozisyona ekle
    encoder_position += encoder_velocity;
 80010c8:	4b20      	ldr	r3, [pc, #128]	@ (800114c <Encoder_Update+0xd8>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b20      	ldr	r3, [pc, #128]	@ (8001150 <Encoder_Update+0xdc>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4413      	add	r3, r2
 80010d2:	4a1f      	ldr	r2, [pc, #124]	@ (8001150 <Encoder_Update+0xdc>)
 80010d4:	6013      	str	r3, [r2, #0]

    // Toplam mesafe (mm olarak)
    encoder_total_distance = encoder_position * encoder_distance_per_pulse;
 80010d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001150 <Encoder_Update+0xdc>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	ee07 3a90 	vmov	s15, r3
 80010de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010e2:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001154 <Encoder_Update+0xe0>
 80010e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001158 <Encoder_Update+0xe4>)
 80010ec:	edc3 7a00 	vstr	s15, [r3]

    // Anlık hız (mm/s olarak)
    uint32_t delta_time = current_tick - last_tick;
 80010f0:	4b1a      	ldr	r3, [pc, #104]	@ (800115c <Encoder_Update+0xe8>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	68fa      	ldr	r2, [r7, #12]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	607b      	str	r3, [r7, #4]
    if (delta_time > 0) {
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d01a      	beq.n	8001136 <Encoder_Update+0xc2>
        encoder_speed = (encoder_velocity * encoder_distance_per_pulse * 1000.0f) / delta_time;
 8001100:	4b12      	ldr	r3, [pc, #72]	@ (800114c <Encoder_Update+0xd8>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	ee07 3a90 	vmov	s15, r3
 8001108:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800110c:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001154 <Encoder_Update+0xe0>
 8001110:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001114:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001160 <Encoder_Update+0xec>
 8001118:	ee67 6a87 	vmul.f32	s13, s15, s14
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	ee07 3a90 	vmov	s15, r3
 8001122:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001126:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800112a:	4b0e      	ldr	r3, [pc, #56]	@ (8001164 <Encoder_Update+0xf0>)
 800112c:	edc3 7a00 	vstr	s15, [r3]
        last_tick = current_tick;
 8001130:	4a0a      	ldr	r2, [pc, #40]	@ (800115c <Encoder_Update+0xe8>)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	6013      	str	r3, [r2, #0]
    }
    
    // MESAFE İÇİN LED KONTROLÜ BURADA ÇAĞRILIYOR
    DistanceLedControl();
 8001136:	f000 f817 	bl	8001168 <DistanceLedControl>
}
 800113a:	bf00      	nop
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	2000016c 	.word	0x2000016c
 8001148:	200000a8 	.word	0x200000a8
 800114c:	200000ac 	.word	0x200000ac
 8001150:	200000a4 	.word	0x200000a4
 8001154:	3ce38e39 	.word	0x3ce38e39
 8001158:	200000b4 	.word	0x200000b4
 800115c:	200000b8 	.word	0x200000b8
 8001160:	447a0000 	.word	0x447a0000
 8001164:	200000b0 	.word	0x200000b0

08001168 <DistanceLedControl>:
  * @brief  Control LEDs based on distance measurement
  * @param  None
  * @retval None
  */
void DistanceLedControl(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
    static uint8_t tunnel_end_alerted = 0;
    static uint8_t direction = 1; // 1: ileri, 0: geri
    static float prev_distance = 0.0f;

    // Yön tespiti (ileri mi gidiyor geri mi)
    if (encoder_total_distance > prev_distance)
 800116c:	4b7d      	ldr	r3, [pc, #500]	@ (8001364 <DistanceLedControl+0x1fc>)
 800116e:	ed93 7a00 	vldr	s14, [r3]
 8001172:	4b7d      	ldr	r3, [pc, #500]	@ (8001368 <DistanceLedControl+0x200>)
 8001174:	edd3 7a00 	vldr	s15, [r3]
 8001178:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800117c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001180:	dd03      	ble.n	800118a <DistanceLedControl+0x22>
        direction = 1; // ileri
 8001182:	4b7a      	ldr	r3, [pc, #488]	@ (800136c <DistanceLedControl+0x204>)
 8001184:	2201      	movs	r2, #1
 8001186:	701a      	strb	r2, [r3, #0]
 8001188:	e00d      	b.n	80011a6 <DistanceLedControl+0x3e>
    else if (encoder_total_distance < prev_distance)
 800118a:	4b76      	ldr	r3, [pc, #472]	@ (8001364 <DistanceLedControl+0x1fc>)
 800118c:	ed93 7a00 	vldr	s14, [r3]
 8001190:	4b75      	ldr	r3, [pc, #468]	@ (8001368 <DistanceLedControl+0x200>)
 8001192:	edd3 7a00 	vldr	s15, [r3]
 8001196:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800119a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800119e:	d502      	bpl.n	80011a6 <DistanceLedControl+0x3e>
        direction = 0; // geri
 80011a0:	4b72      	ldr	r3, [pc, #456]	@ (800136c <DistanceLedControl+0x204>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	701a      	strb	r2, [r3, #0]
    prev_distance = encoder_total_distance;
 80011a6:	4b6f      	ldr	r3, [pc, #444]	@ (8001364 <DistanceLedControl+0x1fc>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a6f      	ldr	r2, [pc, #444]	@ (8001368 <DistanceLedControl+0x200>)
 80011ac:	6013      	str	r3, [r2, #0]

    // Önce tüm ledleri kapatıyoruz
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // Kırmızı
 80011ae:	2200      	movs	r2, #0
 80011b0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011b4:	486e      	ldr	r0, [pc, #440]	@ (8001370 <DistanceLedControl+0x208>)
 80011b6:	f001 fdd9 	bl	8002d6c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);  // Mavi
 80011ba:	2200      	movs	r2, #0
 80011bc:	2180      	movs	r1, #128	@ 0x80
 80011be:	486c      	ldr	r0, [pc, #432]	@ (8001370 <DistanceLedControl+0x208>)
 80011c0:	f001 fdd4 	bl	8002d6c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);  // Yeşil
 80011c4:	2200      	movs	r2, #0
 80011c6:	2101      	movs	r1, #1
 80011c8:	4869      	ldr	r0, [pc, #420]	@ (8001370 <DistanceLedControl+0x208>)
 80011ca:	f001 fdcf 	bl	8002d6c <HAL_GPIO_WritePin>

    // Tünel sonuna geldiyse, bütün ledleri kısa süreyle yakıp söndür
    if (!tunnel_end_alerted && encoder_total_distance >= 1860.0f) // 186 metre, mm cinsinden
 80011ce:	4b69      	ldr	r3, [pc, #420]	@ (8001374 <DistanceLedControl+0x20c>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d131      	bne.n	800123a <DistanceLedControl+0xd2>
 80011d6:	4b63      	ldr	r3, [pc, #396]	@ (8001364 <DistanceLedControl+0x1fc>)
 80011d8:	edd3 7a00 	vldr	s15, [r3]
 80011dc:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8001378 <DistanceLedControl+0x210>
 80011e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e8:	db27      	blt.n	800123a <DistanceLedControl+0xd2>
    {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80011ea:	2201      	movs	r2, #1
 80011ec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011f0:	485f      	ldr	r0, [pc, #380]	@ (8001370 <DistanceLedControl+0x208>)
 80011f2:	f001 fdbb 	bl	8002d6c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80011f6:	2201      	movs	r2, #1
 80011f8:	2180      	movs	r1, #128	@ 0x80
 80011fa:	485d      	ldr	r0, [pc, #372]	@ (8001370 <DistanceLedControl+0x208>)
 80011fc:	f001 fdb6 	bl	8002d6c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001200:	2201      	movs	r2, #1
 8001202:	2101      	movs	r1, #1
 8001204:	485a      	ldr	r0, [pc, #360]	@ (8001370 <DistanceLedControl+0x208>)
 8001206:	f001 fdb1 	bl	8002d6c <HAL_GPIO_WritePin>
        HAL_Delay(1000); // 1 saniye yakıp söndür
 800120a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800120e:	f001 fa67 	bl	80026e0 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001212:	2200      	movs	r2, #0
 8001214:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001218:	4855      	ldr	r0, [pc, #340]	@ (8001370 <DistanceLedControl+0x208>)
 800121a:	f001 fda7 	bl	8002d6c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800121e:	2200      	movs	r2, #0
 8001220:	2180      	movs	r1, #128	@ 0x80
 8001222:	4853      	ldr	r0, [pc, #332]	@ (8001370 <DistanceLedControl+0x208>)
 8001224:	f001 fda2 	bl	8002d6c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001228:	2200      	movs	r2, #0
 800122a:	2101      	movs	r1, #1
 800122c:	4850      	ldr	r0, [pc, #320]	@ (8001370 <DistanceLedControl+0x208>)
 800122e:	f001 fd9d 	bl	8002d6c <HAL_GPIO_WritePin>
        tunnel_end_alerted = 1;
 8001232:	4b50      	ldr	r3, [pc, #320]	@ (8001374 <DistanceLedControl+0x20c>)
 8001234:	2201      	movs	r2, #1
 8001236:	701a      	strb	r2, [r3, #0]
 8001238:	e092      	b.n	8001360 <DistanceLedControl+0x1f8>
    }
    // Normal aralık kontrolü:
    else if (encoder_total_distance < 1860.0f)
 800123a:	4b4a      	ldr	r3, [pc, #296]	@ (8001364 <DistanceLedControl+0x1fc>)
 800123c:	edd3 7a00 	vldr	s15, [r3]
 8001240:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8001378 <DistanceLedControl+0x210>
 8001244:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124c:	d400      	bmi.n	8001250 <DistanceLedControl+0xe8>
            else if (encoder_total_distance <= 1200.0f && encoder_total_distance > 3000.0f)
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // Yeşil
            // değilse ledler kapalı
        }
    }
}
 800124e:	e087      	b.n	8001360 <DistanceLedControl+0x1f8>
        tunnel_end_alerted = 0; // geri dönerken tekrar yanabilmesi için resetle
 8001250:	4b48      	ldr	r3, [pc, #288]	@ (8001374 <DistanceLedControl+0x20c>)
 8001252:	2200      	movs	r2, #0
 8001254:	701a      	strb	r2, [r3, #0]
        if (direction) // ileri gidiyor
 8001256:	4b45      	ldr	r3, [pc, #276]	@ (800136c <DistanceLedControl+0x204>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d031      	beq.n	80012c2 <DistanceLedControl+0x15a>
            if (encoder_total_distance >= 1200.0f)
 800125e:	4b41      	ldr	r3, [pc, #260]	@ (8001364 <DistanceLedControl+0x1fc>)
 8001260:	edd3 7a00 	vldr	s15, [r3]
 8001264:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 800137c <DistanceLedControl+0x214>
 8001268:	eef4 7ac7 	vcmpe.f32	s15, s14
 800126c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001270:	db05      	blt.n	800127e <DistanceLedControl+0x116>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // Yeşil 5 m ve üstü
 8001272:	2201      	movs	r2, #1
 8001274:	2101      	movs	r1, #1
 8001276:	483e      	ldr	r0, [pc, #248]	@ (8001370 <DistanceLedControl+0x208>)
 8001278:	f001 fd78 	bl	8002d6c <HAL_GPIO_WritePin>
}
 800127c:	e070      	b.n	8001360 <DistanceLedControl+0x1f8>
            else if (encoder_total_distance >= 600.0f)
 800127e:	4b39      	ldr	r3, [pc, #228]	@ (8001364 <DistanceLedControl+0x1fc>)
 8001280:	edd3 7a00 	vldr	s15, [r3]
 8001284:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8001380 <DistanceLedControl+0x218>
 8001288:	eef4 7ac7 	vcmpe.f32	s15, s14
 800128c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001290:	db05      	blt.n	800129e <DistanceLedControl+0x136>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET); // Mavi 3 m ve üstü
 8001292:	2201      	movs	r2, #1
 8001294:	2180      	movs	r1, #128	@ 0x80
 8001296:	4836      	ldr	r0, [pc, #216]	@ (8001370 <DistanceLedControl+0x208>)
 8001298:	f001 fd68 	bl	8002d6c <HAL_GPIO_WritePin>
}
 800129c:	e060      	b.n	8001360 <DistanceLedControl+0x1f8>
            else if (encoder_total_distance >= 100.0f)
 800129e:	4b31      	ldr	r3, [pc, #196]	@ (8001364 <DistanceLedControl+0x1fc>)
 80012a0:	edd3 7a00 	vldr	s15, [r3]
 80012a4:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8001384 <DistanceLedControl+0x21c>
 80012a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b0:	da00      	bge.n	80012b4 <DistanceLedControl+0x14c>
}
 80012b2:	e055      	b.n	8001360 <DistanceLedControl+0x1f8>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // Kırmızı 1 m ve üstü
 80012b4:	2201      	movs	r2, #1
 80012b6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012ba:	482d      	ldr	r0, [pc, #180]	@ (8001370 <DistanceLedControl+0x208>)
 80012bc:	f001 fd56 	bl	8002d6c <HAL_GPIO_WritePin>
}
 80012c0:	e04e      	b.n	8001360 <DistanceLedControl+0x1f8>
            if (encoder_total_distance <= 100.0f && encoder_total_distance > 0.0f)
 80012c2:	4b28      	ldr	r3, [pc, #160]	@ (8001364 <DistanceLedControl+0x1fc>)
 80012c4:	edd3 7a00 	vldr	s15, [r3]
 80012c8:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8001384 <DistanceLedControl+0x21c>
 80012cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	d80e      	bhi.n	80012f4 <DistanceLedControl+0x18c>
 80012d6:	4b23      	ldr	r3, [pc, #140]	@ (8001364 <DistanceLedControl+0x1fc>)
 80012d8:	edd3 7a00 	vldr	s15, [r3]
 80012dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012e4:	dd06      	ble.n	80012f4 <DistanceLedControl+0x18c>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // Kırmızı
 80012e6:	2201      	movs	r2, #1
 80012e8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012ec:	4820      	ldr	r0, [pc, #128]	@ (8001370 <DistanceLedControl+0x208>)
 80012ee:	f001 fd3d 	bl	8002d6c <HAL_GPIO_WritePin>
 80012f2:	e035      	b.n	8001360 <DistanceLedControl+0x1f8>
            else if (encoder_total_distance <= 600.0f && encoder_total_distance > 1000.0f)
 80012f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001364 <DistanceLedControl+0x1fc>)
 80012f6:	edd3 7a00 	vldr	s15, [r3]
 80012fa:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001380 <DistanceLedControl+0x218>
 80012fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001306:	d80f      	bhi.n	8001328 <DistanceLedControl+0x1c0>
 8001308:	4b16      	ldr	r3, [pc, #88]	@ (8001364 <DistanceLedControl+0x1fc>)
 800130a:	edd3 7a00 	vldr	s15, [r3]
 800130e:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001388 <DistanceLedControl+0x220>
 8001312:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800131a:	dd05      	ble.n	8001328 <DistanceLedControl+0x1c0>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET); // Mavi
 800131c:	2201      	movs	r2, #1
 800131e:	2180      	movs	r1, #128	@ 0x80
 8001320:	4813      	ldr	r0, [pc, #76]	@ (8001370 <DistanceLedControl+0x208>)
 8001322:	f001 fd23 	bl	8002d6c <HAL_GPIO_WritePin>
 8001326:	e01b      	b.n	8001360 <DistanceLedControl+0x1f8>
            else if (encoder_total_distance <= 1200.0f && encoder_total_distance > 3000.0f)
 8001328:	4b0e      	ldr	r3, [pc, #56]	@ (8001364 <DistanceLedControl+0x1fc>)
 800132a:	edd3 7a00 	vldr	s15, [r3]
 800132e:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800137c <DistanceLedControl+0x214>
 8001332:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800133a:	d900      	bls.n	800133e <DistanceLedControl+0x1d6>
}
 800133c:	e010      	b.n	8001360 <DistanceLedControl+0x1f8>
            else if (encoder_total_distance <= 1200.0f && encoder_total_distance > 3000.0f)
 800133e:	4b09      	ldr	r3, [pc, #36]	@ (8001364 <DistanceLedControl+0x1fc>)
 8001340:	edd3 7a00 	vldr	s15, [r3]
 8001344:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800138c <DistanceLedControl+0x224>
 8001348:	eef4 7ac7 	vcmpe.f32	s15, s14
 800134c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001350:	dc00      	bgt.n	8001354 <DistanceLedControl+0x1ec>
}
 8001352:	e005      	b.n	8001360 <DistanceLedControl+0x1f8>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // Yeşil
 8001354:	2201      	movs	r2, #1
 8001356:	2101      	movs	r1, #1
 8001358:	4805      	ldr	r0, [pc, #20]	@ (8001370 <DistanceLedControl+0x208>)
 800135a:	f001 fd07 	bl	8002d6c <HAL_GPIO_WritePin>
}
 800135e:	e7ff      	b.n	8001360 <DistanceLedControl+0x1f8>
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}
 8001364:	200000b4 	.word	0x200000b4
 8001368:	200000bc 	.word	0x200000bc
 800136c:	20000000 	.word	0x20000000
 8001370:	40020400 	.word	0x40020400
 8001374:	200000c0 	.word	0x200000c0
 8001378:	44e88000 	.word	0x44e88000
 800137c:	44960000 	.word	0x44960000
 8001380:	44160000 	.word	0x44160000
 8001384:	42c80000 	.word	0x42c80000
 8001388:	447a0000 	.word	0x447a0000
 800138c:	453b8000 	.word	0x453b8000

08001390 <INA226_Test_Simple>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// INA226 Simple Test Function (backup'tan)
void INA226_Test_Simple(void) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
    sprintf(uart_buffer, "I2C2 adres taraması (0x40-0x4F):\r\n");
 8001396:	4934      	ldr	r1, [pc, #208]	@ (8001468 <INA226_Test_Simple+0xd8>)
 8001398:	4834      	ldr	r0, [pc, #208]	@ (800146c <INA226_Test_Simple+0xdc>)
 800139a:	f004 fc89 	bl	8005cb0 <siprintf>
    HAL_UART_Transmit(&huart2,(uint8_t*)uart_buffer,strlen(uart_buffer),10);
 800139e:	4833      	ldr	r0, [pc, #204]	@ (800146c <INA226_Test_Simple+0xdc>)
 80013a0:	f7fe ff36 	bl	8000210 <strlen>
 80013a4:	4603      	mov	r3, r0
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	230a      	movs	r3, #10
 80013aa:	4930      	ldr	r1, [pc, #192]	@ (800146c <INA226_Test_Simple+0xdc>)
 80013ac:	4830      	ldr	r0, [pc, #192]	@ (8001470 <INA226_Test_Simple+0xe0>)
 80013ae:	f003 ffc7 	bl	8005340 <HAL_UART_Transmit>
    for (uint8_t addr = 0x40; addr <= 0x4F; addr++) {
 80013b2:	2340      	movs	r3, #64	@ 0x40
 80013b4:	71fb      	strb	r3, [r7, #7]
 80013b6:	e01e      	b.n	80013f6 <INA226_Test_Simple+0x66>
        if (HAL_I2C_IsDeviceReady(&hi2c2, addr << 1, 3, 10) == HAL_OK) {
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	b299      	uxth	r1, r3
 80013c0:	230a      	movs	r3, #10
 80013c2:	2203      	movs	r2, #3
 80013c4:	482b      	ldr	r0, [pc, #172]	@ (8001474 <INA226_Test_Simple+0xe4>)
 80013c6:	f001 ffb5 	bl	8003334 <HAL_I2C_IsDeviceReady>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d10f      	bne.n	80013f0 <INA226_Test_Simple+0x60>
            sprintf(uart_buffer, "  Cihaz bulundu: 0x%02X\r\n", addr);
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	461a      	mov	r2, r3
 80013d4:	4928      	ldr	r1, [pc, #160]	@ (8001478 <INA226_Test_Simple+0xe8>)
 80013d6:	4825      	ldr	r0, [pc, #148]	@ (800146c <INA226_Test_Simple+0xdc>)
 80013d8:	f004 fc6a 	bl	8005cb0 <siprintf>
            HAL_UART_Transmit(&huart2,(uint8_t*)uart_buffer,strlen(uart_buffer),10);
 80013dc:	4823      	ldr	r0, [pc, #140]	@ (800146c <INA226_Test_Simple+0xdc>)
 80013de:	f7fe ff17 	bl	8000210 <strlen>
 80013e2:	4603      	mov	r3, r0
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	230a      	movs	r3, #10
 80013e8:	4920      	ldr	r1, [pc, #128]	@ (800146c <INA226_Test_Simple+0xdc>)
 80013ea:	4821      	ldr	r0, [pc, #132]	@ (8001470 <INA226_Test_Simple+0xe0>)
 80013ec:	f003 ffa8 	bl	8005340 <HAL_UART_Transmit>
    for (uint8_t addr = 0x40; addr <= 0x4F; addr++) {
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	3301      	adds	r3, #1
 80013f4:	71fb      	strb	r3, [r7, #7]
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	2b4f      	cmp	r3, #79	@ 0x4f
 80013fa:	d9dd      	bls.n	80013b8 <INA226_Test_Simple+0x28>
        }
    }
    uint16_t device_id = INA226_ID();
 80013fc:	f7ff fd26 	bl	8000e4c <INA226_ID>
 8001400:	4603      	mov	r3, r0
 8001402:	80bb      	strh	r3, [r7, #4]
    sprintf(uart_buffer, "INA226 Device ID: 0x%04X (0x2260 bekleniyor)\r\n", device_id);
 8001404:	88bb      	ldrh	r3, [r7, #4]
 8001406:	461a      	mov	r2, r3
 8001408:	491c      	ldr	r1, [pc, #112]	@ (800147c <INA226_Test_Simple+0xec>)
 800140a:	4818      	ldr	r0, [pc, #96]	@ (800146c <INA226_Test_Simple+0xdc>)
 800140c:	f004 fc50 	bl	8005cb0 <siprintf>
    HAL_UART_Transmit(&huart2,(uint8_t*)uart_buffer,strlen(uart_buffer),10);
 8001410:	4816      	ldr	r0, [pc, #88]	@ (800146c <INA226_Test_Simple+0xdc>)
 8001412:	f7fe fefd 	bl	8000210 <strlen>
 8001416:	4603      	mov	r3, r0
 8001418:	b29a      	uxth	r2, r3
 800141a:	230a      	movs	r3, #10
 800141c:	4913      	ldr	r1, [pc, #76]	@ (800146c <INA226_Test_Simple+0xdc>)
 800141e:	4814      	ldr	r0, [pc, #80]	@ (8001470 <INA226_Test_Simple+0xe0>)
 8001420:	f003 ff8e 	bl	8005340 <HAL_UART_Transmit>
    if(device_id == 0x2260) {
 8001424:	88bb      	ldrh	r3, [r7, #4]
 8001426:	f242 2260 	movw	r2, #8800	@ 0x2260
 800142a:	4293      	cmp	r3, r2
 800142c:	d107      	bne.n	800143e <INA226_Test_Simple+0xae>
        ina226_connection_status = 1;
 800142e:	4b14      	ldr	r3, [pc, #80]	@ (8001480 <INA226_Test_Simple+0xf0>)
 8001430:	2201      	movs	r2, #1
 8001432:	701a      	strb	r2, [r3, #0]
        sprintf(uart_buffer, "INA226 bağlantısı BAŞARILI!\r\n");
 8001434:	4913      	ldr	r1, [pc, #76]	@ (8001484 <INA226_Test_Simple+0xf4>)
 8001436:	480d      	ldr	r0, [pc, #52]	@ (800146c <INA226_Test_Simple+0xdc>)
 8001438:	f004 fc3a 	bl	8005cb0 <siprintf>
 800143c:	e006      	b.n	800144c <INA226_Test_Simple+0xbc>
    } else {
        ina226_connection_status = 0;
 800143e:	4b10      	ldr	r3, [pc, #64]	@ (8001480 <INA226_Test_Simple+0xf0>)
 8001440:	2200      	movs	r2, #0
 8001442:	701a      	strb	r2, [r3, #0]
        sprintf(uart_buffer, "INA226 bağlantısı BAŞARISIZ!\r\n");
 8001444:	4910      	ldr	r1, [pc, #64]	@ (8001488 <INA226_Test_Simple+0xf8>)
 8001446:	4809      	ldr	r0, [pc, #36]	@ (800146c <INA226_Test_Simple+0xdc>)
 8001448:	f004 fc32 	bl	8005cb0 <siprintf>
    }
    HAL_UART_Transmit(&huart2,(uint8_t*)uart_buffer,strlen(uart_buffer),10);
 800144c:	4807      	ldr	r0, [pc, #28]	@ (800146c <INA226_Test_Simple+0xdc>)
 800144e:	f7fe fedf 	bl	8000210 <strlen>
 8001452:	4603      	mov	r3, r0
 8001454:	b29a      	uxth	r2, r3
 8001456:	230a      	movs	r3, #10
 8001458:	4904      	ldr	r1, [pc, #16]	@ (800146c <INA226_Test_Simple+0xdc>)
 800145a:	4805      	ldr	r0, [pc, #20]	@ (8001470 <INA226_Test_Simple+0xe0>)
 800145c:	f003 ff70 	bl	8005340 <HAL_UART_Transmit>
}
 8001460:	bf00      	nop
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	08006608 	.word	0x08006608
 800146c:	200002bc 	.word	0x200002bc
 8001470:	200001b8 	.word	0x200001b8
 8001474:	20000118 	.word	0x20000118
 8001478:	0800662c 	.word	0x0800662c
 800147c:	08006648 	.word	0x08006648
 8001480:	20000258 	.word	0x20000258
 8001484:	08006678 	.word	0x08006678
 8001488:	0800669c 	.word	0x0800669c

0800148c <INA226_ReadAllValues_Fixed>:

// INA226 Read All Values Function (backup'tan)
void INA226_ReadAllValues_Fixed(void) {
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
    if(ina226_connection_status == 1) {
 8001490:	4b29      	ldr	r3, [pc, #164]	@ (8001538 <INA226_ReadAllValues_Fixed+0xac>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b01      	cmp	r3, #1
 8001498:	d14b      	bne.n	8001532 <INA226_ReadAllValues_Fixed+0xa6>
        ina226_bus_voltage = INA226_BusVoltage();
 800149a:	f7ff fd0b 	bl	8000eb4 <INA226_BusVoltage>
 800149e:	eef0 7a40 	vmov.f32	s15, s0
 80014a2:	4b26      	ldr	r3, [pc, #152]	@ (800153c <INA226_ReadAllValues_Fixed+0xb0>)
 80014a4:	edc3 7a00 	vstr	s15, [r3]
        ina226_shunt_voltage = INA226_ShuntVoltage() * 1000.0f;
 80014a8:	f7ff fce2 	bl	8000e70 <INA226_ShuntVoltage>
 80014ac:	eef0 7a40 	vmov.f32	s15, s0
 80014b0:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001540 <INA226_ReadAllValues_Fixed+0xb4>
 80014b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014b8:	4b22      	ldr	r3, [pc, #136]	@ (8001544 <INA226_ReadAllValues_Fixed+0xb8>)
 80014ba:	edc3 7a00 	vstr	s15, [r3]
        ina226_current = INA226_Current();
 80014be:	f7ff fd2d 	bl	8000f1c <INA226_Current>
 80014c2:	eef0 7a40 	vmov.f32	s15, s0
 80014c6:	4b20      	ldr	r3, [pc, #128]	@ (8001548 <INA226_ReadAllValues_Fixed+0xbc>)
 80014c8:	edc3 7a00 	vstr	s15, [r3]
        ina226_current_ma = ina226_current * 1000.0f;
 80014cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001548 <INA226_ReadAllValues_Fixed+0xbc>)
 80014ce:	edd3 7a00 	vldr	s15, [r3]
 80014d2:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001540 <INA226_ReadAllValues_Fixed+0xb4>
 80014d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014da:	4b1c      	ldr	r3, [pc, #112]	@ (800154c <INA226_ReadAllValues_Fixed+0xc0>)
 80014dc:	edc3 7a00 	vstr	s15, [r3]
        ina226_power = INA226_Power();
 80014e0:	f7ff fd00 	bl	8000ee4 <INA226_Power>
 80014e4:	eef0 7a40 	vmov.f32	s15, s0
 80014e8:	4b19      	ldr	r3, [pc, #100]	@ (8001550 <INA226_ReadAllValues_Fixed+0xc4>)
 80014ea:	edc3 7a00 	vstr	s15, [r3]
        ina226_power_mw = ina226_power * 1000.0f;
 80014ee:	4b18      	ldr	r3, [pc, #96]	@ (8001550 <INA226_ReadAllValues_Fixed+0xc4>)
 80014f0:	edd3 7a00 	vldr	s15, [r3]
 80014f4:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001540 <INA226_ReadAllValues_Fixed+0xb4>
 80014f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014fc:	4b15      	ldr	r3, [pc, #84]	@ (8001554 <INA226_ReadAllValues_Fixed+0xc8>)
 80014fe:	edc3 7a00 	vstr	s15, [r3]
        if(ina226_bus_voltage < 0.0f || ina226_bus_voltage > 36.0f){
 8001502:	4b0e      	ldr	r3, [pc, #56]	@ (800153c <INA226_ReadAllValues_Fixed+0xb0>)
 8001504:	edd3 7a00 	vldr	s15, [r3]
 8001508:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800150c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001510:	d40a      	bmi.n	8001528 <INA226_ReadAllValues_Fixed+0x9c>
 8001512:	4b0a      	ldr	r3, [pc, #40]	@ (800153c <INA226_ReadAllValues_Fixed+0xb0>)
 8001514:	edd3 7a00 	vldr	s15, [r3]
 8001518:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001558 <INA226_ReadAllValues_Fixed+0xcc>
 800151c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001524:	dc00      	bgt.n	8001528 <INA226_ReadAllValues_Fixed+0x9c>
            ina226_error_count++;
        }
    }
}
 8001526:	e004      	b.n	8001532 <INA226_ReadAllValues_Fixed+0xa6>
            ina226_error_count++;
 8001528:	4b0c      	ldr	r3, [pc, #48]	@ (800155c <INA226_ReadAllValues_Fixed+0xd0>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	3301      	adds	r3, #1
 800152e:	4a0b      	ldr	r2, [pc, #44]	@ (800155c <INA226_ReadAllValues_Fixed+0xd0>)
 8001530:	6013      	str	r3, [r2, #0]
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000258 	.word	0x20000258
 800153c:	20000240 	.word	0x20000240
 8001540:	447a0000 	.word	0x447a0000
 8001544:	20000244 	.word	0x20000244
 8001548:	20000248 	.word	0x20000248
 800154c:	20000250 	.word	0x20000250
 8001550:	2000024c 	.word	0x2000024c
 8001554:	20000254 	.word	0x20000254
 8001558:	42100000 	.word	0x42100000
 800155c:	2000025c 	.word	0x2000025c

08001560 <MLX90614_ReadTemps>:

// MLX90614 Temperature Reading Function (backup'tan)
void MLX90614_ReadTemps(void) {
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
    float ambient=0.0f, object=0.0f;
 8001566:	f04f 0300 	mov.w	r3, #0
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	f04f 0300 	mov.w	r3, #0
 8001570:	603b      	str	r3, [r7, #0]
    if(mlx90614_getAmbient(&mlx90614_sensor_instance, &ambient)) {
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	4619      	mov	r1, r3
 8001576:	481a      	ldr	r0, [pc, #104]	@ (80015e0 <MLX90614_ReadTemps+0x80>)
 8001578:	f000 fdf6 	bl	8002168 <mlx90614_getAmbient>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <MLX90614_ReadTemps+0x2a>
        ambient_temp_C = ambient;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a17      	ldr	r2, [pc, #92]	@ (80015e4 <MLX90614_ReadTemps+0x84>)
 8001586:	6013      	str	r3, [r2, #0]
 8001588:	e007      	b.n	800159a <MLX90614_ReadTemps+0x3a>
    } else { 
        ambient_error_count++; 
 800158a:	4b17      	ldr	r3, [pc, #92]	@ (80015e8 <MLX90614_ReadTemps+0x88>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	3301      	adds	r3, #1
 8001590:	4a15      	ldr	r2, [pc, #84]	@ (80015e8 <MLX90614_ReadTemps+0x88>)
 8001592:	6013      	str	r3, [r2, #0]
        mlx_connection_status=0; 
 8001594:	4b15      	ldr	r3, [pc, #84]	@ (80015ec <MLX90614_ReadTemps+0x8c>)
 8001596:	2200      	movs	r2, #0
 8001598:	701a      	strb	r2, [r3, #0]
    }
    if(mlx90614_getObject1(&mlx90614_sensor_instance, &object)) {
 800159a:	463b      	mov	r3, r7
 800159c:	4619      	mov	r1, r3
 800159e:	4810      	ldr	r0, [pc, #64]	@ (80015e0 <MLX90614_ReadTemps+0x80>)
 80015a0:	f000 fe07 	bl	80021b2 <mlx90614_getObject1>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <MLX90614_ReadTemps+0x52>
        object_temp_C = object;
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	4a10      	ldr	r2, [pc, #64]	@ (80015f0 <MLX90614_ReadTemps+0x90>)
 80015ae:	6013      	str	r3, [r2, #0]
 80015b0:	e007      	b.n	80015c2 <MLX90614_ReadTemps+0x62>
    } else { 
        object_error_count++; 
 80015b2:	4b10      	ldr	r3, [pc, #64]	@ (80015f4 <MLX90614_ReadTemps+0x94>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	3301      	adds	r3, #1
 80015b8:	4a0e      	ldr	r2, [pc, #56]	@ (80015f4 <MLX90614_ReadTemps+0x94>)
 80015ba:	6013      	str	r3, [r2, #0]
        mlx_connection_status=0; 
 80015bc:	4b0b      	ldr	r3, [pc, #44]	@ (80015ec <MLX90614_ReadTemps+0x8c>)
 80015be:	2200      	movs	r2, #0
 80015c0:	701a      	strb	r2, [r3, #0]
    }
    if(ambient_error_count==0 && object_error_count==0) {
 80015c2:	4b09      	ldr	r3, [pc, #36]	@ (80015e8 <MLX90614_ReadTemps+0x88>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d106      	bne.n	80015d8 <MLX90614_ReadTemps+0x78>
 80015ca:	4b0a      	ldr	r3, [pc, #40]	@ (80015f4 <MLX90614_ReadTemps+0x94>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d102      	bne.n	80015d8 <MLX90614_ReadTemps+0x78>
        mlx_connection_status=1;
 80015d2:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <MLX90614_ReadTemps+0x8c>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	701a      	strb	r2, [r3, #0]
    }
}
 80015d8:	bf00      	nop
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000280 	.word	0x20000280
 80015e4:	20000260 	.word	0x20000260
 80015e8:	2000026c 	.word	0x2000026c
 80015ec:	20000268 	.word	0x20000268
 80015f0:	20000264 	.word	0x20000264
 80015f4:	20000270 	.word	0x20000270

080015f8 <BNO055_ReadReg>:

// BNO055 Functions (backup'tan)
uint8_t BNO055_ReadReg(uint8_t reg, uint8_t* value){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af04      	add	r7, sp, #16
 80015fe:	4603      	mov	r3, r0
 8001600:	6039      	str	r1, [r7, #0]
 8001602:	71fb      	strb	r3, [r7, #7]
    return HAL_I2C_Mem_Read(&hi2c2, BNO055_ADDRESS, reg, 1, value, 1, 10);
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	b29a      	uxth	r2, r3
 8001608:	230a      	movs	r3, #10
 800160a:	9302      	str	r3, [sp, #8]
 800160c:	2301      	movs	r3, #1
 800160e:	9301      	str	r3, [sp, #4]
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	2301      	movs	r3, #1
 8001616:	2150      	movs	r1, #80	@ 0x50
 8001618:	4803      	ldr	r0, [pc, #12]	@ (8001628 <BNO055_ReadReg+0x30>)
 800161a:	f001 fd71 	bl	8003100 <HAL_I2C_Mem_Read>
 800161e:	4603      	mov	r3, r0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000118 	.word	0x20000118

0800162c <BNO055_WriteReg>:

uint8_t BNO055_WriteReg(uint8_t reg, uint8_t value){
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af04      	add	r7, sp, #16
 8001632:	4603      	mov	r3, r0
 8001634:	460a      	mov	r2, r1
 8001636:	71fb      	strb	r3, [r7, #7]
 8001638:	4613      	mov	r3, r2
 800163a:	71bb      	strb	r3, [r7, #6]
    return HAL_I2C_Mem_Write(&hi2c2, BNO055_ADDRESS, reg, 1, &value, 1, 10);
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	b29a      	uxth	r2, r3
 8001640:	230a      	movs	r3, #10
 8001642:	9302      	str	r3, [sp, #8]
 8001644:	2301      	movs	r3, #1
 8001646:	9301      	str	r3, [sp, #4]
 8001648:	1dbb      	adds	r3, r7, #6
 800164a:	9300      	str	r3, [sp, #0]
 800164c:	2301      	movs	r3, #1
 800164e:	2150      	movs	r1, #80	@ 0x50
 8001650:	4803      	ldr	r0, [pc, #12]	@ (8001660 <BNO055_WriteReg+0x34>)
 8001652:	f001 fc41 	bl	8002ed8 <HAL_I2C_Mem_Write>
 8001656:	4603      	mov	r3, r0
}
 8001658:	4618      	mov	r0, r3
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20000118 	.word	0x20000118

08001664 <BNO055_ReadRegs>:

uint8_t BNO055_ReadRegs(uint8_t reg, uint8_t* buf, uint8_t len){
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af04      	add	r7, sp, #16
 800166a:	4603      	mov	r3, r0
 800166c:	6039      	str	r1, [r7, #0]
 800166e:	71fb      	strb	r3, [r7, #7]
 8001670:	4613      	mov	r3, r2
 8001672:	71bb      	strb	r3, [r7, #6]
    return HAL_I2C_Mem_Read(&hi2c2, BNO055_ADDRESS, reg, 1, buf, len, 10);
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	b29a      	uxth	r2, r3
 8001678:	79bb      	ldrb	r3, [r7, #6]
 800167a:	b29b      	uxth	r3, r3
 800167c:	210a      	movs	r1, #10
 800167e:	9102      	str	r1, [sp, #8]
 8001680:	9301      	str	r3, [sp, #4]
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	2301      	movs	r3, #1
 8001688:	2150      	movs	r1, #80	@ 0x50
 800168a:	4804      	ldr	r0, [pc, #16]	@ (800169c <BNO055_ReadRegs+0x38>)
 800168c:	f001 fd38 	bl	8003100 <HAL_I2C_Mem_Read>
 8001690:	4603      	mov	r3, r0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000118 	.word	0x20000118

080016a0 <BNO055_Init>:

uint8_t BNO055_Init(void){
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
    uint8_t id=0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	71fb      	strb	r3, [r7, #7]
    if(BNO055_ReadReg(BNO055_CHIP_ID_ADDR, &id)!=HAL_OK) return 0;
 80016aa:	1dfb      	adds	r3, r7, #7
 80016ac:	4619      	mov	r1, r3
 80016ae:	2000      	movs	r0, #0
 80016b0:	f7ff ffa2 	bl	80015f8 <BNO055_ReadReg>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <BNO055_Init+0x1e>
 80016ba:	2300      	movs	r3, #0
 80016bc:	e032      	b.n	8001724 <BNO055_Init+0x84>
    if(id!=0xA0) return 0;
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	2ba0      	cmp	r3, #160	@ 0xa0
 80016c2:	d001      	beq.n	80016c8 <BNO055_Init+0x28>
 80016c4:	2300      	movs	r3, #0
 80016c6:	e02d      	b.n	8001724 <BNO055_Init+0x84>
    if(BNO055_WriteReg(BNO055_PWR_MODE_ADDR, BNO055_POWER_MODE_NORMAL)!=HAL_OK) return 0;
 80016c8:	2100      	movs	r1, #0
 80016ca:	203e      	movs	r0, #62	@ 0x3e
 80016cc:	f7ff ffae 	bl	800162c <BNO055_WriteReg>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <BNO055_Init+0x3a>
 80016d6:	2300      	movs	r3, #0
 80016d8:	e024      	b.n	8001724 <BNO055_Init+0x84>
    HAL_Delay(1);
 80016da:	2001      	movs	r0, #1
 80016dc:	f001 f800 	bl	80026e0 <HAL_Delay>
    if(BNO055_WriteReg(BNO055_OPR_MODE_ADDR, BNO055_OPERATION_MODE_CONFIG)!=HAL_OK) return 0;
 80016e0:	2100      	movs	r1, #0
 80016e2:	203d      	movs	r0, #61	@ 0x3d
 80016e4:	f7ff ffa2 	bl	800162c <BNO055_WriteReg>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <BNO055_Init+0x52>
 80016ee:	2300      	movs	r3, #0
 80016f0:	e018      	b.n	8001724 <BNO055_Init+0x84>
    HAL_Delay(1);
 80016f2:	2001      	movs	r0, #1
 80016f4:	f000 fff4 	bl	80026e0 <HAL_Delay>
    if(BNO055_WriteReg(BNO055_PAGE_ID_ADDR,0)!=HAL_OK) return 0;
 80016f8:	2100      	movs	r1, #0
 80016fa:	2007      	movs	r0, #7
 80016fc:	f7ff ff96 	bl	800162c <BNO055_WriteReg>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <BNO055_Init+0x6a>
 8001706:	2300      	movs	r3, #0
 8001708:	e00c      	b.n	8001724 <BNO055_Init+0x84>
    if(BNO055_WriteReg(BNO055_OPR_MODE_ADDR, BNO055_OPERATION_MODE_ACCONLY)!=HAL_OK) return 0;
 800170a:	2101      	movs	r1, #1
 800170c:	203d      	movs	r0, #61	@ 0x3d
 800170e:	f7ff ff8d 	bl	800162c <BNO055_WriteReg>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <BNO055_Init+0x7c>
 8001718:	2300      	movs	r3, #0
 800171a:	e003      	b.n	8001724 <BNO055_Init+0x84>
    HAL_Delay(1);
 800171c:	2001      	movs	r0, #1
 800171e:	f000 ffdf 	bl	80026e0 <HAL_Delay>
    return 1;
 8001722:	2301      	movs	r3, #1
}
 8001724:	4618      	mov	r0, r3
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <BNO055_ReadAccel>:

void BNO055_ReadAccel(void){
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
    uint8_t buf[6];
    if(BNO055_ReadRegs(BNO055_ACCEL_DATA_X_LSB_ADDR, buf, 6)==HAL_OK){
 8001732:	463b      	mov	r3, r7
 8001734:	2206      	movs	r2, #6
 8001736:	4619      	mov	r1, r3
 8001738:	2008      	movs	r0, #8
 800173a:	f7ff ff93 	bl	8001664 <BNO055_ReadRegs>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d11d      	bne.n	8001780 <BNO055_ReadAccel+0x54>
        accel_data.x = (int16_t)(buf[1]<<8 | buf[0]);
 8001744:	787b      	ldrb	r3, [r7, #1]
 8001746:	b21b      	sxth	r3, r3
 8001748:	021b      	lsls	r3, r3, #8
 800174a:	b21a      	sxth	r2, r3
 800174c:	783b      	ldrb	r3, [r7, #0]
 800174e:	b21b      	sxth	r3, r3
 8001750:	4313      	orrs	r3, r2
 8001752:	b21a      	sxth	r2, r3
 8001754:	4b0c      	ldr	r3, [pc, #48]	@ (8001788 <BNO055_ReadAccel+0x5c>)
 8001756:	801a      	strh	r2, [r3, #0]
        accel_data.y = (int16_t)(buf[3]<<8 | buf[2]);
 8001758:	78fb      	ldrb	r3, [r7, #3]
 800175a:	b21b      	sxth	r3, r3
 800175c:	021b      	lsls	r3, r3, #8
 800175e:	b21a      	sxth	r2, r3
 8001760:	78bb      	ldrb	r3, [r7, #2]
 8001762:	b21b      	sxth	r3, r3
 8001764:	4313      	orrs	r3, r2
 8001766:	b21a      	sxth	r2, r3
 8001768:	4b07      	ldr	r3, [pc, #28]	@ (8001788 <BNO055_ReadAccel+0x5c>)
 800176a:	805a      	strh	r2, [r3, #2]
        accel_data.z = (int16_t)(buf[5]<<8 | buf[4]);
 800176c:	797b      	ldrb	r3, [r7, #5]
 800176e:	b21b      	sxth	r3, r3
 8001770:	021b      	lsls	r3, r3, #8
 8001772:	b21a      	sxth	r2, r3
 8001774:	793b      	ldrb	r3, [r7, #4]
 8001776:	b21b      	sxth	r3, r3
 8001778:	4313      	orrs	r3, r2
 800177a:	b21a      	sxth	r2, r3
 800177c:	4b02      	ldr	r3, [pc, #8]	@ (8001788 <BNO055_ReadAccel+0x5c>)
 800177e:	809a      	strh	r2, [r3, #4]
    }
}
 8001780:	bf00      	nop
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20000274 	.word	0x20000274

0800178c <IR_Sensor_Check>:

// IR Sensor Check Function (backup'tan)
void IR_Sensor_Check(void){
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
    uint8_t state = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_5);
 8001792:	2120      	movs	r1, #32
 8001794:	480e      	ldr	r0, [pc, #56]	@ (80017d0 <IR_Sensor_Check+0x44>)
 8001796:	f001 fad1 	bl	8002d3c <HAL_GPIO_ReadPin>
 800179a:	4603      	mov	r3, r0
 800179c:	71fb      	strb	r3, [r7, #7]
    ir_sensor_state = state;
 800179e:	4a0d      	ldr	r2, [pc, #52]	@ (80017d4 <IR_Sensor_Check+0x48>)
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	7013      	strb	r3, [r2, #0]
    if(last_ir_sensor_state != state){
 80017a4:	4b0c      	ldr	r3, [pc, #48]	@ (80017d8 <IR_Sensor_Check+0x4c>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	79fa      	ldrb	r2, [r7, #7]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d007      	beq.n	80017c0 <IR_Sensor_Check+0x34>
        if(state == 0) ir_object_count++;
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d104      	bne.n	80017c0 <IR_Sensor_Check+0x34>
 80017b6:	4b09      	ldr	r3, [pc, #36]	@ (80017dc <IR_Sensor_Check+0x50>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	3301      	adds	r3, #1
 80017bc:	4a07      	ldr	r2, [pc, #28]	@ (80017dc <IR_Sensor_Check+0x50>)
 80017be:	6013      	str	r3, [r2, #0]
    }
    last_ir_sensor_state = state;
 80017c0:	4a05      	ldr	r2, [pc, #20]	@ (80017d8 <IR_Sensor_Check+0x4c>)
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	7013      	strb	r3, [r2, #0]
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40021400 	.word	0x40021400
 80017d4:	2000027a 	.word	0x2000027a
 80017d8:	20000001 	.word	0x20000001
 80017dc:	2000027c 	.word	0x2000027c

080017e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017e4:	b09f      	sub	sp, #124	@ 0x7c
 80017e6:	af14      	add	r7, sp, #80	@ 0x50
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80017e8:	f000 fafa 	bl	8001de0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017ec:	f000 ff1b 	bl	8002626 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017f0:	f000 f906 	bl	8001a00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017f4:	f000 fa76 	bl	8001ce4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80017f8:	f000 f96e 	bl	8001ad8 <MX_I2C1_Init>
  MX_I2C2_Init();
 80017fc:	f000 f9ac 	bl	8001b58 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8001800:	f000 fa40 	bl	8001c84 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001804:	f000 f9e8 	bl	8001bd8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  
  // MLX90614 sensor instance başlatma (backup'tan)
  mlx90614_init(&mlx90614_sensor_instance, &hi2c1, 0xB4);
 8001808:	22b4      	movs	r2, #180	@ 0xb4
 800180a:	4967      	ldr	r1, [pc, #412]	@ (80019a8 <main+0x1c8>)
 800180c:	4867      	ldr	r0, [pc, #412]	@ (80019ac <main+0x1cc>)
 800180e:	f000 fb95 	bl	8001f3c <mlx90614_init>

  sprintf(uart_buffer, "=== Çoklu Sensör Sistemi Başlatılıyor ===\r\n");
 8001812:	4967      	ldr	r1, [pc, #412]	@ (80019b0 <main+0x1d0>)
 8001814:	4867      	ldr	r0, [pc, #412]	@ (80019b4 <main+0x1d4>)
 8001816:	f004 fa4b 	bl	8005cb0 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)uart_buffer,strlen(uart_buffer),10);
 800181a:	4866      	ldr	r0, [pc, #408]	@ (80019b4 <main+0x1d4>)
 800181c:	f7fe fcf8 	bl	8000210 <strlen>
 8001820:	4603      	mov	r3, r0
 8001822:	b29a      	uxth	r2, r3
 8001824:	230a      	movs	r3, #10
 8001826:	4963      	ldr	r1, [pc, #396]	@ (80019b4 <main+0x1d4>)
 8001828:	4863      	ldr	r0, [pc, #396]	@ (80019b8 <main+0x1d8>)
 800182a:	f003 fd89 	bl	8005340 <HAL_UART_Transmit>

  // INA226 başlatma ve test (I2C2)
  INA226_INIT();
 800182e:	f7ff fafb 	bl	8000e28 <INA226_INIT>
  INA226_SetCalibration(0.002, 10.0); // 2mOhm shunt, 10A max current
 8001832:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8001836:	ed9f 0a61 	vldr	s0, [pc, #388]	@ 80019bc <main+0x1dc>
 800183a:	f7ff fb87 	bl	8000f4c <INA226_SetCalibration>
  HAL_Delay(1);
 800183e:	2001      	movs	r0, #1
 8001840:	f000 ff4e 	bl	80026e0 <HAL_Delay>
  INA226_Test_Simple();
 8001844:	f7ff fda4 	bl	8001390 <INA226_Test_Simple>

  // BNO055 başlatma (I2C2)
  if(!BNO055_Init()){
 8001848:	f7ff ff2a 	bl	80016a0 <BNO055_Init>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10e      	bne.n	8001870 <main+0x90>
      sprintf(uart_buffer, "BNO055 başlatılamadı!\r\n");
 8001852:	495b      	ldr	r1, [pc, #364]	@ (80019c0 <main+0x1e0>)
 8001854:	4857      	ldr	r0, [pc, #348]	@ (80019b4 <main+0x1d4>)
 8001856:	f004 fa2b 	bl	8005cb0 <siprintf>
      HAL_UART_Transmit(&huart2,(uint8_t*)uart_buffer,strlen(uart_buffer),10);
 800185a:	4856      	ldr	r0, [pc, #344]	@ (80019b4 <main+0x1d4>)
 800185c:	f7fe fcd8 	bl	8000210 <strlen>
 8001860:	4603      	mov	r3, r0
 8001862:	b29a      	uxth	r2, r3
 8001864:	230a      	movs	r3, #10
 8001866:	4953      	ldr	r1, [pc, #332]	@ (80019b4 <main+0x1d4>)
 8001868:	4853      	ldr	r0, [pc, #332]	@ (80019b8 <main+0x1d8>)
 800186a:	f003 fd69 	bl	8005340 <HAL_UART_Transmit>
 800186e:	e00d      	b.n	800188c <main+0xac>
  } else {
      sprintf(uart_buffer, "BNO055 başlatıldı.\r\n");
 8001870:	4954      	ldr	r1, [pc, #336]	@ (80019c4 <main+0x1e4>)
 8001872:	4850      	ldr	r0, [pc, #320]	@ (80019b4 <main+0x1d4>)
 8001874:	f004 fa1c 	bl	8005cb0 <siprintf>
      HAL_UART_Transmit(&huart2,(uint8_t*)uart_buffer,strlen(uart_buffer),10);
 8001878:	484e      	ldr	r0, [pc, #312]	@ (80019b4 <main+0x1d4>)
 800187a:	f7fe fcc9 	bl	8000210 <strlen>
 800187e:	4603      	mov	r3, r0
 8001880:	b29a      	uxth	r2, r3
 8001882:	230a      	movs	r3, #10
 8001884:	494b      	ldr	r1, [pc, #300]	@ (80019b4 <main+0x1d4>)
 8001886:	484c      	ldr	r0, [pc, #304]	@ (80019b8 <main+0x1d8>)
 8001888:	f003 fd5a 	bl	8005340 <HAL_UART_Transmit>
  }

  // Encoder başlatma (TIM3 kullanıyoruz) - DOKUNMUYORUZ
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800188c:	213c      	movs	r1, #60	@ 0x3c
 800188e:	484e      	ldr	r0, [pc, #312]	@ (80019c8 <main+0x1e8>)
 8001890:	f003 fb20 	bl	8004ed4 <HAL_TIM_Encoder_Start>
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8001894:	2201      	movs	r2, #1
 8001896:	2101      	movs	r1, #1
 8001898:	484c      	ldr	r0, [pc, #304]	@ (80019cc <main+0x1ec>)
 800189a:	f001 fa67 	bl	8002d6c <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    
    // Sensör okuma döngüsü (backup'tan)
    INA226_Test_Simple();
 800189e:	f7ff fd77 	bl	8001390 <INA226_Test_Simple>
    INA226_ReadAllValues_Fixed();
 80018a2:	f7ff fdf3 	bl	800148c <INA226_ReadAllValues_Fixed>
    MLX90614_ReadTemps();
 80018a6:	f7ff fe5b 	bl	8001560 <MLX90614_ReadTemps>
    BNO055_ReadAccel();
 80018aa:	f7ff ff3f 	bl	800172c <BNO055_ReadAccel>
    Encoder_Update();
 80018ae:	f7ff fbe1 	bl	8001074 <Encoder_Update>
    IR_Sensor_Check();
 80018b2:	f7ff ff6b 	bl	800178c <IR_Sensor_Check>
    
    // Debug output (backup format)
    sprintf(uart_buffer,
 80018b6:	4b46      	ldr	r3, [pc, #280]	@ (80019d0 <main+0x1f0>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7fe fe64 	bl	8000588 <__aeabi_f2d>
 80018c0:	e9c7 0108 	strd	r0, r1, [r7, #32]
 80018c4:	4b43      	ldr	r3, [pc, #268]	@ (80019d4 <main+0x1f4>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fe5d 	bl	8000588 <__aeabi_f2d>
 80018ce:	4682      	mov	sl, r0
 80018d0:	468b      	mov	fp, r1
 80018d2:	4b41      	ldr	r3, [pc, #260]	@ (80019d8 <main+0x1f8>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7fe fe56 	bl	8000588 <__aeabi_f2d>
 80018dc:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80018e0:	4b3e      	ldr	r3, [pc, #248]	@ (80019dc <main+0x1fc>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7fe fe4f 	bl	8000588 <__aeabi_f2d>
 80018ea:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80018ee:	4b3c      	ldr	r3, [pc, #240]	@ (80019e0 <main+0x200>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7fe fe48 	bl	8000588 <__aeabi_f2d>
 80018f8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80018fc:	4b39      	ldr	r3, [pc, #228]	@ (80019e4 <main+0x204>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	f7fe fe41 	bl	8000588 <__aeabi_f2d>
 8001906:	4680      	mov	r8, r0
 8001908:	4689      	mov	r9, r1
        "BNO055 Accel: X=%d Y=%d Z=%d\r\n"
        "Encoder: Pos=%.2fmm Speed=%.2fmm/s\r\n"
        "IR Sensor: State=%d ObjectCount=%lu\r\n\n",
        ina226_bus_voltage, ina226_shunt_voltage, ina226_current_ma, ina226_power_mw,
        ambient_temp_C, object_temp_C,
        accel_data.x, accel_data.y, accel_data.z,
 800190a:	4b37      	ldr	r3, [pc, #220]	@ (80019e8 <main+0x208>)
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	b21b      	sxth	r3, r3
    sprintf(uart_buffer,
 8001910:	607b      	str	r3, [r7, #4]
        accel_data.x, accel_data.y, accel_data.z,
 8001912:	4b35      	ldr	r3, [pc, #212]	@ (80019e8 <main+0x208>)
 8001914:	885b      	ldrh	r3, [r3, #2]
 8001916:	b21b      	sxth	r3, r3
    sprintf(uart_buffer,
 8001918:	603b      	str	r3, [r7, #0]
        accel_data.x, accel_data.y, accel_data.z,
 800191a:	4b33      	ldr	r3, [pc, #204]	@ (80019e8 <main+0x208>)
 800191c:	889b      	ldrh	r3, [r3, #4]
 800191e:	b21b      	sxth	r3, r3
    sprintf(uart_buffer,
 8001920:	461e      	mov	r6, r3
 8001922:	4b32      	ldr	r3, [pc, #200]	@ (80019ec <main+0x20c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe fe2e 	bl	8000588 <__aeabi_f2d>
 800192c:	4604      	mov	r4, r0
 800192e:	460d      	mov	r5, r1
 8001930:	4b2f      	ldr	r3, [pc, #188]	@ (80019f0 <main+0x210>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f7fe fe27 	bl	8000588 <__aeabi_f2d>
 800193a:	4b2e      	ldr	r3, [pc, #184]	@ (80019f4 <main+0x214>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	b2db      	uxtb	r3, r3
 8001940:	461a      	mov	r2, r3
 8001942:	4b2d      	ldr	r3, [pc, #180]	@ (80019f8 <main+0x218>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	9313      	str	r3, [sp, #76]	@ 0x4c
 8001948:	9212      	str	r2, [sp, #72]	@ 0x48
 800194a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800194e:	e9cd 450e 	strd	r4, r5, [sp, #56]	@ 0x38
 8001952:	960c      	str	r6, [sp, #48]	@ 0x30
 8001954:	6839      	ldr	r1, [r7, #0]
 8001956:	910b      	str	r1, [sp, #44]	@ 0x2c
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	930a      	str	r3, [sp, #40]	@ 0x28
 800195c:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8001960:	ed97 7b02 	vldr	d7, [r7, #8]
 8001964:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001968:	ed97 7b04 	vldr	d7, [r7, #16]
 800196c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001970:	ed97 7b06 	vldr	d7, [r7, #24]
 8001974:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001978:	e9cd ab00 	strd	sl, fp, [sp]
 800197c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001980:	491e      	ldr	r1, [pc, #120]	@ (80019fc <main+0x21c>)
 8001982:	480c      	ldr	r0, [pc, #48]	@ (80019b4 <main+0x1d4>)
 8001984:	f004 f994 	bl	8005cb0 <siprintf>
        encoder_total_distance, encoder_speed,
        ir_sensor_state, ir_object_count
    );

    HAL_UART_Transmit(&huart2,(uint8_t*)uart_buffer,strlen(uart_buffer),10);
 8001988:	480a      	ldr	r0, [pc, #40]	@ (80019b4 <main+0x1d4>)
 800198a:	f7fe fc41 	bl	8000210 <strlen>
 800198e:	4603      	mov	r3, r0
 8001990:	b29a      	uxth	r2, r3
 8001992:	230a      	movs	r3, #10
 8001994:	4907      	ldr	r1, [pc, #28]	@ (80019b4 <main+0x1d4>)
 8001996:	4808      	ldr	r0, [pc, #32]	@ (80019b8 <main+0x1d8>)
 8001998:	f003 fcd2 	bl	8005340 <HAL_UART_Transmit>

    HAL_Delay(10); // 10ms döngü gecikmesi
 800199c:	200a      	movs	r0, #10
 800199e:	f000 fe9f 	bl	80026e0 <HAL_Delay>
    INA226_Test_Simple();
 80019a2:	bf00      	nop
 80019a4:	e77b      	b.n	800189e <main+0xbe>
 80019a6:	bf00      	nop
 80019a8:	200000c4 	.word	0x200000c4
 80019ac:	20000280 	.word	0x20000280
 80019b0:	080066c0 	.word	0x080066c0
 80019b4:	200002bc 	.word	0x200002bc
 80019b8:	200001b8 	.word	0x200001b8
 80019bc:	3b03126f 	.word	0x3b03126f
 80019c0:	080066f4 	.word	0x080066f4
 80019c4:	08006710 	.word	0x08006710
 80019c8:	2000016c 	.word	0x2000016c
 80019cc:	40020400 	.word	0x40020400
 80019d0:	20000240 	.word	0x20000240
 80019d4:	20000244 	.word	0x20000244
 80019d8:	20000250 	.word	0x20000250
 80019dc:	20000254 	.word	0x20000254
 80019e0:	20000260 	.word	0x20000260
 80019e4:	20000264 	.word	0x20000264
 80019e8:	20000274 	.word	0x20000274
 80019ec:	200000b4 	.word	0x200000b4
 80019f0:	200000b0 	.word	0x200000b0
 80019f4:	2000027a 	.word	0x2000027a
 80019f8:	2000027c 	.word	0x2000027c
 80019fc:	08006728 	.word	0x08006728

08001a00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b094      	sub	sp, #80	@ 0x50
 8001a04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a06:	f107 0320 	add.w	r3, r7, #32
 8001a0a:	2230      	movs	r2, #48	@ 0x30
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f004 f970 	bl	8005cf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a14:	f107 030c 	add.w	r3, r7, #12
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a24:	4b2a      	ldr	r3, [pc, #168]	@ (8001ad0 <SystemClock_Config+0xd0>)
 8001a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a28:	4a29      	ldr	r2, [pc, #164]	@ (8001ad0 <SystemClock_Config+0xd0>)
 8001a2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a30:	4b27      	ldr	r3, [pc, #156]	@ (8001ad0 <SystemClock_Config+0xd0>)
 8001a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a38:	60bb      	str	r3, [r7, #8]
 8001a3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a3c:	4b25      	ldr	r3, [pc, #148]	@ (8001ad4 <SystemClock_Config+0xd4>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a24      	ldr	r2, [pc, #144]	@ (8001ad4 <SystemClock_Config+0xd4>)
 8001a42:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	4b22      	ldr	r3, [pc, #136]	@ (8001ad4 <SystemClock_Config+0xd4>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a50:	607b      	str	r3, [r7, #4]
 8001a52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a54:	2302      	movs	r3, #2
 8001a56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a5c:	2310      	movs	r3, #16
 8001a5e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a60:	2302      	movs	r3, #2
 8001a62:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a64:	2300      	movs	r3, #0
 8001a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a68:	2308      	movs	r3, #8
 8001a6a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001a6c:	23d8      	movs	r3, #216	@ 0xd8
 8001a6e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a70:	2302      	movs	r3, #2
 8001a72:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001a74:	2302      	movs	r3, #2
 8001a76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a78:	f107 0320 	add.w	r3, r7, #32
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f002 f909 	bl	8003c94 <HAL_RCC_OscConfig>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001a88:	f000 f9d6 	bl	8001e38 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001a8c:	f002 f8b2 	bl	8003bf4 <HAL_PWREx_EnableOverDrive>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001a96:	f000 f9cf 	bl	8001e38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a9a:	230f      	movs	r3, #15
 8001a9c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001aa6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001aaa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001aac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ab0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001ab2:	f107 030c 	add.w	r3, r7, #12
 8001ab6:	2107      	movs	r1, #7
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f002 fb8f 	bl	80041dc <HAL_RCC_ClockConfig>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001ac4:	f000 f9b8 	bl	8001e38 <Error_Handler>
  }
}
 8001ac8:	bf00      	nop
 8001aca:	3750      	adds	r7, #80	@ 0x50
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	40007000 	.word	0x40007000

08001ad8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001adc:	4b1b      	ldr	r3, [pc, #108]	@ (8001b4c <MX_I2C1_Init+0x74>)
 8001ade:	4a1c      	ldr	r2, [pc, #112]	@ (8001b50 <MX_I2C1_Init+0x78>)
 8001ae0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8001ae2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b4c <MX_I2C1_Init+0x74>)
 8001ae4:	4a1b      	ldr	r2, [pc, #108]	@ (8001b54 <MX_I2C1_Init+0x7c>)
 8001ae6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001ae8:	4b18      	ldr	r3, [pc, #96]	@ (8001b4c <MX_I2C1_Init+0x74>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aee:	4b17      	ldr	r3, [pc, #92]	@ (8001b4c <MX_I2C1_Init+0x74>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001af4:	4b15      	ldr	r3, [pc, #84]	@ (8001b4c <MX_I2C1_Init+0x74>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001afa:	4b14      	ldr	r3, [pc, #80]	@ (8001b4c <MX_I2C1_Init+0x74>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b00:	4b12      	ldr	r3, [pc, #72]	@ (8001b4c <MX_I2C1_Init+0x74>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b06:	4b11      	ldr	r3, [pc, #68]	@ (8001b4c <MX_I2C1_Init+0x74>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b4c <MX_I2C1_Init+0x74>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b12:	480e      	ldr	r0, [pc, #56]	@ (8001b4c <MX_I2C1_Init+0x74>)
 8001b14:	f001 f944 	bl	8002da0 <HAL_I2C_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001b1e:	f000 f98b 	bl	8001e38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b22:	2100      	movs	r1, #0
 8001b24:	4809      	ldr	r0, [pc, #36]	@ (8001b4c <MX_I2C1_Init+0x74>)
 8001b26:	f001 ffcd 	bl	8003ac4 <HAL_I2CEx_ConfigAnalogFilter>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b30:	f000 f982 	bl	8001e38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b34:	2100      	movs	r1, #0
 8001b36:	4805      	ldr	r0, [pc, #20]	@ (8001b4c <MX_I2C1_Init+0x74>)
 8001b38:	f002 f80f 	bl	8003b5a <HAL_I2CEx_ConfigDigitalFilter>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b42:	f000 f979 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	200000c4 	.word	0x200000c4
 8001b50:	40005400 	.word	0x40005400
 8001b54:	20404768 	.word	0x20404768

08001b58 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bcc <MX_I2C2_Init+0x74>)
 8001b5e:	4a1c      	ldr	r2, [pc, #112]	@ (8001bd0 <MX_I2C2_Init+0x78>)
 8001b60:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 8001b62:	4b1a      	ldr	r3, [pc, #104]	@ (8001bcc <MX_I2C2_Init+0x74>)
 8001b64:	4a1b      	ldr	r2, [pc, #108]	@ (8001bd4 <MX_I2C2_Init+0x7c>)
 8001b66:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001b68:	4b18      	ldr	r3, [pc, #96]	@ (8001bcc <MX_I2C2_Init+0x74>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b6e:	4b17      	ldr	r3, [pc, #92]	@ (8001bcc <MX_I2C2_Init+0x74>)
 8001b70:	2201      	movs	r2, #1
 8001b72:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b74:	4b15      	ldr	r3, [pc, #84]	@ (8001bcc <MX_I2C2_Init+0x74>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001b7a:	4b14      	ldr	r3, [pc, #80]	@ (8001bcc <MX_I2C2_Init+0x74>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b80:	4b12      	ldr	r3, [pc, #72]	@ (8001bcc <MX_I2C2_Init+0x74>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b86:	4b11      	ldr	r3, [pc, #68]	@ (8001bcc <MX_I2C2_Init+0x74>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bcc <MX_I2C2_Init+0x74>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b92:	480e      	ldr	r0, [pc, #56]	@ (8001bcc <MX_I2C2_Init+0x74>)
 8001b94:	f001 f904 	bl	8002da0 <HAL_I2C_Init>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001b9e:	f000 f94b 	bl	8001e38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	4809      	ldr	r0, [pc, #36]	@ (8001bcc <MX_I2C2_Init+0x74>)
 8001ba6:	f001 ff8d 	bl	8003ac4 <HAL_I2CEx_ConfigAnalogFilter>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001bb0:	f000 f942 	bl	8001e38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	4805      	ldr	r0, [pc, #20]	@ (8001bcc <MX_I2C2_Init+0x74>)
 8001bb8:	f001 ffcf 	bl	8003b5a <HAL_I2CEx_ConfigDigitalFilter>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001bc2:	f000 f939 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000118 	.word	0x20000118
 8001bd0:	40005800 	.word	0x40005800
 8001bd4:	20404768 	.word	0x20404768

08001bd8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08c      	sub	sp, #48	@ 0x30
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bde:	f107 030c 	add.w	r3, r7, #12
 8001be2:	2224      	movs	r2, #36	@ 0x24
 8001be4:	2100      	movs	r1, #0
 8001be6:	4618      	mov	r0, r3
 8001be8:	f004 f884 	bl	8005cf4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bec:	463b      	mov	r3, r7
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	605a      	str	r2, [r3, #4]
 8001bf4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bf6:	4b21      	ldr	r3, [pc, #132]	@ (8001c7c <MX_TIM3_Init+0xa4>)
 8001bf8:	4a21      	ldr	r2, [pc, #132]	@ (8001c80 <MX_TIM3_Init+0xa8>)
 8001bfa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001bfc:	4b1f      	ldr	r3, [pc, #124]	@ (8001c7c <MX_TIM3_Init+0xa4>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c02:	4b1e      	ldr	r3, [pc, #120]	@ (8001c7c <MX_TIM3_Init+0xa4>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c08:	4b1c      	ldr	r3, [pc, #112]	@ (8001c7c <MX_TIM3_Init+0xa4>)
 8001c0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c0e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c10:	4b1a      	ldr	r3, [pc, #104]	@ (8001c7c <MX_TIM3_Init+0xa4>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c16:	4b19      	ldr	r3, [pc, #100]	@ (8001c7c <MX_TIM3_Init+0xa4>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c20:	2300      	movs	r3, #0
 8001c22:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c24:	2301      	movs	r3, #1
 8001c26:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c30:	2300      	movs	r3, #0
 8001c32:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c34:	2301      	movs	r3, #1
 8001c36:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001c40:	f107 030c 	add.w	r3, r7, #12
 8001c44:	4619      	mov	r1, r3
 8001c46:	480d      	ldr	r0, [pc, #52]	@ (8001c7c <MX_TIM3_Init+0xa4>)
 8001c48:	f003 f89e 	bl	8004d88 <HAL_TIM_Encoder_Init>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001c52:	f000 f8f1 	bl	8001e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c56:	2300      	movs	r3, #0
 8001c58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c5e:	463b      	mov	r3, r7
 8001c60:	4619      	mov	r1, r3
 8001c62:	4806      	ldr	r0, [pc, #24]	@ (8001c7c <MX_TIM3_Init+0xa4>)
 8001c64:	f003 fa90 	bl	8005188 <HAL_TIMEx_MasterConfigSynchronization>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001c6e:	f000 f8e3 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c72:	bf00      	nop
 8001c74:	3730      	adds	r7, #48	@ 0x30
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	2000016c 	.word	0x2000016c
 8001c80:	40000400 	.word	0x40000400

08001c84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c88:	4b14      	ldr	r3, [pc, #80]	@ (8001cdc <MX_USART2_UART_Init+0x58>)
 8001c8a:	4a15      	ldr	r2, [pc, #84]	@ (8001ce0 <MX_USART2_UART_Init+0x5c>)
 8001c8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c8e:	4b13      	ldr	r3, [pc, #76]	@ (8001cdc <MX_USART2_UART_Init+0x58>)
 8001c90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c96:	4b11      	ldr	r3, [pc, #68]	@ (8001cdc <MX_USART2_UART_Init+0x58>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001cdc <MX_USART2_UART_Init+0x58>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8001cdc <MX_USART2_UART_Init+0x58>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8001cdc <MX_USART2_UART_Init+0x58>)
 8001caa:	220c      	movs	r2, #12
 8001cac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cae:	4b0b      	ldr	r3, [pc, #44]	@ (8001cdc <MX_USART2_UART_Init+0x58>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cb4:	4b09      	ldr	r3, [pc, #36]	@ (8001cdc <MX_USART2_UART_Init+0x58>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cba:	4b08      	ldr	r3, [pc, #32]	@ (8001cdc <MX_USART2_UART_Init+0x58>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cc0:	4b06      	ldr	r3, [pc, #24]	@ (8001cdc <MX_USART2_UART_Init+0x58>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cc6:	4805      	ldr	r0, [pc, #20]	@ (8001cdc <MX_USART2_UART_Init+0x58>)
 8001cc8:	f003 faec 	bl	80052a4 <HAL_UART_Init>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001cd2:	f000 f8b1 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	200001b8 	.word	0x200001b8
 8001ce0:	40004400 	.word	0x40004400

08001ce4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08c      	sub	sp, #48	@ 0x30
 8001ce8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cea:	f107 031c 	add.w	r3, r7, #28
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	605a      	str	r2, [r3, #4]
 8001cf4:	609a      	str	r2, [r3, #8]
 8001cf6:	60da      	str	r2, [r3, #12]
 8001cf8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cfa:	4b36      	ldr	r3, [pc, #216]	@ (8001dd4 <MX_GPIO_Init+0xf0>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfe:	4a35      	ldr	r2, [pc, #212]	@ (8001dd4 <MX_GPIO_Init+0xf0>)
 8001d00:	f043 0304 	orr.w	r3, r3, #4
 8001d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d06:	4b33      	ldr	r3, [pc, #204]	@ (8001dd4 <MX_GPIO_Init+0xf0>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0a:	f003 0304 	and.w	r3, r3, #4
 8001d0e:	61bb      	str	r3, [r7, #24]
 8001d10:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d12:	4b30      	ldr	r3, [pc, #192]	@ (8001dd4 <MX_GPIO_Init+0xf0>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d16:	4a2f      	ldr	r2, [pc, #188]	@ (8001dd4 <MX_GPIO_Init+0xf0>)
 8001d18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d1e:	4b2d      	ldr	r3, [pc, #180]	@ (8001dd4 <MX_GPIO_Init+0xf0>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d26:	617b      	str	r3, [r7, #20]
 8001d28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2a:	4b2a      	ldr	r3, [pc, #168]	@ (8001dd4 <MX_GPIO_Init+0xf0>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2e:	4a29      	ldr	r2, [pc, #164]	@ (8001dd4 <MX_GPIO_Init+0xf0>)
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d36:	4b27      	ldr	r3, [pc, #156]	@ (8001dd4 <MX_GPIO_Init+0xf0>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d42:	4b24      	ldr	r3, [pc, #144]	@ (8001dd4 <MX_GPIO_Init+0xf0>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d46:	4a23      	ldr	r2, [pc, #140]	@ (8001dd4 <MX_GPIO_Init+0xf0>)
 8001d48:	f043 0302 	orr.w	r3, r3, #2
 8001d4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d4e:	4b21      	ldr	r3, [pc, #132]	@ (8001dd4 <MX_GPIO_Init+0xf0>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001dd4 <MX_GPIO_Init+0xf0>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5e:	4a1d      	ldr	r2, [pc, #116]	@ (8001dd4 <MX_GPIO_Init+0xf0>)
 8001d60:	f043 0308 	orr.w	r3, r3, #8
 8001d64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d66:	4b1b      	ldr	r3, [pc, #108]	@ (8001dd4 <MX_GPIO_Init+0xf0>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	60bb      	str	r3, [r7, #8]
 8001d70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d72:	4b18      	ldr	r3, [pc, #96]	@ (8001dd4 <MX_GPIO_Init+0xf0>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d76:	4a17      	ldr	r2, [pc, #92]	@ (8001dd4 <MX_GPIO_Init+0xf0>)
 8001d78:	f043 0320 	orr.w	r3, r3, #32
 8001d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d7e:	4b15      	ldr	r3, [pc, #84]	@ (8001dd4 <MX_GPIO_Init+0xf0>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d82:	f003 0320 	and.w	r3, r3, #32
 8001d86:	607b      	str	r3, [r7, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]

  // LED'ler için GPIOB başlatma (backup'tan)
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001d90:	4811      	ldr	r0, [pc, #68]	@ (8001dd8 <MX_GPIO_Init+0xf4>)
 8001d92:	f000 ffeb 	bl	8002d6c <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin|LD3_Pin;
 8001d96:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001d9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da4:	2300      	movs	r3, #0
 8001da6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da8:	f107 031c 	add.w	r3, r7, #28
 8001dac:	4619      	mov	r1, r3
 8001dae:	480a      	ldr	r0, [pc, #40]	@ (8001dd8 <MX_GPIO_Init+0xf4>)
 8001db0:	f000 fe18 	bl	80029e4 <HAL_GPIO_Init>

  // IR sensör için GPIOF Pin 5 (backup'tan)
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001db4:	2320      	movs	r3, #32
 8001db6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001db8:	2300      	movs	r3, #0
 8001dba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001dc0:	f107 031c 	add.w	r3, r7, #28
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4805      	ldr	r0, [pc, #20]	@ (8001ddc <MX_GPIO_Init+0xf8>)
 8001dc8:	f000 fe0c 	bl	80029e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001dcc:	bf00      	nop
 8001dce:	3730      	adds	r7, #48	@ 0x30
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40020400 	.word	0x40020400
 8001ddc:	40021400 	.word	0x40021400

08001de0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001de6:	463b      	mov	r3, r7
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001df2:	f000 fd7f 	bl	80028f4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001df6:	2301      	movs	r3, #1
 8001df8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001e02:	231f      	movs	r3, #31
 8001e04:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001e06:	2387      	movs	r3, #135	@ 0x87
 8001e08:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001e12:	2301      	movs	r3, #1
 8001e14:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001e16:	2301      	movs	r3, #1
 8001e18:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001e22:	463b      	mov	r3, r7
 8001e24:	4618      	mov	r0, r3
 8001e26:	f000 fd9d 	bl	8002964 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001e2a:	2004      	movs	r0, #4
 8001e2c:	f000 fd7a 	bl	8002924 <HAL_MPU_Enable>

}
 8001e30:	bf00      	nop
 8001e32:	3710      	adds	r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e3c:	b672      	cpsid	i
}
 8001e3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e40:	bf00      	nop
 8001e42:	e7fd      	b.n	8001e40 <Error_Handler+0x8>

08001e44 <mlx90614_read16_internal>:
    return crc;
}


static bool mlx90614_read16_internal(MLX90614_t* sensor, uint8_t address, int16_t *data)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b08a      	sub	sp, #40	@ 0x28
 8001e48:	af04      	add	r7, sp, #16
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	607a      	str	r2, [r7, #4]
 8001e50:	72fb      	strb	r3, [r7, #11]
    uint8_t d[3];
    if(HAL_I2C_Mem_Read(sensor->hi2c, sensor->device_address, address, I2C_MEMADD_SIZE_8BIT, d, 3, 100) != HAL_OK)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
 8001e5a:	7afb      	ldrb	r3, [r7, #11]
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	2364      	movs	r3, #100	@ 0x64
 8001e60:	9302      	str	r3, [sp, #8]
 8001e62:	2303      	movs	r3, #3
 8001e64:	9301      	str	r3, [sp, #4]
 8001e66:	f107 0314 	add.w	r3, r7, #20
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	f001 f947 	bl	8003100 <HAL_I2C_Mem_Read>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <mlx90614_read16_internal+0x38>
        return false;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	e00a      	b.n	8001e92 <mlx90614_read16_internal+0x4e>
    *data = d[0] | (d[1] << 8);
 8001e7c:	7d3b      	ldrb	r3, [r7, #20]
 8001e7e:	b21a      	sxth	r2, r3
 8001e80:	7d7b      	ldrb	r3, [r7, #21]
 8001e82:	b21b      	sxth	r3, r3
 8001e84:	021b      	lsls	r3, r3, #8
 8001e86:	b21b      	sxth	r3, r3
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	b21a      	sxth	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	801a      	strh	r2, [r3, #0]
    return true;
 8001e90:	2301      	movs	r3, #1
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <mlx90614_calcTemperature>:
    }
    return rawTemp;
}

float mlx90614_calcTemperature(MLX90614_t* sensor, int16_t rawTemp)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	807b      	strh	r3, [r7, #2]
    float retTemp;
    if(sensor->unit == MLX90614_UNIT_RAW)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d108      	bne.n	8001ec2 <mlx90614_calcTemperature+0x26>
    {
        retTemp = (float)rawTemp;
 8001eb0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001eb4:	ee07 3a90 	vmov	s15, r3
 8001eb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ebc:	edc7 7a03 	vstr	s15, [r7, #12]
 8001ec0:	e02b      	b.n	8001f1a <mlx90614_calcTemperature+0x7e>
    }
    else
    {
        retTemp = (float)(rawTemp) * 0.02f;
 8001ec2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001ec6:	ee07 3a90 	vmov	s15, r3
 8001eca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ece:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001f30 <mlx90614_calcTemperature+0x94>
 8001ed2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ed6:	edc7 7a03 	vstr	s15, [r7, #12]
        if(sensor->unit != MLX90614_UNIT_K)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d007      	beq.n	8001ef2 <mlx90614_calcTemperature+0x56>
            retTemp -= 273.15f;
 8001ee2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ee6:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001f34 <mlx90614_calcTemperature+0x98>
 8001eea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001eee:	edc7 7a03 	vstr	s15, [r7, #12]
        if(sensor->unit == MLX90614_UNIT_F)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b03      	cmp	r3, #3
 8001ef8:	d10f      	bne.n	8001f1a <mlx90614_calcTemperature+0x7e>
            retTemp = retTemp * 9.0f / 5.0f + 32.0f;
 8001efa:	edd7 7a03 	vldr	s15, [r7, #12]
 8001efe:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 8001f02:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f06:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8001f0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f0e:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001f38 <mlx90614_calcTemperature+0x9c>
 8001f12:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f16:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    return retTemp;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	ee07 3a90 	vmov	s15, r3
}
 8001f20:	eeb0 0a67 	vmov.f32	s0, s15
 8001f24:	3714      	adds	r7, #20
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	3ca3d70a 	.word	0x3ca3d70a
 8001f34:	43889333 	.word	0x43889333
 8001f38:	42000000 	.word	0x42000000

08001f3c <mlx90614_init>:

bool mlx90614_init(MLX90614_t* sensor, I2C_HandleTypeDef* hi2c, uint16_t devAddress)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	4613      	mov	r3, r2
 8001f48:	80fb      	strh	r3, [r7, #6]
    memset(sensor, 0, sizeof(MLX90614_t));
 8001f4a:	223c      	movs	r2, #60	@ 0x3c
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f003 fed0 	bl	8005cf4 <memset>
    sensor->unit = MLX90614_UNIT_C;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2202      	movs	r2, #2
 8001f58:	701a      	strb	r2, [r3, #0]
    sensor->hi2c = hi2c;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	68ba      	ldr	r2, [r7, #8]
 8001f5e:	635a      	str	r2, [r3, #52]	@ 0x34
    sensor->device_address = devAddress;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	88fa      	ldrh	r2, [r7, #6]
 8001f64:	871a      	strh	r2, [r3, #56]	@ 0x38
    if(HAL_I2C_IsDeviceReady(hi2c, devAddress, 1, 100) != HAL_OK)
 8001f66:	88f9      	ldrh	r1, [r7, #6]
 8001f68:	2364      	movs	r3, #100	@ 0x64
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	68b8      	ldr	r0, [r7, #8]
 8001f6e:	f001 f9e1 	bl	8003334 <HAL_I2C_IsDeviceReady>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <mlx90614_init+0x40>
        return false;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	e03f      	b.n	8001ffc <mlx90614_init+0xc0>
    if(!mlx90614_read16_internal(sensor, MLX90614_REGISTER_CONFIG, (int16_t*)&sensor->configReg)) return false;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	3330      	adds	r3, #48	@ 0x30
 8001f80:	461a      	mov	r2, r3
 8001f82:	2125      	movs	r1, #37	@ 0x25
 8001f84:	68f8      	ldr	r0, [r7, #12]
 8001f86:	f7ff ff5d 	bl	8001e44 <mlx90614_read16_internal>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	f083 0301 	eor.w	r3, r3, #1
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <mlx90614_init+0x5e>
 8001f96:	2300      	movs	r3, #0
 8001f98:	e030      	b.n	8001ffc <mlx90614_init+0xc0>
    if(!mlx90614_readID(sensor, NULL)) return false;
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f000 f831 	bl	8002004 <mlx90614_readID>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	f083 0301 	eor.w	r3, r3, #1
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <mlx90614_init+0x76>
 8001fae:	2300      	movs	r3, #0
 8001fb0:	e024      	b.n	8001ffc <mlx90614_init+0xc0>
    if(!mlx90614_getEmissivity(sensor, NULL)) return false;
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	f000 f85f 	bl	8002078 <mlx90614_getEmissivity>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	f083 0301 	eor.w	r3, r3, #1
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <mlx90614_init+0x8e>
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	e018      	b.n	8001ffc <mlx90614_init+0xc0>
    if(!mlx90614_getMax(sensor, NULL)) return false;
 8001fca:	2100      	movs	r1, #0
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	f000 f881 	bl	80020d4 <mlx90614_getMax>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	f083 0301 	eor.w	r3, r3, #1
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <mlx90614_init+0xa6>
 8001fde:	2300      	movs	r3, #0
 8001fe0:	e00c      	b.n	8001ffc <mlx90614_init+0xc0>
    if(!mlx90614_getMin(sensor, NULL)) return false;
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f000 f89a 	bl	800211e <mlx90614_getMin>
 8001fea:	4603      	mov	r3, r0
 8001fec:	f083 0301 	eor.w	r3, r3, #1
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <mlx90614_init+0xbe>
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	e000      	b.n	8001ffc <mlx90614_init+0xc0>
    return true;
 8001ffa:	2301      	movs	r3, #1
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3710      	adds	r7, #16
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <mlx90614_readID>:
{
    sensor->unit = MLX90614_UNIT_;
}

bool mlx90614_readID(MLX90614_t* sensor, int16_t *id)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
    for(int i=0; i<4; i++)
 800200e:	2300      	movs	r3, #0
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	e028      	b.n	8002066 <mlx90614_readID+0x62>
    {
        int16_t temp = 0;
 8002014:	2300      	movs	r3, #0
 8002016:	817b      	strh	r3, [r7, #10]
        if(!mlx90614_read16_internal(sensor, MLX90614_REGISTER_ID0 + i, &temp))
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	b2db      	uxtb	r3, r3
 800201c:	333c      	adds	r3, #60	@ 0x3c
 800201e:	b2db      	uxtb	r3, r3
 8002020:	f107 020a 	add.w	r2, r7, #10
 8002024:	4619      	mov	r1, r3
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7ff ff0c 	bl	8001e44 <mlx90614_read16_internal>
 800202c:	4603      	mov	r3, r0
 800202e:	f083 0301 	eor.w	r3, r3, #1
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <mlx90614_readID+0x38>
            return false;
 8002038:	2300      	movs	r3, #0
 800203a:	e018      	b.n	800206e <mlx90614_readID+0x6a>
        if(id != NULL)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d006      	beq.n	8002050 <mlx90614_readID+0x4c>
            id[i] = (uint16_t)temp;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	4413      	add	r3, r2
 800204a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800204e:	801a      	strh	r2, [r3, #0]
        sensor->id[i] = (uint16_t)temp;
 8002050:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002054:	b299      	uxth	r1, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	3214      	adds	r2, #20
 800205c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(int i=0; i<4; i++)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	3301      	adds	r3, #1
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2b03      	cmp	r3, #3
 800206a:	ddd3      	ble.n	8002014 <mlx90614_readID+0x10>
    }
    return true;
 800206c:	2301      	movs	r3, #1
}
 800206e:	4618      	mov	r0, r3
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
	...

08002078 <mlx90614_getEmissivity>:

bool mlx90614_getEmissivity(MLX90614_t* sensor, float *emissivity)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
    if(mlx90614_read16_internal(sensor, MLX90614_REGISTER_KE, &sensor->rawEmissivity))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	3302      	adds	r3, #2
 8002086:	461a      	mov	r2, r3
 8002088:	2124      	movs	r1, #36	@ 0x24
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7ff feda 	bl	8001e44 <mlx90614_read16_internal>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d017      	beq.n	80020c6 <mlx90614_getEmissivity+0x4e>
    {
        sensor->emissivity = ((float)((uint16_t)sensor->rawEmissivity)) / 65535.0f;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800209c:	b29b      	uxth	r3, r3
 800209e:	ee07 3a90 	vmov	s15, r3
 80020a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020a6:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80020d0 <mlx90614_getEmissivity+0x58>
 80020aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	edc3 7a04 	vstr	s15, [r3, #16]
        if(emissivity != NULL)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <mlx90614_getEmissivity+0x4a>
            *emissivity = sensor->emissivity;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	691a      	ldr	r2, [r3, #16]
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	601a      	str	r2, [r3, #0]
        return true;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e000      	b.n	80020c8 <mlx90614_getEmissivity+0x50>
    }
    return false;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	477fff00 	.word	0x477fff00

080020d4 <mlx90614_getMax>:
    sensor->rawMin = mlx90614_calcRawTemp(sensor, minTemp);
    return mlx90614_write16_internal(sensor, MLX90614_REGISTER_TOMIN, sensor->rawMin);
}

bool mlx90614_getMax(MLX90614_t* sensor, float *maxTemp)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
    if(mlx90614_read16_internal(sensor, MLX90614_REGISTER_TOMAX, &sensor->rawMax))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	330a      	adds	r3, #10
 80020e2:	461a      	mov	r2, r3
 80020e4:	2120      	movs	r1, #32
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7ff feac 	bl	8001e44 <mlx90614_read16_internal>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d010      	beq.n	8002114 <mlx90614_getMax+0x40>
    {
        if(maxTemp != NULL)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00b      	beq.n	8002110 <mlx90614_getMax+0x3c>
            *maxTemp = mlx90614_calcTemperature(sensor, sensor->rawMax);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80020fe:	4619      	mov	r1, r3
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7ff fecb 	bl	8001e9c <mlx90614_calcTemperature>
 8002106:	eef0 7a40 	vmov.f32	s15, s0
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	edc3 7a00 	vstr	s15, [r3]
        return true;
 8002110:	2301      	movs	r3, #1
 8002112:	e000      	b.n	8002116 <mlx90614_getMax+0x42>
    }
    return false;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <mlx90614_getMin>:

bool mlx90614_getMin(MLX90614_t* sensor, float *minTemp)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
 8002126:	6039      	str	r1, [r7, #0]
    if(mlx90614_read16_internal(sensor, MLX90614_REGISTER_TOMIN, &sensor->rawMin))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	330c      	adds	r3, #12
 800212c:	461a      	mov	r2, r3
 800212e:	2121      	movs	r1, #33	@ 0x21
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f7ff fe87 	bl	8001e44 <mlx90614_read16_internal>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d010      	beq.n	800215e <mlx90614_getMin+0x40>
    {
        if(minTemp != NULL)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00b      	beq.n	800215a <mlx90614_getMin+0x3c>
            *minTemp = mlx90614_calcTemperature(sensor, sensor->rawMin);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002148:	4619      	mov	r1, r3
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7ff fea6 	bl	8001e9c <mlx90614_calcTemperature>
 8002150:	eef0 7a40 	vmov.f32	s15, s0
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	edc3 7a00 	vstr	s15, [r3]
        return true;
 800215a:	2301      	movs	r3, #1
 800215c:	e000      	b.n	8002160 <mlx90614_getMin+0x42>
    }
    return false;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <mlx90614_getAmbient>:

bool mlx90614_getAmbient(MLX90614_t* sensor, float *ambientTemp)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
    if(mlx90614_read16_internal(sensor, MLX90614_REGISTER_TA, &sensor->rawAmbient))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	3304      	adds	r3, #4
 8002176:	461a      	mov	r2, r3
 8002178:	2106      	movs	r1, #6
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7ff fe62 	bl	8001e44 <mlx90614_read16_internal>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d010      	beq.n	80021a8 <mlx90614_getAmbient+0x40>
    {
        if(ambientTemp != NULL)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00b      	beq.n	80021a4 <mlx90614_getAmbient+0x3c>
            *ambientTemp = mlx90614_calcTemperature(sensor, sensor->rawAmbient);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002192:	4619      	mov	r1, r3
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff fe81 	bl	8001e9c <mlx90614_calcTemperature>
 800219a:	eef0 7a40 	vmov.f32	s15, s0
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	edc3 7a00 	vstr	s15, [r3]
        return true;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e000      	b.n	80021aa <mlx90614_getAmbient+0x42>
    }
    return false;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <mlx90614_getObject1>:

bool mlx90614_getObject1(MLX90614_t* sensor, float *objectTemp)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
 80021ba:	6039      	str	r1, [r7, #0]
    if(mlx90614_read16_internal(sensor, MLX90614_REGISTER_TOBJ1, &sensor->rawObject1))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3306      	adds	r3, #6
 80021c0:	461a      	mov	r2, r3
 80021c2:	2107      	movs	r1, #7
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f7ff fe3d 	bl	8001e44 <mlx90614_read16_internal>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d017      	beq.n	8002200 <mlx90614_getObject1+0x4e>
    {
        if(sensor->rawObject1 & 0x8000) return false;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	da01      	bge.n	80021de <mlx90614_getObject1+0x2c>
 80021da:	2300      	movs	r3, #0
 80021dc:	e011      	b.n	8002202 <mlx90614_getObject1+0x50>
        if(objectTemp != NULL)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00b      	beq.n	80021fc <mlx90614_getObject1+0x4a>
            *objectTemp = mlx90614_calcTemperature(sensor, sensor->rawObject1);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80021ea:	4619      	mov	r1, r3
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f7ff fe55 	bl	8001e9c <mlx90614_calcTemperature>
 80021f2:	eef0 7a40 	vmov.f32	s15, s0
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	edc3 7a00 	vstr	s15, [r3]
        return true;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e000      	b.n	8002202 <mlx90614_getObject1+0x50>
    }
    return false;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
	...

0800220c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002212:	4b0f      	ldr	r3, [pc, #60]	@ (8002250 <HAL_MspInit+0x44>)
 8002214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002216:	4a0e      	ldr	r2, [pc, #56]	@ (8002250 <HAL_MspInit+0x44>)
 8002218:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800221c:	6413      	str	r3, [r2, #64]	@ 0x40
 800221e:	4b0c      	ldr	r3, [pc, #48]	@ (8002250 <HAL_MspInit+0x44>)
 8002220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002222:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002226:	607b      	str	r3, [r7, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800222a:	4b09      	ldr	r3, [pc, #36]	@ (8002250 <HAL_MspInit+0x44>)
 800222c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800222e:	4a08      	ldr	r2, [pc, #32]	@ (8002250 <HAL_MspInit+0x44>)
 8002230:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002234:	6453      	str	r3, [r2, #68]	@ 0x44
 8002236:	4b06      	ldr	r3, [pc, #24]	@ (8002250 <HAL_MspInit+0x44>)
 8002238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800223a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800223e:	603b      	str	r3, [r7, #0]
 8002240:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	40023800 	.word	0x40023800

08002254 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b0ac      	sub	sp, #176	@ 0xb0
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800225c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	605a      	str	r2, [r3, #4]
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	60da      	str	r2, [r3, #12]
 800226a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800226c:	f107 0318 	add.w	r3, r7, #24
 8002270:	2284      	movs	r2, #132	@ 0x84
 8002272:	2100      	movs	r1, #0
 8002274:	4618      	mov	r0, r3
 8002276:	f003 fd3d 	bl	8005cf4 <memset>
  if(hi2c->Instance==I2C1)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a43      	ldr	r2, [pc, #268]	@ (800238c <HAL_I2C_MspInit+0x138>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d13d      	bne.n	8002300 <HAL_I2C_MspInit+0xac>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002284:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002288:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800228a:	2300      	movs	r3, #0
 800228c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800228e:	f107 0318 	add.w	r3, r7, #24
 8002292:	4618      	mov	r0, r3
 8002294:	f002 f988 	bl	80045a8 <HAL_RCCEx_PeriphCLKConfig>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800229e:	f7ff fdcb 	bl	8001e38 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022a2:	4b3b      	ldr	r3, [pc, #236]	@ (8002390 <HAL_I2C_MspInit+0x13c>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a6:	4a3a      	ldr	r2, [pc, #232]	@ (8002390 <HAL_I2C_MspInit+0x13c>)
 80022a8:	f043 0302 	orr.w	r3, r3, #2
 80022ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ae:	4b38      	ldr	r3, [pc, #224]	@ (8002390 <HAL_I2C_MspInit+0x13c>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	617b      	str	r3, [r7, #20]
 80022b8:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80022ba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80022be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022c2:	2312      	movs	r3, #18
 80022c4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ce:	2303      	movs	r3, #3
 80022d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022d4:	2304      	movs	r3, #4
 80022d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022da:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80022de:	4619      	mov	r1, r3
 80022e0:	482c      	ldr	r0, [pc, #176]	@ (8002394 <HAL_I2C_MspInit+0x140>)
 80022e2:	f000 fb7f 	bl	80029e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022e6:	4b2a      	ldr	r3, [pc, #168]	@ (8002390 <HAL_I2C_MspInit+0x13c>)
 80022e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ea:	4a29      	ldr	r2, [pc, #164]	@ (8002390 <HAL_I2C_MspInit+0x13c>)
 80022ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80022f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80022f2:	4b27      	ldr	r3, [pc, #156]	@ (8002390 <HAL_I2C_MspInit+0x13c>)
 80022f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022fa:	613b      	str	r3, [r7, #16]
 80022fc:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 80022fe:	e041      	b.n	8002384 <HAL_I2C_MspInit+0x130>
  else if(hi2c->Instance==I2C2)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a24      	ldr	r2, [pc, #144]	@ (8002398 <HAL_I2C_MspInit+0x144>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d13c      	bne.n	8002384 <HAL_I2C_MspInit+0x130>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800230a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800230e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002310:	2300      	movs	r3, #0
 8002312:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002316:	f107 0318 	add.w	r3, r7, #24
 800231a:	4618      	mov	r0, r3
 800231c:	f002 f944 	bl	80045a8 <HAL_RCCEx_PeriphCLKConfig>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8002326:	f7ff fd87 	bl	8001e38 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800232a:	4b19      	ldr	r3, [pc, #100]	@ (8002390 <HAL_I2C_MspInit+0x13c>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232e:	4a18      	ldr	r2, [pc, #96]	@ (8002390 <HAL_I2C_MspInit+0x13c>)
 8002330:	f043 0320 	orr.w	r3, r3, #32
 8002334:	6313      	str	r3, [r2, #48]	@ 0x30
 8002336:	4b16      	ldr	r3, [pc, #88]	@ (8002390 <HAL_I2C_MspInit+0x13c>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233a:	f003 0320 	and.w	r3, r3, #32
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002342:	2303      	movs	r3, #3
 8002344:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002348:	2312      	movs	r3, #18
 800234a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234e:	2300      	movs	r3, #0
 8002350:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002354:	2303      	movs	r3, #3
 8002356:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800235a:	2304      	movs	r3, #4
 800235c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002360:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002364:	4619      	mov	r1, r3
 8002366:	480d      	ldr	r0, [pc, #52]	@ (800239c <HAL_I2C_MspInit+0x148>)
 8002368:	f000 fb3c 	bl	80029e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800236c:	4b08      	ldr	r3, [pc, #32]	@ (8002390 <HAL_I2C_MspInit+0x13c>)
 800236e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002370:	4a07      	ldr	r2, [pc, #28]	@ (8002390 <HAL_I2C_MspInit+0x13c>)
 8002372:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002376:	6413      	str	r3, [r2, #64]	@ 0x40
 8002378:	4b05      	ldr	r3, [pc, #20]	@ (8002390 <HAL_I2C_MspInit+0x13c>)
 800237a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002380:	60bb      	str	r3, [r7, #8]
 8002382:	68bb      	ldr	r3, [r7, #8]
}
 8002384:	bf00      	nop
 8002386:	37b0      	adds	r7, #176	@ 0xb0
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40005400 	.word	0x40005400
 8002390:	40023800 	.word	0x40023800
 8002394:	40020400 	.word	0x40020400
 8002398:	40005800 	.word	0x40005800
 800239c:	40021400 	.word	0x40021400

080023a0 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08a      	sub	sp, #40	@ 0x28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a8:	f107 0314 	add.w	r3, r7, #20
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a17      	ldr	r2, [pc, #92]	@ (800241c <HAL_TIM_Encoder_MspInit+0x7c>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d127      	bne.n	8002412 <HAL_TIM_Encoder_MspInit+0x72>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023c2:	4b17      	ldr	r3, [pc, #92]	@ (8002420 <HAL_TIM_Encoder_MspInit+0x80>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c6:	4a16      	ldr	r2, [pc, #88]	@ (8002420 <HAL_TIM_Encoder_MspInit+0x80>)
 80023c8:	f043 0302 	orr.w	r3, r3, #2
 80023cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80023ce:	4b14      	ldr	r3, [pc, #80]	@ (8002420 <HAL_TIM_Encoder_MspInit+0x80>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	613b      	str	r3, [r7, #16]
 80023d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023da:	4b11      	ldr	r3, [pc, #68]	@ (8002420 <HAL_TIM_Encoder_MspInit+0x80>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023de:	4a10      	ldr	r2, [pc, #64]	@ (8002420 <HAL_TIM_Encoder_MspInit+0x80>)
 80023e0:	f043 0304 	orr.w	r3, r3, #4
 80023e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002420 <HAL_TIM_Encoder_MspInit+0x80>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ea:	f003 0304 	and.w	r3, r3, #4
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023f2:	23c0      	movs	r3, #192	@ 0xc0
 80023f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f6:	2302      	movs	r3, #2
 80023f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fa:	2300      	movs	r3, #0
 80023fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fe:	2300      	movs	r3, #0
 8002400:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002402:	2302      	movs	r3, #2
 8002404:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002406:	f107 0314 	add.w	r3, r7, #20
 800240a:	4619      	mov	r1, r3
 800240c:	4805      	ldr	r0, [pc, #20]	@ (8002424 <HAL_TIM_Encoder_MspInit+0x84>)
 800240e:	f000 fae9 	bl	80029e4 <HAL_GPIO_Init>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002412:	bf00      	nop
 8002414:	3728      	adds	r7, #40	@ 0x28
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40000400 	.word	0x40000400
 8002420:	40023800 	.word	0x40023800
 8002424:	40020800 	.word	0x40020800

08002428 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b0aa      	sub	sp, #168	@ 0xa8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002430:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	60da      	str	r2, [r3, #12]
 800243e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002440:	f107 0310 	add.w	r3, r7, #16
 8002444:	2284      	movs	r2, #132	@ 0x84
 8002446:	2100      	movs	r1, #0
 8002448:	4618      	mov	r0, r3
 800244a:	f003 fc53 	bl	8005cf4 <memset>
  if(huart->Instance==USART2)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a21      	ldr	r2, [pc, #132]	@ (80024d8 <HAL_UART_MspInit+0xb0>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d13a      	bne.n	80024ce <HAL_UART_MspInit+0xa6>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002458:	2380      	movs	r3, #128	@ 0x80
 800245a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800245c:	2300      	movs	r3, #0
 800245e:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002460:	f107 0310 	add.w	r3, r7, #16
 8002464:	4618      	mov	r0, r3
 8002466:	f002 f89f 	bl	80045a8 <HAL_RCCEx_PeriphCLKConfig>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002470:	f7ff fce2 	bl	8001e38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002474:	4b19      	ldr	r3, [pc, #100]	@ (80024dc <HAL_UART_MspInit+0xb4>)
 8002476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002478:	4a18      	ldr	r2, [pc, #96]	@ (80024dc <HAL_UART_MspInit+0xb4>)
 800247a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800247e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002480:	4b16      	ldr	r3, [pc, #88]	@ (80024dc <HAL_UART_MspInit+0xb4>)
 8002482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002484:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800248c:	4b13      	ldr	r3, [pc, #76]	@ (80024dc <HAL_UART_MspInit+0xb4>)
 800248e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002490:	4a12      	ldr	r2, [pc, #72]	@ (80024dc <HAL_UART_MspInit+0xb4>)
 8002492:	f043 0301 	orr.w	r3, r3, #1
 8002496:	6313      	str	r3, [r2, #48]	@ 0x30
 8002498:	4b10      	ldr	r3, [pc, #64]	@ (80024dc <HAL_UART_MspInit+0xb4>)
 800249a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	60bb      	str	r3, [r7, #8]
 80024a2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80024a4:	230c      	movs	r3, #12
 80024a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024aa:	2302      	movs	r3, #2
 80024ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b0:	2300      	movs	r3, #0
 80024b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b6:	2303      	movs	r3, #3
 80024b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024bc:	2307      	movs	r3, #7
 80024be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c2:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80024c6:	4619      	mov	r1, r3
 80024c8:	4805      	ldr	r0, [pc, #20]	@ (80024e0 <HAL_UART_MspInit+0xb8>)
 80024ca:	f000 fa8b 	bl	80029e4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80024ce:	bf00      	nop
 80024d0:	37a8      	adds	r7, #168	@ 0xa8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40004400 	.word	0x40004400
 80024dc:	40023800 	.word	0x40023800
 80024e0:	40020000 	.word	0x40020000

080024e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024e8:	bf00      	nop
 80024ea:	e7fd      	b.n	80024e8 <NMI_Handler+0x4>

080024ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024f0:	bf00      	nop
 80024f2:	e7fd      	b.n	80024f0 <HardFault_Handler+0x4>

080024f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024f8:	bf00      	nop
 80024fa:	e7fd      	b.n	80024f8 <MemManage_Handler+0x4>

080024fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002500:	bf00      	nop
 8002502:	e7fd      	b.n	8002500 <BusFault_Handler+0x4>

08002504 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002508:	bf00      	nop
 800250a:	e7fd      	b.n	8002508 <UsageFault_Handler+0x4>

0800250c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800251a:	b480      	push	{r7}
 800251c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800251e:	bf00      	nop
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800252c:	bf00      	nop
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800253a:	f000 f8b1 	bl	80026a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
	...

08002544 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800254c:	4a14      	ldr	r2, [pc, #80]	@ (80025a0 <_sbrk+0x5c>)
 800254e:	4b15      	ldr	r3, [pc, #84]	@ (80025a4 <_sbrk+0x60>)
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002558:	4b13      	ldr	r3, [pc, #76]	@ (80025a8 <_sbrk+0x64>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d102      	bne.n	8002566 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002560:	4b11      	ldr	r3, [pc, #68]	@ (80025a8 <_sbrk+0x64>)
 8002562:	4a12      	ldr	r2, [pc, #72]	@ (80025ac <_sbrk+0x68>)
 8002564:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002566:	4b10      	ldr	r3, [pc, #64]	@ (80025a8 <_sbrk+0x64>)
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4413      	add	r3, r2
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	429a      	cmp	r2, r3
 8002572:	d207      	bcs.n	8002584 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002574:	f003 fbc6 	bl	8005d04 <__errno>
 8002578:	4603      	mov	r3, r0
 800257a:	220c      	movs	r2, #12
 800257c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800257e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002582:	e009      	b.n	8002598 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002584:	4b08      	ldr	r3, [pc, #32]	@ (80025a8 <_sbrk+0x64>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800258a:	4b07      	ldr	r3, [pc, #28]	@ (80025a8 <_sbrk+0x64>)
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4413      	add	r3, r2
 8002592:	4a05      	ldr	r2, [pc, #20]	@ (80025a8 <_sbrk+0x64>)
 8002594:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002596:	68fb      	ldr	r3, [r7, #12]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3718      	adds	r7, #24
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	20050000 	.word	0x20050000
 80025a4:	00000400 	.word	0x00000400
 80025a8:	200004bc 	.word	0x200004bc
 80025ac:	20000610 	.word	0x20000610

080025b0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025b4:	4b06      	ldr	r3, [pc, #24]	@ (80025d0 <SystemInit+0x20>)
 80025b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ba:	4a05      	ldr	r2, [pc, #20]	@ (80025d0 <SystemInit+0x20>)
 80025bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025c4:	bf00      	nop
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	e000ed00 	.word	0xe000ed00

080025d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800260c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025d8:	f7ff ffea 	bl	80025b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025dc:	480c      	ldr	r0, [pc, #48]	@ (8002610 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025de:	490d      	ldr	r1, [pc, #52]	@ (8002614 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002618 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025e4:	e002      	b.n	80025ec <LoopCopyDataInit>

080025e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ea:	3304      	adds	r3, #4

080025ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025f0:	d3f9      	bcc.n	80025e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025f2:	4a0a      	ldr	r2, [pc, #40]	@ (800261c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025f4:	4c0a      	ldr	r4, [pc, #40]	@ (8002620 <LoopFillZerobss+0x22>)
  movs r3, #0
 80025f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025f8:	e001      	b.n	80025fe <LoopFillZerobss>

080025fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025fc:	3204      	adds	r2, #4

080025fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002600:	d3fb      	bcc.n	80025fa <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8002602:	f003 fb85 	bl	8005d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002606:	f7ff f8eb 	bl	80017e0 <main>
  bx  lr    
 800260a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800260c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002610:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002614:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002618:	08006848 	.word	0x08006848
  ldr r2, =_sbss
 800261c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002620:	2000060c 	.word	0x2000060c

08002624 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002624:	e7fe      	b.n	8002624 <ADC_IRQHandler>

08002626 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800262a:	2003      	movs	r0, #3
 800262c:	f000 f92e 	bl	800288c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002630:	200f      	movs	r0, #15
 8002632:	f000 f805 	bl	8002640 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002636:	f7ff fde9 	bl	800220c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	bd80      	pop	{r7, pc}

08002640 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002648:	4b12      	ldr	r3, [pc, #72]	@ (8002694 <HAL_InitTick+0x54>)
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	4b12      	ldr	r3, [pc, #72]	@ (8002698 <HAL_InitTick+0x58>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	4619      	mov	r1, r3
 8002652:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002656:	fbb3 f3f1 	udiv	r3, r3, r1
 800265a:	fbb2 f3f3 	udiv	r3, r2, r3
 800265e:	4618      	mov	r0, r3
 8002660:	f000 f93b 	bl	80028da <HAL_SYSTICK_Config>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e00e      	b.n	800268c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b0f      	cmp	r3, #15
 8002672:	d80a      	bhi.n	800268a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002674:	2200      	movs	r2, #0
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800267c:	f000 f911 	bl	80028a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002680:	4a06      	ldr	r2, [pc, #24]	@ (800269c <HAL_InitTick+0x5c>)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002686:	2300      	movs	r3, #0
 8002688:	e000      	b.n	800268c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
}
 800268c:	4618      	mov	r0, r3
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	20000004 	.word	0x20000004
 8002698:	2000000c 	.word	0x2000000c
 800269c:	20000008 	.word	0x20000008

080026a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026a4:	4b06      	ldr	r3, [pc, #24]	@ (80026c0 <HAL_IncTick+0x20>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	461a      	mov	r2, r3
 80026aa:	4b06      	ldr	r3, [pc, #24]	@ (80026c4 <HAL_IncTick+0x24>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4413      	add	r3, r2
 80026b0:	4a04      	ldr	r2, [pc, #16]	@ (80026c4 <HAL_IncTick+0x24>)
 80026b2:	6013      	str	r3, [r2, #0]
}
 80026b4:	bf00      	nop
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	2000000c 	.word	0x2000000c
 80026c4:	200004c0 	.word	0x200004c0

080026c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  return uwTick;
 80026cc:	4b03      	ldr	r3, [pc, #12]	@ (80026dc <HAL_GetTick+0x14>)
 80026ce:	681b      	ldr	r3, [r3, #0]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	200004c0 	.word	0x200004c0

080026e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026e8:	f7ff ffee 	bl	80026c8 <HAL_GetTick>
 80026ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80026f8:	d005      	beq.n	8002706 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002724 <HAL_Delay+0x44>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	461a      	mov	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4413      	add	r3, r2
 8002704:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002706:	bf00      	nop
 8002708:	f7ff ffde 	bl	80026c8 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	429a      	cmp	r2, r3
 8002716:	d8f7      	bhi.n	8002708 <HAL_Delay+0x28>
  {
  }
}
 8002718:	bf00      	nop
 800271a:	bf00      	nop
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	2000000c 	.word	0x2000000c

08002728 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002738:	4b0b      	ldr	r3, [pc, #44]	@ (8002768 <__NVIC_SetPriorityGrouping+0x40>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800273e:	68ba      	ldr	r2, [r7, #8]
 8002740:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002744:	4013      	ands	r3, r2
 8002746:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002750:	4b06      	ldr	r3, [pc, #24]	@ (800276c <__NVIC_SetPriorityGrouping+0x44>)
 8002752:	4313      	orrs	r3, r2
 8002754:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002756:	4a04      	ldr	r2, [pc, #16]	@ (8002768 <__NVIC_SetPriorityGrouping+0x40>)
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	60d3      	str	r3, [r2, #12]
}
 800275c:	bf00      	nop
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	e000ed00 	.word	0xe000ed00
 800276c:	05fa0000 	.word	0x05fa0000

08002770 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002774:	4b04      	ldr	r3, [pc, #16]	@ (8002788 <__NVIC_GetPriorityGrouping+0x18>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	0a1b      	lsrs	r3, r3, #8
 800277a:	f003 0307 	and.w	r3, r3, #7
}
 800277e:	4618      	mov	r0, r3
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	e000ed00 	.word	0xe000ed00

0800278c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	6039      	str	r1, [r7, #0]
 8002796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279c:	2b00      	cmp	r3, #0
 800279e:	db0a      	blt.n	80027b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	490c      	ldr	r1, [pc, #48]	@ (80027d8 <__NVIC_SetPriority+0x4c>)
 80027a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027aa:	0112      	lsls	r2, r2, #4
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	440b      	add	r3, r1
 80027b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027b4:	e00a      	b.n	80027cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	4908      	ldr	r1, [pc, #32]	@ (80027dc <__NVIC_SetPriority+0x50>)
 80027bc:	79fb      	ldrb	r3, [r7, #7]
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	3b04      	subs	r3, #4
 80027c4:	0112      	lsls	r2, r2, #4
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	440b      	add	r3, r1
 80027ca:	761a      	strb	r2, [r3, #24]
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	e000e100 	.word	0xe000e100
 80027dc:	e000ed00 	.word	0xe000ed00

080027e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b089      	sub	sp, #36	@ 0x24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	f1c3 0307 	rsb	r3, r3, #7
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	bf28      	it	cs
 80027fe:	2304      	movcs	r3, #4
 8002800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	3304      	adds	r3, #4
 8002806:	2b06      	cmp	r3, #6
 8002808:	d902      	bls.n	8002810 <NVIC_EncodePriority+0x30>
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	3b03      	subs	r3, #3
 800280e:	e000      	b.n	8002812 <NVIC_EncodePriority+0x32>
 8002810:	2300      	movs	r3, #0
 8002812:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002814:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	43da      	mvns	r2, r3
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	401a      	ands	r2, r3
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002828:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	fa01 f303 	lsl.w	r3, r1, r3
 8002832:	43d9      	mvns	r1, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002838:	4313      	orrs	r3, r2
         );
}
 800283a:	4618      	mov	r0, r3
 800283c:	3724      	adds	r7, #36	@ 0x24
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
	...

08002848 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3b01      	subs	r3, #1
 8002854:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002858:	d301      	bcc.n	800285e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800285a:	2301      	movs	r3, #1
 800285c:	e00f      	b.n	800287e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800285e:	4a0a      	ldr	r2, [pc, #40]	@ (8002888 <SysTick_Config+0x40>)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3b01      	subs	r3, #1
 8002864:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002866:	210f      	movs	r1, #15
 8002868:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800286c:	f7ff ff8e 	bl	800278c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002870:	4b05      	ldr	r3, [pc, #20]	@ (8002888 <SysTick_Config+0x40>)
 8002872:	2200      	movs	r2, #0
 8002874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002876:	4b04      	ldr	r3, [pc, #16]	@ (8002888 <SysTick_Config+0x40>)
 8002878:	2207      	movs	r2, #7
 800287a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	e000e010 	.word	0xe000e010

0800288c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f7ff ff47 	bl	8002728 <__NVIC_SetPriorityGrouping>
}
 800289a:	bf00      	nop
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b086      	sub	sp, #24
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	4603      	mov	r3, r0
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	607a      	str	r2, [r7, #4]
 80028ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80028b0:	2300      	movs	r3, #0
 80028b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028b4:	f7ff ff5c 	bl	8002770 <__NVIC_GetPriorityGrouping>
 80028b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	68b9      	ldr	r1, [r7, #8]
 80028be:	6978      	ldr	r0, [r7, #20]
 80028c0:	f7ff ff8e 	bl	80027e0 <NVIC_EncodePriority>
 80028c4:	4602      	mov	r2, r0
 80028c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ca:	4611      	mov	r1, r2
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff ff5d 	bl	800278c <__NVIC_SetPriority>
}
 80028d2:	bf00      	nop
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b082      	sub	sp, #8
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7ff ffb0 	bl	8002848 <SysTick_Config>
 80028e8:	4603      	mov	r3, r0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
	...

080028f4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80028f8:	f3bf 8f5f 	dmb	sy
}
 80028fc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80028fe:	4b07      	ldr	r3, [pc, #28]	@ (800291c <HAL_MPU_Disable+0x28>)
 8002900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002902:	4a06      	ldr	r2, [pc, #24]	@ (800291c <HAL_MPU_Disable+0x28>)
 8002904:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002908:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800290a:	4b05      	ldr	r3, [pc, #20]	@ (8002920 <HAL_MPU_Disable+0x2c>)
 800290c:	2200      	movs	r2, #0
 800290e:	605a      	str	r2, [r3, #4]
}
 8002910:	bf00      	nop
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	e000ed00 	.word	0xe000ed00
 8002920:	e000ed90 	.word	0xe000ed90

08002924 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800292c:	4a0b      	ldr	r2, [pc, #44]	@ (800295c <HAL_MPU_Enable+0x38>)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f043 0301 	orr.w	r3, r3, #1
 8002934:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002936:	4b0a      	ldr	r3, [pc, #40]	@ (8002960 <HAL_MPU_Enable+0x3c>)
 8002938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293a:	4a09      	ldr	r2, [pc, #36]	@ (8002960 <HAL_MPU_Enable+0x3c>)
 800293c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002940:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002942:	f3bf 8f4f 	dsb	sy
}
 8002946:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002948:	f3bf 8f6f 	isb	sy
}
 800294c:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	e000ed90 	.word	0xe000ed90
 8002960:	e000ed00 	.word	0xe000ed00

08002964 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	785a      	ldrb	r2, [r3, #1]
 8002970:	4b1b      	ldr	r3, [pc, #108]	@ (80029e0 <HAL_MPU_ConfigRegion+0x7c>)
 8002972:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002974:	4b1a      	ldr	r3, [pc, #104]	@ (80029e0 <HAL_MPU_ConfigRegion+0x7c>)
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	4a19      	ldr	r2, [pc, #100]	@ (80029e0 <HAL_MPU_ConfigRegion+0x7c>)
 800297a:	f023 0301 	bic.w	r3, r3, #1
 800297e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002980:	4a17      	ldr	r2, [pc, #92]	@ (80029e0 <HAL_MPU_ConfigRegion+0x7c>)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	7b1b      	ldrb	r3, [r3, #12]
 800298c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	7adb      	ldrb	r3, [r3, #11]
 8002992:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002994:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	7a9b      	ldrb	r3, [r3, #10]
 800299a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800299c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	7b5b      	ldrb	r3, [r3, #13]
 80029a2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80029a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	7b9b      	ldrb	r3, [r3, #14]
 80029aa:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80029ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	7bdb      	ldrb	r3, [r3, #15]
 80029b2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80029b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	7a5b      	ldrb	r3, [r3, #9]
 80029ba:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80029bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	7a1b      	ldrb	r3, [r3, #8]
 80029c2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80029c4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	7812      	ldrb	r2, [r2, #0]
 80029ca:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80029cc:	4a04      	ldr	r2, [pc, #16]	@ (80029e0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80029ce:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80029d0:	6113      	str	r3, [r2, #16]
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	e000ed90 	.word	0xe000ed90

080029e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b089      	sub	sp, #36	@ 0x24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80029ee:	2300      	movs	r3, #0
 80029f0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80029f2:	2300      	movs	r3, #0
 80029f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80029f6:	2300      	movs	r3, #0
 80029f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80029fa:	2300      	movs	r3, #0
 80029fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80029fe:	2300      	movs	r3, #0
 8002a00:	61fb      	str	r3, [r7, #28]
 8002a02:	e175      	b.n	8002cf0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002a04:	2201      	movs	r2, #1
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	4013      	ands	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	f040 8164 	bne.w	8002cea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f003 0303 	and.w	r3, r3, #3
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d005      	beq.n	8002a3a <HAL_GPIO_Init+0x56>
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d130      	bne.n	8002a9c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	2203      	movs	r2, #3
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	68da      	ldr	r2, [r3, #12]
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a70:	2201      	movs	r2, #1
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	091b      	lsrs	r3, r3, #4
 8002a86:	f003 0201 	and.w	r2, r3, #1
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f003 0303 	and.w	r3, r3, #3
 8002aa4:	2b03      	cmp	r3, #3
 8002aa6:	d017      	beq.n	8002ad8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	2203      	movs	r2, #3
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4013      	ands	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f003 0303 	and.w	r3, r3, #3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d123      	bne.n	8002b2c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	08da      	lsrs	r2, r3, #3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3208      	adds	r2, #8
 8002aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002af0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	220f      	movs	r2, #15
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	43db      	mvns	r3, r3
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	4013      	ands	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	691a      	ldr	r2, [r3, #16]
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	08da      	lsrs	r2, r3, #3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	3208      	adds	r2, #8
 8002b26:	69b9      	ldr	r1, [r7, #24]
 8002b28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	2203      	movs	r2, #3
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4013      	ands	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f003 0203 	and.w	r2, r3, #3
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 80be 	beq.w	8002cea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b6e:	4b66      	ldr	r3, [pc, #408]	@ (8002d08 <HAL_GPIO_Init+0x324>)
 8002b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b72:	4a65      	ldr	r2, [pc, #404]	@ (8002d08 <HAL_GPIO_Init+0x324>)
 8002b74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b78:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b7a:	4b63      	ldr	r3, [pc, #396]	@ (8002d08 <HAL_GPIO_Init+0x324>)
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b82:	60fb      	str	r3, [r7, #12]
 8002b84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002b86:	4a61      	ldr	r2, [pc, #388]	@ (8002d0c <HAL_GPIO_Init+0x328>)
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	089b      	lsrs	r3, r3, #2
 8002b8c:	3302      	adds	r3, #2
 8002b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f003 0303 	and.w	r3, r3, #3
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	220f      	movs	r2, #15
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a58      	ldr	r2, [pc, #352]	@ (8002d10 <HAL_GPIO_Init+0x32c>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d037      	beq.n	8002c22 <HAL_GPIO_Init+0x23e>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a57      	ldr	r2, [pc, #348]	@ (8002d14 <HAL_GPIO_Init+0x330>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d031      	beq.n	8002c1e <HAL_GPIO_Init+0x23a>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a56      	ldr	r2, [pc, #344]	@ (8002d18 <HAL_GPIO_Init+0x334>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d02b      	beq.n	8002c1a <HAL_GPIO_Init+0x236>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a55      	ldr	r2, [pc, #340]	@ (8002d1c <HAL_GPIO_Init+0x338>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d025      	beq.n	8002c16 <HAL_GPIO_Init+0x232>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a54      	ldr	r2, [pc, #336]	@ (8002d20 <HAL_GPIO_Init+0x33c>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d01f      	beq.n	8002c12 <HAL_GPIO_Init+0x22e>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a53      	ldr	r2, [pc, #332]	@ (8002d24 <HAL_GPIO_Init+0x340>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d019      	beq.n	8002c0e <HAL_GPIO_Init+0x22a>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a52      	ldr	r2, [pc, #328]	@ (8002d28 <HAL_GPIO_Init+0x344>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d013      	beq.n	8002c0a <HAL_GPIO_Init+0x226>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a51      	ldr	r2, [pc, #324]	@ (8002d2c <HAL_GPIO_Init+0x348>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d00d      	beq.n	8002c06 <HAL_GPIO_Init+0x222>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a50      	ldr	r2, [pc, #320]	@ (8002d30 <HAL_GPIO_Init+0x34c>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d007      	beq.n	8002c02 <HAL_GPIO_Init+0x21e>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a4f      	ldr	r2, [pc, #316]	@ (8002d34 <HAL_GPIO_Init+0x350>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d101      	bne.n	8002bfe <HAL_GPIO_Init+0x21a>
 8002bfa:	2309      	movs	r3, #9
 8002bfc:	e012      	b.n	8002c24 <HAL_GPIO_Init+0x240>
 8002bfe:	230a      	movs	r3, #10
 8002c00:	e010      	b.n	8002c24 <HAL_GPIO_Init+0x240>
 8002c02:	2308      	movs	r3, #8
 8002c04:	e00e      	b.n	8002c24 <HAL_GPIO_Init+0x240>
 8002c06:	2307      	movs	r3, #7
 8002c08:	e00c      	b.n	8002c24 <HAL_GPIO_Init+0x240>
 8002c0a:	2306      	movs	r3, #6
 8002c0c:	e00a      	b.n	8002c24 <HAL_GPIO_Init+0x240>
 8002c0e:	2305      	movs	r3, #5
 8002c10:	e008      	b.n	8002c24 <HAL_GPIO_Init+0x240>
 8002c12:	2304      	movs	r3, #4
 8002c14:	e006      	b.n	8002c24 <HAL_GPIO_Init+0x240>
 8002c16:	2303      	movs	r3, #3
 8002c18:	e004      	b.n	8002c24 <HAL_GPIO_Init+0x240>
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	e002      	b.n	8002c24 <HAL_GPIO_Init+0x240>
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e000      	b.n	8002c24 <HAL_GPIO_Init+0x240>
 8002c22:	2300      	movs	r3, #0
 8002c24:	69fa      	ldr	r2, [r7, #28]
 8002c26:	f002 0203 	and.w	r2, r2, #3
 8002c2a:	0092      	lsls	r2, r2, #2
 8002c2c:	4093      	lsls	r3, r2
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c34:	4935      	ldr	r1, [pc, #212]	@ (8002d0c <HAL_GPIO_Init+0x328>)
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	089b      	lsrs	r3, r3, #2
 8002c3a:	3302      	adds	r3, #2
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c42:	4b3d      	ldr	r3, [pc, #244]	@ (8002d38 <HAL_GPIO_Init+0x354>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c66:	4a34      	ldr	r2, [pc, #208]	@ (8002d38 <HAL_GPIO_Init+0x354>)
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c6c:	4b32      	ldr	r3, [pc, #200]	@ (8002d38 <HAL_GPIO_Init+0x354>)
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	43db      	mvns	r3, r3
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d003      	beq.n	8002c90 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c90:	4a29      	ldr	r2, [pc, #164]	@ (8002d38 <HAL_GPIO_Init+0x354>)
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c96:	4b28      	ldr	r3, [pc, #160]	@ (8002d38 <HAL_GPIO_Init+0x354>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	43db      	mvns	r3, r3
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cba:	4a1f      	ldr	r2, [pc, #124]	@ (8002d38 <HAL_GPIO_Init+0x354>)
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cc0:	4b1d      	ldr	r3, [pc, #116]	@ (8002d38 <HAL_GPIO_Init+0x354>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ce4:	4a14      	ldr	r2, [pc, #80]	@ (8002d38 <HAL_GPIO_Init+0x354>)
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	3301      	adds	r3, #1
 8002cee:	61fb      	str	r3, [r7, #28]
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	2b0f      	cmp	r3, #15
 8002cf4:	f67f ae86 	bls.w	8002a04 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002cf8:	bf00      	nop
 8002cfa:	bf00      	nop
 8002cfc:	3724      	adds	r7, #36	@ 0x24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	40013800 	.word	0x40013800
 8002d10:	40020000 	.word	0x40020000
 8002d14:	40020400 	.word	0x40020400
 8002d18:	40020800 	.word	0x40020800
 8002d1c:	40020c00 	.word	0x40020c00
 8002d20:	40021000 	.word	0x40021000
 8002d24:	40021400 	.word	0x40021400
 8002d28:	40021800 	.word	0x40021800
 8002d2c:	40021c00 	.word	0x40021c00
 8002d30:	40022000 	.word	0x40022000
 8002d34:	40022400 	.word	0x40022400
 8002d38:	40013c00 	.word	0x40013c00

08002d3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	460b      	mov	r3, r1
 8002d46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691a      	ldr	r2, [r3, #16]
 8002d4c:	887b      	ldrh	r3, [r7, #2]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d002      	beq.n	8002d5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d54:	2301      	movs	r3, #1
 8002d56:	73fb      	strb	r3, [r7, #15]
 8002d58:	e001      	b.n	8002d5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	460b      	mov	r3, r1
 8002d76:	807b      	strh	r3, [r7, #2]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d7c:	787b      	ldrb	r3, [r7, #1]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d82:	887a      	ldrh	r2, [r7, #2]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002d88:	e003      	b.n	8002d92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002d8a:	887b      	ldrh	r3, [r7, #2]
 8002d8c:	041a      	lsls	r2, r3, #16
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	619a      	str	r2, [r3, #24]
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
	...

08002da0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e08b      	b.n	8002eca <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d106      	bne.n	8002dcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f7ff fa44 	bl	8002254 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2224      	movs	r2, #36	@ 0x24
 8002dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 0201 	bic.w	r2, r2, #1
 8002de2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002df0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e00:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d107      	bne.n	8002e1a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689a      	ldr	r2, [r3, #8]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e16:	609a      	str	r2, [r3, #8]
 8002e18:	e006      	b.n	8002e28 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689a      	ldr	r2, [r3, #8]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002e26:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d108      	bne.n	8002e42 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e3e:	605a      	str	r2, [r3, #4]
 8002e40:	e007      	b.n	8002e52 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e50:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	6859      	ldr	r1, [r3, #4]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ed4 <HAL_I2C_Init+0x134>)
 8002e5e:	430b      	orrs	r3, r1
 8002e60:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68da      	ldr	r2, [r3, #12]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	691a      	ldr	r2, [r3, #16]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	69d9      	ldr	r1, [r3, #28]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a1a      	ldr	r2, [r3, #32]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0201 	orr.w	r2, r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	02008000 	.word	0x02008000

08002ed8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b088      	sub	sp, #32
 8002edc:	af02      	add	r7, sp, #8
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	4608      	mov	r0, r1
 8002ee2:	4611      	mov	r1, r2
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	817b      	strh	r3, [r7, #10]
 8002eea:	460b      	mov	r3, r1
 8002eec:	813b      	strh	r3, [r7, #8]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b20      	cmp	r3, #32
 8002efc:	f040 80f9 	bne.w	80030f2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f00:	6a3b      	ldr	r3, [r7, #32]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d002      	beq.n	8002f0c <HAL_I2C_Mem_Write+0x34>
 8002f06:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d105      	bne.n	8002f18 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f12:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e0ed      	b.n	80030f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d101      	bne.n	8002f26 <HAL_I2C_Mem_Write+0x4e>
 8002f22:	2302      	movs	r3, #2
 8002f24:	e0e6      	b.n	80030f4 <HAL_I2C_Mem_Write+0x21c>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f2e:	f7ff fbcb 	bl	80026c8 <HAL_GetTick>
 8002f32:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	2319      	movs	r3, #25
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f000 fbc9 	bl	80036d8 <I2C_WaitOnFlagUntilTimeout>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e0d1      	b.n	80030f4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2221      	movs	r2, #33	@ 0x21
 8002f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2240      	movs	r2, #64	@ 0x40
 8002f5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6a3a      	ldr	r2, [r7, #32]
 8002f6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002f70:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f78:	88f8      	ldrh	r0, [r7, #6]
 8002f7a:	893a      	ldrh	r2, [r7, #8]
 8002f7c:	8979      	ldrh	r1, [r7, #10]
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	9301      	str	r3, [sp, #4]
 8002f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	4603      	mov	r3, r0
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f000 fad9 	bl	8003540 <I2C_RequestMemoryWrite>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e0a9      	b.n	80030f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	2bff      	cmp	r3, #255	@ 0xff
 8002fa8:	d90e      	bls.n	8002fc8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	22ff      	movs	r2, #255	@ 0xff
 8002fae:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fb4:	b2da      	uxtb	r2, r3
 8002fb6:	8979      	ldrh	r1, [r7, #10]
 8002fb8:	2300      	movs	r3, #0
 8002fba:	9300      	str	r3, [sp, #0]
 8002fbc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f000 fd4d 	bl	8003a60 <I2C_TransferConfig>
 8002fc6:	e00f      	b.n	8002fe8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fd6:	b2da      	uxtb	r2, r3
 8002fd8:	8979      	ldrh	r1, [r7, #10]
 8002fda:	2300      	movs	r3, #0
 8002fdc:	9300      	str	r3, [sp, #0]
 8002fde:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f000 fd3c 	bl	8003a60 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	f000 fbcc 	bl	800378a <I2C_WaitOnTXISFlagUntilTimeout>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e07b      	b.n	80030f4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003000:	781a      	ldrb	r2, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300c:	1c5a      	adds	r2, r3, #1
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003016:	b29b      	uxth	r3, r3
 8003018:	3b01      	subs	r3, #1
 800301a:	b29a      	uxth	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003024:	3b01      	subs	r3, #1
 8003026:	b29a      	uxth	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003030:	b29b      	uxth	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d034      	beq.n	80030a0 <HAL_I2C_Mem_Write+0x1c8>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800303a:	2b00      	cmp	r3, #0
 800303c:	d130      	bne.n	80030a0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003044:	2200      	movs	r2, #0
 8003046:	2180      	movs	r1, #128	@ 0x80
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 fb45 	bl	80036d8 <I2C_WaitOnFlagUntilTimeout>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e04d      	b.n	80030f4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800305c:	b29b      	uxth	r3, r3
 800305e:	2bff      	cmp	r3, #255	@ 0xff
 8003060:	d90e      	bls.n	8003080 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	22ff      	movs	r2, #255	@ 0xff
 8003066:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800306c:	b2da      	uxtb	r2, r3
 800306e:	8979      	ldrh	r1, [r7, #10]
 8003070:	2300      	movs	r3, #0
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f000 fcf1 	bl	8003a60 <I2C_TransferConfig>
 800307e:	e00f      	b.n	80030a0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003084:	b29a      	uxth	r2, r3
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800308e:	b2da      	uxtb	r2, r3
 8003090:	8979      	ldrh	r1, [r7, #10]
 8003092:	2300      	movs	r3, #0
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 fce0 	bl	8003a60 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d19e      	bne.n	8002fe8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f000 fbb2 	bl	8003818 <I2C_WaitOnSTOPFlagUntilTimeout>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e01a      	b.n	80030f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2220      	movs	r2, #32
 80030c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6859      	ldr	r1, [r3, #4]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	4b0a      	ldr	r3, [pc, #40]	@ (80030fc <HAL_I2C_Mem_Write+0x224>)
 80030d2:	400b      	ands	r3, r1
 80030d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2220      	movs	r2, #32
 80030da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80030ee:	2300      	movs	r3, #0
 80030f0:	e000      	b.n	80030f4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80030f2:	2302      	movs	r3, #2
  }
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3718      	adds	r7, #24
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	fe00e800 	.word	0xfe00e800

08003100 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b088      	sub	sp, #32
 8003104:	af02      	add	r7, sp, #8
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	4608      	mov	r0, r1
 800310a:	4611      	mov	r1, r2
 800310c:	461a      	mov	r2, r3
 800310e:	4603      	mov	r3, r0
 8003110:	817b      	strh	r3, [r7, #10]
 8003112:	460b      	mov	r3, r1
 8003114:	813b      	strh	r3, [r7, #8]
 8003116:	4613      	mov	r3, r2
 8003118:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b20      	cmp	r3, #32
 8003124:	f040 80fd 	bne.w	8003322 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003128:	6a3b      	ldr	r3, [r7, #32]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d002      	beq.n	8003134 <HAL_I2C_Mem_Read+0x34>
 800312e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003130:	2b00      	cmp	r3, #0
 8003132:	d105      	bne.n	8003140 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800313a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e0f1      	b.n	8003324 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003146:	2b01      	cmp	r3, #1
 8003148:	d101      	bne.n	800314e <HAL_I2C_Mem_Read+0x4e>
 800314a:	2302      	movs	r3, #2
 800314c:	e0ea      	b.n	8003324 <HAL_I2C_Mem_Read+0x224>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003156:	f7ff fab7 	bl	80026c8 <HAL_GetTick>
 800315a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	2319      	movs	r3, #25
 8003162:	2201      	movs	r2, #1
 8003164:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f000 fab5 	bl	80036d8 <I2C_WaitOnFlagUntilTimeout>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e0d5      	b.n	8003324 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2222      	movs	r2, #34	@ 0x22
 800317c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2240      	movs	r2, #64	@ 0x40
 8003184:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6a3a      	ldr	r2, [r7, #32]
 8003192:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003198:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031a0:	88f8      	ldrh	r0, [r7, #6]
 80031a2:	893a      	ldrh	r2, [r7, #8]
 80031a4:	8979      	ldrh	r1, [r7, #10]
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	9301      	str	r3, [sp, #4]
 80031aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	4603      	mov	r3, r0
 80031b0:	68f8      	ldr	r0, [r7, #12]
 80031b2:	f000 fa19 	bl	80035e8 <I2C_RequestMemoryRead>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d005      	beq.n	80031c8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e0ad      	b.n	8003324 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	2bff      	cmp	r3, #255	@ 0xff
 80031d0:	d90e      	bls.n	80031f0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2201      	movs	r2, #1
 80031d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031dc:	b2da      	uxtb	r2, r3
 80031de:	8979      	ldrh	r1, [r7, #10]
 80031e0:	4b52      	ldr	r3, [pc, #328]	@ (800332c <HAL_I2C_Mem_Read+0x22c>)
 80031e2:	9300      	str	r3, [sp, #0]
 80031e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f000 fc39 	bl	8003a60 <I2C_TransferConfig>
 80031ee:	e00f      	b.n	8003210 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	8979      	ldrh	r1, [r7, #10]
 8003202:	4b4a      	ldr	r3, [pc, #296]	@ (800332c <HAL_I2C_Mem_Read+0x22c>)
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f000 fc28 	bl	8003a60 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	9300      	str	r3, [sp, #0]
 8003214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003216:	2200      	movs	r2, #0
 8003218:	2104      	movs	r1, #4
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f000 fa5c 	bl	80036d8 <I2C_WaitOnFlagUntilTimeout>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e07c      	b.n	8003324 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003234:	b2d2      	uxtb	r2, r2
 8003236:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323c:	1c5a      	adds	r2, r3, #1
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003246:	3b01      	subs	r3, #1
 8003248:	b29a      	uxth	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003252:	b29b      	uxth	r3, r3
 8003254:	3b01      	subs	r3, #1
 8003256:	b29a      	uxth	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003260:	b29b      	uxth	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d034      	beq.n	80032d0 <HAL_I2C_Mem_Read+0x1d0>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800326a:	2b00      	cmp	r3, #0
 800326c:	d130      	bne.n	80032d0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	9300      	str	r3, [sp, #0]
 8003272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003274:	2200      	movs	r2, #0
 8003276:	2180      	movs	r1, #128	@ 0x80
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f000 fa2d 	bl	80036d8 <I2C_WaitOnFlagUntilTimeout>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e04d      	b.n	8003324 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800328c:	b29b      	uxth	r3, r3
 800328e:	2bff      	cmp	r3, #255	@ 0xff
 8003290:	d90e      	bls.n	80032b0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2201      	movs	r2, #1
 8003296:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800329c:	b2da      	uxtb	r2, r3
 800329e:	8979      	ldrh	r1, [r7, #10]
 80032a0:	2300      	movs	r3, #0
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f000 fbd9 	bl	8003a60 <I2C_TransferConfig>
 80032ae:	e00f      	b.n	80032d0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	8979      	ldrh	r1, [r7, #10]
 80032c2:	2300      	movs	r3, #0
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f000 fbc8 	bl	8003a60 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d19a      	bne.n	8003210 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f000 fa9a 	bl	8003818 <I2C_WaitOnSTOPFlagUntilTimeout>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e01a      	b.n	8003324 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2220      	movs	r2, #32
 80032f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6859      	ldr	r1, [r3, #4]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	4b0b      	ldr	r3, [pc, #44]	@ (8003330 <HAL_I2C_Mem_Read+0x230>)
 8003302:	400b      	ands	r3, r1
 8003304:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2220      	movs	r2, #32
 800330a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800331e:	2300      	movs	r3, #0
 8003320:	e000      	b.n	8003324 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003322:	2302      	movs	r3, #2
  }
}
 8003324:	4618      	mov	r0, r3
 8003326:	3718      	adds	r7, #24
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	80002400 	.word	0x80002400
 8003330:	fe00e800 	.word	0xfe00e800

08003334 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b08a      	sub	sp, #40	@ 0x28
 8003338:	af02      	add	r7, sp, #8
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	607a      	str	r2, [r7, #4]
 800333e:	603b      	str	r3, [r7, #0]
 8003340:	460b      	mov	r3, r1
 8003342:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003344:	2300      	movs	r3, #0
 8003346:	617b      	str	r3, [r7, #20]

  HAL_StatusTypeDef status = HAL_OK;
 8003348:	2300      	movs	r3, #0
 800334a:	77fb      	strb	r3, [r7, #31]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b20      	cmp	r3, #32
 8003356:	f040 80e9 	bne.w	800352c <HAL_I2C_IsDeviceReady+0x1f8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003364:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003368:	d101      	bne.n	800336e <HAL_I2C_IsDeviceReady+0x3a>
    {
      return HAL_BUSY;
 800336a:	2302      	movs	r3, #2
 800336c:	e0df      	b.n	800352e <HAL_I2C_IsDeviceReady+0x1fa>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003374:	2b01      	cmp	r3, #1
 8003376:	d101      	bne.n	800337c <HAL_I2C_IsDeviceReady+0x48>
 8003378:	2302      	movs	r3, #2
 800337a:	e0d8      	b.n	800352e <HAL_I2C_IsDeviceReady+0x1fa>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2224      	movs	r2, #36	@ 0x24
 8003388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d105      	bne.n	80033a6 <HAL_I2C_IsDeviceReady+0x72>
 800339a:	897b      	ldrh	r3, [r7, #10]
 800339c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80033a0:	4b65      	ldr	r3, [pc, #404]	@ (8003538 <HAL_I2C_IsDeviceReady+0x204>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	e004      	b.n	80033b0 <HAL_I2C_IsDeviceReady+0x7c>
 80033a6:	897b      	ldrh	r3, [r7, #10]
 80033a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80033ac:	4b63      	ldr	r3, [pc, #396]	@ (800353c <HAL_I2C_IsDeviceReady+0x208>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	6812      	ldr	r2, [r2, #0]
 80033b4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80033b6:	f7ff f987 	bl	80026c8 <HAL_GetTick>
 80033ba:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	f003 0320 	and.w	r3, r3, #32
 80033c6:	2b20      	cmp	r3, #32
 80033c8:	bf0c      	ite	eq
 80033ca:	2301      	moveq	r3, #1
 80033cc:	2300      	movne	r3, #0
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	77bb      	strb	r3, [r7, #30]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	f003 0310 	and.w	r3, r3, #16
 80033dc:	2b10      	cmp	r3, #16
 80033de:	bf0c      	ite	eq
 80033e0:	2301      	moveq	r3, #1
 80033e2:	2300      	movne	r3, #0
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	777b      	strb	r3, [r7, #29]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80033e8:	e034      	b.n	8003454 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033f0:	d01a      	beq.n	8003428 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80033f2:	f7ff f969 	bl	80026c8 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d302      	bcc.n	8003408 <HAL_I2C_IsDeviceReady+0xd4>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10f      	bne.n	8003428 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2220      	movs	r2, #32
 800340c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003414:	f043 0220 	orr.w	r2, r3, #32
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e082      	b.n	800352e <HAL_I2C_IsDeviceReady+0x1fa>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	f003 0320 	and.w	r3, r3, #32
 8003432:	2b20      	cmp	r3, #32
 8003434:	bf0c      	ite	eq
 8003436:	2301      	moveq	r3, #1
 8003438:	2300      	movne	r3, #0
 800343a:	b2db      	uxtb	r3, r3
 800343c:	77bb      	strb	r3, [r7, #30]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	f003 0310 	and.w	r3, r3, #16
 8003448:	2b10      	cmp	r3, #16
 800344a:	bf0c      	ite	eq
 800344c:	2301      	moveq	r3, #1
 800344e:	2300      	movne	r3, #0
 8003450:	b2db      	uxtb	r3, r3
 8003452:	777b      	strb	r3, [r7, #29]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003454:	7fbb      	ldrb	r3, [r7, #30]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d102      	bne.n	8003460 <HAL_I2C_IsDeviceReady+0x12c>
 800345a:	7f7b      	ldrb	r3, [r7, #29]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0c4      	beq.n	80033ea <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	f003 0310 	and.w	r3, r3, #16
 800346a:	2b10      	cmp	r3, #16
 800346c:	d027      	beq.n	80034be <HAL_I2C_IsDeviceReady+0x18a>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	2200      	movs	r2, #0
 8003476:	2120      	movs	r1, #32
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f000 f92d 	bl	80036d8 <I2C_WaitOnFlagUntilTimeout>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00e      	beq.n	80034a2 <HAL_I2C_IsDeviceReady+0x16e>
        {
          /* A non acknowledge appear during STOP Flag waiting process, a new trial must be performed */
          if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003488:	2b04      	cmp	r3, #4
 800348a:	d107      	bne.n	800349c <HAL_I2C_IsDeviceReady+0x168>
          {
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2220      	movs	r2, #32
 8003492:	61da      	str	r2, [r3, #28]

            /* Reset the error code for next trial */
            hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	645a      	str	r2, [r3, #68]	@ 0x44
 800349a:	e026      	b.n	80034ea <HAL_I2C_IsDeviceReady+0x1b6>
          }
          else
          {
            status = HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	77fb      	strb	r3, [r7, #31]
 80034a0:	e023      	b.n	80034ea <HAL_I2C_IsDeviceReady+0x1b6>
        else
        {
          /* A acknowledge appear during STOP Flag waiting process, this mean that device respond to its address */

          /* Clear STOP Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2220      	movs	r2, #32
 80034a8:	61da      	str	r2, [r3, #28]

          /* Device is ready */
          hi2c->State = HAL_I2C_STATE_READY;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2220      	movs	r2, #32
 80034ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_OK;
 80034ba:	2300      	movs	r3, #0
 80034bc:	e037      	b.n	800352e <HAL_I2C_IsDeviceReady+0x1fa>
      {
        /* A non acknowledge is detected, this mean that device not respond to its address,
           a new trial must be performed */

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2210      	movs	r2, #16
 80034c4:	61da      	str	r2, [r3, #28]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	2200      	movs	r2, #0
 80034ce:	2120      	movs	r1, #32
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 f901 	bl	80036d8 <I2C_WaitOnFlagUntilTimeout>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d002      	beq.n	80034e2 <HAL_I2C_IsDeviceReady+0x1ae>
        {
          status = HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	77fb      	strb	r3, [r7, #31]
 80034e0:	e003      	b.n	80034ea <HAL_I2C_IsDeviceReady+0x1b6>
        }
        else
        {
          /* Clear STOP Flag, auto generated with autoend*/
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2220      	movs	r2, #32
 80034e8:	61da      	str	r2, [r3, #28]
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	3301      	adds	r3, #1
 80034ee:	617b      	str	r3, [r7, #20]

      if ((I2C_Trials < Trials) && (status == HAL_ERROR))
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d904      	bls.n	8003502 <HAL_I2C_IsDeviceReady+0x1ce>
 80034f8:	7ffb      	ldrb	r3, [r7, #31]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d101      	bne.n	8003502 <HAL_I2C_IsDeviceReady+0x1ce>
      {
        status = HAL_OK;
 80034fe:	2300      	movs	r3, #0
 8003500:	77fb      	strb	r3, [r7, #31]
      }

    } while (I2C_Trials < Trials);
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	429a      	cmp	r2, r3
 8003508:	f63f af43 	bhi.w	8003392 <HAL_I2C_IsDeviceReady+0x5e>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2220      	movs	r2, #32
 8003510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003518:	f043 0220 	orr.w	r2, r3, #32
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e000      	b.n	800352e <HAL_I2C_IsDeviceReady+0x1fa>
  }
  else
  {
    return HAL_BUSY;
 800352c:	2302      	movs	r3, #2
  }
}
 800352e:	4618      	mov	r0, r3
 8003530:	3720      	adds	r7, #32
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	02002000 	.word	0x02002000
 800353c:	02002800 	.word	0x02002800

08003540 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af02      	add	r7, sp, #8
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	4608      	mov	r0, r1
 800354a:	4611      	mov	r1, r2
 800354c:	461a      	mov	r2, r3
 800354e:	4603      	mov	r3, r0
 8003550:	817b      	strh	r3, [r7, #10]
 8003552:	460b      	mov	r3, r1
 8003554:	813b      	strh	r3, [r7, #8]
 8003556:	4613      	mov	r3, r2
 8003558:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800355a:	88fb      	ldrh	r3, [r7, #6]
 800355c:	b2da      	uxtb	r2, r3
 800355e:	8979      	ldrh	r1, [r7, #10]
 8003560:	4b20      	ldr	r3, [pc, #128]	@ (80035e4 <I2C_RequestMemoryWrite+0xa4>)
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 fa79 	bl	8003a60 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800356e:	69fa      	ldr	r2, [r7, #28]
 8003570:	69b9      	ldr	r1, [r7, #24]
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 f909 	bl	800378a <I2C_WaitOnTXISFlagUntilTimeout>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e02c      	b.n	80035dc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003582:	88fb      	ldrh	r3, [r7, #6]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d105      	bne.n	8003594 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003588:	893b      	ldrh	r3, [r7, #8]
 800358a:	b2da      	uxtb	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	629a      	str	r2, [r3, #40]	@ 0x28
 8003592:	e015      	b.n	80035c0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003594:	893b      	ldrh	r3, [r7, #8]
 8003596:	0a1b      	lsrs	r3, r3, #8
 8003598:	b29b      	uxth	r3, r3
 800359a:	b2da      	uxtb	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035a2:	69fa      	ldr	r2, [r7, #28]
 80035a4:	69b9      	ldr	r1, [r7, #24]
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f000 f8ef 	bl	800378a <I2C_WaitOnTXISFlagUntilTimeout>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e012      	b.n	80035dc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80035b6:	893b      	ldrh	r3, [r7, #8]
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	2200      	movs	r2, #0
 80035c8:	2180      	movs	r1, #128	@ 0x80
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f000 f884 	bl	80036d8 <I2C_WaitOnFlagUntilTimeout>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e000      	b.n	80035dc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	80002000 	.word	0x80002000

080035e8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af02      	add	r7, sp, #8
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	4608      	mov	r0, r1
 80035f2:	4611      	mov	r1, r2
 80035f4:	461a      	mov	r2, r3
 80035f6:	4603      	mov	r3, r0
 80035f8:	817b      	strh	r3, [r7, #10]
 80035fa:	460b      	mov	r3, r1
 80035fc:	813b      	strh	r3, [r7, #8]
 80035fe:	4613      	mov	r3, r2
 8003600:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003602:	88fb      	ldrh	r3, [r7, #6]
 8003604:	b2da      	uxtb	r2, r3
 8003606:	8979      	ldrh	r1, [r7, #10]
 8003608:	4b20      	ldr	r3, [pc, #128]	@ (800368c <I2C_RequestMemoryRead+0xa4>)
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	2300      	movs	r3, #0
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f000 fa26 	bl	8003a60 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003614:	69fa      	ldr	r2, [r7, #28]
 8003616:	69b9      	ldr	r1, [r7, #24]
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f000 f8b6 	bl	800378a <I2C_WaitOnTXISFlagUntilTimeout>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e02c      	b.n	8003682 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003628:	88fb      	ldrh	r3, [r7, #6]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d105      	bne.n	800363a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800362e:	893b      	ldrh	r3, [r7, #8]
 8003630:	b2da      	uxtb	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	629a      	str	r2, [r3, #40]	@ 0x28
 8003638:	e015      	b.n	8003666 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800363a:	893b      	ldrh	r3, [r7, #8]
 800363c:	0a1b      	lsrs	r3, r3, #8
 800363e:	b29b      	uxth	r3, r3
 8003640:	b2da      	uxtb	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003648:	69fa      	ldr	r2, [r7, #28]
 800364a:	69b9      	ldr	r1, [r7, #24]
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f000 f89c 	bl	800378a <I2C_WaitOnTXISFlagUntilTimeout>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d001      	beq.n	800365c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e012      	b.n	8003682 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800365c:	893b      	ldrh	r3, [r7, #8]
 800365e:	b2da      	uxtb	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	2200      	movs	r2, #0
 800366e:	2140      	movs	r1, #64	@ 0x40
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f000 f831 	bl	80036d8 <I2C_WaitOnFlagUntilTimeout>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e000      	b.n	8003682 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	80002000 	.word	0x80002000

08003690 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d103      	bne.n	80036ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2200      	movs	r2, #0
 80036ac:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d007      	beq.n	80036cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	699a      	ldr	r2, [r3, #24]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f042 0201 	orr.w	r2, r2, #1
 80036ca:	619a      	str	r2, [r3, #24]
  }
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	603b      	str	r3, [r7, #0]
 80036e4:	4613      	mov	r3, r2
 80036e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036e8:	e03b      	b.n	8003762 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	6839      	ldr	r1, [r7, #0]
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f000 f8d6 	bl	80038a0 <I2C_IsErrorOccurred>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e041      	b.n	8003782 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003704:	d02d      	beq.n	8003762 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003706:	f7fe ffdf 	bl	80026c8 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	429a      	cmp	r2, r3
 8003714:	d302      	bcc.n	800371c <I2C_WaitOnFlagUntilTimeout+0x44>
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d122      	bne.n	8003762 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699a      	ldr	r2, [r3, #24]
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	4013      	ands	r3, r2
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	429a      	cmp	r2, r3
 800372a:	bf0c      	ite	eq
 800372c:	2301      	moveq	r3, #1
 800372e:	2300      	movne	r3, #0
 8003730:	b2db      	uxtb	r3, r3
 8003732:	461a      	mov	r2, r3
 8003734:	79fb      	ldrb	r3, [r7, #7]
 8003736:	429a      	cmp	r2, r3
 8003738:	d113      	bne.n	8003762 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800373e:	f043 0220 	orr.w	r2, r3, #32
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2220      	movs	r2, #32
 800374a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e00f      	b.n	8003782 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	699a      	ldr	r2, [r3, #24]
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	4013      	ands	r3, r2
 800376c:	68ba      	ldr	r2, [r7, #8]
 800376e:	429a      	cmp	r2, r3
 8003770:	bf0c      	ite	eq
 8003772:	2301      	moveq	r3, #1
 8003774:	2300      	movne	r3, #0
 8003776:	b2db      	uxtb	r3, r3
 8003778:	461a      	mov	r2, r3
 800377a:	79fb      	ldrb	r3, [r7, #7]
 800377c:	429a      	cmp	r2, r3
 800377e:	d0b4      	beq.n	80036ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b084      	sub	sp, #16
 800378e:	af00      	add	r7, sp, #0
 8003790:	60f8      	str	r0, [r7, #12]
 8003792:	60b9      	str	r1, [r7, #8]
 8003794:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003796:	e033      	b.n	8003800 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	68b9      	ldr	r1, [r7, #8]
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f000 f87f 	bl	80038a0 <I2C_IsErrorOccurred>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e031      	b.n	8003810 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80037b2:	d025      	beq.n	8003800 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037b4:	f7fe ff88 	bl	80026c8 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	68ba      	ldr	r2, [r7, #8]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d302      	bcc.n	80037ca <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d11a      	bne.n	8003800 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d013      	beq.n	8003800 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037dc:	f043 0220 	orr.w	r2, r3, #32
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2220      	movs	r2, #32
 80037e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e007      	b.n	8003810 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b02      	cmp	r3, #2
 800380c:	d1c4      	bne.n	8003798 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003824:	e02f      	b.n	8003886 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	68b9      	ldr	r1, [r7, #8]
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f000 f838 	bl	80038a0 <I2C_IsErrorOccurred>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e02d      	b.n	8003896 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800383a:	f7fe ff45 	bl	80026c8 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	429a      	cmp	r2, r3
 8003848:	d302      	bcc.n	8003850 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d11a      	bne.n	8003886 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	f003 0320 	and.w	r3, r3, #32
 800385a:	2b20      	cmp	r3, #32
 800385c:	d013      	beq.n	8003886 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003862:	f043 0220 	orr.w	r2, r3, #32
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2220      	movs	r2, #32
 800386e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e007      	b.n	8003896 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	f003 0320 	and.w	r3, r3, #32
 8003890:	2b20      	cmp	r3, #32
 8003892:	d1c8      	bne.n	8003826 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
	...

080038a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b08a      	sub	sp, #40	@ 0x28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038ac:	2300      	movs	r3, #0
 80038ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80038ba:	2300      	movs	r3, #0
 80038bc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	f003 0310 	and.w	r3, r3, #16
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d068      	beq.n	800399e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2210      	movs	r2, #16
 80038d2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80038d4:	e049      	b.n	800396a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038dc:	d045      	beq.n	800396a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80038de:	f7fe fef3 	bl	80026c8 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	68ba      	ldr	r2, [r7, #8]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d302      	bcc.n	80038f4 <I2C_IsErrorOccurred+0x54>
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d13a      	bne.n	800396a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003906:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003912:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003916:	d121      	bne.n	800395c <I2C_IsErrorOccurred+0xbc>
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800391e:	d01d      	beq.n	800395c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003920:	7cfb      	ldrb	r3, [r7, #19]
 8003922:	2b20      	cmp	r3, #32
 8003924:	d01a      	beq.n	800395c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	685a      	ldr	r2, [r3, #4]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003934:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003936:	f7fe fec7 	bl	80026c8 <HAL_GetTick>
 800393a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800393c:	e00e      	b.n	800395c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800393e:	f7fe fec3 	bl	80026c8 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b19      	cmp	r3, #25
 800394a:	d907      	bls.n	800395c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800394c:	6a3b      	ldr	r3, [r7, #32]
 800394e:	f043 0320 	orr.w	r3, r3, #32
 8003952:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800395a:	e006      	b.n	800396a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	f003 0320 	and.w	r3, r3, #32
 8003966:	2b20      	cmp	r3, #32
 8003968:	d1e9      	bne.n	800393e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	f003 0320 	and.w	r3, r3, #32
 8003974:	2b20      	cmp	r3, #32
 8003976:	d003      	beq.n	8003980 <I2C_IsErrorOccurred+0xe0>
 8003978:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800397c:	2b00      	cmp	r3, #0
 800397e:	d0aa      	beq.n	80038d6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003980:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003984:	2b00      	cmp	r3, #0
 8003986:	d103      	bne.n	8003990 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2220      	movs	r2, #32
 800398e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	f043 0304 	orr.w	r3, r3, #4
 8003996:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00b      	beq.n	80039c8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80039b0:	6a3b      	ldr	r3, [r7, #32]
 80039b2:	f043 0301 	orr.w	r3, r3, #1
 80039b6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80039c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00b      	beq.n	80039ea <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80039d2:	6a3b      	ldr	r3, [r7, #32]
 80039d4:	f043 0308 	orr.w	r3, r3, #8
 80039d8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80039e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00b      	beq.n	8003a0c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80039f4:	6a3b      	ldr	r3, [r7, #32]
 80039f6:	f043 0302 	orr.w	r3, r3, #2
 80039fa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003a0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d01c      	beq.n	8003a4e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f7ff fe3b 	bl	8003690 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6859      	ldr	r1, [r3, #4]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	4b0d      	ldr	r3, [pc, #52]	@ (8003a5c <I2C_IsErrorOccurred+0x1bc>)
 8003a26:	400b      	ands	r3, r1
 8003a28:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a2e:	6a3b      	ldr	r3, [r7, #32]
 8003a30:	431a      	orrs	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2220      	movs	r2, #32
 8003a3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003a4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3728      	adds	r7, #40	@ 0x28
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	fe00e800 	.word	0xfe00e800

08003a60 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b087      	sub	sp, #28
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	607b      	str	r3, [r7, #4]
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	817b      	strh	r3, [r7, #10]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a72:	897b      	ldrh	r3, [r7, #10]
 8003a74:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a78:	7a7b      	ldrb	r3, [r7, #9]
 8003a7a:	041b      	lsls	r3, r3, #16
 8003a7c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a80:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a86:	6a3b      	ldr	r3, [r7, #32]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a8e:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	6a3b      	ldr	r3, [r7, #32]
 8003a98:	0d5b      	lsrs	r3, r3, #21
 8003a9a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003a9e:	4b08      	ldr	r3, [pc, #32]	@ (8003ac0 <I2C_TransferConfig+0x60>)
 8003aa0:	430b      	orrs	r3, r1
 8003aa2:	43db      	mvns	r3, r3
 8003aa4:	ea02 0103 	and.w	r1, r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003ab2:	bf00      	nop
 8003ab4:	371c      	adds	r7, #28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	03ff63ff 	.word	0x03ff63ff

08003ac4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b20      	cmp	r3, #32
 8003ad8:	d138      	bne.n	8003b4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d101      	bne.n	8003ae8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	e032      	b.n	8003b4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2224      	movs	r2, #36	@ 0x24
 8003af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 0201 	bic.w	r2, r2, #1
 8003b06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003b16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6819      	ldr	r1, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f042 0201 	orr.w	r2, r2, #1
 8003b36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	e000      	b.n	8003b4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b4c:	2302      	movs	r3, #2
  }
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b085      	sub	sp, #20
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
 8003b62:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b20      	cmp	r3, #32
 8003b6e:	d139      	bne.n	8003be4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d101      	bne.n	8003b7e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	e033      	b.n	8003be6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2224      	movs	r2, #36	@ 0x24
 8003b8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 0201 	bic.w	r2, r2, #1
 8003b9c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003bac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	021b      	lsls	r3, r3, #8
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f042 0201 	orr.w	r2, r2, #1
 8003bce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003be0:	2300      	movs	r3, #0
 8003be2:	e000      	b.n	8003be6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003be4:	2302      	movs	r3, #2
  }
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3714      	adds	r7, #20
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
	...

08003bf4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003bfe:	4b23      	ldr	r3, [pc, #140]	@ (8003c8c <HAL_PWREx_EnableOverDrive+0x98>)
 8003c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c02:	4a22      	ldr	r2, [pc, #136]	@ (8003c8c <HAL_PWREx_EnableOverDrive+0x98>)
 8003c04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c08:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c0a:	4b20      	ldr	r3, [pc, #128]	@ (8003c8c <HAL_PWREx_EnableOverDrive+0x98>)
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c12:	603b      	str	r3, [r7, #0]
 8003c14:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003c16:	4b1e      	ldr	r3, [pc, #120]	@ (8003c90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a1d      	ldr	r2, [pc, #116]	@ (8003c90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c20:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c22:	f7fe fd51 	bl	80026c8 <HAL_GetTick>
 8003c26:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c28:	e009      	b.n	8003c3e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c2a:	f7fe fd4d 	bl	80026c8 <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003c38:	d901      	bls.n	8003c3e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e022      	b.n	8003c84 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c3e:	4b14      	ldr	r3, [pc, #80]	@ (8003c90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c4a:	d1ee      	bne.n	8003c2a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003c4c:	4b10      	ldr	r3, [pc, #64]	@ (8003c90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a0f      	ldr	r2, [pc, #60]	@ (8003c90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c56:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c58:	f7fe fd36 	bl	80026c8 <HAL_GetTick>
 8003c5c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c5e:	e009      	b.n	8003c74 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c60:	f7fe fd32 	bl	80026c8 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003c6e:	d901      	bls.n	8003c74 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e007      	b.n	8003c84 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c74:	4b06      	ldr	r3, [pc, #24]	@ (8003c90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c80:	d1ee      	bne.n	8003c60 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	40023800 	.word	0x40023800
 8003c90:	40007000 	.word	0x40007000

08003c94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e291      	b.n	80041ce <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f000 8087 	beq.w	8003dc6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cb8:	4b96      	ldr	r3, [pc, #600]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f003 030c 	and.w	r3, r3, #12
 8003cc0:	2b04      	cmp	r3, #4
 8003cc2:	d00c      	beq.n	8003cde <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cc4:	4b93      	ldr	r3, [pc, #588]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f003 030c 	and.w	r3, r3, #12
 8003ccc:	2b08      	cmp	r3, #8
 8003cce:	d112      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x62>
 8003cd0:	4b90      	ldr	r3, [pc, #576]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cd8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cdc:	d10b      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cde:	4b8d      	ldr	r3, [pc, #564]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d06c      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x130>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d168      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e26b      	b.n	80041ce <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cfe:	d106      	bne.n	8003d0e <HAL_RCC_OscConfig+0x7a>
 8003d00:	4b84      	ldr	r3, [pc, #528]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a83      	ldr	r2, [pc, #524]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003d06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d0a:	6013      	str	r3, [r2, #0]
 8003d0c:	e02e      	b.n	8003d6c <HAL_RCC_OscConfig+0xd8>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10c      	bne.n	8003d30 <HAL_RCC_OscConfig+0x9c>
 8003d16:	4b7f      	ldr	r3, [pc, #508]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a7e      	ldr	r2, [pc, #504]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003d1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d20:	6013      	str	r3, [r2, #0]
 8003d22:	4b7c      	ldr	r3, [pc, #496]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a7b      	ldr	r2, [pc, #492]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003d28:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d2c:	6013      	str	r3, [r2, #0]
 8003d2e:	e01d      	b.n	8003d6c <HAL_RCC_OscConfig+0xd8>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d38:	d10c      	bne.n	8003d54 <HAL_RCC_OscConfig+0xc0>
 8003d3a:	4b76      	ldr	r3, [pc, #472]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a75      	ldr	r2, [pc, #468]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003d40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d44:	6013      	str	r3, [r2, #0]
 8003d46:	4b73      	ldr	r3, [pc, #460]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a72      	ldr	r2, [pc, #456]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003d4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d50:	6013      	str	r3, [r2, #0]
 8003d52:	e00b      	b.n	8003d6c <HAL_RCC_OscConfig+0xd8>
 8003d54:	4b6f      	ldr	r3, [pc, #444]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a6e      	ldr	r2, [pc, #440]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003d5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d5e:	6013      	str	r3, [r2, #0]
 8003d60:	4b6c      	ldr	r3, [pc, #432]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a6b      	ldr	r2, [pc, #428]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003d66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d013      	beq.n	8003d9c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d74:	f7fe fca8 	bl	80026c8 <HAL_GetTick>
 8003d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d7a:	e008      	b.n	8003d8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d7c:	f7fe fca4 	bl	80026c8 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b64      	cmp	r3, #100	@ 0x64
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e21f      	b.n	80041ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d8e:	4b61      	ldr	r3, [pc, #388]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d0f0      	beq.n	8003d7c <HAL_RCC_OscConfig+0xe8>
 8003d9a:	e014      	b.n	8003dc6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d9c:	f7fe fc94 	bl	80026c8 <HAL_GetTick>
 8003da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003da2:	e008      	b.n	8003db6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003da4:	f7fe fc90 	bl	80026c8 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b64      	cmp	r3, #100	@ 0x64
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e20b      	b.n	80041ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003db6:	4b57      	ldr	r3, [pc, #348]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1f0      	bne.n	8003da4 <HAL_RCC_OscConfig+0x110>
 8003dc2:	e000      	b.n	8003dc6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d069      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003dd2:	4b50      	ldr	r3, [pc, #320]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f003 030c 	and.w	r3, r3, #12
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00b      	beq.n	8003df6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dde:	4b4d      	ldr	r3, [pc, #308]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 030c 	and.w	r3, r3, #12
 8003de6:	2b08      	cmp	r3, #8
 8003de8:	d11c      	bne.n	8003e24 <HAL_RCC_OscConfig+0x190>
 8003dea:	4b4a      	ldr	r3, [pc, #296]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d116      	bne.n	8003e24 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003df6:	4b47      	ldr	r3, [pc, #284]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d005      	beq.n	8003e0e <HAL_RCC_OscConfig+0x17a>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d001      	beq.n	8003e0e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e1df      	b.n	80041ce <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e0e:	4b41      	ldr	r3, [pc, #260]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	493d      	ldr	r1, [pc, #244]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e22:	e040      	b.n	8003ea6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d023      	beq.n	8003e74 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e2c:	4b39      	ldr	r3, [pc, #228]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a38      	ldr	r2, [pc, #224]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003e32:	f043 0301 	orr.w	r3, r3, #1
 8003e36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e38:	f7fe fc46 	bl	80026c8 <HAL_GetTick>
 8003e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e3e:	e008      	b.n	8003e52 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e40:	f7fe fc42 	bl	80026c8 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e1bd      	b.n	80041ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e52:	4b30      	ldr	r3, [pc, #192]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d0f0      	beq.n	8003e40 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e5e:	4b2d      	ldr	r3, [pc, #180]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	4929      	ldr	r1, [pc, #164]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	600b      	str	r3, [r1, #0]
 8003e72:	e018      	b.n	8003ea6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e74:	4b27      	ldr	r3, [pc, #156]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a26      	ldr	r2, [pc, #152]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003e7a:	f023 0301 	bic.w	r3, r3, #1
 8003e7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e80:	f7fe fc22 	bl	80026c8 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e88:	f7fe fc1e 	bl	80026c8 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e199      	b.n	80041ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e9a:	4b1e      	ldr	r3, [pc, #120]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1f0      	bne.n	8003e88 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0308 	and.w	r3, r3, #8
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d038      	beq.n	8003f24 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d019      	beq.n	8003eee <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eba:	4b16      	ldr	r3, [pc, #88]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003ebc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ebe:	4a15      	ldr	r2, [pc, #84]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003ec0:	f043 0301 	orr.w	r3, r3, #1
 8003ec4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec6:	f7fe fbff 	bl	80026c8 <HAL_GetTick>
 8003eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ecc:	e008      	b.n	8003ee0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ece:	f7fe fbfb 	bl	80026c8 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d901      	bls.n	8003ee0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e176      	b.n	80041ce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003ee2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0f0      	beq.n	8003ece <HAL_RCC_OscConfig+0x23a>
 8003eec:	e01a      	b.n	8003f24 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003eee:	4b09      	ldr	r3, [pc, #36]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003ef0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ef2:	4a08      	ldr	r2, [pc, #32]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003ef4:	f023 0301 	bic.w	r3, r3, #1
 8003ef8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003efa:	f7fe fbe5 	bl	80026c8 <HAL_GetTick>
 8003efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f00:	e00a      	b.n	8003f18 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f02:	f7fe fbe1 	bl	80026c8 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d903      	bls.n	8003f18 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e15c      	b.n	80041ce <HAL_RCC_OscConfig+0x53a>
 8003f14:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f18:	4b91      	ldr	r3, [pc, #580]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8003f1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1ee      	bne.n	8003f02 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 80a4 	beq.w	800407a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f32:	4b8b      	ldr	r3, [pc, #556]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8003f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10d      	bne.n	8003f5a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f3e:	4b88      	ldr	r3, [pc, #544]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8003f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f42:	4a87      	ldr	r2, [pc, #540]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8003f44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f48:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f4a:	4b85      	ldr	r3, [pc, #532]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f52:	60bb      	str	r3, [r7, #8]
 8003f54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f56:	2301      	movs	r3, #1
 8003f58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f5a:	4b82      	ldr	r3, [pc, #520]	@ (8004164 <HAL_RCC_OscConfig+0x4d0>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d118      	bne.n	8003f98 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003f66:	4b7f      	ldr	r3, [pc, #508]	@ (8004164 <HAL_RCC_OscConfig+0x4d0>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a7e      	ldr	r2, [pc, #504]	@ (8004164 <HAL_RCC_OscConfig+0x4d0>)
 8003f6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f72:	f7fe fba9 	bl	80026c8 <HAL_GetTick>
 8003f76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f78:	e008      	b.n	8003f8c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f7a:	f7fe fba5 	bl	80026c8 <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	2b64      	cmp	r3, #100	@ 0x64
 8003f86:	d901      	bls.n	8003f8c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e120      	b.n	80041ce <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f8c:	4b75      	ldr	r3, [pc, #468]	@ (8004164 <HAL_RCC_OscConfig+0x4d0>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d0f0      	beq.n	8003f7a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d106      	bne.n	8003fae <HAL_RCC_OscConfig+0x31a>
 8003fa0:	4b6f      	ldr	r3, [pc, #444]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8003fa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fa4:	4a6e      	ldr	r2, [pc, #440]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8003fa6:	f043 0301 	orr.w	r3, r3, #1
 8003faa:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fac:	e02d      	b.n	800400a <HAL_RCC_OscConfig+0x376>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d10c      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x33c>
 8003fb6:	4b6a      	ldr	r3, [pc, #424]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8003fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fba:	4a69      	ldr	r2, [pc, #420]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8003fbc:	f023 0301 	bic.w	r3, r3, #1
 8003fc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fc2:	4b67      	ldr	r3, [pc, #412]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8003fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fc6:	4a66      	ldr	r2, [pc, #408]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8003fc8:	f023 0304 	bic.w	r3, r3, #4
 8003fcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fce:	e01c      	b.n	800400a <HAL_RCC_OscConfig+0x376>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	2b05      	cmp	r3, #5
 8003fd6:	d10c      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x35e>
 8003fd8:	4b61      	ldr	r3, [pc, #388]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8003fda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fdc:	4a60      	ldr	r2, [pc, #384]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8003fde:	f043 0304 	orr.w	r3, r3, #4
 8003fe2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fe4:	4b5e      	ldr	r3, [pc, #376]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8003fe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fe8:	4a5d      	ldr	r2, [pc, #372]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8003fea:	f043 0301 	orr.w	r3, r3, #1
 8003fee:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ff0:	e00b      	b.n	800400a <HAL_RCC_OscConfig+0x376>
 8003ff2:	4b5b      	ldr	r3, [pc, #364]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8003ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ff6:	4a5a      	ldr	r2, [pc, #360]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8003ff8:	f023 0301 	bic.w	r3, r3, #1
 8003ffc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ffe:	4b58      	ldr	r3, [pc, #352]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8004000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004002:	4a57      	ldr	r2, [pc, #348]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8004004:	f023 0304 	bic.w	r3, r3, #4
 8004008:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d015      	beq.n	800403e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004012:	f7fe fb59 	bl	80026c8 <HAL_GetTick>
 8004016:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004018:	e00a      	b.n	8004030 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800401a:	f7fe fb55 	bl	80026c8 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004028:	4293      	cmp	r3, r2
 800402a:	d901      	bls.n	8004030 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e0ce      	b.n	80041ce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004030:	4b4b      	ldr	r3, [pc, #300]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8004032:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d0ee      	beq.n	800401a <HAL_RCC_OscConfig+0x386>
 800403c:	e014      	b.n	8004068 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800403e:	f7fe fb43 	bl	80026c8 <HAL_GetTick>
 8004042:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004044:	e00a      	b.n	800405c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004046:	f7fe fb3f 	bl	80026c8 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004054:	4293      	cmp	r3, r2
 8004056:	d901      	bls.n	800405c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e0b8      	b.n	80041ce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800405c:	4b40      	ldr	r3, [pc, #256]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 800405e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1ee      	bne.n	8004046 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004068:	7dfb      	ldrb	r3, [r7, #23]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d105      	bne.n	800407a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800406e:	4b3c      	ldr	r3, [pc, #240]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8004070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004072:	4a3b      	ldr	r2, [pc, #236]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8004074:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004078:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	2b00      	cmp	r3, #0
 8004080:	f000 80a4 	beq.w	80041cc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004084:	4b36      	ldr	r3, [pc, #216]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f003 030c 	and.w	r3, r3, #12
 800408c:	2b08      	cmp	r3, #8
 800408e:	d06b      	beq.n	8004168 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	2b02      	cmp	r3, #2
 8004096:	d149      	bne.n	800412c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004098:	4b31      	ldr	r3, [pc, #196]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a30      	ldr	r2, [pc, #192]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 800409e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a4:	f7fe fb10 	bl	80026c8 <HAL_GetTick>
 80040a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040aa:	e008      	b.n	80040be <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ac:	f7fe fb0c 	bl	80026c8 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d901      	bls.n	80040be <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e087      	b.n	80041ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040be:	4b28      	ldr	r3, [pc, #160]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1f0      	bne.n	80040ac <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	69da      	ldr	r2, [r3, #28]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	431a      	orrs	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d8:	019b      	lsls	r3, r3, #6
 80040da:	431a      	orrs	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e0:	085b      	lsrs	r3, r3, #1
 80040e2:	3b01      	subs	r3, #1
 80040e4:	041b      	lsls	r3, r3, #16
 80040e6:	431a      	orrs	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ec:	061b      	lsls	r3, r3, #24
 80040ee:	4313      	orrs	r3, r2
 80040f0:	4a1b      	ldr	r2, [pc, #108]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 80040f2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80040f6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040f8:	4b19      	ldr	r3, [pc, #100]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a18      	ldr	r2, [pc, #96]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 80040fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004102:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004104:	f7fe fae0 	bl	80026c8 <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800410c:	f7fe fadc 	bl	80026c8 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e057      	b.n	80041ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800411e:	4b10      	ldr	r3, [pc, #64]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d0f0      	beq.n	800410c <HAL_RCC_OscConfig+0x478>
 800412a:	e04f      	b.n	80041cc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800412c:	4b0c      	ldr	r3, [pc, #48]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a0b      	ldr	r2, [pc, #44]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8004132:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004136:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004138:	f7fe fac6 	bl	80026c8 <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004140:	f7fe fac2 	bl	80026c8 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e03d      	b.n	80041ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004152:	4b03      	ldr	r3, [pc, #12]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1f0      	bne.n	8004140 <HAL_RCC_OscConfig+0x4ac>
 800415e:	e035      	b.n	80041cc <HAL_RCC_OscConfig+0x538>
 8004160:	40023800 	.word	0x40023800
 8004164:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004168:	4b1b      	ldr	r3, [pc, #108]	@ (80041d8 <HAL_RCC_OscConfig+0x544>)
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d028      	beq.n	80041c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004180:	429a      	cmp	r2, r3
 8004182:	d121      	bne.n	80041c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800418e:	429a      	cmp	r2, r3
 8004190:	d11a      	bne.n	80041c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004198:	4013      	ands	r3, r2
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800419e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d111      	bne.n	80041c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ae:	085b      	lsrs	r3, r3, #1
 80041b0:	3b01      	subs	r3, #1
 80041b2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d107      	bne.n	80041c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d001      	beq.n	80041cc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e000      	b.n	80041ce <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3718      	adds	r7, #24
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	40023800 	.word	0x40023800

080041dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80041e6:	2300      	movs	r3, #0
 80041e8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d101      	bne.n	80041f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e0d0      	b.n	8004396 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041f4:	4b6a      	ldr	r3, [pc, #424]	@ (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 030f 	and.w	r3, r3, #15
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d910      	bls.n	8004224 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004202:	4b67      	ldr	r3, [pc, #412]	@ (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f023 020f 	bic.w	r2, r3, #15
 800420a:	4965      	ldr	r1, [pc, #404]	@ (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	4313      	orrs	r3, r2
 8004210:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004212:	4b63      	ldr	r3, [pc, #396]	@ (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 030f 	and.w	r3, r3, #15
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	429a      	cmp	r2, r3
 800421e:	d001      	beq.n	8004224 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e0b8      	b.n	8004396 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0302 	and.w	r3, r3, #2
 800422c:	2b00      	cmp	r3, #0
 800422e:	d020      	beq.n	8004272 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	2b00      	cmp	r3, #0
 800423a:	d005      	beq.n	8004248 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800423c:	4b59      	ldr	r3, [pc, #356]	@ (80043a4 <HAL_RCC_ClockConfig+0x1c8>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	4a58      	ldr	r2, [pc, #352]	@ (80043a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004242:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004246:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0308 	and.w	r3, r3, #8
 8004250:	2b00      	cmp	r3, #0
 8004252:	d005      	beq.n	8004260 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004254:	4b53      	ldr	r3, [pc, #332]	@ (80043a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	4a52      	ldr	r2, [pc, #328]	@ (80043a4 <HAL_RCC_ClockConfig+0x1c8>)
 800425a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800425e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004260:	4b50      	ldr	r3, [pc, #320]	@ (80043a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	494d      	ldr	r1, [pc, #308]	@ (80043a4 <HAL_RCC_ClockConfig+0x1c8>)
 800426e:	4313      	orrs	r3, r2
 8004270:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b00      	cmp	r3, #0
 800427c:	d040      	beq.n	8004300 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d107      	bne.n	8004296 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004286:	4b47      	ldr	r3, [pc, #284]	@ (80043a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d115      	bne.n	80042be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e07f      	b.n	8004396 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	2b02      	cmp	r3, #2
 800429c:	d107      	bne.n	80042ae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800429e:	4b41      	ldr	r3, [pc, #260]	@ (80043a4 <HAL_RCC_ClockConfig+0x1c8>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d109      	bne.n	80042be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e073      	b.n	8004396 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ae:	4b3d      	ldr	r3, [pc, #244]	@ (80043a4 <HAL_RCC_ClockConfig+0x1c8>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e06b      	b.n	8004396 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042be:	4b39      	ldr	r3, [pc, #228]	@ (80043a4 <HAL_RCC_ClockConfig+0x1c8>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f023 0203 	bic.w	r2, r3, #3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	4936      	ldr	r1, [pc, #216]	@ (80043a4 <HAL_RCC_ClockConfig+0x1c8>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042d0:	f7fe f9fa 	bl	80026c8 <HAL_GetTick>
 80042d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042d6:	e00a      	b.n	80042ee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042d8:	f7fe f9f6 	bl	80026c8 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e053      	b.n	8004396 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ee:	4b2d      	ldr	r3, [pc, #180]	@ (80043a4 <HAL_RCC_ClockConfig+0x1c8>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 020c 	and.w	r2, r3, #12
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d1eb      	bne.n	80042d8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004300:	4b27      	ldr	r3, [pc, #156]	@ (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 030f 	and.w	r3, r3, #15
 8004308:	683a      	ldr	r2, [r7, #0]
 800430a:	429a      	cmp	r2, r3
 800430c:	d210      	bcs.n	8004330 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800430e:	4b24      	ldr	r3, [pc, #144]	@ (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f023 020f 	bic.w	r2, r3, #15
 8004316:	4922      	ldr	r1, [pc, #136]	@ (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	4313      	orrs	r3, r2
 800431c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800431e:	4b20      	ldr	r3, [pc, #128]	@ (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 030f 	and.w	r3, r3, #15
 8004326:	683a      	ldr	r2, [r7, #0]
 8004328:	429a      	cmp	r2, r3
 800432a:	d001      	beq.n	8004330 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e032      	b.n	8004396 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0304 	and.w	r3, r3, #4
 8004338:	2b00      	cmp	r3, #0
 800433a:	d008      	beq.n	800434e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800433c:	4b19      	ldr	r3, [pc, #100]	@ (80043a4 <HAL_RCC_ClockConfig+0x1c8>)
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	4916      	ldr	r1, [pc, #88]	@ (80043a4 <HAL_RCC_ClockConfig+0x1c8>)
 800434a:	4313      	orrs	r3, r2
 800434c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0308 	and.w	r3, r3, #8
 8004356:	2b00      	cmp	r3, #0
 8004358:	d009      	beq.n	800436e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800435a:	4b12      	ldr	r3, [pc, #72]	@ (80043a4 <HAL_RCC_ClockConfig+0x1c8>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	490e      	ldr	r1, [pc, #56]	@ (80043a4 <HAL_RCC_ClockConfig+0x1c8>)
 800436a:	4313      	orrs	r3, r2
 800436c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800436e:	f000 f821 	bl	80043b4 <HAL_RCC_GetSysClockFreq>
 8004372:	4602      	mov	r2, r0
 8004374:	4b0b      	ldr	r3, [pc, #44]	@ (80043a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	091b      	lsrs	r3, r3, #4
 800437a:	f003 030f 	and.w	r3, r3, #15
 800437e:	490a      	ldr	r1, [pc, #40]	@ (80043a8 <HAL_RCC_ClockConfig+0x1cc>)
 8004380:	5ccb      	ldrb	r3, [r1, r3]
 8004382:	fa22 f303 	lsr.w	r3, r2, r3
 8004386:	4a09      	ldr	r2, [pc, #36]	@ (80043ac <HAL_RCC_ClockConfig+0x1d0>)
 8004388:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800438a:	4b09      	ldr	r3, [pc, #36]	@ (80043b0 <HAL_RCC_ClockConfig+0x1d4>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4618      	mov	r0, r3
 8004390:	f7fe f956 	bl	8002640 <HAL_InitTick>

  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	40023c00 	.word	0x40023c00
 80043a4:	40023800 	.word	0x40023800
 80043a8:	080067ec 	.word	0x080067ec
 80043ac:	20000004 	.word	0x20000004
 80043b0:	20000008 	.word	0x20000008

080043b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043b8:	b090      	sub	sp, #64	@ 0x40
 80043ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80043bc:	2300      	movs	r3, #0
 80043be:	637b      	str	r3, [r7, #52]	@ 0x34
 80043c0:	2300      	movs	r3, #0
 80043c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043c4:	2300      	movs	r3, #0
 80043c6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80043c8:	2300      	movs	r3, #0
 80043ca:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043cc:	4b59      	ldr	r3, [pc, #356]	@ (8004534 <HAL_RCC_GetSysClockFreq+0x180>)
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f003 030c 	and.w	r3, r3, #12
 80043d4:	2b08      	cmp	r3, #8
 80043d6:	d00d      	beq.n	80043f4 <HAL_RCC_GetSysClockFreq+0x40>
 80043d8:	2b08      	cmp	r3, #8
 80043da:	f200 80a1 	bhi.w	8004520 <HAL_RCC_GetSysClockFreq+0x16c>
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d002      	beq.n	80043e8 <HAL_RCC_GetSysClockFreq+0x34>
 80043e2:	2b04      	cmp	r3, #4
 80043e4:	d003      	beq.n	80043ee <HAL_RCC_GetSysClockFreq+0x3a>
 80043e6:	e09b      	b.n	8004520 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043e8:	4b53      	ldr	r3, [pc, #332]	@ (8004538 <HAL_RCC_GetSysClockFreq+0x184>)
 80043ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80043ec:	e09b      	b.n	8004526 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043ee:	4b53      	ldr	r3, [pc, #332]	@ (800453c <HAL_RCC_GetSysClockFreq+0x188>)
 80043f0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80043f2:	e098      	b.n	8004526 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043f4:	4b4f      	ldr	r3, [pc, #316]	@ (8004534 <HAL_RCC_GetSysClockFreq+0x180>)
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043fc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80043fe:	4b4d      	ldr	r3, [pc, #308]	@ (8004534 <HAL_RCC_GetSysClockFreq+0x180>)
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d028      	beq.n	800445c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800440a:	4b4a      	ldr	r3, [pc, #296]	@ (8004534 <HAL_RCC_GetSysClockFreq+0x180>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	099b      	lsrs	r3, r3, #6
 8004410:	2200      	movs	r2, #0
 8004412:	623b      	str	r3, [r7, #32]
 8004414:	627a      	str	r2, [r7, #36]	@ 0x24
 8004416:	6a3b      	ldr	r3, [r7, #32]
 8004418:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800441c:	2100      	movs	r1, #0
 800441e:	4b47      	ldr	r3, [pc, #284]	@ (800453c <HAL_RCC_GetSysClockFreq+0x188>)
 8004420:	fb03 f201 	mul.w	r2, r3, r1
 8004424:	2300      	movs	r3, #0
 8004426:	fb00 f303 	mul.w	r3, r0, r3
 800442a:	4413      	add	r3, r2
 800442c:	4a43      	ldr	r2, [pc, #268]	@ (800453c <HAL_RCC_GetSysClockFreq+0x188>)
 800442e:	fba0 1202 	umull	r1, r2, r0, r2
 8004432:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004434:	460a      	mov	r2, r1
 8004436:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004438:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800443a:	4413      	add	r3, r2
 800443c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800443e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004440:	2200      	movs	r2, #0
 8004442:	61bb      	str	r3, [r7, #24]
 8004444:	61fa      	str	r2, [r7, #28]
 8004446:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800444a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800444e:	f7fc fb55 	bl	8000afc <__aeabi_uldivmod>
 8004452:	4602      	mov	r2, r0
 8004454:	460b      	mov	r3, r1
 8004456:	4613      	mov	r3, r2
 8004458:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800445a:	e053      	b.n	8004504 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800445c:	4b35      	ldr	r3, [pc, #212]	@ (8004534 <HAL_RCC_GetSysClockFreq+0x180>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	099b      	lsrs	r3, r3, #6
 8004462:	2200      	movs	r2, #0
 8004464:	613b      	str	r3, [r7, #16]
 8004466:	617a      	str	r2, [r7, #20]
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800446e:	f04f 0b00 	mov.w	fp, #0
 8004472:	4652      	mov	r2, sl
 8004474:	465b      	mov	r3, fp
 8004476:	f04f 0000 	mov.w	r0, #0
 800447a:	f04f 0100 	mov.w	r1, #0
 800447e:	0159      	lsls	r1, r3, #5
 8004480:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004484:	0150      	lsls	r0, r2, #5
 8004486:	4602      	mov	r2, r0
 8004488:	460b      	mov	r3, r1
 800448a:	ebb2 080a 	subs.w	r8, r2, sl
 800448e:	eb63 090b 	sbc.w	r9, r3, fp
 8004492:	f04f 0200 	mov.w	r2, #0
 8004496:	f04f 0300 	mov.w	r3, #0
 800449a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800449e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80044a2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80044a6:	ebb2 0408 	subs.w	r4, r2, r8
 80044aa:	eb63 0509 	sbc.w	r5, r3, r9
 80044ae:	f04f 0200 	mov.w	r2, #0
 80044b2:	f04f 0300 	mov.w	r3, #0
 80044b6:	00eb      	lsls	r3, r5, #3
 80044b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044bc:	00e2      	lsls	r2, r4, #3
 80044be:	4614      	mov	r4, r2
 80044c0:	461d      	mov	r5, r3
 80044c2:	eb14 030a 	adds.w	r3, r4, sl
 80044c6:	603b      	str	r3, [r7, #0]
 80044c8:	eb45 030b 	adc.w	r3, r5, fp
 80044cc:	607b      	str	r3, [r7, #4]
 80044ce:	f04f 0200 	mov.w	r2, #0
 80044d2:	f04f 0300 	mov.w	r3, #0
 80044d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044da:	4629      	mov	r1, r5
 80044dc:	028b      	lsls	r3, r1, #10
 80044de:	4621      	mov	r1, r4
 80044e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044e4:	4621      	mov	r1, r4
 80044e6:	028a      	lsls	r2, r1, #10
 80044e8:	4610      	mov	r0, r2
 80044ea:	4619      	mov	r1, r3
 80044ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044ee:	2200      	movs	r2, #0
 80044f0:	60bb      	str	r3, [r7, #8]
 80044f2:	60fa      	str	r2, [r7, #12]
 80044f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044f8:	f7fc fb00 	bl	8000afc <__aeabi_uldivmod>
 80044fc:	4602      	mov	r2, r0
 80044fe:	460b      	mov	r3, r1
 8004500:	4613      	mov	r3, r2
 8004502:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004504:	4b0b      	ldr	r3, [pc, #44]	@ (8004534 <HAL_RCC_GetSysClockFreq+0x180>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	0c1b      	lsrs	r3, r3, #16
 800450a:	f003 0303 	and.w	r3, r3, #3
 800450e:	3301      	adds	r3, #1
 8004510:	005b      	lsls	r3, r3, #1
 8004512:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004514:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004518:	fbb2 f3f3 	udiv	r3, r2, r3
 800451c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800451e:	e002      	b.n	8004526 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004520:	4b05      	ldr	r3, [pc, #20]	@ (8004538 <HAL_RCC_GetSysClockFreq+0x184>)
 8004522:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004524:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004528:	4618      	mov	r0, r3
 800452a:	3740      	adds	r7, #64	@ 0x40
 800452c:	46bd      	mov	sp, r7
 800452e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004532:	bf00      	nop
 8004534:	40023800 	.word	0x40023800
 8004538:	00f42400 	.word	0x00f42400
 800453c:	017d7840 	.word	0x017d7840

08004540 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004540:	b480      	push	{r7}
 8004542:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004544:	4b03      	ldr	r3, [pc, #12]	@ (8004554 <HAL_RCC_GetHCLKFreq+0x14>)
 8004546:	681b      	ldr	r3, [r3, #0]
}
 8004548:	4618      	mov	r0, r3
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	20000004 	.word	0x20000004

08004558 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800455c:	f7ff fff0 	bl	8004540 <HAL_RCC_GetHCLKFreq>
 8004560:	4602      	mov	r2, r0
 8004562:	4b05      	ldr	r3, [pc, #20]	@ (8004578 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	0a9b      	lsrs	r3, r3, #10
 8004568:	f003 0307 	and.w	r3, r3, #7
 800456c:	4903      	ldr	r1, [pc, #12]	@ (800457c <HAL_RCC_GetPCLK1Freq+0x24>)
 800456e:	5ccb      	ldrb	r3, [r1, r3]
 8004570:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004574:	4618      	mov	r0, r3
 8004576:	bd80      	pop	{r7, pc}
 8004578:	40023800 	.word	0x40023800
 800457c:	080067fc 	.word	0x080067fc

08004580 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004584:	f7ff ffdc 	bl	8004540 <HAL_RCC_GetHCLKFreq>
 8004588:	4602      	mov	r2, r0
 800458a:	4b05      	ldr	r3, [pc, #20]	@ (80045a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	0b5b      	lsrs	r3, r3, #13
 8004590:	f003 0307 	and.w	r3, r3, #7
 8004594:	4903      	ldr	r1, [pc, #12]	@ (80045a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004596:	5ccb      	ldrb	r3, [r1, r3]
 8004598:	fa22 f303 	lsr.w	r3, r2, r3
}
 800459c:	4618      	mov	r0, r3
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	40023800 	.word	0x40023800
 80045a4:	080067fc 	.word	0x080067fc

080045a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b088      	sub	sp, #32
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80045b0:	2300      	movs	r3, #0
 80045b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80045b4:	2300      	movs	r3, #0
 80045b6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80045b8:	2300      	movs	r3, #0
 80045ba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80045bc:	2300      	movs	r3, #0
 80045be:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80045c0:	2300      	movs	r3, #0
 80045c2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d012      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80045d0:	4b69      	ldr	r3, [pc, #420]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	4a68      	ldr	r2, [pc, #416]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045d6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80045da:	6093      	str	r3, [r2, #8]
 80045dc:	4b66      	ldr	r3, [pc, #408]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045de:	689a      	ldr	r2, [r3, #8]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045e4:	4964      	ldr	r1, [pc, #400]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80045f2:	2301      	movs	r3, #1
 80045f4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d017      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004602:	4b5d      	ldr	r3, [pc, #372]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004604:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004608:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004610:	4959      	ldr	r1, [pc, #356]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004612:	4313      	orrs	r3, r2
 8004614:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800461c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004620:	d101      	bne.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004622:	2301      	movs	r3, #1
 8004624:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800462e:	2301      	movs	r3, #1
 8004630:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d017      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800463e:	4b4e      	ldr	r3, [pc, #312]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004640:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004644:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464c:	494a      	ldr	r1, [pc, #296]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800464e:	4313      	orrs	r3, r2
 8004650:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004658:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800465c:	d101      	bne.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800465e:	2301      	movs	r3, #1
 8004660:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800466a:	2301      	movs	r3, #1
 800466c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800467a:	2301      	movs	r3, #1
 800467c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0320 	and.w	r3, r3, #32
 8004686:	2b00      	cmp	r3, #0
 8004688:	f000 808b 	beq.w	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800468c:	4b3a      	ldr	r3, [pc, #232]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800468e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004690:	4a39      	ldr	r2, [pc, #228]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004692:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004696:	6413      	str	r3, [r2, #64]	@ 0x40
 8004698:	4b37      	ldr	r3, [pc, #220]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800469a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046a0:	60bb      	str	r3, [r7, #8]
 80046a2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80046a4:	4b35      	ldr	r3, [pc, #212]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a34      	ldr	r2, [pc, #208]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80046aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046b0:	f7fe f80a 	bl	80026c8 <HAL_GetTick>
 80046b4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80046b6:	e008      	b.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046b8:	f7fe f806 	bl	80026c8 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b64      	cmp	r3, #100	@ 0x64
 80046c4:	d901      	bls.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e357      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80046ca:	4b2c      	ldr	r3, [pc, #176]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d0f0      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046d6:	4b28      	ldr	r3, [pc, #160]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046de:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d035      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d02e      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046f4:	4b20      	ldr	r3, [pc, #128]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046fc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046fe:	4b1e      	ldr	r3, [pc, #120]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004702:	4a1d      	ldr	r2, [pc, #116]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004704:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004708:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800470a:	4b1b      	ldr	r3, [pc, #108]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800470c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800470e:	4a1a      	ldr	r2, [pc, #104]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004710:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004714:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004716:	4a18      	ldr	r2, [pc, #96]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800471c:	4b16      	ldr	r3, [pc, #88]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800471e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	2b01      	cmp	r3, #1
 8004726:	d114      	bne.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004728:	f7fd ffce 	bl	80026c8 <HAL_GetTick>
 800472c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800472e:	e00a      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004730:	f7fd ffca 	bl	80026c8 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800473e:	4293      	cmp	r3, r2
 8004740:	d901      	bls.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e319      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004746:	4b0c      	ldr	r3, [pc, #48]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	2b00      	cmp	r3, #0
 8004750:	d0ee      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004756:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800475a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800475e:	d111      	bne.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004760:	4b05      	ldr	r3, [pc, #20]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800476c:	4b04      	ldr	r3, [pc, #16]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800476e:	400b      	ands	r3, r1
 8004770:	4901      	ldr	r1, [pc, #4]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004772:	4313      	orrs	r3, r2
 8004774:	608b      	str	r3, [r1, #8]
 8004776:	e00b      	b.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004778:	40023800 	.word	0x40023800
 800477c:	40007000 	.word	0x40007000
 8004780:	0ffffcff 	.word	0x0ffffcff
 8004784:	4baa      	ldr	r3, [pc, #680]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	4aa9      	ldr	r2, [pc, #676]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800478a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800478e:	6093      	str	r3, [r2, #8]
 8004790:	4ba7      	ldr	r3, [pc, #668]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004792:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004798:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800479c:	49a4      	ldr	r1, [pc, #656]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0310 	and.w	r3, r3, #16
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d010      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80047ae:	4ba0      	ldr	r3, [pc, #640]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047b4:	4a9e      	ldr	r2, [pc, #632]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047ba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80047be:	4b9c      	ldr	r3, [pc, #624]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047c0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047c8:	4999      	ldr	r1, [pc, #612]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00a      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047dc:	4b94      	ldr	r3, [pc, #592]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047e2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047ea:	4991      	ldr	r1, [pc, #580]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00a      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047fe:	4b8c      	ldr	r3, [pc, #560]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004800:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004804:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800480c:	4988      	ldr	r1, [pc, #544]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800480e:	4313      	orrs	r3, r2
 8004810:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00a      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004820:	4b83      	ldr	r3, [pc, #524]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004822:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004826:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800482e:	4980      	ldr	r1, [pc, #512]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004830:	4313      	orrs	r3, r2
 8004832:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00a      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004842:	4b7b      	ldr	r3, [pc, #492]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004844:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004848:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004850:	4977      	ldr	r1, [pc, #476]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004852:	4313      	orrs	r3, r2
 8004854:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00a      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004864:	4b72      	ldr	r3, [pc, #456]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800486a:	f023 0203 	bic.w	r2, r3, #3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004872:	496f      	ldr	r1, [pc, #444]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004874:	4313      	orrs	r3, r2
 8004876:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00a      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004886:	4b6a      	ldr	r3, [pc, #424]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004888:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800488c:	f023 020c 	bic.w	r2, r3, #12
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004894:	4966      	ldr	r1, [pc, #408]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004896:	4313      	orrs	r3, r2
 8004898:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00a      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048a8:	4b61      	ldr	r3, [pc, #388]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048ae:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048b6:	495e      	ldr	r1, [pc, #376]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00a      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048ca:	4b59      	ldr	r3, [pc, #356]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048d0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048d8:	4955      	ldr	r1, [pc, #340]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00a      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048ec:	4b50      	ldr	r3, [pc, #320]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048f2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048fa:	494d      	ldr	r1, [pc, #308]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00a      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800490e:	4b48      	ldr	r3, [pc, #288]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004910:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004914:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800491c:	4944      	ldr	r1, [pc, #272]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800491e:	4313      	orrs	r3, r2
 8004920:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00a      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004930:	4b3f      	ldr	r3, [pc, #252]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004936:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800493e:	493c      	ldr	r1, [pc, #240]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004940:	4313      	orrs	r3, r2
 8004942:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00a      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004952:	4b37      	ldr	r3, [pc, #220]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004954:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004958:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004960:	4933      	ldr	r1, [pc, #204]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004962:	4313      	orrs	r3, r2
 8004964:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00a      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004974:	4b2e      	ldr	r3, [pc, #184]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004976:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800497a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004982:	492b      	ldr	r1, [pc, #172]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004984:	4313      	orrs	r3, r2
 8004986:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d011      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004996:	4b26      	ldr	r3, [pc, #152]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004998:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800499c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049a4:	4922      	ldr	r1, [pc, #136]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049b4:	d101      	bne.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80049b6:	2301      	movs	r3, #1
 80049b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0308 	and.w	r3, r3, #8
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d001      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80049c6:	2301      	movs	r3, #1
 80049c8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00a      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049d6:	4b16      	ldr	r3, [pc, #88]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049dc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049e4:	4912      	ldr	r1, [pc, #72]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00b      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80049f8:	4b0d      	ldr	r3, [pc, #52]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049fe:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a08:	4909      	ldr	r1, [pc, #36]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d006      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f000 80d9 	beq.w	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a24:	4b02      	ldr	r3, [pc, #8]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a01      	ldr	r2, [pc, #4]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a2a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004a2e:	e001      	b.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004a30:	40023800 	.word	0x40023800
 8004a34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a36:	f7fd fe47 	bl	80026c8 <HAL_GetTick>
 8004a3a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a3c:	e008      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a3e:	f7fd fe43 	bl	80026c8 <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	2b64      	cmp	r3, #100	@ 0x64
 8004a4a:	d901      	bls.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e194      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a50:	4b6c      	ldr	r3, [pc, #432]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1f0      	bne.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0301 	and.w	r3, r3, #1
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d021      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d11d      	bne.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a70:	4b64      	ldr	r3, [pc, #400]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a76:	0c1b      	lsrs	r3, r3, #16
 8004a78:	f003 0303 	and.w	r3, r3, #3
 8004a7c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a7e:	4b61      	ldr	r3, [pc, #388]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a84:	0e1b      	lsrs	r3, r3, #24
 8004a86:	f003 030f 	and.w	r3, r3, #15
 8004a8a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	019a      	lsls	r2, r3, #6
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	041b      	lsls	r3, r3, #16
 8004a96:	431a      	orrs	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	061b      	lsls	r3, r3, #24
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	071b      	lsls	r3, r3, #28
 8004aa4:	4957      	ldr	r1, [pc, #348]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d004      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004abc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ac0:	d00a      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d02e      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ad6:	d129      	bne.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004ad8:	4b4a      	ldr	r3, [pc, #296]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ada:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ade:	0c1b      	lsrs	r3, r3, #16
 8004ae0:	f003 0303 	and.w	r3, r3, #3
 8004ae4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ae6:	4b47      	ldr	r3, [pc, #284]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ae8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004aec:	0f1b      	lsrs	r3, r3, #28
 8004aee:	f003 0307 	and.w	r3, r3, #7
 8004af2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	019a      	lsls	r2, r3, #6
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	041b      	lsls	r3, r3, #16
 8004afe:	431a      	orrs	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	061b      	lsls	r3, r3, #24
 8004b06:	431a      	orrs	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	071b      	lsls	r3, r3, #28
 8004b0c:	493d      	ldr	r1, [pc, #244]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004b14:	4b3b      	ldr	r3, [pc, #236]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b1a:	f023 021f 	bic.w	r2, r3, #31
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b22:	3b01      	subs	r3, #1
 8004b24:	4937      	ldr	r1, [pc, #220]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d01d      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b38:	4b32      	ldr	r3, [pc, #200]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b3e:	0e1b      	lsrs	r3, r3, #24
 8004b40:	f003 030f 	and.w	r3, r3, #15
 8004b44:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b46:	4b2f      	ldr	r3, [pc, #188]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b4c:	0f1b      	lsrs	r3, r3, #28
 8004b4e:	f003 0307 	and.w	r3, r3, #7
 8004b52:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	019a      	lsls	r2, r3, #6
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	041b      	lsls	r3, r3, #16
 8004b60:	431a      	orrs	r2, r3
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	061b      	lsls	r3, r3, #24
 8004b66:	431a      	orrs	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	071b      	lsls	r3, r3, #28
 8004b6c:	4925      	ldr	r1, [pc, #148]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d011      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	019a      	lsls	r2, r3, #6
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	041b      	lsls	r3, r3, #16
 8004b8c:	431a      	orrs	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	061b      	lsls	r3, r3, #24
 8004b94:	431a      	orrs	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	071b      	lsls	r3, r3, #28
 8004b9c:	4919      	ldr	r1, [pc, #100]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ba4:	4b17      	ldr	r3, [pc, #92]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a16      	ldr	r2, [pc, #88]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004baa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004bae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bb0:	f7fd fd8a 	bl	80026c8 <HAL_GetTick>
 8004bb4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bb6:	e008      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004bb8:	f7fd fd86 	bl	80026c8 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b64      	cmp	r3, #100	@ 0x64
 8004bc4:	d901      	bls.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e0d7      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bca:	4b0e      	ldr	r3, [pc, #56]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d0f0      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	f040 80cd 	bne.w	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004bde:	4b09      	ldr	r3, [pc, #36]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a08      	ldr	r2, [pc, #32]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004be4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004be8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bea:	f7fd fd6d 	bl	80026c8 <HAL_GetTick>
 8004bee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004bf0:	e00a      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004bf2:	f7fd fd69 	bl	80026c8 <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	2b64      	cmp	r3, #100	@ 0x64
 8004bfe:	d903      	bls.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e0ba      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004c04:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c08:	4b5e      	ldr	r3, [pc, #376]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c14:	d0ed      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d003      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d009      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d02e      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d12a      	bne.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c3e:	4b51      	ldr	r3, [pc, #324]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c44:	0c1b      	lsrs	r3, r3, #16
 8004c46:	f003 0303 	and.w	r3, r3, #3
 8004c4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c4c:	4b4d      	ldr	r3, [pc, #308]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c52:	0f1b      	lsrs	r3, r3, #28
 8004c54:	f003 0307 	and.w	r3, r3, #7
 8004c58:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	019a      	lsls	r2, r3, #6
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	041b      	lsls	r3, r3, #16
 8004c64:	431a      	orrs	r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	061b      	lsls	r3, r3, #24
 8004c6c:	431a      	orrs	r2, r3
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	071b      	lsls	r3, r3, #28
 8004c72:	4944      	ldr	r1, [pc, #272]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004c7a:	4b42      	ldr	r3, [pc, #264]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c80:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	021b      	lsls	r3, r3, #8
 8004c8c:	493d      	ldr	r1, [pc, #244]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d022      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ca4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ca8:	d11d      	bne.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004caa:	4b36      	ldr	r3, [pc, #216]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cb0:	0e1b      	lsrs	r3, r3, #24
 8004cb2:	f003 030f 	and.w	r3, r3, #15
 8004cb6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004cb8:	4b32      	ldr	r3, [pc, #200]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cbe:	0f1b      	lsrs	r3, r3, #28
 8004cc0:	f003 0307 	and.w	r3, r3, #7
 8004cc4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	019a      	lsls	r2, r3, #6
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a1b      	ldr	r3, [r3, #32]
 8004cd0:	041b      	lsls	r3, r3, #16
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	061b      	lsls	r3, r3, #24
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	071b      	lsls	r3, r3, #28
 8004cde:	4929      	ldr	r1, [pc, #164]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0308 	and.w	r3, r3, #8
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d028      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004cf2:	4b24      	ldr	r3, [pc, #144]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cf8:	0e1b      	lsrs	r3, r3, #24
 8004cfa:	f003 030f 	and.w	r3, r3, #15
 8004cfe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d00:	4b20      	ldr	r3, [pc, #128]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d06:	0c1b      	lsrs	r3, r3, #16
 8004d08:	f003 0303 	and.w	r3, r3, #3
 8004d0c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	019a      	lsls	r2, r3, #6
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	041b      	lsls	r3, r3, #16
 8004d18:	431a      	orrs	r2, r3
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	061b      	lsls	r3, r3, #24
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	69db      	ldr	r3, [r3, #28]
 8004d24:	071b      	lsls	r3, r3, #28
 8004d26:	4917      	ldr	r1, [pc, #92]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004d2e:	4b15      	ldr	r3, [pc, #84]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d34:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d3c:	4911      	ldr	r1, [pc, #68]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004d44:	4b0f      	ldr	r3, [pc, #60]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a0e      	ldr	r2, [pc, #56]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d50:	f7fd fcba 	bl	80026c8 <HAL_GetTick>
 8004d54:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d56:	e008      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d58:	f7fd fcb6 	bl	80026c8 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b64      	cmp	r3, #100	@ 0x64
 8004d64:	d901      	bls.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e007      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d6a:	4b06      	ldr	r3, [pc, #24]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d76:	d1ef      	bne.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3720      	adds	r7, #32
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	40023800 	.word	0x40023800

08004d88 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b086      	sub	sp, #24
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d101      	bne.n	8004d9c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e08f      	b.n	8004ebc <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d106      	bne.n	8004db6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f7fd faf5 	bl	80023a0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2202      	movs	r2, #2
 8004dba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	6899      	ldr	r1, [r3, #8]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	4b3e      	ldr	r3, [pc, #248]	@ (8004ec4 <HAL_TIM_Encoder_Init+0x13c>)
 8004dca:	400b      	ands	r3, r1
 8004dcc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	3304      	adds	r3, #4
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	4610      	mov	r0, r2
 8004dda:	f000 f909 	bl	8004ff0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	4b31      	ldr	r3, [pc, #196]	@ (8004ec8 <HAL_TIM_Encoder_Init+0x140>)
 8004e04:	4013      	ands	r3, r2
 8004e06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	689a      	ldr	r2, [r3, #8]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	021b      	lsls	r3, r3, #8
 8004e12:	4313      	orrs	r3, r2
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	4b2b      	ldr	r3, [pc, #172]	@ (8004ecc <HAL_TIM_Encoder_Init+0x144>)
 8004e1e:	4013      	ands	r3, r2
 8004e20:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	4b2a      	ldr	r3, [pc, #168]	@ (8004ed0 <HAL_TIM_Encoder_Init+0x148>)
 8004e26:	4013      	ands	r3, r2
 8004e28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	68da      	ldr	r2, [r3, #12]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	021b      	lsls	r3, r3, #8
 8004e34:	4313      	orrs	r3, r2
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	011a      	lsls	r2, r3, #4
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	031b      	lsls	r3, r3, #12
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004e56:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004e5e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	695b      	ldr	r3, [r3, #20]
 8004e68:	011b      	lsls	r3, r3, #4
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3718      	adds	r7, #24
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	fffebff8 	.word	0xfffebff8
 8004ec8:	fffffcfc 	.word	0xfffffcfc
 8004ecc:	fffff3f3 	.word	0xfffff3f3
 8004ed0:	ffff0f0f 	.word	0xffff0f0f

08004ed4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ee4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004eec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004ef4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004efc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d110      	bne.n	8004f26 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f04:	7bfb      	ldrb	r3, [r7, #15]
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d102      	bne.n	8004f10 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f0a:	7b7b      	ldrb	r3, [r7, #13]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d001      	beq.n	8004f14 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e069      	b.n	8004fe8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2202      	movs	r2, #2
 8004f18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2202      	movs	r2, #2
 8004f20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f24:	e031      	b.n	8004f8a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	2b04      	cmp	r3, #4
 8004f2a:	d110      	bne.n	8004f4e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f2c:	7bbb      	ldrb	r3, [r7, #14]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d102      	bne.n	8004f38 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f32:	7b3b      	ldrb	r3, [r7, #12]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d001      	beq.n	8004f3c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e055      	b.n	8004fe8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2202      	movs	r2, #2
 8004f40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2202      	movs	r2, #2
 8004f48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f4c:	e01d      	b.n	8004f8a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f4e:	7bfb      	ldrb	r3, [r7, #15]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d108      	bne.n	8004f66 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f54:	7bbb      	ldrb	r3, [r7, #14]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d105      	bne.n	8004f66 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f5a:	7b7b      	ldrb	r3, [r7, #13]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d102      	bne.n	8004f66 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f60:	7b3b      	ldrb	r3, [r7, #12]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d001      	beq.n	8004f6a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e03e      	b.n	8004fe8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2202      	movs	r2, #2
 8004f6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2202      	movs	r2, #2
 8004f76:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2202      	movs	r2, #2
 8004f7e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2202      	movs	r2, #2
 8004f86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d003      	beq.n	8004f98 <HAL_TIM_Encoder_Start+0xc4>
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	2b04      	cmp	r3, #4
 8004f94:	d008      	beq.n	8004fa8 <HAL_TIM_Encoder_Start+0xd4>
 8004f96:	e00f      	b.n	8004fb8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f000 f8cb 	bl	800513c <TIM_CCxChannelCmd>
      break;
 8004fa6:	e016      	b.n	8004fd6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2201      	movs	r2, #1
 8004fae:	2104      	movs	r1, #4
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f000 f8c3 	bl	800513c <TIM_CCxChannelCmd>
      break;
 8004fb6:	e00e      	b.n	8004fd6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	2100      	movs	r1, #0
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f000 f8bb 	bl	800513c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	2104      	movs	r1, #4
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f000 f8b4 	bl	800513c <TIM_CCxChannelCmd>
      break;
 8004fd4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f042 0201 	orr.w	r2, r2, #1
 8004fe4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a43      	ldr	r2, [pc, #268]	@ (8005110 <TIM_Base_SetConfig+0x120>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d013      	beq.n	8005030 <TIM_Base_SetConfig+0x40>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800500e:	d00f      	beq.n	8005030 <TIM_Base_SetConfig+0x40>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a40      	ldr	r2, [pc, #256]	@ (8005114 <TIM_Base_SetConfig+0x124>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d00b      	beq.n	8005030 <TIM_Base_SetConfig+0x40>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a3f      	ldr	r2, [pc, #252]	@ (8005118 <TIM_Base_SetConfig+0x128>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d007      	beq.n	8005030 <TIM_Base_SetConfig+0x40>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a3e      	ldr	r2, [pc, #248]	@ (800511c <TIM_Base_SetConfig+0x12c>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d003      	beq.n	8005030 <TIM_Base_SetConfig+0x40>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a3d      	ldr	r2, [pc, #244]	@ (8005120 <TIM_Base_SetConfig+0x130>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d108      	bne.n	8005042 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005036:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	4313      	orrs	r3, r2
 8005040:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a32      	ldr	r2, [pc, #200]	@ (8005110 <TIM_Base_SetConfig+0x120>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d02b      	beq.n	80050a2 <TIM_Base_SetConfig+0xb2>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005050:	d027      	beq.n	80050a2 <TIM_Base_SetConfig+0xb2>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a2f      	ldr	r2, [pc, #188]	@ (8005114 <TIM_Base_SetConfig+0x124>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d023      	beq.n	80050a2 <TIM_Base_SetConfig+0xb2>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a2e      	ldr	r2, [pc, #184]	@ (8005118 <TIM_Base_SetConfig+0x128>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d01f      	beq.n	80050a2 <TIM_Base_SetConfig+0xb2>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a2d      	ldr	r2, [pc, #180]	@ (800511c <TIM_Base_SetConfig+0x12c>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d01b      	beq.n	80050a2 <TIM_Base_SetConfig+0xb2>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a2c      	ldr	r2, [pc, #176]	@ (8005120 <TIM_Base_SetConfig+0x130>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d017      	beq.n	80050a2 <TIM_Base_SetConfig+0xb2>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a2b      	ldr	r2, [pc, #172]	@ (8005124 <TIM_Base_SetConfig+0x134>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d013      	beq.n	80050a2 <TIM_Base_SetConfig+0xb2>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a2a      	ldr	r2, [pc, #168]	@ (8005128 <TIM_Base_SetConfig+0x138>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d00f      	beq.n	80050a2 <TIM_Base_SetConfig+0xb2>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a29      	ldr	r2, [pc, #164]	@ (800512c <TIM_Base_SetConfig+0x13c>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d00b      	beq.n	80050a2 <TIM_Base_SetConfig+0xb2>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a28      	ldr	r2, [pc, #160]	@ (8005130 <TIM_Base_SetConfig+0x140>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d007      	beq.n	80050a2 <TIM_Base_SetConfig+0xb2>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a27      	ldr	r2, [pc, #156]	@ (8005134 <TIM_Base_SetConfig+0x144>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d003      	beq.n	80050a2 <TIM_Base_SetConfig+0xb2>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a26      	ldr	r2, [pc, #152]	@ (8005138 <TIM_Base_SetConfig+0x148>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d108      	bne.n	80050b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	4313      	orrs	r3, r2
 80050c0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	689a      	ldr	r2, [r3, #8]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a0e      	ldr	r2, [pc, #56]	@ (8005110 <TIM_Base_SetConfig+0x120>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d003      	beq.n	80050e2 <TIM_Base_SetConfig+0xf2>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a10      	ldr	r2, [pc, #64]	@ (8005120 <TIM_Base_SetConfig+0x130>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d103      	bne.n	80050ea <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	691a      	ldr	r2, [r3, #16]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f043 0204 	orr.w	r2, r3, #4
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2201      	movs	r2, #1
 80050fa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	601a      	str	r2, [r3, #0]
}
 8005102:	bf00      	nop
 8005104:	3714      	adds	r7, #20
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	40010000 	.word	0x40010000
 8005114:	40000400 	.word	0x40000400
 8005118:	40000800 	.word	0x40000800
 800511c:	40000c00 	.word	0x40000c00
 8005120:	40010400 	.word	0x40010400
 8005124:	40014000 	.word	0x40014000
 8005128:	40014400 	.word	0x40014400
 800512c:	40014800 	.word	0x40014800
 8005130:	40001800 	.word	0x40001800
 8005134:	40001c00 	.word	0x40001c00
 8005138:	40002000 	.word	0x40002000

0800513c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800513c:	b480      	push	{r7}
 800513e:	b087      	sub	sp, #28
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	f003 031f 	and.w	r3, r3, #31
 800514e:	2201      	movs	r2, #1
 8005150:	fa02 f303 	lsl.w	r3, r2, r3
 8005154:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6a1a      	ldr	r2, [r3, #32]
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	43db      	mvns	r3, r3
 800515e:	401a      	ands	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6a1a      	ldr	r2, [r3, #32]
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	f003 031f 	and.w	r3, r3, #31
 800516e:	6879      	ldr	r1, [r7, #4]
 8005170:	fa01 f303 	lsl.w	r3, r1, r3
 8005174:	431a      	orrs	r2, r3
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	621a      	str	r2, [r3, #32]
}
 800517a:	bf00      	nop
 800517c:	371c      	adds	r7, #28
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
	...

08005188 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005198:	2b01      	cmp	r3, #1
 800519a:	d101      	bne.n	80051a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800519c:	2302      	movs	r3, #2
 800519e:	e06d      	b.n	800527c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2202      	movs	r2, #2
 80051ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a30      	ldr	r2, [pc, #192]	@ (8005288 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d004      	beq.n	80051d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a2f      	ldr	r2, [pc, #188]	@ (800528c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d108      	bne.n	80051e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80051da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a20      	ldr	r2, [pc, #128]	@ (8005288 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d022      	beq.n	8005250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005212:	d01d      	beq.n	8005250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a1d      	ldr	r2, [pc, #116]	@ (8005290 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d018      	beq.n	8005250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a1c      	ldr	r2, [pc, #112]	@ (8005294 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d013      	beq.n	8005250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a1a      	ldr	r2, [pc, #104]	@ (8005298 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d00e      	beq.n	8005250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a15      	ldr	r2, [pc, #84]	@ (800528c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d009      	beq.n	8005250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a16      	ldr	r2, [pc, #88]	@ (800529c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d004      	beq.n	8005250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a15      	ldr	r2, [pc, #84]	@ (80052a0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d10c      	bne.n	800526a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005256:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	4313      	orrs	r3, r2
 8005260:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3714      	adds	r7, #20
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr
 8005288:	40010000 	.word	0x40010000
 800528c:	40010400 	.word	0x40010400
 8005290:	40000400 	.word	0x40000400
 8005294:	40000800 	.word	0x40000800
 8005298:	40000c00 	.word	0x40000c00
 800529c:	40014000 	.word	0x40014000
 80052a0:	40001800 	.word	0x40001800

080052a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e040      	b.n	8005338 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d106      	bne.n	80052cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f7fd f8ae 	bl	8002428 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2224      	movs	r2, #36	@ 0x24
 80052d0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f022 0201 	bic.w	r2, r2, #1
 80052e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d002      	beq.n	80052f0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 fb16 	bl	800591c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 f8af 	bl	8005454 <UART_SetConfig>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d101      	bne.n	8005300 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e01b      	b.n	8005338 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	685a      	ldr	r2, [r3, #4]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800530e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	689a      	ldr	r2, [r3, #8]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800531e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f042 0201 	orr.w	r2, r2, #1
 800532e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 fb95 	bl	8005a60 <UART_CheckIdleState>
 8005336:	4603      	mov	r3, r0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3708      	adds	r7, #8
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b08a      	sub	sp, #40	@ 0x28
 8005344:	af02      	add	r7, sp, #8
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	603b      	str	r3, [r7, #0]
 800534c:	4613      	mov	r3, r2
 800534e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005354:	2b20      	cmp	r3, #32
 8005356:	d177      	bne.n	8005448 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d002      	beq.n	8005364 <HAL_UART_Transmit+0x24>
 800535e:	88fb      	ldrh	r3, [r7, #6]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d101      	bne.n	8005368 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e070      	b.n	800544a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2221      	movs	r2, #33	@ 0x21
 8005374:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005376:	f7fd f9a7 	bl	80026c8 <HAL_GetTick>
 800537a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	88fa      	ldrh	r2, [r7, #6]
 8005380:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	88fa      	ldrh	r2, [r7, #6]
 8005388:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005394:	d108      	bne.n	80053a8 <HAL_UART_Transmit+0x68>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d104      	bne.n	80053a8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800539e:	2300      	movs	r3, #0
 80053a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	61bb      	str	r3, [r7, #24]
 80053a6:	e003      	b.n	80053b0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053ac:	2300      	movs	r3, #0
 80053ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80053b0:	e02f      	b.n	8005412 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	9300      	str	r3, [sp, #0]
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	2200      	movs	r2, #0
 80053ba:	2180      	movs	r1, #128	@ 0x80
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f000 fba6 	bl	8005b0e <UART_WaitOnFlagUntilTimeout>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d004      	beq.n	80053d2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2220      	movs	r2, #32
 80053cc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e03b      	b.n	800544a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d10b      	bne.n	80053f0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	881b      	ldrh	r3, [r3, #0]
 80053dc:	461a      	mov	r2, r3
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053e6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	3302      	adds	r3, #2
 80053ec:	61bb      	str	r3, [r7, #24]
 80053ee:	e007      	b.n	8005400 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	781a      	ldrb	r2, [r3, #0]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	3301      	adds	r3, #1
 80053fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005406:	b29b      	uxth	r3, r3
 8005408:	3b01      	subs	r3, #1
 800540a:	b29a      	uxth	r2, r3
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005418:	b29b      	uxth	r3, r3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1c9      	bne.n	80053b2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	9300      	str	r3, [sp, #0]
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	2200      	movs	r2, #0
 8005426:	2140      	movs	r1, #64	@ 0x40
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	f000 fb70 	bl	8005b0e <UART_WaitOnFlagUntilTimeout>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d004      	beq.n	800543e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2220      	movs	r2, #32
 8005438:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e005      	b.n	800544a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2220      	movs	r2, #32
 8005442:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005444:	2300      	movs	r3, #0
 8005446:	e000      	b.n	800544a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005448:	2302      	movs	r3, #2
  }
}
 800544a:	4618      	mov	r0, r3
 800544c:	3720      	adds	r7, #32
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
	...

08005454 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b088      	sub	sp, #32
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800545c:	2300      	movs	r3, #0
 800545e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	689a      	ldr	r2, [r3, #8]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	431a      	orrs	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	431a      	orrs	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	69db      	ldr	r3, [r3, #28]
 8005474:	4313      	orrs	r3, r2
 8005476:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	4ba6      	ldr	r3, [pc, #664]	@ (8005718 <UART_SetConfig+0x2c4>)
 8005480:	4013      	ands	r3, r2
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	6812      	ldr	r2, [r2, #0]
 8005486:	6979      	ldr	r1, [r7, #20]
 8005488:	430b      	orrs	r3, r1
 800548a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	68da      	ldr	r2, [r3, #12]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	430a      	orrs	r2, r1
 80054a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6a1b      	ldr	r3, [r3, #32]
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	430a      	orrs	r2, r1
 80054c4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a94      	ldr	r2, [pc, #592]	@ (800571c <UART_SetConfig+0x2c8>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d120      	bne.n	8005512 <UART_SetConfig+0xbe>
 80054d0:	4b93      	ldr	r3, [pc, #588]	@ (8005720 <UART_SetConfig+0x2cc>)
 80054d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054d6:	f003 0303 	and.w	r3, r3, #3
 80054da:	2b03      	cmp	r3, #3
 80054dc:	d816      	bhi.n	800550c <UART_SetConfig+0xb8>
 80054de:	a201      	add	r2, pc, #4	@ (adr r2, 80054e4 <UART_SetConfig+0x90>)
 80054e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e4:	080054f5 	.word	0x080054f5
 80054e8:	08005501 	.word	0x08005501
 80054ec:	080054fb 	.word	0x080054fb
 80054f0:	08005507 	.word	0x08005507
 80054f4:	2301      	movs	r3, #1
 80054f6:	77fb      	strb	r3, [r7, #31]
 80054f8:	e150      	b.n	800579c <UART_SetConfig+0x348>
 80054fa:	2302      	movs	r3, #2
 80054fc:	77fb      	strb	r3, [r7, #31]
 80054fe:	e14d      	b.n	800579c <UART_SetConfig+0x348>
 8005500:	2304      	movs	r3, #4
 8005502:	77fb      	strb	r3, [r7, #31]
 8005504:	e14a      	b.n	800579c <UART_SetConfig+0x348>
 8005506:	2308      	movs	r3, #8
 8005508:	77fb      	strb	r3, [r7, #31]
 800550a:	e147      	b.n	800579c <UART_SetConfig+0x348>
 800550c:	2310      	movs	r3, #16
 800550e:	77fb      	strb	r3, [r7, #31]
 8005510:	e144      	b.n	800579c <UART_SetConfig+0x348>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a83      	ldr	r2, [pc, #524]	@ (8005724 <UART_SetConfig+0x2d0>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d132      	bne.n	8005582 <UART_SetConfig+0x12e>
 800551c:	4b80      	ldr	r3, [pc, #512]	@ (8005720 <UART_SetConfig+0x2cc>)
 800551e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005522:	f003 030c 	and.w	r3, r3, #12
 8005526:	2b0c      	cmp	r3, #12
 8005528:	d828      	bhi.n	800557c <UART_SetConfig+0x128>
 800552a:	a201      	add	r2, pc, #4	@ (adr r2, 8005530 <UART_SetConfig+0xdc>)
 800552c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005530:	08005565 	.word	0x08005565
 8005534:	0800557d 	.word	0x0800557d
 8005538:	0800557d 	.word	0x0800557d
 800553c:	0800557d 	.word	0x0800557d
 8005540:	08005571 	.word	0x08005571
 8005544:	0800557d 	.word	0x0800557d
 8005548:	0800557d 	.word	0x0800557d
 800554c:	0800557d 	.word	0x0800557d
 8005550:	0800556b 	.word	0x0800556b
 8005554:	0800557d 	.word	0x0800557d
 8005558:	0800557d 	.word	0x0800557d
 800555c:	0800557d 	.word	0x0800557d
 8005560:	08005577 	.word	0x08005577
 8005564:	2300      	movs	r3, #0
 8005566:	77fb      	strb	r3, [r7, #31]
 8005568:	e118      	b.n	800579c <UART_SetConfig+0x348>
 800556a:	2302      	movs	r3, #2
 800556c:	77fb      	strb	r3, [r7, #31]
 800556e:	e115      	b.n	800579c <UART_SetConfig+0x348>
 8005570:	2304      	movs	r3, #4
 8005572:	77fb      	strb	r3, [r7, #31]
 8005574:	e112      	b.n	800579c <UART_SetConfig+0x348>
 8005576:	2308      	movs	r3, #8
 8005578:	77fb      	strb	r3, [r7, #31]
 800557a:	e10f      	b.n	800579c <UART_SetConfig+0x348>
 800557c:	2310      	movs	r3, #16
 800557e:	77fb      	strb	r3, [r7, #31]
 8005580:	e10c      	b.n	800579c <UART_SetConfig+0x348>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a68      	ldr	r2, [pc, #416]	@ (8005728 <UART_SetConfig+0x2d4>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d120      	bne.n	80055ce <UART_SetConfig+0x17a>
 800558c:	4b64      	ldr	r3, [pc, #400]	@ (8005720 <UART_SetConfig+0x2cc>)
 800558e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005592:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005596:	2b30      	cmp	r3, #48	@ 0x30
 8005598:	d013      	beq.n	80055c2 <UART_SetConfig+0x16e>
 800559a:	2b30      	cmp	r3, #48	@ 0x30
 800559c:	d814      	bhi.n	80055c8 <UART_SetConfig+0x174>
 800559e:	2b20      	cmp	r3, #32
 80055a0:	d009      	beq.n	80055b6 <UART_SetConfig+0x162>
 80055a2:	2b20      	cmp	r3, #32
 80055a4:	d810      	bhi.n	80055c8 <UART_SetConfig+0x174>
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d002      	beq.n	80055b0 <UART_SetConfig+0x15c>
 80055aa:	2b10      	cmp	r3, #16
 80055ac:	d006      	beq.n	80055bc <UART_SetConfig+0x168>
 80055ae:	e00b      	b.n	80055c8 <UART_SetConfig+0x174>
 80055b0:	2300      	movs	r3, #0
 80055b2:	77fb      	strb	r3, [r7, #31]
 80055b4:	e0f2      	b.n	800579c <UART_SetConfig+0x348>
 80055b6:	2302      	movs	r3, #2
 80055b8:	77fb      	strb	r3, [r7, #31]
 80055ba:	e0ef      	b.n	800579c <UART_SetConfig+0x348>
 80055bc:	2304      	movs	r3, #4
 80055be:	77fb      	strb	r3, [r7, #31]
 80055c0:	e0ec      	b.n	800579c <UART_SetConfig+0x348>
 80055c2:	2308      	movs	r3, #8
 80055c4:	77fb      	strb	r3, [r7, #31]
 80055c6:	e0e9      	b.n	800579c <UART_SetConfig+0x348>
 80055c8:	2310      	movs	r3, #16
 80055ca:	77fb      	strb	r3, [r7, #31]
 80055cc:	e0e6      	b.n	800579c <UART_SetConfig+0x348>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a56      	ldr	r2, [pc, #344]	@ (800572c <UART_SetConfig+0x2d8>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d120      	bne.n	800561a <UART_SetConfig+0x1c6>
 80055d8:	4b51      	ldr	r3, [pc, #324]	@ (8005720 <UART_SetConfig+0x2cc>)
 80055da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055de:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80055e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80055e4:	d013      	beq.n	800560e <UART_SetConfig+0x1ba>
 80055e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80055e8:	d814      	bhi.n	8005614 <UART_SetConfig+0x1c0>
 80055ea:	2b80      	cmp	r3, #128	@ 0x80
 80055ec:	d009      	beq.n	8005602 <UART_SetConfig+0x1ae>
 80055ee:	2b80      	cmp	r3, #128	@ 0x80
 80055f0:	d810      	bhi.n	8005614 <UART_SetConfig+0x1c0>
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d002      	beq.n	80055fc <UART_SetConfig+0x1a8>
 80055f6:	2b40      	cmp	r3, #64	@ 0x40
 80055f8:	d006      	beq.n	8005608 <UART_SetConfig+0x1b4>
 80055fa:	e00b      	b.n	8005614 <UART_SetConfig+0x1c0>
 80055fc:	2300      	movs	r3, #0
 80055fe:	77fb      	strb	r3, [r7, #31]
 8005600:	e0cc      	b.n	800579c <UART_SetConfig+0x348>
 8005602:	2302      	movs	r3, #2
 8005604:	77fb      	strb	r3, [r7, #31]
 8005606:	e0c9      	b.n	800579c <UART_SetConfig+0x348>
 8005608:	2304      	movs	r3, #4
 800560a:	77fb      	strb	r3, [r7, #31]
 800560c:	e0c6      	b.n	800579c <UART_SetConfig+0x348>
 800560e:	2308      	movs	r3, #8
 8005610:	77fb      	strb	r3, [r7, #31]
 8005612:	e0c3      	b.n	800579c <UART_SetConfig+0x348>
 8005614:	2310      	movs	r3, #16
 8005616:	77fb      	strb	r3, [r7, #31]
 8005618:	e0c0      	b.n	800579c <UART_SetConfig+0x348>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a44      	ldr	r2, [pc, #272]	@ (8005730 <UART_SetConfig+0x2dc>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d125      	bne.n	8005670 <UART_SetConfig+0x21c>
 8005624:	4b3e      	ldr	r3, [pc, #248]	@ (8005720 <UART_SetConfig+0x2cc>)
 8005626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800562a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800562e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005632:	d017      	beq.n	8005664 <UART_SetConfig+0x210>
 8005634:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005638:	d817      	bhi.n	800566a <UART_SetConfig+0x216>
 800563a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800563e:	d00b      	beq.n	8005658 <UART_SetConfig+0x204>
 8005640:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005644:	d811      	bhi.n	800566a <UART_SetConfig+0x216>
 8005646:	2b00      	cmp	r3, #0
 8005648:	d003      	beq.n	8005652 <UART_SetConfig+0x1fe>
 800564a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800564e:	d006      	beq.n	800565e <UART_SetConfig+0x20a>
 8005650:	e00b      	b.n	800566a <UART_SetConfig+0x216>
 8005652:	2300      	movs	r3, #0
 8005654:	77fb      	strb	r3, [r7, #31]
 8005656:	e0a1      	b.n	800579c <UART_SetConfig+0x348>
 8005658:	2302      	movs	r3, #2
 800565a:	77fb      	strb	r3, [r7, #31]
 800565c:	e09e      	b.n	800579c <UART_SetConfig+0x348>
 800565e:	2304      	movs	r3, #4
 8005660:	77fb      	strb	r3, [r7, #31]
 8005662:	e09b      	b.n	800579c <UART_SetConfig+0x348>
 8005664:	2308      	movs	r3, #8
 8005666:	77fb      	strb	r3, [r7, #31]
 8005668:	e098      	b.n	800579c <UART_SetConfig+0x348>
 800566a:	2310      	movs	r3, #16
 800566c:	77fb      	strb	r3, [r7, #31]
 800566e:	e095      	b.n	800579c <UART_SetConfig+0x348>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a2f      	ldr	r2, [pc, #188]	@ (8005734 <UART_SetConfig+0x2e0>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d125      	bne.n	80056c6 <UART_SetConfig+0x272>
 800567a:	4b29      	ldr	r3, [pc, #164]	@ (8005720 <UART_SetConfig+0x2cc>)
 800567c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005680:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005684:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005688:	d017      	beq.n	80056ba <UART_SetConfig+0x266>
 800568a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800568e:	d817      	bhi.n	80056c0 <UART_SetConfig+0x26c>
 8005690:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005694:	d00b      	beq.n	80056ae <UART_SetConfig+0x25a>
 8005696:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800569a:	d811      	bhi.n	80056c0 <UART_SetConfig+0x26c>
 800569c:	2b00      	cmp	r3, #0
 800569e:	d003      	beq.n	80056a8 <UART_SetConfig+0x254>
 80056a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056a4:	d006      	beq.n	80056b4 <UART_SetConfig+0x260>
 80056a6:	e00b      	b.n	80056c0 <UART_SetConfig+0x26c>
 80056a8:	2301      	movs	r3, #1
 80056aa:	77fb      	strb	r3, [r7, #31]
 80056ac:	e076      	b.n	800579c <UART_SetConfig+0x348>
 80056ae:	2302      	movs	r3, #2
 80056b0:	77fb      	strb	r3, [r7, #31]
 80056b2:	e073      	b.n	800579c <UART_SetConfig+0x348>
 80056b4:	2304      	movs	r3, #4
 80056b6:	77fb      	strb	r3, [r7, #31]
 80056b8:	e070      	b.n	800579c <UART_SetConfig+0x348>
 80056ba:	2308      	movs	r3, #8
 80056bc:	77fb      	strb	r3, [r7, #31]
 80056be:	e06d      	b.n	800579c <UART_SetConfig+0x348>
 80056c0:	2310      	movs	r3, #16
 80056c2:	77fb      	strb	r3, [r7, #31]
 80056c4:	e06a      	b.n	800579c <UART_SetConfig+0x348>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a1b      	ldr	r2, [pc, #108]	@ (8005738 <UART_SetConfig+0x2e4>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d138      	bne.n	8005742 <UART_SetConfig+0x2ee>
 80056d0:	4b13      	ldr	r3, [pc, #76]	@ (8005720 <UART_SetConfig+0x2cc>)
 80056d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056d6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80056da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80056de:	d017      	beq.n	8005710 <UART_SetConfig+0x2bc>
 80056e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80056e4:	d82a      	bhi.n	800573c <UART_SetConfig+0x2e8>
 80056e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056ea:	d00b      	beq.n	8005704 <UART_SetConfig+0x2b0>
 80056ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056f0:	d824      	bhi.n	800573c <UART_SetConfig+0x2e8>
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d003      	beq.n	80056fe <UART_SetConfig+0x2aa>
 80056f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056fa:	d006      	beq.n	800570a <UART_SetConfig+0x2b6>
 80056fc:	e01e      	b.n	800573c <UART_SetConfig+0x2e8>
 80056fe:	2300      	movs	r3, #0
 8005700:	77fb      	strb	r3, [r7, #31]
 8005702:	e04b      	b.n	800579c <UART_SetConfig+0x348>
 8005704:	2302      	movs	r3, #2
 8005706:	77fb      	strb	r3, [r7, #31]
 8005708:	e048      	b.n	800579c <UART_SetConfig+0x348>
 800570a:	2304      	movs	r3, #4
 800570c:	77fb      	strb	r3, [r7, #31]
 800570e:	e045      	b.n	800579c <UART_SetConfig+0x348>
 8005710:	2308      	movs	r3, #8
 8005712:	77fb      	strb	r3, [r7, #31]
 8005714:	e042      	b.n	800579c <UART_SetConfig+0x348>
 8005716:	bf00      	nop
 8005718:	efff69f3 	.word	0xefff69f3
 800571c:	40011000 	.word	0x40011000
 8005720:	40023800 	.word	0x40023800
 8005724:	40004400 	.word	0x40004400
 8005728:	40004800 	.word	0x40004800
 800572c:	40004c00 	.word	0x40004c00
 8005730:	40005000 	.word	0x40005000
 8005734:	40011400 	.word	0x40011400
 8005738:	40007800 	.word	0x40007800
 800573c:	2310      	movs	r3, #16
 800573e:	77fb      	strb	r3, [r7, #31]
 8005740:	e02c      	b.n	800579c <UART_SetConfig+0x348>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a72      	ldr	r2, [pc, #456]	@ (8005910 <UART_SetConfig+0x4bc>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d125      	bne.n	8005798 <UART_SetConfig+0x344>
 800574c:	4b71      	ldr	r3, [pc, #452]	@ (8005914 <UART_SetConfig+0x4c0>)
 800574e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005752:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005756:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800575a:	d017      	beq.n	800578c <UART_SetConfig+0x338>
 800575c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005760:	d817      	bhi.n	8005792 <UART_SetConfig+0x33e>
 8005762:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005766:	d00b      	beq.n	8005780 <UART_SetConfig+0x32c>
 8005768:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800576c:	d811      	bhi.n	8005792 <UART_SetConfig+0x33e>
 800576e:	2b00      	cmp	r3, #0
 8005770:	d003      	beq.n	800577a <UART_SetConfig+0x326>
 8005772:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005776:	d006      	beq.n	8005786 <UART_SetConfig+0x332>
 8005778:	e00b      	b.n	8005792 <UART_SetConfig+0x33e>
 800577a:	2300      	movs	r3, #0
 800577c:	77fb      	strb	r3, [r7, #31]
 800577e:	e00d      	b.n	800579c <UART_SetConfig+0x348>
 8005780:	2302      	movs	r3, #2
 8005782:	77fb      	strb	r3, [r7, #31]
 8005784:	e00a      	b.n	800579c <UART_SetConfig+0x348>
 8005786:	2304      	movs	r3, #4
 8005788:	77fb      	strb	r3, [r7, #31]
 800578a:	e007      	b.n	800579c <UART_SetConfig+0x348>
 800578c:	2308      	movs	r3, #8
 800578e:	77fb      	strb	r3, [r7, #31]
 8005790:	e004      	b.n	800579c <UART_SetConfig+0x348>
 8005792:	2310      	movs	r3, #16
 8005794:	77fb      	strb	r3, [r7, #31]
 8005796:	e001      	b.n	800579c <UART_SetConfig+0x348>
 8005798:	2310      	movs	r3, #16
 800579a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	69db      	ldr	r3, [r3, #28]
 80057a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057a4:	d15b      	bne.n	800585e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80057a6:	7ffb      	ldrb	r3, [r7, #31]
 80057a8:	2b08      	cmp	r3, #8
 80057aa:	d828      	bhi.n	80057fe <UART_SetConfig+0x3aa>
 80057ac:	a201      	add	r2, pc, #4	@ (adr r2, 80057b4 <UART_SetConfig+0x360>)
 80057ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b2:	bf00      	nop
 80057b4:	080057d9 	.word	0x080057d9
 80057b8:	080057e1 	.word	0x080057e1
 80057bc:	080057e9 	.word	0x080057e9
 80057c0:	080057ff 	.word	0x080057ff
 80057c4:	080057ef 	.word	0x080057ef
 80057c8:	080057ff 	.word	0x080057ff
 80057cc:	080057ff 	.word	0x080057ff
 80057d0:	080057ff 	.word	0x080057ff
 80057d4:	080057f7 	.word	0x080057f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057d8:	f7fe febe 	bl	8004558 <HAL_RCC_GetPCLK1Freq>
 80057dc:	61b8      	str	r0, [r7, #24]
        break;
 80057de:	e013      	b.n	8005808 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057e0:	f7fe fece 	bl	8004580 <HAL_RCC_GetPCLK2Freq>
 80057e4:	61b8      	str	r0, [r7, #24]
        break;
 80057e6:	e00f      	b.n	8005808 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057e8:	4b4b      	ldr	r3, [pc, #300]	@ (8005918 <UART_SetConfig+0x4c4>)
 80057ea:	61bb      	str	r3, [r7, #24]
        break;
 80057ec:	e00c      	b.n	8005808 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057ee:	f7fe fde1 	bl	80043b4 <HAL_RCC_GetSysClockFreq>
 80057f2:	61b8      	str	r0, [r7, #24]
        break;
 80057f4:	e008      	b.n	8005808 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057fa:	61bb      	str	r3, [r7, #24]
        break;
 80057fc:	e004      	b.n	8005808 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80057fe:	2300      	movs	r3, #0
 8005800:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	77bb      	strb	r3, [r7, #30]
        break;
 8005806:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d074      	beq.n	80058f8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	005a      	lsls	r2, r3, #1
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	085b      	lsrs	r3, r3, #1
 8005818:	441a      	add	r2, r3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005822:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	2b0f      	cmp	r3, #15
 8005828:	d916      	bls.n	8005858 <UART_SetConfig+0x404>
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005830:	d212      	bcs.n	8005858 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	b29b      	uxth	r3, r3
 8005836:	f023 030f 	bic.w	r3, r3, #15
 800583a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	085b      	lsrs	r3, r3, #1
 8005840:	b29b      	uxth	r3, r3
 8005842:	f003 0307 	and.w	r3, r3, #7
 8005846:	b29a      	uxth	r2, r3
 8005848:	89fb      	ldrh	r3, [r7, #14]
 800584a:	4313      	orrs	r3, r2
 800584c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	89fa      	ldrh	r2, [r7, #14]
 8005854:	60da      	str	r2, [r3, #12]
 8005856:	e04f      	b.n	80058f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	77bb      	strb	r3, [r7, #30]
 800585c:	e04c      	b.n	80058f8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800585e:	7ffb      	ldrb	r3, [r7, #31]
 8005860:	2b08      	cmp	r3, #8
 8005862:	d828      	bhi.n	80058b6 <UART_SetConfig+0x462>
 8005864:	a201      	add	r2, pc, #4	@ (adr r2, 800586c <UART_SetConfig+0x418>)
 8005866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800586a:	bf00      	nop
 800586c:	08005891 	.word	0x08005891
 8005870:	08005899 	.word	0x08005899
 8005874:	080058a1 	.word	0x080058a1
 8005878:	080058b7 	.word	0x080058b7
 800587c:	080058a7 	.word	0x080058a7
 8005880:	080058b7 	.word	0x080058b7
 8005884:	080058b7 	.word	0x080058b7
 8005888:	080058b7 	.word	0x080058b7
 800588c:	080058af 	.word	0x080058af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005890:	f7fe fe62 	bl	8004558 <HAL_RCC_GetPCLK1Freq>
 8005894:	61b8      	str	r0, [r7, #24]
        break;
 8005896:	e013      	b.n	80058c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005898:	f7fe fe72 	bl	8004580 <HAL_RCC_GetPCLK2Freq>
 800589c:	61b8      	str	r0, [r7, #24]
        break;
 800589e:	e00f      	b.n	80058c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058a0:	4b1d      	ldr	r3, [pc, #116]	@ (8005918 <UART_SetConfig+0x4c4>)
 80058a2:	61bb      	str	r3, [r7, #24]
        break;
 80058a4:	e00c      	b.n	80058c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058a6:	f7fe fd85 	bl	80043b4 <HAL_RCC_GetSysClockFreq>
 80058aa:	61b8      	str	r0, [r7, #24]
        break;
 80058ac:	e008      	b.n	80058c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058b2:	61bb      	str	r3, [r7, #24]
        break;
 80058b4:	e004      	b.n	80058c0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80058b6:	2300      	movs	r3, #0
 80058b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	77bb      	strb	r3, [r7, #30]
        break;
 80058be:	bf00      	nop
    }

    if (pclk != 0U)
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d018      	beq.n	80058f8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	085a      	lsrs	r2, r3, #1
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	441a      	add	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	2b0f      	cmp	r3, #15
 80058de:	d909      	bls.n	80058f4 <UART_SetConfig+0x4a0>
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058e6:	d205      	bcs.n	80058f4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	b29a      	uxth	r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	60da      	str	r2, [r3, #12]
 80058f2:	e001      	b.n	80058f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005904:	7fbb      	ldrb	r3, [r7, #30]
}
 8005906:	4618      	mov	r0, r3
 8005908:	3720      	adds	r7, #32
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	40007c00 	.word	0x40007c00
 8005914:	40023800 	.word	0x40023800
 8005918:	00f42400 	.word	0x00f42400

0800591c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005928:	f003 0308 	and.w	r3, r3, #8
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00a      	beq.n	8005946 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	430a      	orrs	r2, r1
 8005944:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00a      	beq.n	8005968 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	430a      	orrs	r2, r1
 8005966:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800596c:	f003 0302 	and.w	r3, r3, #2
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00a      	beq.n	800598a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	430a      	orrs	r2, r1
 8005988:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800598e:	f003 0304 	and.w	r3, r3, #4
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00a      	beq.n	80059ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	430a      	orrs	r2, r1
 80059aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b0:	f003 0310 	and.w	r3, r3, #16
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00a      	beq.n	80059ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	430a      	orrs	r2, r1
 80059cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d2:	f003 0320 	and.w	r3, r3, #32
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00a      	beq.n	80059f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	430a      	orrs	r2, r1
 80059ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d01a      	beq.n	8005a32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a1a:	d10a      	bne.n	8005a32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	430a      	orrs	r2, r1
 8005a30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00a      	beq.n	8005a54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	430a      	orrs	r2, r1
 8005a52:	605a      	str	r2, [r3, #4]
  }
}
 8005a54:	bf00      	nop
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b08c      	sub	sp, #48	@ 0x30
 8005a64:	af02      	add	r7, sp, #8
 8005a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a70:	f7fc fe2a 	bl	80026c8 <HAL_GetTick>
 8005a74:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0308 	and.w	r3, r3, #8
 8005a80:	2b08      	cmp	r3, #8
 8005a82:	d12e      	bne.n	8005ae2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a84:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a88:	9300      	str	r3, [sp, #0]
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 f83b 	bl	8005b0e <UART_WaitOnFlagUntilTimeout>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d021      	beq.n	8005ae2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	e853 3f00 	ldrex	r3, [r3]
 8005aaa:	60fb      	str	r3, [r7, #12]
   return(result);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ab2:	623b      	str	r3, [r7, #32]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	461a      	mov	r2, r3
 8005aba:	6a3b      	ldr	r3, [r7, #32]
 8005abc:	61fb      	str	r3, [r7, #28]
 8005abe:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac0:	69b9      	ldr	r1, [r7, #24]
 8005ac2:	69fa      	ldr	r2, [r7, #28]
 8005ac4:	e841 2300 	strex	r3, r2, [r1]
 8005ac8:	617b      	str	r3, [r7, #20]
   return(result);
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1e6      	bne.n	8005a9e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2220      	movs	r2, #32
 8005ad4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e011      	b.n	8005b06 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2220      	movs	r2, #32
 8005ae6:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2220      	movs	r2, #32
 8005aec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3728      	adds	r7, #40	@ 0x28
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b084      	sub	sp, #16
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	60f8      	str	r0, [r7, #12]
 8005b16:	60b9      	str	r1, [r7, #8]
 8005b18:	603b      	str	r3, [r7, #0]
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b1e:	e04f      	b.n	8005bc0 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b26:	d04b      	beq.n	8005bc0 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b28:	f7fc fdce 	bl	80026c8 <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	69ba      	ldr	r2, [r7, #24]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d302      	bcc.n	8005b3e <UART_WaitOnFlagUntilTimeout+0x30>
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d101      	bne.n	8005b42 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e04e      	b.n	8005be0 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0304 	and.w	r3, r3, #4
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d037      	beq.n	8005bc0 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	2b80      	cmp	r3, #128	@ 0x80
 8005b54:	d034      	beq.n	8005bc0 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	2b40      	cmp	r3, #64	@ 0x40
 8005b5a:	d031      	beq.n	8005bc0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	69db      	ldr	r3, [r3, #28]
 8005b62:	f003 0308 	and.w	r3, r3, #8
 8005b66:	2b08      	cmp	r3, #8
 8005b68:	d110      	bne.n	8005b8c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2208      	movs	r2, #8
 8005b70:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f000 f838 	bl	8005be8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2208      	movs	r2, #8
 8005b7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e029      	b.n	8005be0 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	69db      	ldr	r3, [r3, #28]
 8005b92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b9a:	d111      	bne.n	8005bc0 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ba4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ba6:	68f8      	ldr	r0, [r7, #12]
 8005ba8:	f000 f81e 	bl	8005be8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2220      	movs	r2, #32
 8005bb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e00f      	b.n	8005be0 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	69da      	ldr	r2, [r3, #28]
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	4013      	ands	r3, r2
 8005bca:	68ba      	ldr	r2, [r7, #8]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	bf0c      	ite	eq
 8005bd0:	2301      	moveq	r3, #1
 8005bd2:	2300      	movne	r3, #0
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	79fb      	ldrb	r3, [r7, #7]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d0a0      	beq.n	8005b20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3710      	adds	r7, #16
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b095      	sub	sp, #84	@ 0x54
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bf8:	e853 3f00 	ldrex	r3, [r3]
 8005bfc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c0e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c10:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c12:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c16:	e841 2300 	strex	r3, r2, [r1]
 8005c1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1e6      	bne.n	8005bf0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	3308      	adds	r3, #8
 8005c28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2a:	6a3b      	ldr	r3, [r7, #32]
 8005c2c:	e853 3f00 	ldrex	r3, [r3]
 8005c30:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	f023 0301 	bic.w	r3, r3, #1
 8005c38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	3308      	adds	r3, #8
 8005c40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c4a:	e841 2300 	strex	r3, r2, [r1]
 8005c4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d1e5      	bne.n	8005c22 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d118      	bne.n	8005c90 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	e853 3f00 	ldrex	r3, [r3]
 8005c6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	f023 0310 	bic.w	r3, r3, #16
 8005c72:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	461a      	mov	r2, r3
 8005c7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c7c:	61bb      	str	r3, [r7, #24]
 8005c7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c80:	6979      	ldr	r1, [r7, #20]
 8005c82:	69ba      	ldr	r2, [r7, #24]
 8005c84:	e841 2300 	strex	r3, r2, [r1]
 8005c88:	613b      	str	r3, [r7, #16]
   return(result);
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1e6      	bne.n	8005c5e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2220      	movs	r2, #32
 8005c94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005ca4:	bf00      	nop
 8005ca6:	3754      	adds	r7, #84	@ 0x54
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <siprintf>:
 8005cb0:	b40e      	push	{r1, r2, r3}
 8005cb2:	b510      	push	{r4, lr}
 8005cb4:	b09d      	sub	sp, #116	@ 0x74
 8005cb6:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005cb8:	9002      	str	r0, [sp, #8]
 8005cba:	9006      	str	r0, [sp, #24]
 8005cbc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005cc0:	480a      	ldr	r0, [pc, #40]	@ (8005cec <siprintf+0x3c>)
 8005cc2:	9107      	str	r1, [sp, #28]
 8005cc4:	9104      	str	r1, [sp, #16]
 8005cc6:	490a      	ldr	r1, [pc, #40]	@ (8005cf0 <siprintf+0x40>)
 8005cc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ccc:	9105      	str	r1, [sp, #20]
 8005cce:	2400      	movs	r4, #0
 8005cd0:	a902      	add	r1, sp, #8
 8005cd2:	6800      	ldr	r0, [r0, #0]
 8005cd4:	9301      	str	r3, [sp, #4]
 8005cd6:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005cd8:	f000 f89c 	bl	8005e14 <_svfiprintf_r>
 8005cdc:	9b02      	ldr	r3, [sp, #8]
 8005cde:	701c      	strb	r4, [r3, #0]
 8005ce0:	b01d      	add	sp, #116	@ 0x74
 8005ce2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ce6:	b003      	add	sp, #12
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	20000010 	.word	0x20000010
 8005cf0:	ffff0208 	.word	0xffff0208

08005cf4 <memset>:
 8005cf4:	4402      	add	r2, r0
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d100      	bne.n	8005cfe <memset+0xa>
 8005cfc:	4770      	bx	lr
 8005cfe:	f803 1b01 	strb.w	r1, [r3], #1
 8005d02:	e7f9      	b.n	8005cf8 <memset+0x4>

08005d04 <__errno>:
 8005d04:	4b01      	ldr	r3, [pc, #4]	@ (8005d0c <__errno+0x8>)
 8005d06:	6818      	ldr	r0, [r3, #0]
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	20000010 	.word	0x20000010

08005d10 <__libc_init_array>:
 8005d10:	b570      	push	{r4, r5, r6, lr}
 8005d12:	4d0d      	ldr	r5, [pc, #52]	@ (8005d48 <__libc_init_array+0x38>)
 8005d14:	4c0d      	ldr	r4, [pc, #52]	@ (8005d4c <__libc_init_array+0x3c>)
 8005d16:	1b64      	subs	r4, r4, r5
 8005d18:	10a4      	asrs	r4, r4, #2
 8005d1a:	2600      	movs	r6, #0
 8005d1c:	42a6      	cmp	r6, r4
 8005d1e:	d109      	bne.n	8005d34 <__libc_init_array+0x24>
 8005d20:	4d0b      	ldr	r5, [pc, #44]	@ (8005d50 <__libc_init_array+0x40>)
 8005d22:	4c0c      	ldr	r4, [pc, #48]	@ (8005d54 <__libc_init_array+0x44>)
 8005d24:	f000 fc64 	bl	80065f0 <_init>
 8005d28:	1b64      	subs	r4, r4, r5
 8005d2a:	10a4      	asrs	r4, r4, #2
 8005d2c:	2600      	movs	r6, #0
 8005d2e:	42a6      	cmp	r6, r4
 8005d30:	d105      	bne.n	8005d3e <__libc_init_array+0x2e>
 8005d32:	bd70      	pop	{r4, r5, r6, pc}
 8005d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d38:	4798      	blx	r3
 8005d3a:	3601      	adds	r6, #1
 8005d3c:	e7ee      	b.n	8005d1c <__libc_init_array+0xc>
 8005d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d42:	4798      	blx	r3
 8005d44:	3601      	adds	r6, #1
 8005d46:	e7f2      	b.n	8005d2e <__libc_init_array+0x1e>
 8005d48:	08006840 	.word	0x08006840
 8005d4c:	08006840 	.word	0x08006840
 8005d50:	08006840 	.word	0x08006840
 8005d54:	08006844 	.word	0x08006844

08005d58 <__retarget_lock_acquire_recursive>:
 8005d58:	4770      	bx	lr

08005d5a <__retarget_lock_release_recursive>:
 8005d5a:	4770      	bx	lr

08005d5c <__ssputs_r>:
 8005d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d60:	688e      	ldr	r6, [r1, #8]
 8005d62:	461f      	mov	r7, r3
 8005d64:	42be      	cmp	r6, r7
 8005d66:	680b      	ldr	r3, [r1, #0]
 8005d68:	4682      	mov	sl, r0
 8005d6a:	460c      	mov	r4, r1
 8005d6c:	4690      	mov	r8, r2
 8005d6e:	d82d      	bhi.n	8005dcc <__ssputs_r+0x70>
 8005d70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005d78:	d026      	beq.n	8005dc8 <__ssputs_r+0x6c>
 8005d7a:	6965      	ldr	r5, [r4, #20]
 8005d7c:	6909      	ldr	r1, [r1, #16]
 8005d7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d82:	eba3 0901 	sub.w	r9, r3, r1
 8005d86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d8a:	1c7b      	adds	r3, r7, #1
 8005d8c:	444b      	add	r3, r9
 8005d8e:	106d      	asrs	r5, r5, #1
 8005d90:	429d      	cmp	r5, r3
 8005d92:	bf38      	it	cc
 8005d94:	461d      	movcc	r5, r3
 8005d96:	0553      	lsls	r3, r2, #21
 8005d98:	d527      	bpl.n	8005dea <__ssputs_r+0x8e>
 8005d9a:	4629      	mov	r1, r5
 8005d9c:	f000 f958 	bl	8006050 <_malloc_r>
 8005da0:	4606      	mov	r6, r0
 8005da2:	b360      	cbz	r0, 8005dfe <__ssputs_r+0xa2>
 8005da4:	6921      	ldr	r1, [r4, #16]
 8005da6:	464a      	mov	r2, r9
 8005da8:	f000 fbc2 	bl	8006530 <memcpy>
 8005dac:	89a3      	ldrh	r3, [r4, #12]
 8005dae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005db2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005db6:	81a3      	strh	r3, [r4, #12]
 8005db8:	6126      	str	r6, [r4, #16]
 8005dba:	6165      	str	r5, [r4, #20]
 8005dbc:	444e      	add	r6, r9
 8005dbe:	eba5 0509 	sub.w	r5, r5, r9
 8005dc2:	6026      	str	r6, [r4, #0]
 8005dc4:	60a5      	str	r5, [r4, #8]
 8005dc6:	463e      	mov	r6, r7
 8005dc8:	42be      	cmp	r6, r7
 8005dca:	d900      	bls.n	8005dce <__ssputs_r+0x72>
 8005dcc:	463e      	mov	r6, r7
 8005dce:	6820      	ldr	r0, [r4, #0]
 8005dd0:	4632      	mov	r2, r6
 8005dd2:	4641      	mov	r1, r8
 8005dd4:	f000 fb82 	bl	80064dc <memmove>
 8005dd8:	68a3      	ldr	r3, [r4, #8]
 8005dda:	1b9b      	subs	r3, r3, r6
 8005ddc:	60a3      	str	r3, [r4, #8]
 8005dde:	6823      	ldr	r3, [r4, #0]
 8005de0:	4433      	add	r3, r6
 8005de2:	6023      	str	r3, [r4, #0]
 8005de4:	2000      	movs	r0, #0
 8005de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dea:	462a      	mov	r2, r5
 8005dec:	f000 fb48 	bl	8006480 <_realloc_r>
 8005df0:	4606      	mov	r6, r0
 8005df2:	2800      	cmp	r0, #0
 8005df4:	d1e0      	bne.n	8005db8 <__ssputs_r+0x5c>
 8005df6:	6921      	ldr	r1, [r4, #16]
 8005df8:	4650      	mov	r0, sl
 8005dfa:	f000 fba7 	bl	800654c <_free_r>
 8005dfe:	230c      	movs	r3, #12
 8005e00:	f8ca 3000 	str.w	r3, [sl]
 8005e04:	89a3      	ldrh	r3, [r4, #12]
 8005e06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e0a:	81a3      	strh	r3, [r4, #12]
 8005e0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005e10:	e7e9      	b.n	8005de6 <__ssputs_r+0x8a>
	...

08005e14 <_svfiprintf_r>:
 8005e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e18:	4698      	mov	r8, r3
 8005e1a:	898b      	ldrh	r3, [r1, #12]
 8005e1c:	061b      	lsls	r3, r3, #24
 8005e1e:	b09d      	sub	sp, #116	@ 0x74
 8005e20:	4607      	mov	r7, r0
 8005e22:	460d      	mov	r5, r1
 8005e24:	4614      	mov	r4, r2
 8005e26:	d510      	bpl.n	8005e4a <_svfiprintf_r+0x36>
 8005e28:	690b      	ldr	r3, [r1, #16]
 8005e2a:	b973      	cbnz	r3, 8005e4a <_svfiprintf_r+0x36>
 8005e2c:	2140      	movs	r1, #64	@ 0x40
 8005e2e:	f000 f90f 	bl	8006050 <_malloc_r>
 8005e32:	6028      	str	r0, [r5, #0]
 8005e34:	6128      	str	r0, [r5, #16]
 8005e36:	b930      	cbnz	r0, 8005e46 <_svfiprintf_r+0x32>
 8005e38:	230c      	movs	r3, #12
 8005e3a:	603b      	str	r3, [r7, #0]
 8005e3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005e40:	b01d      	add	sp, #116	@ 0x74
 8005e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e46:	2340      	movs	r3, #64	@ 0x40
 8005e48:	616b      	str	r3, [r5, #20]
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e4e:	2320      	movs	r3, #32
 8005e50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005e54:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e58:	2330      	movs	r3, #48	@ 0x30
 8005e5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005ff8 <_svfiprintf_r+0x1e4>
 8005e5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005e62:	f04f 0901 	mov.w	r9, #1
 8005e66:	4623      	mov	r3, r4
 8005e68:	469a      	mov	sl, r3
 8005e6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e6e:	b10a      	cbz	r2, 8005e74 <_svfiprintf_r+0x60>
 8005e70:	2a25      	cmp	r2, #37	@ 0x25
 8005e72:	d1f9      	bne.n	8005e68 <_svfiprintf_r+0x54>
 8005e74:	ebba 0b04 	subs.w	fp, sl, r4
 8005e78:	d00b      	beq.n	8005e92 <_svfiprintf_r+0x7e>
 8005e7a:	465b      	mov	r3, fp
 8005e7c:	4622      	mov	r2, r4
 8005e7e:	4629      	mov	r1, r5
 8005e80:	4638      	mov	r0, r7
 8005e82:	f7ff ff6b 	bl	8005d5c <__ssputs_r>
 8005e86:	3001      	adds	r0, #1
 8005e88:	f000 80a7 	beq.w	8005fda <_svfiprintf_r+0x1c6>
 8005e8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e8e:	445a      	add	r2, fp
 8005e90:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e92:	f89a 3000 	ldrb.w	r3, [sl]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	f000 809f 	beq.w	8005fda <_svfiprintf_r+0x1c6>
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005ea2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ea6:	f10a 0a01 	add.w	sl, sl, #1
 8005eaa:	9304      	str	r3, [sp, #16]
 8005eac:	9307      	str	r3, [sp, #28]
 8005eae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005eb2:	931a      	str	r3, [sp, #104]	@ 0x68
 8005eb4:	4654      	mov	r4, sl
 8005eb6:	2205      	movs	r2, #5
 8005eb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ebc:	484e      	ldr	r0, [pc, #312]	@ (8005ff8 <_svfiprintf_r+0x1e4>)
 8005ebe:	f7fa f9af 	bl	8000220 <memchr>
 8005ec2:	9a04      	ldr	r2, [sp, #16]
 8005ec4:	b9d8      	cbnz	r0, 8005efe <_svfiprintf_r+0xea>
 8005ec6:	06d0      	lsls	r0, r2, #27
 8005ec8:	bf44      	itt	mi
 8005eca:	2320      	movmi	r3, #32
 8005ecc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ed0:	0711      	lsls	r1, r2, #28
 8005ed2:	bf44      	itt	mi
 8005ed4:	232b      	movmi	r3, #43	@ 0x2b
 8005ed6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005eda:	f89a 3000 	ldrb.w	r3, [sl]
 8005ede:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ee0:	d015      	beq.n	8005f0e <_svfiprintf_r+0xfa>
 8005ee2:	9a07      	ldr	r2, [sp, #28]
 8005ee4:	4654      	mov	r4, sl
 8005ee6:	2000      	movs	r0, #0
 8005ee8:	f04f 0c0a 	mov.w	ip, #10
 8005eec:	4621      	mov	r1, r4
 8005eee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ef2:	3b30      	subs	r3, #48	@ 0x30
 8005ef4:	2b09      	cmp	r3, #9
 8005ef6:	d94b      	bls.n	8005f90 <_svfiprintf_r+0x17c>
 8005ef8:	b1b0      	cbz	r0, 8005f28 <_svfiprintf_r+0x114>
 8005efa:	9207      	str	r2, [sp, #28]
 8005efc:	e014      	b.n	8005f28 <_svfiprintf_r+0x114>
 8005efe:	eba0 0308 	sub.w	r3, r0, r8
 8005f02:	fa09 f303 	lsl.w	r3, r9, r3
 8005f06:	4313      	orrs	r3, r2
 8005f08:	9304      	str	r3, [sp, #16]
 8005f0a:	46a2      	mov	sl, r4
 8005f0c:	e7d2      	b.n	8005eb4 <_svfiprintf_r+0xa0>
 8005f0e:	9b03      	ldr	r3, [sp, #12]
 8005f10:	1d19      	adds	r1, r3, #4
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	9103      	str	r1, [sp, #12]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	bfbb      	ittet	lt
 8005f1a:	425b      	neglt	r3, r3
 8005f1c:	f042 0202 	orrlt.w	r2, r2, #2
 8005f20:	9307      	strge	r3, [sp, #28]
 8005f22:	9307      	strlt	r3, [sp, #28]
 8005f24:	bfb8      	it	lt
 8005f26:	9204      	strlt	r2, [sp, #16]
 8005f28:	7823      	ldrb	r3, [r4, #0]
 8005f2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8005f2c:	d10a      	bne.n	8005f44 <_svfiprintf_r+0x130>
 8005f2e:	7863      	ldrb	r3, [r4, #1]
 8005f30:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f32:	d132      	bne.n	8005f9a <_svfiprintf_r+0x186>
 8005f34:	9b03      	ldr	r3, [sp, #12]
 8005f36:	1d1a      	adds	r2, r3, #4
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	9203      	str	r2, [sp, #12]
 8005f3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005f40:	3402      	adds	r4, #2
 8005f42:	9305      	str	r3, [sp, #20]
 8005f44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006008 <_svfiprintf_r+0x1f4>
 8005f48:	7821      	ldrb	r1, [r4, #0]
 8005f4a:	2203      	movs	r2, #3
 8005f4c:	4650      	mov	r0, sl
 8005f4e:	f7fa f967 	bl	8000220 <memchr>
 8005f52:	b138      	cbz	r0, 8005f64 <_svfiprintf_r+0x150>
 8005f54:	9b04      	ldr	r3, [sp, #16]
 8005f56:	eba0 000a 	sub.w	r0, r0, sl
 8005f5a:	2240      	movs	r2, #64	@ 0x40
 8005f5c:	4082      	lsls	r2, r0
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	3401      	adds	r4, #1
 8005f62:	9304      	str	r3, [sp, #16]
 8005f64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f68:	4824      	ldr	r0, [pc, #144]	@ (8005ffc <_svfiprintf_r+0x1e8>)
 8005f6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005f6e:	2206      	movs	r2, #6
 8005f70:	f7fa f956 	bl	8000220 <memchr>
 8005f74:	2800      	cmp	r0, #0
 8005f76:	d036      	beq.n	8005fe6 <_svfiprintf_r+0x1d2>
 8005f78:	4b21      	ldr	r3, [pc, #132]	@ (8006000 <_svfiprintf_r+0x1ec>)
 8005f7a:	bb1b      	cbnz	r3, 8005fc4 <_svfiprintf_r+0x1b0>
 8005f7c:	9b03      	ldr	r3, [sp, #12]
 8005f7e:	3307      	adds	r3, #7
 8005f80:	f023 0307 	bic.w	r3, r3, #7
 8005f84:	3308      	adds	r3, #8
 8005f86:	9303      	str	r3, [sp, #12]
 8005f88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f8a:	4433      	add	r3, r6
 8005f8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f8e:	e76a      	b.n	8005e66 <_svfiprintf_r+0x52>
 8005f90:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f94:	460c      	mov	r4, r1
 8005f96:	2001      	movs	r0, #1
 8005f98:	e7a8      	b.n	8005eec <_svfiprintf_r+0xd8>
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	3401      	adds	r4, #1
 8005f9e:	9305      	str	r3, [sp, #20]
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	f04f 0c0a 	mov.w	ip, #10
 8005fa6:	4620      	mov	r0, r4
 8005fa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fac:	3a30      	subs	r2, #48	@ 0x30
 8005fae:	2a09      	cmp	r2, #9
 8005fb0:	d903      	bls.n	8005fba <_svfiprintf_r+0x1a6>
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d0c6      	beq.n	8005f44 <_svfiprintf_r+0x130>
 8005fb6:	9105      	str	r1, [sp, #20]
 8005fb8:	e7c4      	b.n	8005f44 <_svfiprintf_r+0x130>
 8005fba:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fbe:	4604      	mov	r4, r0
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e7f0      	b.n	8005fa6 <_svfiprintf_r+0x192>
 8005fc4:	ab03      	add	r3, sp, #12
 8005fc6:	9300      	str	r3, [sp, #0]
 8005fc8:	462a      	mov	r2, r5
 8005fca:	4b0e      	ldr	r3, [pc, #56]	@ (8006004 <_svfiprintf_r+0x1f0>)
 8005fcc:	a904      	add	r1, sp, #16
 8005fce:	4638      	mov	r0, r7
 8005fd0:	f3af 8000 	nop.w
 8005fd4:	1c42      	adds	r2, r0, #1
 8005fd6:	4606      	mov	r6, r0
 8005fd8:	d1d6      	bne.n	8005f88 <_svfiprintf_r+0x174>
 8005fda:	89ab      	ldrh	r3, [r5, #12]
 8005fdc:	065b      	lsls	r3, r3, #25
 8005fde:	f53f af2d 	bmi.w	8005e3c <_svfiprintf_r+0x28>
 8005fe2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005fe4:	e72c      	b.n	8005e40 <_svfiprintf_r+0x2c>
 8005fe6:	ab03      	add	r3, sp, #12
 8005fe8:	9300      	str	r3, [sp, #0]
 8005fea:	462a      	mov	r2, r5
 8005fec:	4b05      	ldr	r3, [pc, #20]	@ (8006004 <_svfiprintf_r+0x1f0>)
 8005fee:	a904      	add	r1, sp, #16
 8005ff0:	4638      	mov	r0, r7
 8005ff2:	f000 f91b 	bl	800622c <_printf_i>
 8005ff6:	e7ed      	b.n	8005fd4 <_svfiprintf_r+0x1c0>
 8005ff8:	08006804 	.word	0x08006804
 8005ffc:	0800680e 	.word	0x0800680e
 8006000:	00000000 	.word	0x00000000
 8006004:	08005d5d 	.word	0x08005d5d
 8006008:	0800680a 	.word	0x0800680a

0800600c <sbrk_aligned>:
 800600c:	b570      	push	{r4, r5, r6, lr}
 800600e:	4e0f      	ldr	r6, [pc, #60]	@ (800604c <sbrk_aligned+0x40>)
 8006010:	460c      	mov	r4, r1
 8006012:	6831      	ldr	r1, [r6, #0]
 8006014:	4605      	mov	r5, r0
 8006016:	b911      	cbnz	r1, 800601e <sbrk_aligned+0x12>
 8006018:	f000 fa7a 	bl	8006510 <_sbrk_r>
 800601c:	6030      	str	r0, [r6, #0]
 800601e:	4621      	mov	r1, r4
 8006020:	4628      	mov	r0, r5
 8006022:	f000 fa75 	bl	8006510 <_sbrk_r>
 8006026:	1c43      	adds	r3, r0, #1
 8006028:	d103      	bne.n	8006032 <sbrk_aligned+0x26>
 800602a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800602e:	4620      	mov	r0, r4
 8006030:	bd70      	pop	{r4, r5, r6, pc}
 8006032:	1cc4      	adds	r4, r0, #3
 8006034:	f024 0403 	bic.w	r4, r4, #3
 8006038:	42a0      	cmp	r0, r4
 800603a:	d0f8      	beq.n	800602e <sbrk_aligned+0x22>
 800603c:	1a21      	subs	r1, r4, r0
 800603e:	4628      	mov	r0, r5
 8006040:	f000 fa66 	bl	8006510 <_sbrk_r>
 8006044:	3001      	adds	r0, #1
 8006046:	d1f2      	bne.n	800602e <sbrk_aligned+0x22>
 8006048:	e7ef      	b.n	800602a <sbrk_aligned+0x1e>
 800604a:	bf00      	nop
 800604c:	20000600 	.word	0x20000600

08006050 <_malloc_r>:
 8006050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006054:	1ccd      	adds	r5, r1, #3
 8006056:	f025 0503 	bic.w	r5, r5, #3
 800605a:	3508      	adds	r5, #8
 800605c:	2d0c      	cmp	r5, #12
 800605e:	bf38      	it	cc
 8006060:	250c      	movcc	r5, #12
 8006062:	2d00      	cmp	r5, #0
 8006064:	4606      	mov	r6, r0
 8006066:	db01      	blt.n	800606c <_malloc_r+0x1c>
 8006068:	42a9      	cmp	r1, r5
 800606a:	d904      	bls.n	8006076 <_malloc_r+0x26>
 800606c:	230c      	movs	r3, #12
 800606e:	6033      	str	r3, [r6, #0]
 8006070:	2000      	movs	r0, #0
 8006072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006076:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800614c <_malloc_r+0xfc>
 800607a:	f000 f9f5 	bl	8006468 <__malloc_lock>
 800607e:	f8d8 3000 	ldr.w	r3, [r8]
 8006082:	461c      	mov	r4, r3
 8006084:	bb44      	cbnz	r4, 80060d8 <_malloc_r+0x88>
 8006086:	4629      	mov	r1, r5
 8006088:	4630      	mov	r0, r6
 800608a:	f7ff ffbf 	bl	800600c <sbrk_aligned>
 800608e:	1c43      	adds	r3, r0, #1
 8006090:	4604      	mov	r4, r0
 8006092:	d158      	bne.n	8006146 <_malloc_r+0xf6>
 8006094:	f8d8 4000 	ldr.w	r4, [r8]
 8006098:	4627      	mov	r7, r4
 800609a:	2f00      	cmp	r7, #0
 800609c:	d143      	bne.n	8006126 <_malloc_r+0xd6>
 800609e:	2c00      	cmp	r4, #0
 80060a0:	d04b      	beq.n	800613a <_malloc_r+0xea>
 80060a2:	6823      	ldr	r3, [r4, #0]
 80060a4:	4639      	mov	r1, r7
 80060a6:	4630      	mov	r0, r6
 80060a8:	eb04 0903 	add.w	r9, r4, r3
 80060ac:	f000 fa30 	bl	8006510 <_sbrk_r>
 80060b0:	4581      	cmp	r9, r0
 80060b2:	d142      	bne.n	800613a <_malloc_r+0xea>
 80060b4:	6821      	ldr	r1, [r4, #0]
 80060b6:	1a6d      	subs	r5, r5, r1
 80060b8:	4629      	mov	r1, r5
 80060ba:	4630      	mov	r0, r6
 80060bc:	f7ff ffa6 	bl	800600c <sbrk_aligned>
 80060c0:	3001      	adds	r0, #1
 80060c2:	d03a      	beq.n	800613a <_malloc_r+0xea>
 80060c4:	6823      	ldr	r3, [r4, #0]
 80060c6:	442b      	add	r3, r5
 80060c8:	6023      	str	r3, [r4, #0]
 80060ca:	f8d8 3000 	ldr.w	r3, [r8]
 80060ce:	685a      	ldr	r2, [r3, #4]
 80060d0:	bb62      	cbnz	r2, 800612c <_malloc_r+0xdc>
 80060d2:	f8c8 7000 	str.w	r7, [r8]
 80060d6:	e00f      	b.n	80060f8 <_malloc_r+0xa8>
 80060d8:	6822      	ldr	r2, [r4, #0]
 80060da:	1b52      	subs	r2, r2, r5
 80060dc:	d420      	bmi.n	8006120 <_malloc_r+0xd0>
 80060de:	2a0b      	cmp	r2, #11
 80060e0:	d917      	bls.n	8006112 <_malloc_r+0xc2>
 80060e2:	1961      	adds	r1, r4, r5
 80060e4:	42a3      	cmp	r3, r4
 80060e6:	6025      	str	r5, [r4, #0]
 80060e8:	bf18      	it	ne
 80060ea:	6059      	strne	r1, [r3, #4]
 80060ec:	6863      	ldr	r3, [r4, #4]
 80060ee:	bf08      	it	eq
 80060f0:	f8c8 1000 	streq.w	r1, [r8]
 80060f4:	5162      	str	r2, [r4, r5]
 80060f6:	604b      	str	r3, [r1, #4]
 80060f8:	4630      	mov	r0, r6
 80060fa:	f000 f9bb 	bl	8006474 <__malloc_unlock>
 80060fe:	f104 000b 	add.w	r0, r4, #11
 8006102:	1d23      	adds	r3, r4, #4
 8006104:	f020 0007 	bic.w	r0, r0, #7
 8006108:	1ac2      	subs	r2, r0, r3
 800610a:	bf1c      	itt	ne
 800610c:	1a1b      	subne	r3, r3, r0
 800610e:	50a3      	strne	r3, [r4, r2]
 8006110:	e7af      	b.n	8006072 <_malloc_r+0x22>
 8006112:	6862      	ldr	r2, [r4, #4]
 8006114:	42a3      	cmp	r3, r4
 8006116:	bf0c      	ite	eq
 8006118:	f8c8 2000 	streq.w	r2, [r8]
 800611c:	605a      	strne	r2, [r3, #4]
 800611e:	e7eb      	b.n	80060f8 <_malloc_r+0xa8>
 8006120:	4623      	mov	r3, r4
 8006122:	6864      	ldr	r4, [r4, #4]
 8006124:	e7ae      	b.n	8006084 <_malloc_r+0x34>
 8006126:	463c      	mov	r4, r7
 8006128:	687f      	ldr	r7, [r7, #4]
 800612a:	e7b6      	b.n	800609a <_malloc_r+0x4a>
 800612c:	461a      	mov	r2, r3
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	42a3      	cmp	r3, r4
 8006132:	d1fb      	bne.n	800612c <_malloc_r+0xdc>
 8006134:	2300      	movs	r3, #0
 8006136:	6053      	str	r3, [r2, #4]
 8006138:	e7de      	b.n	80060f8 <_malloc_r+0xa8>
 800613a:	230c      	movs	r3, #12
 800613c:	6033      	str	r3, [r6, #0]
 800613e:	4630      	mov	r0, r6
 8006140:	f000 f998 	bl	8006474 <__malloc_unlock>
 8006144:	e794      	b.n	8006070 <_malloc_r+0x20>
 8006146:	6005      	str	r5, [r0, #0]
 8006148:	e7d6      	b.n	80060f8 <_malloc_r+0xa8>
 800614a:	bf00      	nop
 800614c:	20000604 	.word	0x20000604

08006150 <_printf_common>:
 8006150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006154:	4616      	mov	r6, r2
 8006156:	4698      	mov	r8, r3
 8006158:	688a      	ldr	r2, [r1, #8]
 800615a:	690b      	ldr	r3, [r1, #16]
 800615c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006160:	4293      	cmp	r3, r2
 8006162:	bfb8      	it	lt
 8006164:	4613      	movlt	r3, r2
 8006166:	6033      	str	r3, [r6, #0]
 8006168:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800616c:	4607      	mov	r7, r0
 800616e:	460c      	mov	r4, r1
 8006170:	b10a      	cbz	r2, 8006176 <_printf_common+0x26>
 8006172:	3301      	adds	r3, #1
 8006174:	6033      	str	r3, [r6, #0]
 8006176:	6823      	ldr	r3, [r4, #0]
 8006178:	0699      	lsls	r1, r3, #26
 800617a:	bf42      	ittt	mi
 800617c:	6833      	ldrmi	r3, [r6, #0]
 800617e:	3302      	addmi	r3, #2
 8006180:	6033      	strmi	r3, [r6, #0]
 8006182:	6825      	ldr	r5, [r4, #0]
 8006184:	f015 0506 	ands.w	r5, r5, #6
 8006188:	d106      	bne.n	8006198 <_printf_common+0x48>
 800618a:	f104 0a19 	add.w	sl, r4, #25
 800618e:	68e3      	ldr	r3, [r4, #12]
 8006190:	6832      	ldr	r2, [r6, #0]
 8006192:	1a9b      	subs	r3, r3, r2
 8006194:	42ab      	cmp	r3, r5
 8006196:	dc26      	bgt.n	80061e6 <_printf_common+0x96>
 8006198:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800619c:	6822      	ldr	r2, [r4, #0]
 800619e:	3b00      	subs	r3, #0
 80061a0:	bf18      	it	ne
 80061a2:	2301      	movne	r3, #1
 80061a4:	0692      	lsls	r2, r2, #26
 80061a6:	d42b      	bmi.n	8006200 <_printf_common+0xb0>
 80061a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80061ac:	4641      	mov	r1, r8
 80061ae:	4638      	mov	r0, r7
 80061b0:	47c8      	blx	r9
 80061b2:	3001      	adds	r0, #1
 80061b4:	d01e      	beq.n	80061f4 <_printf_common+0xa4>
 80061b6:	6823      	ldr	r3, [r4, #0]
 80061b8:	6922      	ldr	r2, [r4, #16]
 80061ba:	f003 0306 	and.w	r3, r3, #6
 80061be:	2b04      	cmp	r3, #4
 80061c0:	bf02      	ittt	eq
 80061c2:	68e5      	ldreq	r5, [r4, #12]
 80061c4:	6833      	ldreq	r3, [r6, #0]
 80061c6:	1aed      	subeq	r5, r5, r3
 80061c8:	68a3      	ldr	r3, [r4, #8]
 80061ca:	bf0c      	ite	eq
 80061cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061d0:	2500      	movne	r5, #0
 80061d2:	4293      	cmp	r3, r2
 80061d4:	bfc4      	itt	gt
 80061d6:	1a9b      	subgt	r3, r3, r2
 80061d8:	18ed      	addgt	r5, r5, r3
 80061da:	2600      	movs	r6, #0
 80061dc:	341a      	adds	r4, #26
 80061de:	42b5      	cmp	r5, r6
 80061e0:	d11a      	bne.n	8006218 <_printf_common+0xc8>
 80061e2:	2000      	movs	r0, #0
 80061e4:	e008      	b.n	80061f8 <_printf_common+0xa8>
 80061e6:	2301      	movs	r3, #1
 80061e8:	4652      	mov	r2, sl
 80061ea:	4641      	mov	r1, r8
 80061ec:	4638      	mov	r0, r7
 80061ee:	47c8      	blx	r9
 80061f0:	3001      	adds	r0, #1
 80061f2:	d103      	bne.n	80061fc <_printf_common+0xac>
 80061f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80061f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061fc:	3501      	adds	r5, #1
 80061fe:	e7c6      	b.n	800618e <_printf_common+0x3e>
 8006200:	18e1      	adds	r1, r4, r3
 8006202:	1c5a      	adds	r2, r3, #1
 8006204:	2030      	movs	r0, #48	@ 0x30
 8006206:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800620a:	4422      	add	r2, r4
 800620c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006210:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006214:	3302      	adds	r3, #2
 8006216:	e7c7      	b.n	80061a8 <_printf_common+0x58>
 8006218:	2301      	movs	r3, #1
 800621a:	4622      	mov	r2, r4
 800621c:	4641      	mov	r1, r8
 800621e:	4638      	mov	r0, r7
 8006220:	47c8      	blx	r9
 8006222:	3001      	adds	r0, #1
 8006224:	d0e6      	beq.n	80061f4 <_printf_common+0xa4>
 8006226:	3601      	adds	r6, #1
 8006228:	e7d9      	b.n	80061de <_printf_common+0x8e>
	...

0800622c <_printf_i>:
 800622c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006230:	7e0f      	ldrb	r7, [r1, #24]
 8006232:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006234:	2f78      	cmp	r7, #120	@ 0x78
 8006236:	4691      	mov	r9, r2
 8006238:	4680      	mov	r8, r0
 800623a:	460c      	mov	r4, r1
 800623c:	469a      	mov	sl, r3
 800623e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006242:	d807      	bhi.n	8006254 <_printf_i+0x28>
 8006244:	2f62      	cmp	r7, #98	@ 0x62
 8006246:	d80a      	bhi.n	800625e <_printf_i+0x32>
 8006248:	2f00      	cmp	r7, #0
 800624a:	f000 80d1 	beq.w	80063f0 <_printf_i+0x1c4>
 800624e:	2f58      	cmp	r7, #88	@ 0x58
 8006250:	f000 80b8 	beq.w	80063c4 <_printf_i+0x198>
 8006254:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006258:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800625c:	e03a      	b.n	80062d4 <_printf_i+0xa8>
 800625e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006262:	2b15      	cmp	r3, #21
 8006264:	d8f6      	bhi.n	8006254 <_printf_i+0x28>
 8006266:	a101      	add	r1, pc, #4	@ (adr r1, 800626c <_printf_i+0x40>)
 8006268:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800626c:	080062c5 	.word	0x080062c5
 8006270:	080062d9 	.word	0x080062d9
 8006274:	08006255 	.word	0x08006255
 8006278:	08006255 	.word	0x08006255
 800627c:	08006255 	.word	0x08006255
 8006280:	08006255 	.word	0x08006255
 8006284:	080062d9 	.word	0x080062d9
 8006288:	08006255 	.word	0x08006255
 800628c:	08006255 	.word	0x08006255
 8006290:	08006255 	.word	0x08006255
 8006294:	08006255 	.word	0x08006255
 8006298:	080063d7 	.word	0x080063d7
 800629c:	08006303 	.word	0x08006303
 80062a0:	08006391 	.word	0x08006391
 80062a4:	08006255 	.word	0x08006255
 80062a8:	08006255 	.word	0x08006255
 80062ac:	080063f9 	.word	0x080063f9
 80062b0:	08006255 	.word	0x08006255
 80062b4:	08006303 	.word	0x08006303
 80062b8:	08006255 	.word	0x08006255
 80062bc:	08006255 	.word	0x08006255
 80062c0:	08006399 	.word	0x08006399
 80062c4:	6833      	ldr	r3, [r6, #0]
 80062c6:	1d1a      	adds	r2, r3, #4
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	6032      	str	r2, [r6, #0]
 80062cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80062d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80062d4:	2301      	movs	r3, #1
 80062d6:	e09c      	b.n	8006412 <_printf_i+0x1e6>
 80062d8:	6833      	ldr	r3, [r6, #0]
 80062da:	6820      	ldr	r0, [r4, #0]
 80062dc:	1d19      	adds	r1, r3, #4
 80062de:	6031      	str	r1, [r6, #0]
 80062e0:	0606      	lsls	r6, r0, #24
 80062e2:	d501      	bpl.n	80062e8 <_printf_i+0xbc>
 80062e4:	681d      	ldr	r5, [r3, #0]
 80062e6:	e003      	b.n	80062f0 <_printf_i+0xc4>
 80062e8:	0645      	lsls	r5, r0, #25
 80062ea:	d5fb      	bpl.n	80062e4 <_printf_i+0xb8>
 80062ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80062f0:	2d00      	cmp	r5, #0
 80062f2:	da03      	bge.n	80062fc <_printf_i+0xd0>
 80062f4:	232d      	movs	r3, #45	@ 0x2d
 80062f6:	426d      	negs	r5, r5
 80062f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062fc:	4858      	ldr	r0, [pc, #352]	@ (8006460 <_printf_i+0x234>)
 80062fe:	230a      	movs	r3, #10
 8006300:	e011      	b.n	8006326 <_printf_i+0xfa>
 8006302:	6821      	ldr	r1, [r4, #0]
 8006304:	6833      	ldr	r3, [r6, #0]
 8006306:	0608      	lsls	r0, r1, #24
 8006308:	f853 5b04 	ldr.w	r5, [r3], #4
 800630c:	d402      	bmi.n	8006314 <_printf_i+0xe8>
 800630e:	0649      	lsls	r1, r1, #25
 8006310:	bf48      	it	mi
 8006312:	b2ad      	uxthmi	r5, r5
 8006314:	2f6f      	cmp	r7, #111	@ 0x6f
 8006316:	4852      	ldr	r0, [pc, #328]	@ (8006460 <_printf_i+0x234>)
 8006318:	6033      	str	r3, [r6, #0]
 800631a:	bf14      	ite	ne
 800631c:	230a      	movne	r3, #10
 800631e:	2308      	moveq	r3, #8
 8006320:	2100      	movs	r1, #0
 8006322:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006326:	6866      	ldr	r6, [r4, #4]
 8006328:	60a6      	str	r6, [r4, #8]
 800632a:	2e00      	cmp	r6, #0
 800632c:	db05      	blt.n	800633a <_printf_i+0x10e>
 800632e:	6821      	ldr	r1, [r4, #0]
 8006330:	432e      	orrs	r6, r5
 8006332:	f021 0104 	bic.w	r1, r1, #4
 8006336:	6021      	str	r1, [r4, #0]
 8006338:	d04b      	beq.n	80063d2 <_printf_i+0x1a6>
 800633a:	4616      	mov	r6, r2
 800633c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006340:	fb03 5711 	mls	r7, r3, r1, r5
 8006344:	5dc7      	ldrb	r7, [r0, r7]
 8006346:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800634a:	462f      	mov	r7, r5
 800634c:	42bb      	cmp	r3, r7
 800634e:	460d      	mov	r5, r1
 8006350:	d9f4      	bls.n	800633c <_printf_i+0x110>
 8006352:	2b08      	cmp	r3, #8
 8006354:	d10b      	bne.n	800636e <_printf_i+0x142>
 8006356:	6823      	ldr	r3, [r4, #0]
 8006358:	07df      	lsls	r7, r3, #31
 800635a:	d508      	bpl.n	800636e <_printf_i+0x142>
 800635c:	6923      	ldr	r3, [r4, #16]
 800635e:	6861      	ldr	r1, [r4, #4]
 8006360:	4299      	cmp	r1, r3
 8006362:	bfde      	ittt	le
 8006364:	2330      	movle	r3, #48	@ 0x30
 8006366:	f806 3c01 	strble.w	r3, [r6, #-1]
 800636a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800636e:	1b92      	subs	r2, r2, r6
 8006370:	6122      	str	r2, [r4, #16]
 8006372:	f8cd a000 	str.w	sl, [sp]
 8006376:	464b      	mov	r3, r9
 8006378:	aa03      	add	r2, sp, #12
 800637a:	4621      	mov	r1, r4
 800637c:	4640      	mov	r0, r8
 800637e:	f7ff fee7 	bl	8006150 <_printf_common>
 8006382:	3001      	adds	r0, #1
 8006384:	d14a      	bne.n	800641c <_printf_i+0x1f0>
 8006386:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800638a:	b004      	add	sp, #16
 800638c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006390:	6823      	ldr	r3, [r4, #0]
 8006392:	f043 0320 	orr.w	r3, r3, #32
 8006396:	6023      	str	r3, [r4, #0]
 8006398:	4832      	ldr	r0, [pc, #200]	@ (8006464 <_printf_i+0x238>)
 800639a:	2778      	movs	r7, #120	@ 0x78
 800639c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80063a0:	6823      	ldr	r3, [r4, #0]
 80063a2:	6831      	ldr	r1, [r6, #0]
 80063a4:	061f      	lsls	r7, r3, #24
 80063a6:	f851 5b04 	ldr.w	r5, [r1], #4
 80063aa:	d402      	bmi.n	80063b2 <_printf_i+0x186>
 80063ac:	065f      	lsls	r7, r3, #25
 80063ae:	bf48      	it	mi
 80063b0:	b2ad      	uxthmi	r5, r5
 80063b2:	6031      	str	r1, [r6, #0]
 80063b4:	07d9      	lsls	r1, r3, #31
 80063b6:	bf44      	itt	mi
 80063b8:	f043 0320 	orrmi.w	r3, r3, #32
 80063bc:	6023      	strmi	r3, [r4, #0]
 80063be:	b11d      	cbz	r5, 80063c8 <_printf_i+0x19c>
 80063c0:	2310      	movs	r3, #16
 80063c2:	e7ad      	b.n	8006320 <_printf_i+0xf4>
 80063c4:	4826      	ldr	r0, [pc, #152]	@ (8006460 <_printf_i+0x234>)
 80063c6:	e7e9      	b.n	800639c <_printf_i+0x170>
 80063c8:	6823      	ldr	r3, [r4, #0]
 80063ca:	f023 0320 	bic.w	r3, r3, #32
 80063ce:	6023      	str	r3, [r4, #0]
 80063d0:	e7f6      	b.n	80063c0 <_printf_i+0x194>
 80063d2:	4616      	mov	r6, r2
 80063d4:	e7bd      	b.n	8006352 <_printf_i+0x126>
 80063d6:	6833      	ldr	r3, [r6, #0]
 80063d8:	6825      	ldr	r5, [r4, #0]
 80063da:	6961      	ldr	r1, [r4, #20]
 80063dc:	1d18      	adds	r0, r3, #4
 80063de:	6030      	str	r0, [r6, #0]
 80063e0:	062e      	lsls	r6, r5, #24
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	d501      	bpl.n	80063ea <_printf_i+0x1be>
 80063e6:	6019      	str	r1, [r3, #0]
 80063e8:	e002      	b.n	80063f0 <_printf_i+0x1c4>
 80063ea:	0668      	lsls	r0, r5, #25
 80063ec:	d5fb      	bpl.n	80063e6 <_printf_i+0x1ba>
 80063ee:	8019      	strh	r1, [r3, #0]
 80063f0:	2300      	movs	r3, #0
 80063f2:	6123      	str	r3, [r4, #16]
 80063f4:	4616      	mov	r6, r2
 80063f6:	e7bc      	b.n	8006372 <_printf_i+0x146>
 80063f8:	6833      	ldr	r3, [r6, #0]
 80063fa:	1d1a      	adds	r2, r3, #4
 80063fc:	6032      	str	r2, [r6, #0]
 80063fe:	681e      	ldr	r6, [r3, #0]
 8006400:	6862      	ldr	r2, [r4, #4]
 8006402:	2100      	movs	r1, #0
 8006404:	4630      	mov	r0, r6
 8006406:	f7f9 ff0b 	bl	8000220 <memchr>
 800640a:	b108      	cbz	r0, 8006410 <_printf_i+0x1e4>
 800640c:	1b80      	subs	r0, r0, r6
 800640e:	6060      	str	r0, [r4, #4]
 8006410:	6863      	ldr	r3, [r4, #4]
 8006412:	6123      	str	r3, [r4, #16]
 8006414:	2300      	movs	r3, #0
 8006416:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800641a:	e7aa      	b.n	8006372 <_printf_i+0x146>
 800641c:	6923      	ldr	r3, [r4, #16]
 800641e:	4632      	mov	r2, r6
 8006420:	4649      	mov	r1, r9
 8006422:	4640      	mov	r0, r8
 8006424:	47d0      	blx	sl
 8006426:	3001      	adds	r0, #1
 8006428:	d0ad      	beq.n	8006386 <_printf_i+0x15a>
 800642a:	6823      	ldr	r3, [r4, #0]
 800642c:	079b      	lsls	r3, r3, #30
 800642e:	d413      	bmi.n	8006458 <_printf_i+0x22c>
 8006430:	68e0      	ldr	r0, [r4, #12]
 8006432:	9b03      	ldr	r3, [sp, #12]
 8006434:	4298      	cmp	r0, r3
 8006436:	bfb8      	it	lt
 8006438:	4618      	movlt	r0, r3
 800643a:	e7a6      	b.n	800638a <_printf_i+0x15e>
 800643c:	2301      	movs	r3, #1
 800643e:	4632      	mov	r2, r6
 8006440:	4649      	mov	r1, r9
 8006442:	4640      	mov	r0, r8
 8006444:	47d0      	blx	sl
 8006446:	3001      	adds	r0, #1
 8006448:	d09d      	beq.n	8006386 <_printf_i+0x15a>
 800644a:	3501      	adds	r5, #1
 800644c:	68e3      	ldr	r3, [r4, #12]
 800644e:	9903      	ldr	r1, [sp, #12]
 8006450:	1a5b      	subs	r3, r3, r1
 8006452:	42ab      	cmp	r3, r5
 8006454:	dcf2      	bgt.n	800643c <_printf_i+0x210>
 8006456:	e7eb      	b.n	8006430 <_printf_i+0x204>
 8006458:	2500      	movs	r5, #0
 800645a:	f104 0619 	add.w	r6, r4, #25
 800645e:	e7f5      	b.n	800644c <_printf_i+0x220>
 8006460:	08006815 	.word	0x08006815
 8006464:	08006826 	.word	0x08006826

08006468 <__malloc_lock>:
 8006468:	4801      	ldr	r0, [pc, #4]	@ (8006470 <__malloc_lock+0x8>)
 800646a:	f7ff bc75 	b.w	8005d58 <__retarget_lock_acquire_recursive>
 800646e:	bf00      	nop
 8006470:	200005fc 	.word	0x200005fc

08006474 <__malloc_unlock>:
 8006474:	4801      	ldr	r0, [pc, #4]	@ (800647c <__malloc_unlock+0x8>)
 8006476:	f7ff bc70 	b.w	8005d5a <__retarget_lock_release_recursive>
 800647a:	bf00      	nop
 800647c:	200005fc 	.word	0x200005fc

08006480 <_realloc_r>:
 8006480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006484:	4607      	mov	r7, r0
 8006486:	4614      	mov	r4, r2
 8006488:	460d      	mov	r5, r1
 800648a:	b921      	cbnz	r1, 8006496 <_realloc_r+0x16>
 800648c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006490:	4611      	mov	r1, r2
 8006492:	f7ff bddd 	b.w	8006050 <_malloc_r>
 8006496:	b92a      	cbnz	r2, 80064a4 <_realloc_r+0x24>
 8006498:	f000 f858 	bl	800654c <_free_r>
 800649c:	4625      	mov	r5, r4
 800649e:	4628      	mov	r0, r5
 80064a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064a4:	f000 f89c 	bl	80065e0 <_malloc_usable_size_r>
 80064a8:	4284      	cmp	r4, r0
 80064aa:	4606      	mov	r6, r0
 80064ac:	d802      	bhi.n	80064b4 <_realloc_r+0x34>
 80064ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80064b2:	d8f4      	bhi.n	800649e <_realloc_r+0x1e>
 80064b4:	4621      	mov	r1, r4
 80064b6:	4638      	mov	r0, r7
 80064b8:	f7ff fdca 	bl	8006050 <_malloc_r>
 80064bc:	4680      	mov	r8, r0
 80064be:	b908      	cbnz	r0, 80064c4 <_realloc_r+0x44>
 80064c0:	4645      	mov	r5, r8
 80064c2:	e7ec      	b.n	800649e <_realloc_r+0x1e>
 80064c4:	42b4      	cmp	r4, r6
 80064c6:	4622      	mov	r2, r4
 80064c8:	4629      	mov	r1, r5
 80064ca:	bf28      	it	cs
 80064cc:	4632      	movcs	r2, r6
 80064ce:	f000 f82f 	bl	8006530 <memcpy>
 80064d2:	4629      	mov	r1, r5
 80064d4:	4638      	mov	r0, r7
 80064d6:	f000 f839 	bl	800654c <_free_r>
 80064da:	e7f1      	b.n	80064c0 <_realloc_r+0x40>

080064dc <memmove>:
 80064dc:	4288      	cmp	r0, r1
 80064de:	b510      	push	{r4, lr}
 80064e0:	eb01 0402 	add.w	r4, r1, r2
 80064e4:	d902      	bls.n	80064ec <memmove+0x10>
 80064e6:	4284      	cmp	r4, r0
 80064e8:	4623      	mov	r3, r4
 80064ea:	d807      	bhi.n	80064fc <memmove+0x20>
 80064ec:	1e43      	subs	r3, r0, #1
 80064ee:	42a1      	cmp	r1, r4
 80064f0:	d008      	beq.n	8006504 <memmove+0x28>
 80064f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80064fa:	e7f8      	b.n	80064ee <memmove+0x12>
 80064fc:	4402      	add	r2, r0
 80064fe:	4601      	mov	r1, r0
 8006500:	428a      	cmp	r2, r1
 8006502:	d100      	bne.n	8006506 <memmove+0x2a>
 8006504:	bd10      	pop	{r4, pc}
 8006506:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800650a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800650e:	e7f7      	b.n	8006500 <memmove+0x24>

08006510 <_sbrk_r>:
 8006510:	b538      	push	{r3, r4, r5, lr}
 8006512:	4d06      	ldr	r5, [pc, #24]	@ (800652c <_sbrk_r+0x1c>)
 8006514:	2300      	movs	r3, #0
 8006516:	4604      	mov	r4, r0
 8006518:	4608      	mov	r0, r1
 800651a:	602b      	str	r3, [r5, #0]
 800651c:	f7fc f812 	bl	8002544 <_sbrk>
 8006520:	1c43      	adds	r3, r0, #1
 8006522:	d102      	bne.n	800652a <_sbrk_r+0x1a>
 8006524:	682b      	ldr	r3, [r5, #0]
 8006526:	b103      	cbz	r3, 800652a <_sbrk_r+0x1a>
 8006528:	6023      	str	r3, [r4, #0]
 800652a:	bd38      	pop	{r3, r4, r5, pc}
 800652c:	20000608 	.word	0x20000608

08006530 <memcpy>:
 8006530:	440a      	add	r2, r1
 8006532:	4291      	cmp	r1, r2
 8006534:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006538:	d100      	bne.n	800653c <memcpy+0xc>
 800653a:	4770      	bx	lr
 800653c:	b510      	push	{r4, lr}
 800653e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006542:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006546:	4291      	cmp	r1, r2
 8006548:	d1f9      	bne.n	800653e <memcpy+0xe>
 800654a:	bd10      	pop	{r4, pc}

0800654c <_free_r>:
 800654c:	b538      	push	{r3, r4, r5, lr}
 800654e:	4605      	mov	r5, r0
 8006550:	2900      	cmp	r1, #0
 8006552:	d041      	beq.n	80065d8 <_free_r+0x8c>
 8006554:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006558:	1f0c      	subs	r4, r1, #4
 800655a:	2b00      	cmp	r3, #0
 800655c:	bfb8      	it	lt
 800655e:	18e4      	addlt	r4, r4, r3
 8006560:	f7ff ff82 	bl	8006468 <__malloc_lock>
 8006564:	4a1d      	ldr	r2, [pc, #116]	@ (80065dc <_free_r+0x90>)
 8006566:	6813      	ldr	r3, [r2, #0]
 8006568:	b933      	cbnz	r3, 8006578 <_free_r+0x2c>
 800656a:	6063      	str	r3, [r4, #4]
 800656c:	6014      	str	r4, [r2, #0]
 800656e:	4628      	mov	r0, r5
 8006570:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006574:	f7ff bf7e 	b.w	8006474 <__malloc_unlock>
 8006578:	42a3      	cmp	r3, r4
 800657a:	d908      	bls.n	800658e <_free_r+0x42>
 800657c:	6820      	ldr	r0, [r4, #0]
 800657e:	1821      	adds	r1, r4, r0
 8006580:	428b      	cmp	r3, r1
 8006582:	bf01      	itttt	eq
 8006584:	6819      	ldreq	r1, [r3, #0]
 8006586:	685b      	ldreq	r3, [r3, #4]
 8006588:	1809      	addeq	r1, r1, r0
 800658a:	6021      	streq	r1, [r4, #0]
 800658c:	e7ed      	b.n	800656a <_free_r+0x1e>
 800658e:	461a      	mov	r2, r3
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	b10b      	cbz	r3, 8006598 <_free_r+0x4c>
 8006594:	42a3      	cmp	r3, r4
 8006596:	d9fa      	bls.n	800658e <_free_r+0x42>
 8006598:	6811      	ldr	r1, [r2, #0]
 800659a:	1850      	adds	r0, r2, r1
 800659c:	42a0      	cmp	r0, r4
 800659e:	d10b      	bne.n	80065b8 <_free_r+0x6c>
 80065a0:	6820      	ldr	r0, [r4, #0]
 80065a2:	4401      	add	r1, r0
 80065a4:	1850      	adds	r0, r2, r1
 80065a6:	4283      	cmp	r3, r0
 80065a8:	6011      	str	r1, [r2, #0]
 80065aa:	d1e0      	bne.n	800656e <_free_r+0x22>
 80065ac:	6818      	ldr	r0, [r3, #0]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	6053      	str	r3, [r2, #4]
 80065b2:	4408      	add	r0, r1
 80065b4:	6010      	str	r0, [r2, #0]
 80065b6:	e7da      	b.n	800656e <_free_r+0x22>
 80065b8:	d902      	bls.n	80065c0 <_free_r+0x74>
 80065ba:	230c      	movs	r3, #12
 80065bc:	602b      	str	r3, [r5, #0]
 80065be:	e7d6      	b.n	800656e <_free_r+0x22>
 80065c0:	6820      	ldr	r0, [r4, #0]
 80065c2:	1821      	adds	r1, r4, r0
 80065c4:	428b      	cmp	r3, r1
 80065c6:	bf04      	itt	eq
 80065c8:	6819      	ldreq	r1, [r3, #0]
 80065ca:	685b      	ldreq	r3, [r3, #4]
 80065cc:	6063      	str	r3, [r4, #4]
 80065ce:	bf04      	itt	eq
 80065d0:	1809      	addeq	r1, r1, r0
 80065d2:	6021      	streq	r1, [r4, #0]
 80065d4:	6054      	str	r4, [r2, #4]
 80065d6:	e7ca      	b.n	800656e <_free_r+0x22>
 80065d8:	bd38      	pop	{r3, r4, r5, pc}
 80065da:	bf00      	nop
 80065dc:	20000604 	.word	0x20000604

080065e0 <_malloc_usable_size_r>:
 80065e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065e4:	1f18      	subs	r0, r3, #4
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	bfbc      	itt	lt
 80065ea:	580b      	ldrlt	r3, [r1, r0]
 80065ec:	18c0      	addlt	r0, r0, r3
 80065ee:	4770      	bx	lr

080065f0 <_init>:
 80065f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065f2:	bf00      	nop
 80065f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065f6:	bc08      	pop	{r3}
 80065f8:	469e      	mov	lr, r3
 80065fa:	4770      	bx	lr

080065fc <_fini>:
 80065fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065fe:	bf00      	nop
 8006600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006602:	bc08      	pop	{r3}
 8006604:	469e      	mov	lr, r3
 8006606:	4770      	bx	lr
