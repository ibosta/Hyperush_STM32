
HYPERUSJ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ca4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  08005e74  08005e74  00006e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060ec  080060ec  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080060ec  080060ec  000070ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060f4  080060f4  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060f4  080060f4  000070f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080060f8  080060f8  000070f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080060fc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004fc  20000060  0800615c  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000055c  0800615c  0000855c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012299  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000231e  00000000  00000000  0001a329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001090  00000000  00000000  0001c648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d0c  00000000  00000000  0001d6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000273b0  00000000  00000000  0001e3e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000142ce  00000000  00000000  00045794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f46c9  00000000  00000000  00059a62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014e12b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c68  00000000  00000000  0014e170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00152dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005e5c 	.word	0x08005e5c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08005e5c 	.word	0x08005e5c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	@ 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__aeabi_d2f>:
 800088c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000890:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000894:	bf24      	itt	cs
 8000896:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800089a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800089e:	d90d      	bls.n	80008bc <__aeabi_d2f+0x30>
 80008a0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80008a4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008a8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008ac:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80008b0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008b4:	bf08      	it	eq
 80008b6:	f020 0001 	biceq.w	r0, r0, #1
 80008ba:	4770      	bx	lr
 80008bc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80008c0:	d121      	bne.n	8000906 <__aeabi_d2f+0x7a>
 80008c2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80008c6:	bfbc      	itt	lt
 80008c8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80008cc:	4770      	bxlt	lr
 80008ce:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008d2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008d6:	f1c2 0218 	rsb	r2, r2, #24
 80008da:	f1c2 0c20 	rsb	ip, r2, #32
 80008de:	fa10 f30c 	lsls.w	r3, r0, ip
 80008e2:	fa20 f002 	lsr.w	r0, r0, r2
 80008e6:	bf18      	it	ne
 80008e8:	f040 0001 	orrne.w	r0, r0, #1
 80008ec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008f0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008f4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008f8:	ea40 000c 	orr.w	r0, r0, ip
 80008fc:	fa23 f302 	lsr.w	r3, r3, r2
 8000900:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000904:	e7cc      	b.n	80008a0 <__aeabi_d2f+0x14>
 8000906:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800090a:	d107      	bne.n	800091c <__aeabi_d2f+0x90>
 800090c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000910:	bf1e      	ittt	ne
 8000912:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000916:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800091a:	4770      	bxne	lr
 800091c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000920:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000924:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop

0800092c <__aeabi_uldivmod>:
 800092c:	b953      	cbnz	r3, 8000944 <__aeabi_uldivmod+0x18>
 800092e:	b94a      	cbnz	r2, 8000944 <__aeabi_uldivmod+0x18>
 8000930:	2900      	cmp	r1, #0
 8000932:	bf08      	it	eq
 8000934:	2800      	cmpeq	r0, #0
 8000936:	bf1c      	itt	ne
 8000938:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800093c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000940:	f000 b988 	b.w	8000c54 <__aeabi_idiv0>
 8000944:	f1ad 0c08 	sub.w	ip, sp, #8
 8000948:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800094c:	f000 f806 	bl	800095c <__udivmoddi4>
 8000950:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000954:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000958:	b004      	add	sp, #16
 800095a:	4770      	bx	lr

0800095c <__udivmoddi4>:
 800095c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000960:	9d08      	ldr	r5, [sp, #32]
 8000962:	468e      	mov	lr, r1
 8000964:	4604      	mov	r4, r0
 8000966:	4688      	mov	r8, r1
 8000968:	2b00      	cmp	r3, #0
 800096a:	d14a      	bne.n	8000a02 <__udivmoddi4+0xa6>
 800096c:	428a      	cmp	r2, r1
 800096e:	4617      	mov	r7, r2
 8000970:	d962      	bls.n	8000a38 <__udivmoddi4+0xdc>
 8000972:	fab2 f682 	clz	r6, r2
 8000976:	b14e      	cbz	r6, 800098c <__udivmoddi4+0x30>
 8000978:	f1c6 0320 	rsb	r3, r6, #32
 800097c:	fa01 f806 	lsl.w	r8, r1, r6
 8000980:	fa20 f303 	lsr.w	r3, r0, r3
 8000984:	40b7      	lsls	r7, r6
 8000986:	ea43 0808 	orr.w	r8, r3, r8
 800098a:	40b4      	lsls	r4, r6
 800098c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000990:	fa1f fc87 	uxth.w	ip, r7
 8000994:	fbb8 f1fe 	udiv	r1, r8, lr
 8000998:	0c23      	lsrs	r3, r4, #16
 800099a:	fb0e 8811 	mls	r8, lr, r1, r8
 800099e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009a2:	fb01 f20c 	mul.w	r2, r1, ip
 80009a6:	429a      	cmp	r2, r3
 80009a8:	d909      	bls.n	80009be <__udivmoddi4+0x62>
 80009aa:	18fb      	adds	r3, r7, r3
 80009ac:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80009b0:	f080 80ea 	bcs.w	8000b88 <__udivmoddi4+0x22c>
 80009b4:	429a      	cmp	r2, r3
 80009b6:	f240 80e7 	bls.w	8000b88 <__udivmoddi4+0x22c>
 80009ba:	3902      	subs	r1, #2
 80009bc:	443b      	add	r3, r7
 80009be:	1a9a      	subs	r2, r3, r2
 80009c0:	b2a3      	uxth	r3, r4
 80009c2:	fbb2 f0fe 	udiv	r0, r2, lr
 80009c6:	fb0e 2210 	mls	r2, lr, r0, r2
 80009ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80009ce:	fb00 fc0c 	mul.w	ip, r0, ip
 80009d2:	459c      	cmp	ip, r3
 80009d4:	d909      	bls.n	80009ea <__udivmoddi4+0x8e>
 80009d6:	18fb      	adds	r3, r7, r3
 80009d8:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80009dc:	f080 80d6 	bcs.w	8000b8c <__udivmoddi4+0x230>
 80009e0:	459c      	cmp	ip, r3
 80009e2:	f240 80d3 	bls.w	8000b8c <__udivmoddi4+0x230>
 80009e6:	443b      	add	r3, r7
 80009e8:	3802      	subs	r0, #2
 80009ea:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009ee:	eba3 030c 	sub.w	r3, r3, ip
 80009f2:	2100      	movs	r1, #0
 80009f4:	b11d      	cbz	r5, 80009fe <__udivmoddi4+0xa2>
 80009f6:	40f3      	lsrs	r3, r6
 80009f8:	2200      	movs	r2, #0
 80009fa:	e9c5 3200 	strd	r3, r2, [r5]
 80009fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a02:	428b      	cmp	r3, r1
 8000a04:	d905      	bls.n	8000a12 <__udivmoddi4+0xb6>
 8000a06:	b10d      	cbz	r5, 8000a0c <__udivmoddi4+0xb0>
 8000a08:	e9c5 0100 	strd	r0, r1, [r5]
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4608      	mov	r0, r1
 8000a10:	e7f5      	b.n	80009fe <__udivmoddi4+0xa2>
 8000a12:	fab3 f183 	clz	r1, r3
 8000a16:	2900      	cmp	r1, #0
 8000a18:	d146      	bne.n	8000aa8 <__udivmoddi4+0x14c>
 8000a1a:	4573      	cmp	r3, lr
 8000a1c:	d302      	bcc.n	8000a24 <__udivmoddi4+0xc8>
 8000a1e:	4282      	cmp	r2, r0
 8000a20:	f200 8105 	bhi.w	8000c2e <__udivmoddi4+0x2d2>
 8000a24:	1a84      	subs	r4, r0, r2
 8000a26:	eb6e 0203 	sbc.w	r2, lr, r3
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	4690      	mov	r8, r2
 8000a2e:	2d00      	cmp	r5, #0
 8000a30:	d0e5      	beq.n	80009fe <__udivmoddi4+0xa2>
 8000a32:	e9c5 4800 	strd	r4, r8, [r5]
 8000a36:	e7e2      	b.n	80009fe <__udivmoddi4+0xa2>
 8000a38:	2a00      	cmp	r2, #0
 8000a3a:	f000 8090 	beq.w	8000b5e <__udivmoddi4+0x202>
 8000a3e:	fab2 f682 	clz	r6, r2
 8000a42:	2e00      	cmp	r6, #0
 8000a44:	f040 80a4 	bne.w	8000b90 <__udivmoddi4+0x234>
 8000a48:	1a8a      	subs	r2, r1, r2
 8000a4a:	0c03      	lsrs	r3, r0, #16
 8000a4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a50:	b280      	uxth	r0, r0
 8000a52:	b2bc      	uxth	r4, r7
 8000a54:	2101      	movs	r1, #1
 8000a56:	fbb2 fcfe 	udiv	ip, r2, lr
 8000a5a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000a5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a62:	fb04 f20c 	mul.w	r2, r4, ip
 8000a66:	429a      	cmp	r2, r3
 8000a68:	d907      	bls.n	8000a7a <__udivmoddi4+0x11e>
 8000a6a:	18fb      	adds	r3, r7, r3
 8000a6c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000a70:	d202      	bcs.n	8000a78 <__udivmoddi4+0x11c>
 8000a72:	429a      	cmp	r2, r3
 8000a74:	f200 80e0 	bhi.w	8000c38 <__udivmoddi4+0x2dc>
 8000a78:	46c4      	mov	ip, r8
 8000a7a:	1a9b      	subs	r3, r3, r2
 8000a7c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000a80:	fb0e 3312 	mls	r3, lr, r2, r3
 8000a84:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000a88:	fb02 f404 	mul.w	r4, r2, r4
 8000a8c:	429c      	cmp	r4, r3
 8000a8e:	d907      	bls.n	8000aa0 <__udivmoddi4+0x144>
 8000a90:	18fb      	adds	r3, r7, r3
 8000a92:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000a96:	d202      	bcs.n	8000a9e <__udivmoddi4+0x142>
 8000a98:	429c      	cmp	r4, r3
 8000a9a:	f200 80ca 	bhi.w	8000c32 <__udivmoddi4+0x2d6>
 8000a9e:	4602      	mov	r2, r0
 8000aa0:	1b1b      	subs	r3, r3, r4
 8000aa2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000aa6:	e7a5      	b.n	80009f4 <__udivmoddi4+0x98>
 8000aa8:	f1c1 0620 	rsb	r6, r1, #32
 8000aac:	408b      	lsls	r3, r1
 8000aae:	fa22 f706 	lsr.w	r7, r2, r6
 8000ab2:	431f      	orrs	r7, r3
 8000ab4:	fa0e f401 	lsl.w	r4, lr, r1
 8000ab8:	fa20 f306 	lsr.w	r3, r0, r6
 8000abc:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ac0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ac4:	4323      	orrs	r3, r4
 8000ac6:	fa00 f801 	lsl.w	r8, r0, r1
 8000aca:	fa1f fc87 	uxth.w	ip, r7
 8000ace:	fbbe f0f9 	udiv	r0, lr, r9
 8000ad2:	0c1c      	lsrs	r4, r3, #16
 8000ad4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ad8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000adc:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ae0:	45a6      	cmp	lr, r4
 8000ae2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ae6:	d909      	bls.n	8000afc <__udivmoddi4+0x1a0>
 8000ae8:	193c      	adds	r4, r7, r4
 8000aea:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000aee:	f080 809c 	bcs.w	8000c2a <__udivmoddi4+0x2ce>
 8000af2:	45a6      	cmp	lr, r4
 8000af4:	f240 8099 	bls.w	8000c2a <__udivmoddi4+0x2ce>
 8000af8:	3802      	subs	r0, #2
 8000afa:	443c      	add	r4, r7
 8000afc:	eba4 040e 	sub.w	r4, r4, lr
 8000b00:	fa1f fe83 	uxth.w	lr, r3
 8000b04:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b08:	fb09 4413 	mls	r4, r9, r3, r4
 8000b0c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000b10:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b14:	45a4      	cmp	ip, r4
 8000b16:	d908      	bls.n	8000b2a <__udivmoddi4+0x1ce>
 8000b18:	193c      	adds	r4, r7, r4
 8000b1a:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000b1e:	f080 8082 	bcs.w	8000c26 <__udivmoddi4+0x2ca>
 8000b22:	45a4      	cmp	ip, r4
 8000b24:	d97f      	bls.n	8000c26 <__udivmoddi4+0x2ca>
 8000b26:	3b02      	subs	r3, #2
 8000b28:	443c      	add	r4, r7
 8000b2a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000b2e:	eba4 040c 	sub.w	r4, r4, ip
 8000b32:	fba0 ec02 	umull	lr, ip, r0, r2
 8000b36:	4564      	cmp	r4, ip
 8000b38:	4673      	mov	r3, lr
 8000b3a:	46e1      	mov	r9, ip
 8000b3c:	d362      	bcc.n	8000c04 <__udivmoddi4+0x2a8>
 8000b3e:	d05f      	beq.n	8000c00 <__udivmoddi4+0x2a4>
 8000b40:	b15d      	cbz	r5, 8000b5a <__udivmoddi4+0x1fe>
 8000b42:	ebb8 0203 	subs.w	r2, r8, r3
 8000b46:	eb64 0409 	sbc.w	r4, r4, r9
 8000b4a:	fa04 f606 	lsl.w	r6, r4, r6
 8000b4e:	fa22 f301 	lsr.w	r3, r2, r1
 8000b52:	431e      	orrs	r6, r3
 8000b54:	40cc      	lsrs	r4, r1
 8000b56:	e9c5 6400 	strd	r6, r4, [r5]
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	e74f      	b.n	80009fe <__udivmoddi4+0xa2>
 8000b5e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000b62:	0c01      	lsrs	r1, r0, #16
 8000b64:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000b68:	b280      	uxth	r0, r0
 8000b6a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000b6e:	463b      	mov	r3, r7
 8000b70:	4638      	mov	r0, r7
 8000b72:	463c      	mov	r4, r7
 8000b74:	46b8      	mov	r8, r7
 8000b76:	46be      	mov	lr, r7
 8000b78:	2620      	movs	r6, #32
 8000b7a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000b7e:	eba2 0208 	sub.w	r2, r2, r8
 8000b82:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000b86:	e766      	b.n	8000a56 <__udivmoddi4+0xfa>
 8000b88:	4601      	mov	r1, r0
 8000b8a:	e718      	b.n	80009be <__udivmoddi4+0x62>
 8000b8c:	4610      	mov	r0, r2
 8000b8e:	e72c      	b.n	80009ea <__udivmoddi4+0x8e>
 8000b90:	f1c6 0220 	rsb	r2, r6, #32
 8000b94:	fa2e f302 	lsr.w	r3, lr, r2
 8000b98:	40b7      	lsls	r7, r6
 8000b9a:	40b1      	lsls	r1, r6
 8000b9c:	fa20 f202 	lsr.w	r2, r0, r2
 8000ba0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba4:	430a      	orrs	r2, r1
 8000ba6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000baa:	b2bc      	uxth	r4, r7
 8000bac:	fb0e 3318 	mls	r3, lr, r8, r3
 8000bb0:	0c11      	lsrs	r1, r2, #16
 8000bb2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bb6:	fb08 f904 	mul.w	r9, r8, r4
 8000bba:	40b0      	lsls	r0, r6
 8000bbc:	4589      	cmp	r9, r1
 8000bbe:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000bc2:	b280      	uxth	r0, r0
 8000bc4:	d93e      	bls.n	8000c44 <__udivmoddi4+0x2e8>
 8000bc6:	1879      	adds	r1, r7, r1
 8000bc8:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000bcc:	d201      	bcs.n	8000bd2 <__udivmoddi4+0x276>
 8000bce:	4589      	cmp	r9, r1
 8000bd0:	d81f      	bhi.n	8000c12 <__udivmoddi4+0x2b6>
 8000bd2:	eba1 0109 	sub.w	r1, r1, r9
 8000bd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bda:	fb09 f804 	mul.w	r8, r9, r4
 8000bde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000be2:	b292      	uxth	r2, r2
 8000be4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000be8:	4542      	cmp	r2, r8
 8000bea:	d229      	bcs.n	8000c40 <__udivmoddi4+0x2e4>
 8000bec:	18ba      	adds	r2, r7, r2
 8000bee:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000bf2:	d2c4      	bcs.n	8000b7e <__udivmoddi4+0x222>
 8000bf4:	4542      	cmp	r2, r8
 8000bf6:	d2c2      	bcs.n	8000b7e <__udivmoddi4+0x222>
 8000bf8:	f1a9 0102 	sub.w	r1, r9, #2
 8000bfc:	443a      	add	r2, r7
 8000bfe:	e7be      	b.n	8000b7e <__udivmoddi4+0x222>
 8000c00:	45f0      	cmp	r8, lr
 8000c02:	d29d      	bcs.n	8000b40 <__udivmoddi4+0x1e4>
 8000c04:	ebbe 0302 	subs.w	r3, lr, r2
 8000c08:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000c0c:	3801      	subs	r0, #1
 8000c0e:	46e1      	mov	r9, ip
 8000c10:	e796      	b.n	8000b40 <__udivmoddi4+0x1e4>
 8000c12:	eba7 0909 	sub.w	r9, r7, r9
 8000c16:	4449      	add	r1, r9
 8000c18:	f1a8 0c02 	sub.w	ip, r8, #2
 8000c1c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c20:	fb09 f804 	mul.w	r8, r9, r4
 8000c24:	e7db      	b.n	8000bde <__udivmoddi4+0x282>
 8000c26:	4673      	mov	r3, lr
 8000c28:	e77f      	b.n	8000b2a <__udivmoddi4+0x1ce>
 8000c2a:	4650      	mov	r0, sl
 8000c2c:	e766      	b.n	8000afc <__udivmoddi4+0x1a0>
 8000c2e:	4608      	mov	r0, r1
 8000c30:	e6fd      	b.n	8000a2e <__udivmoddi4+0xd2>
 8000c32:	443b      	add	r3, r7
 8000c34:	3a02      	subs	r2, #2
 8000c36:	e733      	b.n	8000aa0 <__udivmoddi4+0x144>
 8000c38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c3c:	443b      	add	r3, r7
 8000c3e:	e71c      	b.n	8000a7a <__udivmoddi4+0x11e>
 8000c40:	4649      	mov	r1, r9
 8000c42:	e79c      	b.n	8000b7e <__udivmoddi4+0x222>
 8000c44:	eba1 0109 	sub.w	r1, r1, r9
 8000c48:	46c4      	mov	ip, r8
 8000c4a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c4e:	fb09 f804 	mul.w	r8, r9, r4
 8000c52:	e7c4      	b.n	8000bde <__udivmoddi4+0x282>

08000c54 <__aeabi_idiv0>:
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <INA226_INIT>:
void INA226_I2C_Write(uint8_t pByte, uint16_t Data);
void INA226_I2C_Read(uint8_t pByte, uint16_t* pData);
void INA226_I2C_ReadBuff(uint8_t pByte, uint8_t* pData, uint16_t size);

void INA226_INIT(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
	INA226_I2C_Write(INA226_CONFIG_REG, 0x4127); // Default
 8000c5c:	f244 1127 	movw	r1, #16679	@ 0x4127
 8000c60:	2000      	movs	r0, #0
 8000c62:	f000 f8d5 	bl	8000e10 <INA226_I2C_Write>
	INA226_SetCalibration(R_SHUNT,8);
 8000c66:	eef2 0a00 	vmov.f32	s1, #32	@ 0x41000000  8.0
 8000c6a:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8000c78 <INA226_INIT+0x20>
 8000c6e:	f000 f885 	bl	8000d7c <INA226_SetCalibration>
//	INA226_Config(ShuntAndBusCont, ConvTime_1ms1, ConvTime_1ms1, Num_AVG_1); // Default
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	3c23d70a 	.word	0x3c23d70a

08000c7c <INA226_ID>:
	
	INA226_I2C_Write(INA226_CONFIG_REG, reg);
}

uint16_t INA226_ID(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
	INA226_I2C_Read(INA226_DIE_ID_REG,Buff);
 8000c80:	4905      	ldr	r1, [pc, #20]	@ (8000c98 <INA226_ID+0x1c>)
 8000c82:	20ff      	movs	r0, #255	@ 0xff
 8000c84:	f000 f8e8 	bl	8000e58 <INA226_I2C_Read>
	tempReg = Buff[0]; 
 8000c88:	4b03      	ldr	r3, [pc, #12]	@ (8000c98 <INA226_ID+0x1c>)
 8000c8a:	881a      	ldrh	r2, [r3, #0]
 8000c8c:	4b03      	ldr	r3, [pc, #12]	@ (8000c9c <INA226_ID+0x20>)
 8000c8e:	801a      	strh	r2, [r3, #0]
	return tempReg;
 8000c90:	4b02      	ldr	r3, [pc, #8]	@ (8000c9c <INA226_ID+0x20>)
 8000c92:	881b      	ldrh	r3, [r3, #0]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	2000007c 	.word	0x2000007c
 8000c9c:	20000090 	.word	0x20000090

08000ca0 <INA226_ShuntVoltage>:
//	*current = INA226_values.Current * 1e-03;
//	*power   = INA226_values.Power * 25e-03;
	
}

float INA226_ShuntVoltage (void){
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0

	INA226_I2C_Read(INA226_SHUNT_VOLTAGE_REG,&tempReg);
 8000ca4:	490e      	ldr	r1, [pc, #56]	@ (8000ce0 <INA226_ShuntVoltage+0x40>)
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	f000 f8d6 	bl	8000e58 <INA226_I2C_Read>
	return tempReg * 2.5e-06;
 8000cac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce0 <INA226_ShuntVoltage+0x40>)
 8000cae:	881b      	ldrh	r3, [r3, #0]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff fd81 	bl	80007b8 <__aeabi_i2d>
 8000cb6:	a308      	add	r3, pc, #32	@ (adr r3, 8000cd8 <INA226_ShuntVoltage+0x38>)
 8000cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cbc:	f7ff fb00 	bl	80002c0 <__aeabi_dmul>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	460b      	mov	r3, r1
 8000cc4:	4610      	mov	r0, r2
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	f7ff fde0 	bl	800088c <__aeabi_d2f>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	ee07 3a90 	vmov	s15, r3

}
 8000cd2:	eeb0 0a67 	vmov.f32	s0, s15
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	88e368f1 	.word	0x88e368f1
 8000cdc:	3ec4f8b5 	.word	0x3ec4f8b5
 8000ce0:	20000090 	.word	0x20000090

08000ce4 <INA226_BusVoltage>:

float INA226_BusVoltage (void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
	INA226_I2C_Read(INA226_BUS_VOLTAGE_REG,&tempReg);
 8000ce8:	4908      	ldr	r1, [pc, #32]	@ (8000d0c <INA226_BusVoltage+0x28>)
 8000cea:	2002      	movs	r0, #2
 8000cec:	f000 f8b4 	bl	8000e58 <INA226_I2C_Read>
	return tempReg * 1.25e-03f;	
 8000cf0:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <INA226_BusVoltage+0x28>)
 8000cf2:	881b      	ldrh	r3, [r3, #0]
 8000cf4:	ee07 3a90 	vmov	s15, r3
 8000cf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cfc:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 8000d10 <INA226_BusVoltage+0x2c>
 8000d00:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000d04:	eeb0 0a67 	vmov.f32	s0, s15
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000090 	.word	0x20000090
 8000d10:	3aa3d70a 	.word	0x3aa3d70a

08000d14 <INA226_Power>:

float INA226_Power (void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
	INA226_I2C_Read(INA226_POWER_REG,&tempReg);
 8000d18:	490a      	ldr	r1, [pc, #40]	@ (8000d44 <INA226_Power+0x30>)
 8000d1a:	2003      	movs	r0, #3
 8000d1c:	f000 f89c 	bl	8000e58 <INA226_I2C_Read>
	
	return tempReg * (INA226_values.CurrentLSB*25);
 8000d20:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <INA226_Power+0x30>)
 8000d22:	881b      	ldrh	r3, [r3, #0]
 8000d24:	ee07 3a90 	vmov	s15, r3
 8000d28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d2c:	4b06      	ldr	r3, [pc, #24]	@ (8000d48 <INA226_Power+0x34>)
 8000d2e:	edd3 7a03 	vldr	s15, [r3, #12]
 8000d32:	eef3 6a09 	vmov.f32	s13, #57	@ 0x41c80000  25.0
 8000d36:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8000d3e:	eeb0 0a67 	vmov.f32	s0, s15
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20000090 	.word	0x20000090
 8000d48:	20000094 	.word	0x20000094

08000d4c <INA226_Current>:

float INA226_Current (void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
	INA226_I2C_Read(INA226_CURRENT_REG,&tempReg);
 8000d50:	4908      	ldr	r1, [pc, #32]	@ (8000d74 <INA226_Current+0x28>)
 8000d52:	2004      	movs	r0, #4
 8000d54:	f000 f880 	bl	8000e58 <INA226_I2C_Read>
	
	return tempReg * INA226_values.CurrentLSB;
 8000d58:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <INA226_Current+0x28>)
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	ee07 3a90 	vmov	s15, r3
 8000d60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d64:	4b04      	ldr	r3, [pc, #16]	@ (8000d78 <INA226_Current+0x2c>)
 8000d66:	edd3 7a03 	vldr	s15, [r3, #12]
 8000d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
//	return ((INA226_ShuntVoltage()*INA226_values.Calibration)/2048) * INA226_values.CurrentLSB;
}
 8000d6e:	eeb0 0a67 	vmov.f32	s0, s15
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000090 	.word	0x20000090
 8000d78:	20000094 	.word	0x20000094

08000d7c <INA226_SetCalibration>:

void INA226_SetCalibration (float R_Shunt,float MaxExpCurrent)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	ed87 0a01 	vstr	s0, [r7, #4]
 8000d86:	edc7 0a00 	vstr	s1, [r7]
	float Current_LSB;
	float CAL;
	
	if(MaxExpCurrent > 8)
 8000d8a:	edd7 7a00 	vldr	s15, [r7]
 8000d8e:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8000d92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d9a:	dd01      	ble.n	8000da0 <INA226_SetCalibration+0x24>
	{
		MaxExpCurrent = 8.192f;
 8000d9c:	4b18      	ldr	r3, [pc, #96]	@ (8000e00 <INA226_SetCalibration+0x84>)
 8000d9e:	603b      	str	r3, [r7, #0]
	}
	
	Current_LSB = MaxExpCurrent / 32768.0f;
 8000da0:	ed97 7a00 	vldr	s14, [r7]
 8000da4:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8000e04 <INA226_SetCalibration+0x88>
 8000da8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dac:	edc7 7a03 	vstr	s15, [r7, #12]
	
	CAL = 0.00512f/(Current_LSB*R_Shunt);
 8000db0:	ed97 7a03 	vldr	s14, [r7, #12]
 8000db4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000db8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000dbc:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8000e08 <INA226_SetCalibration+0x8c>
 8000dc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dc4:	edc7 7a02 	vstr	s15, [r7, #8]
	INA226_values.Calibration = CAL;
 8000dc8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000dcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dd0:	ee17 3a90 	vmov	r3, s15
 8000dd4:	b29a      	uxth	r2, r3
 8000dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8000e0c <INA226_SetCalibration+0x90>)
 8000dd8:	811a      	strh	r2, [r3, #8]
	INA226_values.CurrentLSB = Current_LSB;
 8000dda:	4a0c      	ldr	r2, [pc, #48]	@ (8000e0c <INA226_SetCalibration+0x90>)
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	60d3      	str	r3, [r2, #12]
	INA226_I2C_Write(INA226_CALIBRATION_REG, (uint16_t)CAL);
 8000de0:	edd7 7a02 	vldr	s15, [r7, #8]
 8000de4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000de8:	ee17 3a90 	vmov	r3, s15
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	4619      	mov	r1, r3
 8000df0:	2005      	movs	r0, #5
 8000df2:	f000 f80d 	bl	8000e10 <INA226_I2C_Write>
}
 8000df6:	bf00      	nop
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	4103126f 	.word	0x4103126f
 8000e04:	47000000 	.word	0x47000000
 8000e08:	3ba7c5ac 	.word	0x3ba7c5ac
 8000e0c:	20000094 	.word	0x20000094

08000e10 <INA226_I2C_Write>:
}

/*	*/

void INA226_I2C_Write(uint8_t pByte, uint16_t Data)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b088      	sub	sp, #32
 8000e14:	af04      	add	r7, sp, #16
 8000e16:	4603      	mov	r3, r0
 8000e18:	460a      	mov	r2, r1
 8000e1a:	71fb      	strb	r3, [r7, #7]
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	80bb      	strh	r3, [r7, #4]
	uint8_t reg[2];
	
	reg[0] = (Data & 0xFF00) >> 8;
 8000e20:	88bb      	ldrh	r3, [r7, #4]
 8000e22:	0a1b      	lsrs	r3, r3, #8
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	733b      	strb	r3, [r7, #12]
	reg[1] =  Data & 0xFF;
 8000e2a:	88bb      	ldrh	r3, [r7, #4]
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	737b      	strb	r3, [r7, #13]
	
	HAL_I2C_Mem_Write(&hi2c2, INA226_ADDRESS << 1, pByte, 1, reg, 2, 100);
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	b29a      	uxth	r2, r3
 8000e34:	2364      	movs	r3, #100	@ 0x64
 8000e36:	9302      	str	r3, [sp, #8]
 8000e38:	2302      	movs	r3, #2
 8000e3a:	9301      	str	r3, [sp, #4]
 8000e3c:	f107 030c 	add.w	r3, r7, #12
 8000e40:	9300      	str	r3, [sp, #0]
 8000e42:	2301      	movs	r3, #1
 8000e44:	2180      	movs	r1, #128	@ 0x80
 8000e46:	4803      	ldr	r0, [pc, #12]	@ (8000e54 <INA226_I2C_Write+0x44>)
 8000e48:	f001 fc7c 	bl	8002744 <HAL_I2C_Mem_Write>
	
}
 8000e4c:	bf00      	nop
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	200000f8 	.word	0x200000f8

08000e58 <INA226_I2C_Read>:

void INA226_I2C_Read(uint8_t pByte, uint16_t* pData)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b088      	sub	sp, #32
 8000e5c:	af04      	add	r7, sp, #16
 8000e5e:	4603      	mov	r3, r0
 8000e60:	6039      	str	r1, [r7, #0]
 8000e62:	71fb      	strb	r3, [r7, #7]
	uint8_t reg[2];

	HAL_I2C_Mem_Read(&hi2c2, INA226_ADDRESS << 1, pByte, 1, reg, 2, 100);
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	b29a      	uxth	r2, r3
 8000e68:	2364      	movs	r3, #100	@ 0x64
 8000e6a:	9302      	str	r3, [sp, #8]
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	9301      	str	r3, [sp, #4]
 8000e70:	f107 030c 	add.w	r3, r7, #12
 8000e74:	9300      	str	r3, [sp, #0]
 8000e76:	2301      	movs	r3, #1
 8000e78:	2180      	movs	r1, #128	@ 0x80
 8000e7a:	4809      	ldr	r0, [pc, #36]	@ (8000ea0 <INA226_I2C_Read+0x48>)
 8000e7c:	f001 fd76 	bl	800296c <HAL_I2C_Mem_Read>
	*pData = (reg[0] << 8) | reg[1];
 8000e80:	7b3b      	ldrb	r3, [r7, #12]
 8000e82:	b21b      	sxth	r3, r3
 8000e84:	021b      	lsls	r3, r3, #8
 8000e86:	b21a      	sxth	r2, r3
 8000e88:	7b7b      	ldrb	r3, [r7, #13]
 8000e8a:	b21b      	sxth	r3, r3
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	b21b      	sxth	r3, r3
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	801a      	strh	r2, [r3, #0]
	
}
 8000e96:	bf00      	nop
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200000f8 	.word	0x200000f8

08000ea4 <INA226_Test_Simple>:
void Encoder_Update(void);
void IR_Sensor_Check(void);

/* USER CODE BEGIN 0 */

void INA226_Test_Simple(void) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
    sprintf(uart_buffer, "I2C2 adres taraması (0x40-0x4F):\r\n");
 8000eaa:	4937      	ldr	r1, [pc, #220]	@ (8000f88 <INA226_Test_Simple+0xe4>)
 8000eac:	4837      	ldr	r0, [pc, #220]	@ (8000f8c <INA226_Test_Simple+0xe8>)
 8000eae:	f004 fb35 	bl	800551c <siprintf>
    HAL_UART_Transmit(&huart2,(uint8_t*)uart_buffer,strlen(uart_buffer),1000);
 8000eb2:	4836      	ldr	r0, [pc, #216]	@ (8000f8c <INA226_Test_Simple+0xe8>)
 8000eb4:	f7ff f9ac 	bl	8000210 <strlen>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	b29a      	uxth	r2, r3
 8000ebc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ec0:	4932      	ldr	r1, [pc, #200]	@ (8000f8c <INA226_Test_Simple+0xe8>)
 8000ec2:	4833      	ldr	r0, [pc, #204]	@ (8000f90 <INA226_Test_Simple+0xec>)
 8000ec4:	f003 fe72 	bl	8004bac <HAL_UART_Transmit>

    for (uint8_t addr = 0x40; addr <= 0x4F; addr++) {
 8000ec8:	2340      	movs	r3, #64	@ 0x40
 8000eca:	71fb      	strb	r3, [r7, #7]
 8000ecc:	e020      	b.n	8000f10 <INA226_Test_Simple+0x6c>
        if (HAL_I2C_IsDeviceReady(&hi2c2, addr << 1, 3, 1000) == HAL_OK) {
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	b299      	uxth	r1, r3
 8000ed6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eda:	2203      	movs	r2, #3
 8000edc:	482d      	ldr	r0, [pc, #180]	@ (8000f94 <INA226_Test_Simple+0xf0>)
 8000ede:	f001 fe5f 	bl	8002ba0 <HAL_I2C_IsDeviceReady>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d110      	bne.n	8000f0a <INA226_Test_Simple+0x66>
            sprintf(uart_buffer, "  Cihaz bulundu: 0x%02X\r\n", addr);
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	461a      	mov	r2, r3
 8000eec:	492a      	ldr	r1, [pc, #168]	@ (8000f98 <INA226_Test_Simple+0xf4>)
 8000eee:	4827      	ldr	r0, [pc, #156]	@ (8000f8c <INA226_Test_Simple+0xe8>)
 8000ef0:	f004 fb14 	bl	800551c <siprintf>
            HAL_UART_Transmit(&huart2,(uint8_t*)uart_buffer,strlen(uart_buffer),1000);
 8000ef4:	4825      	ldr	r0, [pc, #148]	@ (8000f8c <INA226_Test_Simple+0xe8>)
 8000ef6:	f7ff f98b 	bl	8000210 <strlen>
 8000efa:	4603      	mov	r3, r0
 8000efc:	b29a      	uxth	r2, r3
 8000efe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f02:	4922      	ldr	r1, [pc, #136]	@ (8000f8c <INA226_Test_Simple+0xe8>)
 8000f04:	4822      	ldr	r0, [pc, #136]	@ (8000f90 <INA226_Test_Simple+0xec>)
 8000f06:	f003 fe51 	bl	8004bac <HAL_UART_Transmit>
    for (uint8_t addr = 0x40; addr <= 0x4F; addr++) {
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	71fb      	strb	r3, [r7, #7]
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	2b4f      	cmp	r3, #79	@ 0x4f
 8000f14:	d9db      	bls.n	8000ece <INA226_Test_Simple+0x2a>
        }
    }

    uint16_t device_id = INA226_ID();
 8000f16:	f7ff feb1 	bl	8000c7c <INA226_ID>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	80bb      	strh	r3, [r7, #4]
    sprintf(uart_buffer, "INA226 Device ID: 0x%04X (0x2260 bekleniyor)\r\n", device_id);
 8000f1e:	88bb      	ldrh	r3, [r7, #4]
 8000f20:	461a      	mov	r2, r3
 8000f22:	491e      	ldr	r1, [pc, #120]	@ (8000f9c <INA226_Test_Simple+0xf8>)
 8000f24:	4819      	ldr	r0, [pc, #100]	@ (8000f8c <INA226_Test_Simple+0xe8>)
 8000f26:	f004 faf9 	bl	800551c <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 8000f2a:	4818      	ldr	r0, [pc, #96]	@ (8000f8c <INA226_Test_Simple+0xe8>)
 8000f2c:	f7ff f970 	bl	8000210 <strlen>
 8000f30:	4603      	mov	r3, r0
 8000f32:	b29a      	uxth	r2, r3
 8000f34:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f38:	4914      	ldr	r1, [pc, #80]	@ (8000f8c <INA226_Test_Simple+0xe8>)
 8000f3a:	4815      	ldr	r0, [pc, #84]	@ (8000f90 <INA226_Test_Simple+0xec>)
 8000f3c:	f003 fe36 	bl	8004bac <HAL_UART_Transmit>

    if(device_id == 0x2260) {
 8000f40:	88bb      	ldrh	r3, [r7, #4]
 8000f42:	f242 2260 	movw	r2, #8800	@ 0x2260
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d107      	bne.n	8000f5a <INA226_Test_Simple+0xb6>
        ina226_connection_status = 1;
 8000f4a:	4b15      	ldr	r3, [pc, #84]	@ (8000fa0 <INA226_Test_Simple+0xfc>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	701a      	strb	r2, [r3, #0]
        sprintf(uart_buffer, "INA226 bağlantısı BAŞARILI!\r\n");
 8000f50:	4914      	ldr	r1, [pc, #80]	@ (8000fa4 <INA226_Test_Simple+0x100>)
 8000f52:	480e      	ldr	r0, [pc, #56]	@ (8000f8c <INA226_Test_Simple+0xe8>)
 8000f54:	f004 fae2 	bl	800551c <siprintf>
 8000f58:	e006      	b.n	8000f68 <INA226_Test_Simple+0xc4>
    } else {
        ina226_connection_status = 0;
 8000f5a:	4b11      	ldr	r3, [pc, #68]	@ (8000fa0 <INA226_Test_Simple+0xfc>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	701a      	strb	r2, [r3, #0]
        sprintf(uart_buffer, "INA226 bağlantısı BAŞARISIZ!\r\n");
 8000f60:	4911      	ldr	r1, [pc, #68]	@ (8000fa8 <INA226_Test_Simple+0x104>)
 8000f62:	480a      	ldr	r0, [pc, #40]	@ (8000f8c <INA226_Test_Simple+0xe8>)
 8000f64:	f004 fada 	bl	800551c <siprintf>
    }
    HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 8000f68:	4808      	ldr	r0, [pc, #32]	@ (8000f8c <INA226_Test_Simple+0xe8>)
 8000f6a:	f7ff f951 	bl	8000210 <strlen>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f76:	4905      	ldr	r1, [pc, #20]	@ (8000f8c <INA226_Test_Simple+0xe8>)
 8000f78:	4805      	ldr	r0, [pc, #20]	@ (8000f90 <INA226_Test_Simple+0xec>)
 8000f7a:	f003 fe17 	bl	8004bac <HAL_UART_Transmit>
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	08005e74 	.word	0x08005e74
 8000f8c:	2000027c 	.word	0x2000027c
 8000f90:	20000198 	.word	0x20000198
 8000f94:	200000f8 	.word	0x200000f8
 8000f98:	08005e98 	.word	0x08005e98
 8000f9c:	08005eb4 	.word	0x08005eb4
 8000fa0:	20000238 	.word	0x20000238
 8000fa4:	08005ee4 	.word	0x08005ee4
 8000fa8:	08005f08 	.word	0x08005f08

08000fac <INA226_Test_Raw>:

void INA226_Test_Raw(void){
 8000fac:	b590      	push	{r4, r7, lr}
 8000fae:	b089      	sub	sp, #36	@ 0x24
 8000fb0:	af04      	add	r7, sp, #16
    if (!ina226_connection_status) return;
 8000fb2:	4b2a      	ldr	r3, [pc, #168]	@ (800105c <INA226_Test_Raw+0xb0>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d04b      	beq.n	8001054 <INA226_Test_Raw+0xa8>

    uint8_t data[2];
    if(HAL_I2C_Mem_Read(&hi2c2, 0x40 << 1, 0x02, 1, data, 2, 10) == HAL_OK){
 8000fbc:	230a      	movs	r3, #10
 8000fbe:	9302      	str	r3, [sp, #8]
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	9301      	str	r3, [sp, #4]
 8000fc4:	1d3b      	adds	r3, r7, #4
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	2301      	movs	r3, #1
 8000fca:	2202      	movs	r2, #2
 8000fcc:	2180      	movs	r1, #128	@ 0x80
 8000fce:	4824      	ldr	r0, [pc, #144]	@ (8001060 <INA226_Test_Raw+0xb4>)
 8000fd0:	f001 fccc 	bl	800296c <HAL_I2C_Mem_Read>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d12c      	bne.n	8001034 <INA226_Test_Raw+0x88>
        uint16_t raw = (data[0] << 8) | data[1];
 8000fda:	793b      	ldrb	r3, [r7, #4]
 8000fdc:	b21b      	sxth	r3, r3
 8000fde:	021b      	lsls	r3, r3, #8
 8000fe0:	b21a      	sxth	r2, r3
 8000fe2:	797b      	ldrb	r3, [r7, #5]
 8000fe4:	b21b      	sxth	r3, r3
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	b21b      	sxth	r3, r3
 8000fea:	81fb      	strh	r3, [r7, #14]
        float voltage = raw * 1.25e-3f;
 8000fec:	89fb      	ldrh	r3, [r7, #14]
 8000fee:	ee07 3a90 	vmov	s15, r3
 8000ff2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ff6:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001064 <INA226_Test_Raw+0xb8>
 8000ffa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ffe:	edc7 7a02 	vstr	s15, [r7, #8]
        sprintf(uart_buffer, "Ham veri: 0x%04X, Voltaj: %.3fV\r\n", raw, voltage);
 8001002:	89fc      	ldrh	r4, [r7, #14]
 8001004:	68b8      	ldr	r0, [r7, #8]
 8001006:	f7ff fbe9 	bl	80007dc <__aeabi_f2d>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	e9cd 2300 	strd	r2, r3, [sp]
 8001012:	4622      	mov	r2, r4
 8001014:	4914      	ldr	r1, [pc, #80]	@ (8001068 <INA226_Test_Raw+0xbc>)
 8001016:	4815      	ldr	r0, [pc, #84]	@ (800106c <INA226_Test_Raw+0xc0>)
 8001018:	f004 fa80 	bl	800551c <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 800101c:	4813      	ldr	r0, [pc, #76]	@ (800106c <INA226_Test_Raw+0xc0>)
 800101e:	f7ff f8f7 	bl	8000210 <strlen>
 8001022:	4603      	mov	r3, r0
 8001024:	b29a      	uxth	r2, r3
 8001026:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800102a:	4910      	ldr	r1, [pc, #64]	@ (800106c <INA226_Test_Raw+0xc0>)
 800102c:	4810      	ldr	r0, [pc, #64]	@ (8001070 <INA226_Test_Raw+0xc4>)
 800102e:	f003 fdbd 	bl	8004bac <HAL_UART_Transmit>
 8001032:	e010      	b.n	8001056 <INA226_Test_Raw+0xaa>
    } else {
        sprintf(uart_buffer, "Ham veri okuma hatası!\r\n");
 8001034:	490f      	ldr	r1, [pc, #60]	@ (8001074 <INA226_Test_Raw+0xc8>)
 8001036:	480d      	ldr	r0, [pc, #52]	@ (800106c <INA226_Test_Raw+0xc0>)
 8001038:	f004 fa70 	bl	800551c <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 800103c:	480b      	ldr	r0, [pc, #44]	@ (800106c <INA226_Test_Raw+0xc0>)
 800103e:	f7ff f8e7 	bl	8000210 <strlen>
 8001042:	4603      	mov	r3, r0
 8001044:	b29a      	uxth	r2, r3
 8001046:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800104a:	4908      	ldr	r1, [pc, #32]	@ (800106c <INA226_Test_Raw+0xc0>)
 800104c:	4808      	ldr	r0, [pc, #32]	@ (8001070 <INA226_Test_Raw+0xc4>)
 800104e:	f003 fdad 	bl	8004bac <HAL_UART_Transmit>
 8001052:	e000      	b.n	8001056 <INA226_Test_Raw+0xaa>
    if (!ina226_connection_status) return;
 8001054:	bf00      	nop
    }
}
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	bd90      	pop	{r4, r7, pc}
 800105c:	20000238 	.word	0x20000238
 8001060:	200000f8 	.word	0x200000f8
 8001064:	3aa3d70a 	.word	0x3aa3d70a
 8001068:	08005f2c 	.word	0x08005f2c
 800106c:	2000027c 	.word	0x2000027c
 8001070:	20000198 	.word	0x20000198
 8001074:	08005f50 	.word	0x08005f50

08001078 <INA226_ReadAllValues_Fixed>:

void INA226_ReadAllValues_Fixed(void){
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
    if (!ina226_connection_status) return;
 800107c:	4b29      	ldr	r3, [pc, #164]	@ (8001124 <INA226_ReadAllValues_Fixed+0xac>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2b00      	cmp	r3, #0
 8001084:	d04b      	beq.n	800111e <INA226_ReadAllValues_Fixed+0xa6>

    ina226_bus_voltage = INA226_BusVoltage();
 8001086:	f7ff fe2d 	bl	8000ce4 <INA226_BusVoltage>
 800108a:	eef0 7a40 	vmov.f32	s15, s0
 800108e:	4b26      	ldr	r3, [pc, #152]	@ (8001128 <INA226_ReadAllValues_Fixed+0xb0>)
 8001090:	edc3 7a00 	vstr	s15, [r3]
    ina226_shunt_voltage = INA226_ShuntVoltage() * 1000.0f;
 8001094:	f7ff fe04 	bl	8000ca0 <INA226_ShuntVoltage>
 8001098:	eef0 7a40 	vmov.f32	s15, s0
 800109c:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 800112c <INA226_ReadAllValues_Fixed+0xb4>
 80010a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010a4:	4b22      	ldr	r3, [pc, #136]	@ (8001130 <INA226_ReadAllValues_Fixed+0xb8>)
 80010a6:	edc3 7a00 	vstr	s15, [r3]
    ina226_current = INA226_Current();
 80010aa:	f7ff fe4f 	bl	8000d4c <INA226_Current>
 80010ae:	eef0 7a40 	vmov.f32	s15, s0
 80010b2:	4b20      	ldr	r3, [pc, #128]	@ (8001134 <INA226_ReadAllValues_Fixed+0xbc>)
 80010b4:	edc3 7a00 	vstr	s15, [r3]
    ina226_current_ma = ina226_current * 1000.0f;
 80010b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001134 <INA226_ReadAllValues_Fixed+0xbc>)
 80010ba:	edd3 7a00 	vldr	s15, [r3]
 80010be:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800112c <INA226_ReadAllValues_Fixed+0xb4>
 80010c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001138 <INA226_ReadAllValues_Fixed+0xc0>)
 80010c8:	edc3 7a00 	vstr	s15, [r3]
    ina226_power = INA226_Power();
 80010cc:	f7ff fe22 	bl	8000d14 <INA226_Power>
 80010d0:	eef0 7a40 	vmov.f32	s15, s0
 80010d4:	4b19      	ldr	r3, [pc, #100]	@ (800113c <INA226_ReadAllValues_Fixed+0xc4>)
 80010d6:	edc3 7a00 	vstr	s15, [r3]
    ina226_power_mw = ina226_power * 1000.0f;
 80010da:	4b18      	ldr	r3, [pc, #96]	@ (800113c <INA226_ReadAllValues_Fixed+0xc4>)
 80010dc:	edd3 7a00 	vldr	s15, [r3]
 80010e0:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800112c <INA226_ReadAllValues_Fixed+0xb4>
 80010e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010e8:	4b15      	ldr	r3, [pc, #84]	@ (8001140 <INA226_ReadAllValues_Fixed+0xc8>)
 80010ea:	edc3 7a00 	vstr	s15, [r3]

    if(ina226_bus_voltage < 0.0f || ina226_bus_voltage > 36.0f){
 80010ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001128 <INA226_ReadAllValues_Fixed+0xb0>)
 80010f0:	edd3 7a00 	vldr	s15, [r3]
 80010f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010fc:	d409      	bmi.n	8001112 <INA226_ReadAllValues_Fixed+0x9a>
 80010fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001128 <INA226_ReadAllValues_Fixed+0xb0>)
 8001100:	edd3 7a00 	vldr	s15, [r3]
 8001104:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001144 <INA226_ReadAllValues_Fixed+0xcc>
 8001108:	eef4 7ac7 	vcmpe.f32	s15, s14
 800110c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001110:	dd06      	ble.n	8001120 <INA226_ReadAllValues_Fixed+0xa8>
        ina226_error_count++;
 8001112:	4b0d      	ldr	r3, [pc, #52]	@ (8001148 <INA226_ReadAllValues_Fixed+0xd0>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	3301      	adds	r3, #1
 8001118:	4a0b      	ldr	r2, [pc, #44]	@ (8001148 <INA226_ReadAllValues_Fixed+0xd0>)
 800111a:	6013      	str	r3, [r2, #0]
 800111c:	e000      	b.n	8001120 <INA226_ReadAllValues_Fixed+0xa8>
    if (!ina226_connection_status) return;
 800111e:	bf00      	nop
    }
}
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000238 	.word	0x20000238
 8001128:	20000220 	.word	0x20000220
 800112c:	447a0000 	.word	0x447a0000
 8001130:	20000224 	.word	0x20000224
 8001134:	20000228 	.word	0x20000228
 8001138:	20000230 	.word	0x20000230
 800113c:	2000022c 	.word	0x2000022c
 8001140:	20000234 	.word	0x20000234
 8001144:	42100000 	.word	0x42100000
 8001148:	2000023c 	.word	0x2000023c

0800114c <MLX90614_ReadTempReg>:

uint8_t MLX90614_ReadTempReg(uint8_t reg, float* temperature) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af04      	add	r7, sp, #16
 8001152:	4603      	mov	r3, r0
 8001154:	6039      	str	r1, [r7, #0]
 8001156:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[3];
    if(HAL_I2C_Mem_Read(&hi2c1, MLX90614_ADDR, reg, 1, buf, 3, 10) != HAL_OK) {
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	b29a      	uxth	r2, r3
 800115c:	230a      	movs	r3, #10
 800115e:	9302      	str	r3, [sp, #8]
 8001160:	2303      	movs	r3, #3
 8001162:	9301      	str	r3, [sp, #4]
 8001164:	f107 0308 	add.w	r3, r7, #8
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	2301      	movs	r3, #1
 800116c:	21b4      	movs	r1, #180	@ 0xb4
 800116e:	4813      	ldr	r0, [pc, #76]	@ (80011bc <MLX90614_ReadTempReg+0x70>)
 8001170:	f001 fbfc 	bl	800296c <HAL_I2C_Mem_Read>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MLX90614_ReadTempReg+0x32>
        return 0;
 800117a:	2300      	movs	r3, #0
 800117c:	e019      	b.n	80011b2 <MLX90614_ReadTempReg+0x66>
    }
    uint16_t temp_raw = buf[0] | (buf[1] << 8);
 800117e:	7a3b      	ldrb	r3, [r7, #8]
 8001180:	b21a      	sxth	r2, r3
 8001182:	7a7b      	ldrb	r3, [r7, #9]
 8001184:	b21b      	sxth	r3, r3
 8001186:	021b      	lsls	r3, r3, #8
 8001188:	b21b      	sxth	r3, r3
 800118a:	4313      	orrs	r3, r2
 800118c:	b21b      	sxth	r3, r3
 800118e:	81fb      	strh	r3, [r7, #14]
    *temperature = (float)temp_raw * 0.02f - 273.15f;
 8001190:	89fb      	ldrh	r3, [r7, #14]
 8001192:	ee07 3a90 	vmov	s15, r3
 8001196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800119a:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80011c0 <MLX90614_ReadTempReg+0x74>
 800119e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011a2:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80011c4 <MLX90614_ReadTempReg+0x78>
 80011a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	edc3 7a00 	vstr	s15, [r3]
    return 1;
 80011b0:	2301      	movs	r3, #1
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200000a4 	.word	0x200000a4
 80011c0:	3ca3d70a 	.word	0x3ca3d70a
 80011c4:	43889333 	.word	0x43889333

080011c8 <MLX90614_ReadTemps>:

void MLX90614_ReadTemps(void) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
    if(!MLX90614_ReadTempReg(MLX90614_REG_TA, &ambient_temp_C)) {
 80011cc:	4912      	ldr	r1, [pc, #72]	@ (8001218 <MLX90614_ReadTemps+0x50>)
 80011ce:	2006      	movs	r0, #6
 80011d0:	f7ff ffbc 	bl	800114c <MLX90614_ReadTempReg>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d108      	bne.n	80011ec <MLX90614_ReadTemps+0x24>
        ambient_error_count++;
 80011da:	4b10      	ldr	r3, [pc, #64]	@ (800121c <MLX90614_ReadTemps+0x54>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	3301      	adds	r3, #1
 80011e0:	4a0e      	ldr	r2, [pc, #56]	@ (800121c <MLX90614_ReadTemps+0x54>)
 80011e2:	6013      	str	r3, [r2, #0]
        mlx_connection_status = 0;
 80011e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001220 <MLX90614_ReadTemps+0x58>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	701a      	strb	r2, [r3, #0]
        object_error_count++;
        mlx_connection_status = 0;
    } else {
        mlx_connection_status = 1;
    }
}
 80011ea:	e012      	b.n	8001212 <MLX90614_ReadTemps+0x4a>
    } else if(!MLX90614_ReadTempReg(MLX90614_REG_TOBJ1, &object_temp_C)) {
 80011ec:	490d      	ldr	r1, [pc, #52]	@ (8001224 <MLX90614_ReadTemps+0x5c>)
 80011ee:	2007      	movs	r0, #7
 80011f0:	f7ff ffac 	bl	800114c <MLX90614_ReadTempReg>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d108      	bne.n	800120c <MLX90614_ReadTemps+0x44>
        object_error_count++;
 80011fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001228 <MLX90614_ReadTemps+0x60>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	3301      	adds	r3, #1
 8001200:	4a09      	ldr	r2, [pc, #36]	@ (8001228 <MLX90614_ReadTemps+0x60>)
 8001202:	6013      	str	r3, [r2, #0]
        mlx_connection_status = 0;
 8001204:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <MLX90614_ReadTemps+0x58>)
 8001206:	2200      	movs	r2, #0
 8001208:	701a      	strb	r2, [r3, #0]
}
 800120a:	e002      	b.n	8001212 <MLX90614_ReadTemps+0x4a>
        mlx_connection_status = 1;
 800120c:	4b04      	ldr	r3, [pc, #16]	@ (8001220 <MLX90614_ReadTemps+0x58>)
 800120e:	2201      	movs	r2, #1
 8001210:	701a      	strb	r2, [r3, #0]
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000240 	.word	0x20000240
 800121c:	2000024c 	.word	0x2000024c
 8001220:	20000248 	.word	0x20000248
 8001224:	20000244 	.word	0x20000244
 8001228:	20000250 	.word	0x20000250

0800122c <BNO055_ReadReg>:

uint8_t BNO055_ReadReg(uint8_t reg, uint8_t* value) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af04      	add	r7, sp, #16
 8001232:	4603      	mov	r3, r0
 8001234:	6039      	str	r1, [r7, #0]
 8001236:	71fb      	strb	r3, [r7, #7]
    return HAL_I2C_Mem_Read(&hi2c2, BNO055_ADDRESS, reg, 1, value, 1, 10);
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	b29a      	uxth	r2, r3
 800123c:	230a      	movs	r3, #10
 800123e:	9302      	str	r3, [sp, #8]
 8001240:	2301      	movs	r3, #1
 8001242:	9301      	str	r3, [sp, #4]
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	2301      	movs	r3, #1
 800124a:	2150      	movs	r1, #80	@ 0x50
 800124c:	4803      	ldr	r0, [pc, #12]	@ (800125c <BNO055_ReadReg+0x30>)
 800124e:	f001 fb8d 	bl	800296c <HAL_I2C_Mem_Read>
 8001252:	4603      	mov	r3, r0
}
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	200000f8 	.word	0x200000f8

08001260 <BNO055_WriteReg>:

uint8_t BNO055_WriteReg(uint8_t reg, uint8_t value) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af04      	add	r7, sp, #16
 8001266:	4603      	mov	r3, r0
 8001268:	460a      	mov	r2, r1
 800126a:	71fb      	strb	r3, [r7, #7]
 800126c:	4613      	mov	r3, r2
 800126e:	71bb      	strb	r3, [r7, #6]
    return HAL_I2C_Mem_Write(&hi2c2, BNO055_ADDRESS, reg, 1, &value, 1, 10);
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	b29a      	uxth	r2, r3
 8001274:	230a      	movs	r3, #10
 8001276:	9302      	str	r3, [sp, #8]
 8001278:	2301      	movs	r3, #1
 800127a:	9301      	str	r3, [sp, #4]
 800127c:	1dbb      	adds	r3, r7, #6
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	2301      	movs	r3, #1
 8001282:	2150      	movs	r1, #80	@ 0x50
 8001284:	4803      	ldr	r0, [pc, #12]	@ (8001294 <BNO055_WriteReg+0x34>)
 8001286:	f001 fa5d 	bl	8002744 <HAL_I2C_Mem_Write>
 800128a:	4603      	mov	r3, r0
}
 800128c:	4618      	mov	r0, r3
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	200000f8 	.word	0x200000f8

08001298 <BNO055_ReadRegs>:

uint8_t BNO055_ReadRegs(uint8_t reg, uint8_t* buf, uint8_t len) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af04      	add	r7, sp, #16
 800129e:	4603      	mov	r3, r0
 80012a0:	6039      	str	r1, [r7, #0]
 80012a2:	71fb      	strb	r3, [r7, #7]
 80012a4:	4613      	mov	r3, r2
 80012a6:	71bb      	strb	r3, [r7, #6]
    return HAL_I2C_Mem_Read(&hi2c2, BNO055_ADDRESS, reg, 1, buf, len, 10);
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	79bb      	ldrb	r3, [r7, #6]
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	210a      	movs	r1, #10
 80012b2:	9102      	str	r1, [sp, #8]
 80012b4:	9301      	str	r3, [sp, #4]
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	2301      	movs	r3, #1
 80012bc:	2150      	movs	r1, #80	@ 0x50
 80012be:	4804      	ldr	r0, [pc, #16]	@ (80012d0 <BNO055_ReadRegs+0x38>)
 80012c0:	f001 fb54 	bl	800296c <HAL_I2C_Mem_Read>
 80012c4:	4603      	mov	r3, r0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	200000f8 	.word	0x200000f8

080012d4 <BNO055_Init>:

uint8_t BNO055_Init(void) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
    uint8_t id = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	71fb      	strb	r3, [r7, #7]
    if(BNO055_ReadReg(BNO055_CHIP_ID_ADDR, &id) != HAL_OK) return 0;
 80012de:	1dfb      	adds	r3, r7, #7
 80012e0:	4619      	mov	r1, r3
 80012e2:	2000      	movs	r0, #0
 80012e4:	f7ff ffa2 	bl	800122c <BNO055_ReadReg>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <BNO055_Init+0x1e>
 80012ee:	2300      	movs	r3, #0
 80012f0:	e032      	b.n	8001358 <BNO055_Init+0x84>
    if(id != 0xA0) return 0;
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	2ba0      	cmp	r3, #160	@ 0xa0
 80012f6:	d001      	beq.n	80012fc <BNO055_Init+0x28>
 80012f8:	2300      	movs	r3, #0
 80012fa:	e02d      	b.n	8001358 <BNO055_Init+0x84>
    if(BNO055_WriteReg(BNO055_PWR_MODE_ADDR, BNO055_POWER_MODE_NORMAL) != HAL_OK) return 0;
 80012fc:	2100      	movs	r1, #0
 80012fe:	203e      	movs	r0, #62	@ 0x3e
 8001300:	f7ff ffae 	bl	8001260 <BNO055_WriteReg>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <BNO055_Init+0x3a>
 800130a:	2300      	movs	r3, #0
 800130c:	e024      	b.n	8001358 <BNO055_Init+0x84>
    HAL_Delay(5);
 800130e:	2005      	movs	r0, #5
 8001310:	f000 fe7a 	bl	8002008 <HAL_Delay>
    if(BNO055_WriteReg(BNO055_OPR_MODE_ADDR, BNO055_OPERATION_MODE_CONFIG) != HAL_OK) return 0;
 8001314:	2100      	movs	r1, #0
 8001316:	203d      	movs	r0, #61	@ 0x3d
 8001318:	f7ff ffa2 	bl	8001260 <BNO055_WriteReg>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <BNO055_Init+0x52>
 8001322:	2300      	movs	r3, #0
 8001324:	e018      	b.n	8001358 <BNO055_Init+0x84>
    HAL_Delay(10);
 8001326:	200a      	movs	r0, #10
 8001328:	f000 fe6e 	bl	8002008 <HAL_Delay>
    if(BNO055_WriteReg(BNO055_PAGE_ID_ADDR, 0) != HAL_OK) return 0;
 800132c:	2100      	movs	r1, #0
 800132e:	2007      	movs	r0, #7
 8001330:	f7ff ff96 	bl	8001260 <BNO055_WriteReg>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <BNO055_Init+0x6a>
 800133a:	2300      	movs	r3, #0
 800133c:	e00c      	b.n	8001358 <BNO055_Init+0x84>
    if(BNO055_WriteReg(BNO055_OPR_MODE_ADDR, BNO055_OPERATION_MODE_ACCONLY) != HAL_OK) return 0;
 800133e:	2101      	movs	r1, #1
 8001340:	203d      	movs	r0, #61	@ 0x3d
 8001342:	f7ff ff8d 	bl	8001260 <BNO055_WriteReg>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <BNO055_Init+0x7c>
 800134c:	2300      	movs	r3, #0
 800134e:	e003      	b.n	8001358 <BNO055_Init+0x84>
    HAL_Delay(10);
 8001350:	200a      	movs	r0, #10
 8001352:	f000 fe59 	bl	8002008 <HAL_Delay>
    return 1;
 8001356:	2301      	movs	r3, #1
}
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <BNO055_ReadAccel>:

void BNO055_ReadAccel(void) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
    uint8_t buf[6];
    if(BNO055_ReadRegs(BNO055_ACCEL_DATA_X_LSB_ADDR, buf, 6) == HAL_OK) {
 8001366:	463b      	mov	r3, r7
 8001368:	2206      	movs	r2, #6
 800136a:	4619      	mov	r1, r3
 800136c:	2008      	movs	r0, #8
 800136e:	f7ff ff93 	bl	8001298 <BNO055_ReadRegs>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d11d      	bne.n	80013b4 <BNO055_ReadAccel+0x54>
        accel_data.x = (int16_t)(buf[1] << 8 | buf[0]);
 8001378:	787b      	ldrb	r3, [r7, #1]
 800137a:	b21b      	sxth	r3, r3
 800137c:	021b      	lsls	r3, r3, #8
 800137e:	b21a      	sxth	r2, r3
 8001380:	783b      	ldrb	r3, [r7, #0]
 8001382:	b21b      	sxth	r3, r3
 8001384:	4313      	orrs	r3, r2
 8001386:	b21a      	sxth	r2, r3
 8001388:	4b0c      	ldr	r3, [pc, #48]	@ (80013bc <BNO055_ReadAccel+0x5c>)
 800138a:	801a      	strh	r2, [r3, #0]
        accel_data.y = (int16_t)(buf[3] << 8 | buf[2]);
 800138c:	78fb      	ldrb	r3, [r7, #3]
 800138e:	b21b      	sxth	r3, r3
 8001390:	021b      	lsls	r3, r3, #8
 8001392:	b21a      	sxth	r2, r3
 8001394:	78bb      	ldrb	r3, [r7, #2]
 8001396:	b21b      	sxth	r3, r3
 8001398:	4313      	orrs	r3, r2
 800139a:	b21a      	sxth	r2, r3
 800139c:	4b07      	ldr	r3, [pc, #28]	@ (80013bc <BNO055_ReadAccel+0x5c>)
 800139e:	805a      	strh	r2, [r3, #2]
        accel_data.z = (int16_t)(buf[5] << 8 | buf[4]);
 80013a0:	797b      	ldrb	r3, [r7, #5]
 80013a2:	b21b      	sxth	r3, r3
 80013a4:	021b      	lsls	r3, r3, #8
 80013a6:	b21a      	sxth	r2, r3
 80013a8:	793b      	ldrb	r3, [r7, #4]
 80013aa:	b21b      	sxth	r3, r3
 80013ac:	4313      	orrs	r3, r2
 80013ae:	b21a      	sxth	r2, r3
 80013b0:	4b02      	ldr	r3, [pc, #8]	@ (80013bc <BNO055_ReadAccel+0x5c>)
 80013b2:	809a      	strh	r2, [r3, #4]
    }
}
 80013b4:	bf00      	nop
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20000254 	.word	0x20000254

080013c0 <Encoder_Update>:

void Encoder_Update(void) {
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
    uint32_t count = __HAL_TIM_GET_COUNTER(&htim2);
 80013c6:	4b25      	ldr	r3, [pc, #148]	@ (800145c <Encoder_Update+0x9c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013cc:	607b      	str	r3, [r7, #4]
    int32_t diff = (int32_t)(count - encoder_raw_count);
 80013ce:	4b24      	ldr	r3, [pc, #144]	@ (8001460 <Encoder_Update+0xa0>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	603b      	str	r3, [r7, #0]
    encoder_raw_count = count;
 80013d8:	4a21      	ldr	r2, [pc, #132]	@ (8001460 <Encoder_Update+0xa0>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6013      	str	r3, [r2, #0]
    encoder_relative_count += diff;
 80013de:	4b21      	ldr	r3, [pc, #132]	@ (8001464 <Encoder_Update+0xa4>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	4413      	add	r3, r2
 80013e6:	4a1f      	ldr	r2, [pc, #124]	@ (8001464 <Encoder_Update+0xa4>)
 80013e8:	6013      	str	r3, [r2, #0]
    encoder_distance_mm = encoder_relative_count * MM_PER_PULSE;
 80013ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001464 <Encoder_Update+0xa4>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	ee07 3a90 	vmov	s15, r3
 80013f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013f6:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001468 <Encoder_Update+0xa8>
 80013fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013fe:	4b1b      	ldr	r3, [pc, #108]	@ (800146c <Encoder_Update+0xac>)
 8001400:	edc3 7a00 	vstr	s15, [r3]
    encoder_distance_cm = encoder_distance_mm / 10.0f;
 8001404:	4b19      	ldr	r3, [pc, #100]	@ (800146c <Encoder_Update+0xac>)
 8001406:	ed93 7a00 	vldr	s14, [r3]
 800140a:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800140e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001412:	4b17      	ldr	r3, [pc, #92]	@ (8001470 <Encoder_Update+0xb0>)
 8001414:	edc3 7a00 	vstr	s15, [r3]
    encoder_rotations = (float)encoder_relative_count / ENCODER_PPR;
 8001418:	4b12      	ldr	r3, [pc, #72]	@ (8001464 <Encoder_Update+0xa4>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	ee07 3a90 	vmov	s15, r3
 8001420:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001424:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001474 <Encoder_Update+0xb4>
 8001428:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800142c:	4b12      	ldr	r3, [pc, #72]	@ (8001478 <Encoder_Update+0xb8>)
 800142e:	edc3 7a00 	vstr	s15, [r3]
    encoder_direction = (diff > 0) ? 1 : (diff < 0) ? -1 : 0;
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	dc07      	bgt.n	8001448 <Encoder_Update+0x88>
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	2b00      	cmp	r3, #0
 800143c:	da02      	bge.n	8001444 <Encoder_Update+0x84>
 800143e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001442:	e002      	b.n	800144a <Encoder_Update+0x8a>
 8001444:	2300      	movs	r3, #0
 8001446:	e000      	b.n	800144a <Encoder_Update+0x8a>
 8001448:	2301      	movs	r3, #1
 800144a:	4a0c      	ldr	r2, [pc, #48]	@ (800147c <Encoder_Update+0xbc>)
 800144c:	6013      	str	r3, [r2, #0]
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	2000014c 	.word	0x2000014c
 8001460:	2000025c 	.word	0x2000025c
 8001464:	20000260 	.word	0x20000260
 8001468:	3bab92a6 	.word	0x3bab92a6
 800146c:	20000264 	.word	0x20000264
 8001470:	20000268 	.word	0x20000268
 8001474:	45610000 	.word	0x45610000
 8001478:	2000026c 	.word	0x2000026c
 800147c:	20000270 	.word	0x20000270

08001480 <IR_Sensor_Check>:

void IR_Sensor_Check(void) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
    uint8_t state = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_5);
 8001486:	2120      	movs	r1, #32
 8001488:	480e      	ldr	r0, [pc, #56]	@ (80014c4 <IR_Sensor_Check+0x44>)
 800148a:	f001 f873 	bl	8002574 <HAL_GPIO_ReadPin>
 800148e:	4603      	mov	r3, r0
 8001490:	71fb      	strb	r3, [r7, #7]
    ir_sensor_state = state;
 8001492:	4a0d      	ldr	r2, [pc, #52]	@ (80014c8 <IR_Sensor_Check+0x48>)
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	7013      	strb	r3, [r2, #0]
    if(last_ir_sensor_state != state) {
 8001498:	4b0c      	ldr	r3, [pc, #48]	@ (80014cc <IR_Sensor_Check+0x4c>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	b2db      	uxtb	r3, r3
 800149e:	79fa      	ldrb	r2, [r7, #7]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d007      	beq.n	80014b4 <IR_Sensor_Check+0x34>
        if(state == 0) { // Aktif düşük sensör varsayımı
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d104      	bne.n	80014b4 <IR_Sensor_Check+0x34>
            ir_object_count++;
 80014aa:	4b09      	ldr	r3, [pc, #36]	@ (80014d0 <IR_Sensor_Check+0x50>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	3301      	adds	r3, #1
 80014b0:	4a07      	ldr	r2, [pc, #28]	@ (80014d0 <IR_Sensor_Check+0x50>)
 80014b2:	6013      	str	r3, [r2, #0]
        }
    }
    last_ir_sensor_state = state;
 80014b4:	4a05      	ldr	r2, [pc, #20]	@ (80014cc <IR_Sensor_Check+0x4c>)
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	7013      	strb	r3, [r2, #0]
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40021400 	.word	0x40021400
 80014c8:	20000274 	.word	0x20000274
 80014cc:	20000000 	.word	0x20000000
 80014d0:	20000278 	.word	0x20000278

080014d4 <main>:

int main(void)
{
 80014d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014d8:	b0a7      	sub	sp, #156	@ 0x9c
 80014da:	af18      	add	r7, sp, #96	@ 0x60
    HAL_Init();
 80014dc:	f000 fd37 	bl	8001f4e <HAL_Init>
    SystemClock_Config();
 80014e0:	f000 f92c 	bl	800173c <SystemClock_Config>

    MX_GPIO_Init();
 80014e4:	f000 f996 	bl	8001814 <MX_GPIO_Init>
    MX_I2C1_Init();
 80014e8:	f000 fa12 	bl	8001910 <MX_I2C1_Init>
    MX_I2C2_Init();
 80014ec:	f000 fa4c 	bl	8001988 <MX_I2C2_Init>
    MX_TIM2_Init();
 80014f0:	f000 fa86 	bl	8001a00 <MX_TIM2_Init>
    MX_USART2_UART_Init();
 80014f4:	f000 fad8 	bl	8001aa8 <MX_USART2_UART_Init>

    sprintf(uart_buffer, "=== Çoklu Sensör Sistemi Başlatılıyor ===\r\n");
 80014f8:	497b      	ldr	r1, [pc, #492]	@ (80016e8 <main+0x214>)
 80014fa:	487c      	ldr	r0, [pc, #496]	@ (80016ec <main+0x218>)
 80014fc:	f004 f80e 	bl	800551c <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 8001500:	487a      	ldr	r0, [pc, #488]	@ (80016ec <main+0x218>)
 8001502:	f7fe fe85 	bl	8000210 <strlen>
 8001506:	4603      	mov	r3, r0
 8001508:	b29a      	uxth	r2, r3
 800150a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800150e:	4977      	ldr	r1, [pc, #476]	@ (80016ec <main+0x218>)
 8001510:	4877      	ldr	r0, [pc, #476]	@ (80016f0 <main+0x21c>)
 8001512:	f003 fb4b 	bl	8004bac <HAL_UART_Transmit>

    INA226_INIT();
 8001516:	f7ff fb9f 	bl	8000c58 <INA226_INIT>
    HAL_Delay(10);
 800151a:	200a      	movs	r0, #10
 800151c:	f000 fd74 	bl	8002008 <HAL_Delay>
    INA226_Test_Simple();
 8001520:	f7ff fcc0 	bl	8000ea4 <INA226_Test_Simple>

    if(!BNO055_Init()){
 8001524:	f7ff fed6 	bl	80012d4 <BNO055_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10f      	bne.n	800154e <main+0x7a>
        sprintf(uart_buffer, "BNO055 başlatılamadı!\r\n");
 800152e:	4971      	ldr	r1, [pc, #452]	@ (80016f4 <main+0x220>)
 8001530:	486e      	ldr	r0, [pc, #440]	@ (80016ec <main+0x218>)
 8001532:	f003 fff3 	bl	800551c <siprintf>
        HAL_UART_Transmit(&huart2,(uint8_t*)uart_buffer,strlen(uart_buffer),1000);
 8001536:	486d      	ldr	r0, [pc, #436]	@ (80016ec <main+0x218>)
 8001538:	f7fe fe6a 	bl	8000210 <strlen>
 800153c:	4603      	mov	r3, r0
 800153e:	b29a      	uxth	r2, r3
 8001540:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001544:	4969      	ldr	r1, [pc, #420]	@ (80016ec <main+0x218>)
 8001546:	486a      	ldr	r0, [pc, #424]	@ (80016f0 <main+0x21c>)
 8001548:	f003 fb30 	bl	8004bac <HAL_UART_Transmit>
 800154c:	e00e      	b.n	800156c <main+0x98>
    } else {
        sprintf(uart_buffer, "BNO055 başlatıldı.\r\n");
 800154e:	496a      	ldr	r1, [pc, #424]	@ (80016f8 <main+0x224>)
 8001550:	4866      	ldr	r0, [pc, #408]	@ (80016ec <main+0x218>)
 8001552:	f003 ffe3 	bl	800551c <siprintf>
        HAL_UART_Transmit(&huart2,(uint8_t*)uart_buffer,strlen(uart_buffer),1000);
 8001556:	4865      	ldr	r0, [pc, #404]	@ (80016ec <main+0x218>)
 8001558:	f7fe fe5a 	bl	8000210 <strlen>
 800155c:	4603      	mov	r3, r0
 800155e:	b29a      	uxth	r2, r3
 8001560:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001564:	4961      	ldr	r1, [pc, #388]	@ (80016ec <main+0x218>)
 8001566:	4862      	ldr	r0, [pc, #392]	@ (80016f0 <main+0x21c>)
 8001568:	f003 fb20 	bl	8004bac <HAL_UART_Transmit>
    }

    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800156c:	213c      	movs	r1, #60	@ 0x3c
 800156e:	4863      	ldr	r0, [pc, #396]	@ (80016fc <main+0x228>)
 8001570:	f003 f8e6 	bl	8004740 <HAL_TIM_Encoder_Start>
    HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8001574:	2201      	movs	r2, #1
 8001576:	2101      	movs	r1, #1
 8001578:	4861      	ldr	r0, [pc, #388]	@ (8001700 <main+0x22c>)
 800157a:	f001 f813 	bl	80025a4 <HAL_GPIO_WritePin>

    while(1){
        INA226_Test_Raw();
 800157e:	f7ff fd15 	bl	8000fac <INA226_Test_Raw>
        INA226_ReadAllValues_Fixed();
 8001582:	f7ff fd79 	bl	8001078 <INA226_ReadAllValues_Fixed>
        MLX90614_ReadTemps();
 8001586:	f7ff fe1f 	bl	80011c8 <MLX90614_ReadTemps>
        BNO055_ReadAccel();
 800158a:	f7ff fee9 	bl	8001360 <BNO055_ReadAccel>
        Encoder_Update();
 800158e:	f7ff ff17 	bl	80013c0 <Encoder_Update>
        IR_Sensor_Check();
 8001592:	f7ff ff75 	bl	8001480 <IR_Sensor_Check>

        sprintf(uart_buffer,
 8001596:	4b5b      	ldr	r3, [pc, #364]	@ (8001704 <main+0x230>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff f91e 	bl	80007dc <__aeabi_f2d>
 80015a0:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
 80015a4:	4b58      	ldr	r3, [pc, #352]	@ (8001708 <main+0x234>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff f917 	bl	80007dc <__aeabi_f2d>
 80015ae:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 80015b2:	4b56      	ldr	r3, [pc, #344]	@ (800170c <main+0x238>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff f910 	bl	80007dc <__aeabi_f2d>
 80015bc:	e9c7 0108 	strd	r0, r1, [r7, #32]
 80015c0:	4b53      	ldr	r3, [pc, #332]	@ (8001710 <main+0x23c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff f909 	bl	80007dc <__aeabi_f2d>
 80015ca:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80015ce:	4b51      	ldr	r3, [pc, #324]	@ (8001714 <main+0x240>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff f902 	bl	80007dc <__aeabi_f2d>
 80015d8:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80015dc:	4b4e      	ldr	r3, [pc, #312]	@ (8001718 <main+0x244>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff f8fb 	bl	80007dc <__aeabi_f2d>
 80015e6:	4605      	mov	r5, r0
 80015e8:	460e      	mov	r6, r1
            "BNO055 Accel: X=%d Y=%d Z=%d\r\n"
            "Encoder: %.2fmm (%.2fcm) Rot: %.2f Dir: %ld\r\n"
            "IR Sensor: State=%d ObjectCount=%lu\r\n\n",
            ina226_bus_voltage, ina226_shunt_voltage, ina226_current_ma, ina226_power_mw,
            ambient_temp_C, object_temp_C,
            accel_data.x, accel_data.y, accel_data.z,
 80015ea:	4b4c      	ldr	r3, [pc, #304]	@ (800171c <main+0x248>)
 80015ec:	881b      	ldrh	r3, [r3, #0]
 80015ee:	b21b      	sxth	r3, r3
        sprintf(uart_buffer,
 80015f0:	60fb      	str	r3, [r7, #12]
            accel_data.x, accel_data.y, accel_data.z,
 80015f2:	4b4a      	ldr	r3, [pc, #296]	@ (800171c <main+0x248>)
 80015f4:	885b      	ldrh	r3, [r3, #2]
 80015f6:	b21b      	sxth	r3, r3
        sprintf(uart_buffer,
 80015f8:	60bb      	str	r3, [r7, #8]
            accel_data.x, accel_data.y, accel_data.z,
 80015fa:	4b48      	ldr	r3, [pc, #288]	@ (800171c <main+0x248>)
 80015fc:	889b      	ldrh	r3, [r3, #4]
 80015fe:	b21b      	sxth	r3, r3
        sprintf(uart_buffer,
 8001600:	607b      	str	r3, [r7, #4]
 8001602:	4b47      	ldr	r3, [pc, #284]	@ (8001720 <main+0x24c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff f8e8 	bl	80007dc <__aeabi_f2d>
 800160c:	4682      	mov	sl, r0
 800160e:	468b      	mov	fp, r1
 8001610:	4b44      	ldr	r3, [pc, #272]	@ (8001724 <main+0x250>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff f8e1 	bl	80007dc <__aeabi_f2d>
 800161a:	4680      	mov	r8, r0
 800161c:	4689      	mov	r9, r1
 800161e:	4b42      	ldr	r3, [pc, #264]	@ (8001728 <main+0x254>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff f8da 	bl	80007dc <__aeabi_f2d>
 8001628:	4b40      	ldr	r3, [pc, #256]	@ (800172c <main+0x258>)
 800162a:	681c      	ldr	r4, [r3, #0]
 800162c:	4b40      	ldr	r3, [pc, #256]	@ (8001730 <main+0x25c>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	b2db      	uxtb	r3, r3
 8001632:	461a      	mov	r2, r3
 8001634:	4b3f      	ldr	r3, [pc, #252]	@ (8001734 <main+0x260>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	9316      	str	r3, [sp, #88]	@ 0x58
 800163a:	9215      	str	r2, [sp, #84]	@ 0x54
 800163c:	9414      	str	r4, [sp, #80]	@ 0x50
 800163e:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8001642:	e9cd 8910 	strd	r8, r9, [sp, #64]	@ 0x40
 8001646:	e9cd ab0e 	strd	sl, fp, [sp, #56]	@ 0x38
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	910c      	str	r1, [sp, #48]	@ 0x30
 800164e:	68b9      	ldr	r1, [r7, #8]
 8001650:	910b      	str	r1, [sp, #44]	@ 0x2c
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	930a      	str	r3, [sp, #40]	@ 0x28
 8001656:	e9cd 5608 	strd	r5, r6, [sp, #32]
 800165a:	ed97 7b04 	vldr	d7, [r7, #16]
 800165e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001662:	ed97 7b06 	vldr	d7, [r7, #24]
 8001666:	ed8d 7b04 	vstr	d7, [sp, #16]
 800166a:	ed97 7b08 	vldr	d7, [r7, #32]
 800166e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001672:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8001676:	ed8d 7b00 	vstr	d7, [sp]
 800167a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800167e:	492e      	ldr	r1, [pc, #184]	@ (8001738 <main+0x264>)
 8001680:	481a      	ldr	r0, [pc, #104]	@ (80016ec <main+0x218>)
 8001682:	f003 ff4b 	bl	800551c <siprintf>
            encoder_distance_mm, encoder_distance_cm, encoder_rotations, encoder_direction,
            ir_sensor_state, ir_object_count
        );

        HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 8001686:	4819      	ldr	r0, [pc, #100]	@ (80016ec <main+0x218>)
 8001688:	f7fe fdc2 	bl	8000210 <strlen>
 800168c:	4603      	mov	r3, r0
 800168e:	b29a      	uxth	r2, r3
 8001690:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001694:	4915      	ldr	r1, [pc, #84]	@ (80016ec <main+0x218>)
 8001696:	4816      	ldr	r0, [pc, #88]	@ (80016f0 <main+0x21c>)
 8001698:	f003 fa88 	bl	8004bac <HAL_UART_Transmit>

        if (ina226_bus_voltage > 3.0f) {
 800169c:	4b19      	ldr	r3, [pc, #100]	@ (8001704 <main+0x230>)
 800169e:	edd3 7a00 	vldr	s15, [r3]
 80016a2:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80016a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ae:	dd0b      	ble.n	80016c8 <main+0x1f4>
            HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80016b0:	2201      	movs	r2, #1
 80016b2:	2180      	movs	r1, #128	@ 0x80
 80016b4:	4812      	ldr	r0, [pc, #72]	@ (8001700 <main+0x22c>)
 80016b6:	f000 ff75 	bl	80025a4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80016ba:	2200      	movs	r2, #0
 80016bc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80016c0:	480f      	ldr	r0, [pc, #60]	@ (8001700 <main+0x22c>)
 80016c2:	f000 ff6f 	bl	80025a4 <HAL_GPIO_WritePin>
 80016c6:	e00a      	b.n	80016de <main+0x20a>
        } else {
            HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016c8:	2200      	movs	r2, #0
 80016ca:	2180      	movs	r1, #128	@ 0x80
 80016cc:	480c      	ldr	r0, [pc, #48]	@ (8001700 <main+0x22c>)
 80016ce:	f000 ff69 	bl	80025a4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80016d2:	2201      	movs	r2, #1
 80016d4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80016d8:	4809      	ldr	r0, [pc, #36]	@ (8001700 <main+0x22c>)
 80016da:	f000 ff63 	bl	80025a4 <HAL_GPIO_WritePin>
        }

        HAL_Delay(10);
 80016de:	200a      	movs	r0, #10
 80016e0:	f000 fc92 	bl	8002008 <HAL_Delay>
        INA226_Test_Raw();
 80016e4:	e74b      	b.n	800157e <main+0xaa>
 80016e6:	bf00      	nop
 80016e8:	08005f6c 	.word	0x08005f6c
 80016ec:	2000027c 	.word	0x2000027c
 80016f0:	20000198 	.word	0x20000198
 80016f4:	08005fa0 	.word	0x08005fa0
 80016f8:	08005fbc 	.word	0x08005fbc
 80016fc:	2000014c 	.word	0x2000014c
 8001700:	40020400 	.word	0x40020400
 8001704:	20000220 	.word	0x20000220
 8001708:	20000224 	.word	0x20000224
 800170c:	20000230 	.word	0x20000230
 8001710:	20000234 	.word	0x20000234
 8001714:	20000240 	.word	0x20000240
 8001718:	20000244 	.word	0x20000244
 800171c:	20000254 	.word	0x20000254
 8001720:	20000264 	.word	0x20000264
 8001724:	20000268 	.word	0x20000268
 8001728:	2000026c 	.word	0x2000026c
 800172c:	20000270 	.word	0x20000270
 8001730:	20000274 	.word	0x20000274
 8001734:	20000278 	.word	0x20000278
 8001738:	08005fd4 	.word	0x08005fd4

0800173c <SystemClock_Config>:
    }
}

/* System Clock Configuration */
void SystemClock_Config(void) {
 800173c:	b580      	push	{r7, lr}
 800173e:	b094      	sub	sp, #80	@ 0x50
 8001740:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001742:	f107 0320 	add.w	r3, r7, #32
 8001746:	2230      	movs	r2, #48	@ 0x30
 8001748:	2100      	movs	r1, #0
 800174a:	4618      	mov	r0, r3
 800174c:	f003 ff08 	bl	8005560 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001750:	f107 030c 	add.w	r3, r7, #12
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]

    __HAL_RCC_PWR_CLK_ENABLE();
 8001760:	4b2a      	ldr	r3, [pc, #168]	@ (800180c <SystemClock_Config+0xd0>)
 8001762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001764:	4a29      	ldr	r2, [pc, #164]	@ (800180c <SystemClock_Config+0xd0>)
 8001766:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800176a:	6413      	str	r3, [r2, #64]	@ 0x40
 800176c:	4b27      	ldr	r3, [pc, #156]	@ (800180c <SystemClock_Config+0xd0>)
 800176e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001770:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001778:	4b25      	ldr	r3, [pc, #148]	@ (8001810 <SystemClock_Config+0xd4>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a24      	ldr	r2, [pc, #144]	@ (8001810 <SystemClock_Config+0xd4>)
 800177e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001782:	6013      	str	r3, [r2, #0]
 8001784:	4b22      	ldr	r3, [pc, #136]	@ (8001810 <SystemClock_Config+0xd4>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800178c:	607b      	str	r3, [r7, #4]
 800178e:	687b      	ldr	r3, [r7, #4]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001790:	2301      	movs	r3, #1
 8001792:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001794:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001798:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800179a:	2302      	movs	r3, #2
 800179c:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800179e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80017a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 4;
 80017a4:	2304      	movs	r3, #4
 80017a6:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 200;
 80017a8:	23c8      	movs	r3, #200	@ 0xc8
 80017aa:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017ac:	2302      	movs	r3, #2
 80017ae:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 80017b0:	2304      	movs	r3, #4
 80017b2:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) { Error_Handler(); }
 80017b4:	f107 0320 	add.w	r3, r7, #32
 80017b8:	4618      	mov	r0, r3
 80017ba:	f001 fea1 	bl	8003500 <HAL_RCC_OscConfig>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <SystemClock_Config+0x8c>
 80017c4:	f000 f99a 	bl	8001afc <Error_Handler>
    if(HAL_PWREx_EnableOverDrive() != HAL_OK) { Error_Handler(); }
 80017c8:	f001 fe4a 	bl	8003460 <HAL_PWREx_EnableOverDrive>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <SystemClock_Config+0x9a>
 80017d2:	f000 f993 	bl	8001afc <Error_Handler>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 80017d6:	230f      	movs	r3, #15
 80017d8:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017da:	2302      	movs	r3, #2
 80017dc:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017e2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80017e6:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017ec:	61fb      	str	r3, [r7, #28]

    if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK){ Error_Handler(); }
 80017ee:	f107 030c 	add.w	r3, r7, #12
 80017f2:	2106      	movs	r1, #6
 80017f4:	4618      	mov	r0, r3
 80017f6:	f002 f927 	bl	8003a48 <HAL_RCC_ClockConfig>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <SystemClock_Config+0xc8>
 8001800:	f000 f97c 	bl	8001afc <Error_Handler>
}
 8001804:	bf00      	nop
 8001806:	3750      	adds	r7, #80	@ 0x50
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40023800 	.word	0x40023800
 8001810:	40007000 	.word	0x40007000

08001814 <MX_GPIO_Init>:

/* Initialization functions */
static void MX_GPIO_Init(void) {
 8001814:	b580      	push	{r7, lr}
 8001816:	b08c      	sub	sp, #48	@ 0x30
 8001818:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181a:	f107 031c 	add.w	r3, r7, #28
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	605a      	str	r2, [r3, #4]
 8001824:	609a      	str	r2, [r3, #8]
 8001826:	60da      	str	r2, [r3, #12]
 8001828:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800182a:	4b36      	ldr	r3, [pc, #216]	@ (8001904 <MX_GPIO_Init+0xf0>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	4a35      	ldr	r2, [pc, #212]	@ (8001904 <MX_GPIO_Init+0xf0>)
 8001830:	f043 0304 	orr.w	r3, r3, #4
 8001834:	6313      	str	r3, [r2, #48]	@ 0x30
 8001836:	4b33      	ldr	r3, [pc, #204]	@ (8001904 <MX_GPIO_Init+0xf0>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183a:	f003 0304 	and.w	r3, r3, #4
 800183e:	61bb      	str	r3, [r7, #24]
 8001840:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001842:	4b30      	ldr	r3, [pc, #192]	@ (8001904 <MX_GPIO_Init+0xf0>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001846:	4a2f      	ldr	r2, [pc, #188]	@ (8001904 <MX_GPIO_Init+0xf0>)
 8001848:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800184c:	6313      	str	r3, [r2, #48]	@ 0x30
 800184e:	4b2d      	ldr	r3, [pc, #180]	@ (8001904 <MX_GPIO_Init+0xf0>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185a:	4b2a      	ldr	r3, [pc, #168]	@ (8001904 <MX_GPIO_Init+0xf0>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185e:	4a29      	ldr	r2, [pc, #164]	@ (8001904 <MX_GPIO_Init+0xf0>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	6313      	str	r3, [r2, #48]	@ 0x30
 8001866:	4b27      	ldr	r3, [pc, #156]	@ (8001904 <MX_GPIO_Init+0xf0>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001872:	4b24      	ldr	r3, [pc, #144]	@ (8001904 <MX_GPIO_Init+0xf0>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001876:	4a23      	ldr	r2, [pc, #140]	@ (8001904 <MX_GPIO_Init+0xf0>)
 8001878:	f043 0302 	orr.w	r3, r3, #2
 800187c:	6313      	str	r3, [r2, #48]	@ 0x30
 800187e:	4b21      	ldr	r3, [pc, #132]	@ (8001904 <MX_GPIO_Init+0xf0>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800188a:	4b1e      	ldr	r3, [pc, #120]	@ (8001904 <MX_GPIO_Init+0xf0>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188e:	4a1d      	ldr	r2, [pc, #116]	@ (8001904 <MX_GPIO_Init+0xf0>)
 8001890:	f043 0308 	orr.w	r3, r3, #8
 8001894:	6313      	str	r3, [r2, #48]	@ 0x30
 8001896:	4b1b      	ldr	r3, [pc, #108]	@ (8001904 <MX_GPIO_Init+0xf0>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189a:	f003 0308 	and.w	r3, r3, #8
 800189e:	60bb      	str	r3, [r7, #8]
 80018a0:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80018a2:	4b18      	ldr	r3, [pc, #96]	@ (8001904 <MX_GPIO_Init+0xf0>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a6:	4a17      	ldr	r2, [pc, #92]	@ (8001904 <MX_GPIO_Init+0xf0>)
 80018a8:	f043 0320 	orr.w	r3, r3, #32
 80018ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ae:	4b15      	ldr	r3, [pc, #84]	@ (8001904 <MX_GPIO_Init+0xf0>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b2:	f003 0320 	and.w	r3, r3, #32
 80018b6:	607b      	str	r3, [r7, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]

    HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin|LD3_Pin, GPIO_PIN_RESET);
 80018ba:	2200      	movs	r2, #0
 80018bc:	f244 0181 	movw	r1, #16513	@ 0x4081
 80018c0:	4811      	ldr	r0, [pc, #68]	@ (8001908 <MX_GPIO_Init+0xf4>)
 80018c2:	f000 fe6f 	bl	80025a4 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin|LD3_Pin;
 80018c6:	f244 0381 	movw	r3, #16513	@ 0x4081
 80018ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018cc:	2301      	movs	r3, #1
 80018ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d4:	2300      	movs	r3, #0
 80018d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d8:	f107 031c 	add.w	r3, r7, #28
 80018dc:	4619      	mov	r1, r3
 80018de:	480a      	ldr	r0, [pc, #40]	@ (8001908 <MX_GPIO_Init+0xf4>)
 80018e0:	f000 fc9c 	bl	800221c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80018e4:	2320      	movs	r3, #32
 80018e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e8:	2300      	movs	r3, #0
 80018ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018f0:	f107 031c 	add.w	r3, r7, #28
 80018f4:	4619      	mov	r1, r3
 80018f6:	4805      	ldr	r0, [pc, #20]	@ (800190c <MX_GPIO_Init+0xf8>)
 80018f8:	f000 fc90 	bl	800221c <HAL_GPIO_Init>
}
 80018fc:	bf00      	nop
 80018fe:	3730      	adds	r7, #48	@ 0x30
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40023800 	.word	0x40023800
 8001908:	40020400 	.word	0x40020400
 800190c:	40021400 	.word	0x40021400

08001910 <MX_I2C1_Init>:

static void MX_I2C1_Init(void) {
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
    hi2c1.Instance = I2C1;
 8001914:	4b19      	ldr	r3, [pc, #100]	@ (800197c <MX_I2C1_Init+0x6c>)
 8001916:	4a1a      	ldr	r2, [pc, #104]	@ (8001980 <MX_I2C1_Init+0x70>)
 8001918:	601a      	str	r2, [r3, #0]
    hi2c1.Init.Timing = 0x00A0A3F7;
 800191a:	4b18      	ldr	r3, [pc, #96]	@ (800197c <MX_I2C1_Init+0x6c>)
 800191c:	4a19      	ldr	r2, [pc, #100]	@ (8001984 <MX_I2C1_Init+0x74>)
 800191e:	605a      	str	r2, [r3, #4]
    hi2c1.Init.OwnAddress1 = 0;
 8001920:	4b16      	ldr	r3, [pc, #88]	@ (800197c <MX_I2C1_Init+0x6c>)
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001926:	4b15      	ldr	r3, [pc, #84]	@ (800197c <MX_I2C1_Init+0x6c>)
 8001928:	2201      	movs	r2, #1
 800192a:	60da      	str	r2, [r3, #12]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800192c:	4b13      	ldr	r3, [pc, #76]	@ (800197c <MX_I2C1_Init+0x6c>)
 800192e:	2200      	movs	r2, #0
 8001930:	611a      	str	r2, [r3, #16]
    hi2c1.Init.OwnAddress2 = 0;
 8001932:	4b12      	ldr	r3, [pc, #72]	@ (800197c <MX_I2C1_Init+0x6c>)
 8001934:	2200      	movs	r2, #0
 8001936:	615a      	str	r2, [r3, #20]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001938:	4b10      	ldr	r3, [pc, #64]	@ (800197c <MX_I2C1_Init+0x6c>)
 800193a:	2200      	movs	r2, #0
 800193c:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800193e:	4b0f      	ldr	r3, [pc, #60]	@ (800197c <MX_I2C1_Init+0x6c>)
 8001940:	2200      	movs	r2, #0
 8001942:	621a      	str	r2, [r3, #32]
    if(HAL_I2C_Init(&hi2c1) != HAL_OK) { Error_Handler(); }
 8001944:	480d      	ldr	r0, [pc, #52]	@ (800197c <MX_I2C1_Init+0x6c>)
 8001946:	f000 fe61 	bl	800260c <HAL_I2C_Init>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_I2C1_Init+0x44>
 8001950:	f000 f8d4 	bl	8001afc <Error_Handler>
    if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) { Error_Handler(); }
 8001954:	2100      	movs	r1, #0
 8001956:	4809      	ldr	r0, [pc, #36]	@ (800197c <MX_I2C1_Init+0x6c>)
 8001958:	f001 fcea 	bl	8003330 <HAL_I2CEx_ConfigAnalogFilter>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_I2C1_Init+0x56>
 8001962:	f000 f8cb 	bl	8001afc <Error_Handler>
    if(HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) { Error_Handler(); }
 8001966:	2100      	movs	r1, #0
 8001968:	4804      	ldr	r0, [pc, #16]	@ (800197c <MX_I2C1_Init+0x6c>)
 800196a:	f001 fd2c 	bl	80033c6 <HAL_I2CEx_ConfigDigitalFilter>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_I2C1_Init+0x68>
 8001974:	f000 f8c2 	bl	8001afc <Error_Handler>
}
 8001978:	bf00      	nop
 800197a:	bd80      	pop	{r7, pc}
 800197c:	200000a4 	.word	0x200000a4
 8001980:	40005400 	.word	0x40005400
 8001984:	00a0a3f7 	.word	0x00a0a3f7

08001988 <MX_I2C2_Init>:

static void MX_I2C2_Init(void){
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
    hi2c2.Instance = I2C2;
 800198c:	4b19      	ldr	r3, [pc, #100]	@ (80019f4 <MX_I2C2_Init+0x6c>)
 800198e:	4a1a      	ldr	r2, [pc, #104]	@ (80019f8 <MX_I2C2_Init+0x70>)
 8001990:	601a      	str	r2, [r3, #0]
    hi2c2.Init.Timing = 0x00A0A3F7;
 8001992:	4b18      	ldr	r3, [pc, #96]	@ (80019f4 <MX_I2C2_Init+0x6c>)
 8001994:	4a19      	ldr	r2, [pc, #100]	@ (80019fc <MX_I2C2_Init+0x74>)
 8001996:	605a      	str	r2, [r3, #4]
    hi2c2.Init.OwnAddress1 = 0;
 8001998:	4b16      	ldr	r3, [pc, #88]	@ (80019f4 <MX_I2C2_Init+0x6c>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
    hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800199e:	4b15      	ldr	r3, [pc, #84]	@ (80019f4 <MX_I2C2_Init+0x6c>)
 80019a0:	2201      	movs	r2, #1
 80019a2:	60da      	str	r2, [r3, #12]
    hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019a4:	4b13      	ldr	r3, [pc, #76]	@ (80019f4 <MX_I2C2_Init+0x6c>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	611a      	str	r2, [r3, #16]
    hi2c2.Init.OwnAddress2 = 0;
 80019aa:	4b12      	ldr	r3, [pc, #72]	@ (80019f4 <MX_I2C2_Init+0x6c>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	615a      	str	r2, [r3, #20]
    hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019b0:	4b10      	ldr	r3, [pc, #64]	@ (80019f4 <MX_I2C2_Init+0x6c>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	61da      	str	r2, [r3, #28]
    hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019b6:	4b0f      	ldr	r3, [pc, #60]	@ (80019f4 <MX_I2C2_Init+0x6c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	621a      	str	r2, [r3, #32]
    if(HAL_I2C_Init(&hi2c2) != HAL_OK) { Error_Handler(); }
 80019bc:	480d      	ldr	r0, [pc, #52]	@ (80019f4 <MX_I2C2_Init+0x6c>)
 80019be:	f000 fe25 	bl	800260c <HAL_I2C_Init>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_I2C2_Init+0x44>
 80019c8:	f000 f898 	bl	8001afc <Error_Handler>
    if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK) { Error_Handler(); }
 80019cc:	2100      	movs	r1, #0
 80019ce:	4809      	ldr	r0, [pc, #36]	@ (80019f4 <MX_I2C2_Init+0x6c>)
 80019d0:	f001 fcae 	bl	8003330 <HAL_I2CEx_ConfigAnalogFilter>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_I2C2_Init+0x56>
 80019da:	f000 f88f 	bl	8001afc <Error_Handler>
    if(HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) { Error_Handler(); }
 80019de:	2100      	movs	r1, #0
 80019e0:	4804      	ldr	r0, [pc, #16]	@ (80019f4 <MX_I2C2_Init+0x6c>)
 80019e2:	f001 fcf0 	bl	80033c6 <HAL_I2CEx_ConfigDigitalFilter>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_I2C2_Init+0x68>
 80019ec:	f000 f886 	bl	8001afc <Error_Handler>
}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	200000f8 	.word	0x200000f8
 80019f8:	40005800 	.word	0x40005800
 80019fc:	00a0a3f7 	.word	0x00a0a3f7

08001a00 <MX_TIM2_Init>:

static void MX_TIM2_Init(void) {
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08c      	sub	sp, #48	@ 0x30
 8001a04:	af00      	add	r7, sp, #0
    TIM_Encoder_InitTypeDef sConfig = {0};
 8001a06:	f107 030c 	add.w	r3, r7, #12
 8001a0a:	2224      	movs	r2, #36	@ 0x24
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f003 fda6 	bl	8005560 <memset>
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a14:	463b      	mov	r3, r7
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	609a      	str	r2, [r3, #8]

    htim2.Instance = TIM2;
 8001a1e:	4b21      	ldr	r3, [pc, #132]	@ (8001aa4 <MX_TIM2_Init+0xa4>)
 8001a20:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a24:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 0;
 8001a26:	4b1f      	ldr	r3, [pc, #124]	@ (8001aa4 <MX_TIM2_Init+0xa4>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa4 <MX_TIM2_Init+0xa4>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 4294967295;
 8001a32:	4b1c      	ldr	r3, [pc, #112]	@ (8001aa4 <MX_TIM2_Init+0xa4>)
 8001a34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a38:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001aa4 <MX_TIM2_Init+0xa4>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a40:	4b18      	ldr	r3, [pc, #96]	@ (8001aa4 <MX_TIM2_Init+0xa4>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	619a      	str	r2, [r3, #24]

    sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a46:	2303      	movs	r3, #3
 8001a48:	60fb      	str	r3, [r7, #12]
    sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	613b      	str	r3, [r7, #16]
    sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	617b      	str	r3, [r7, #20]
    sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a52:	2300      	movs	r3, #0
 8001a54:	61bb      	str	r3, [r7, #24]
    sConfig.IC1Filter = 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61fb      	str	r3, [r7, #28]
    sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	623b      	str	r3, [r7, #32]
    sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	627b      	str	r3, [r7, #36]	@ 0x24
    sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a62:	2300      	movs	r3, #0
 8001a64:	62bb      	str	r3, [r7, #40]	@ 0x28
    sConfig.IC2Filter = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if(HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) { Error_Handler(); }
 8001a6a:	f107 030c 	add.w	r3, r7, #12
 8001a6e:	4619      	mov	r1, r3
 8001a70:	480c      	ldr	r0, [pc, #48]	@ (8001aa4 <MX_TIM2_Init+0xa4>)
 8001a72:	f002 fdbf 	bl	80045f4 <HAL_TIM_Encoder_Init>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_TIM2_Init+0x80>
 8001a7c:	f000 f83e 	bl	8001afc <Error_Handler>

    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a80:	2300      	movs	r3, #0
 8001a82:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a84:	2300      	movs	r3, #0
 8001a86:	60bb      	str	r3, [r7, #8]

    if(HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) { Error_Handler(); }
 8001a88:	463b      	mov	r3, r7
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4805      	ldr	r0, [pc, #20]	@ (8001aa4 <MX_TIM2_Init+0xa4>)
 8001a8e:	f002 ffb1 	bl	80049f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_TIM2_Init+0x9c>
 8001a98:	f000 f830 	bl	8001afc <Error_Handler>
}
 8001a9c:	bf00      	nop
 8001a9e:	3730      	adds	r7, #48	@ 0x30
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	2000014c 	.word	0x2000014c

08001aa8 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void) {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 8001aac:	4b11      	ldr	r3, [pc, #68]	@ (8001af4 <MX_USART2_UART_Init+0x4c>)
 8001aae:	4a12      	ldr	r2, [pc, #72]	@ (8001af8 <MX_USART2_UART_Init+0x50>)
 8001ab0:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8001ab2:	4b10      	ldr	r3, [pc, #64]	@ (8001af4 <MX_USART2_UART_Init+0x4c>)
 8001ab4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ab8:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001aba:	4b0e      	ldr	r3, [pc, #56]	@ (8001af4 <MX_USART2_UART_Init+0x4c>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8001af4 <MX_USART2_UART_Init+0x4c>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8001ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8001af4 <MX_USART2_UART_Init+0x4c>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8001acc:	4b09      	ldr	r3, [pc, #36]	@ (8001af4 <MX_USART2_UART_Init+0x4c>)
 8001ace:	220c      	movs	r2, #12
 8001ad0:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ad2:	4b08      	ldr	r3, [pc, #32]	@ (8001af4 <MX_USART2_UART_Init+0x4c>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ad8:	4b06      	ldr	r3, [pc, #24]	@ (8001af4 <MX_USART2_UART_Init+0x4c>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	61da      	str	r2, [r3, #28]

    if(HAL_UART_Init(&huart2) != HAL_OK) { Error_Handler(); }
 8001ade:	4805      	ldr	r0, [pc, #20]	@ (8001af4 <MX_USART2_UART_Init+0x4c>)
 8001ae0:	f003 f816 	bl	8004b10 <HAL_UART_Init>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_USART2_UART_Init+0x46>
 8001aea:	f000 f807 	bl	8001afc <Error_Handler>
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000198 	.word	0x20000198
 8001af8:	40004400 	.word	0x40004400

08001afc <Error_Handler>:

/* Error Handler */
void Error_Handler(void) {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b00:	b672      	cpsid	i
}
 8001b02:	bf00      	nop
    __disable_irq();
    while (1) {
        HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8001b04:	2101      	movs	r1, #1
 8001b06:	480b      	ldr	r0, [pc, #44]	@ (8001b34 <Error_Handler+0x38>)
 8001b08:	f000 fd65 	bl	80025d6 <HAL_GPIO_TogglePin>
        HAL_Delay(100);
 8001b0c:	2064      	movs	r0, #100	@ 0x64
 8001b0e:	f000 fa7b 	bl	8002008 <HAL_Delay>
        HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 8001b12:	2180      	movs	r1, #128	@ 0x80
 8001b14:	4807      	ldr	r0, [pc, #28]	@ (8001b34 <Error_Handler+0x38>)
 8001b16:	f000 fd5e 	bl	80025d6 <HAL_GPIO_TogglePin>
        HAL_Delay(100);
 8001b1a:	2064      	movs	r0, #100	@ 0x64
 8001b1c:	f000 fa74 	bl	8002008 <HAL_Delay>
        HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8001b20:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b24:	4803      	ldr	r0, [pc, #12]	@ (8001b34 <Error_Handler+0x38>)
 8001b26:	f000 fd56 	bl	80025d6 <HAL_GPIO_TogglePin>
        HAL_Delay(100);
 8001b2a:	2064      	movs	r0, #100	@ 0x64
 8001b2c:	f000 fa6c 	bl	8002008 <HAL_Delay>
        HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8001b30:	bf00      	nop
 8001b32:	e7e7      	b.n	8001b04 <Error_Handler+0x8>
 8001b34:	40020400 	.word	0x40020400

08001b38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b7c <HAL_MspInit+0x44>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b42:	4a0e      	ldr	r2, [pc, #56]	@ (8001b7c <HAL_MspInit+0x44>)
 8001b44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b7c <HAL_MspInit+0x44>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b52:	607b      	str	r3, [r7, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b56:	4b09      	ldr	r3, [pc, #36]	@ (8001b7c <HAL_MspInit+0x44>)
 8001b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b5a:	4a08      	ldr	r2, [pc, #32]	@ (8001b7c <HAL_MspInit+0x44>)
 8001b5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b60:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b62:	4b06      	ldr	r3, [pc, #24]	@ (8001b7c <HAL_MspInit+0x44>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b6a:	603b      	str	r3, [r7, #0]
 8001b6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	40023800 	.word	0x40023800

08001b80 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b0ac      	sub	sp, #176	@ 0xb0
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b88:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b98:	f107 0318 	add.w	r3, r7, #24
 8001b9c:	2284      	movs	r2, #132	@ 0x84
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f003 fcdd 	bl	8005560 <memset>
  if(hi2c->Instance==I2C1)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a43      	ldr	r2, [pc, #268]	@ (8001cb8 <HAL_I2C_MspInit+0x138>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d13d      	bne.n	8001c2c <HAL_I2C_MspInit+0xac>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001bb0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001bb4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bba:	f107 0318 	add.w	r3, r7, #24
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f002 f928 	bl	8003e14 <HAL_RCCEx_PeriphCLKConfig>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001bca:	f7ff ff97 	bl	8001afc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bce:	4b3b      	ldr	r3, [pc, #236]	@ (8001cbc <HAL_I2C_MspInit+0x13c>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd2:	4a3a      	ldr	r2, [pc, #232]	@ (8001cbc <HAL_I2C_MspInit+0x13c>)
 8001bd4:	f043 0302 	orr.w	r3, r3, #2
 8001bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bda:	4b38      	ldr	r3, [pc, #224]	@ (8001cbc <HAL_I2C_MspInit+0x13c>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001be6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001bea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bee:	2312      	movs	r3, #18
 8001bf0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c00:	2304      	movs	r3, #4
 8001c02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c06:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	482c      	ldr	r0, [pc, #176]	@ (8001cc0 <HAL_I2C_MspInit+0x140>)
 8001c0e:	f000 fb05 	bl	800221c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c12:	4b2a      	ldr	r3, [pc, #168]	@ (8001cbc <HAL_I2C_MspInit+0x13c>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c16:	4a29      	ldr	r2, [pc, #164]	@ (8001cbc <HAL_I2C_MspInit+0x13c>)
 8001c18:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c1e:	4b27      	ldr	r3, [pc, #156]	@ (8001cbc <HAL_I2C_MspInit+0x13c>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001c2a:	e041      	b.n	8001cb0 <HAL_I2C_MspInit+0x130>
  else if(hi2c->Instance==I2C2)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a24      	ldr	r2, [pc, #144]	@ (8001cc4 <HAL_I2C_MspInit+0x144>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d13c      	bne.n	8001cb0 <HAL_I2C_MspInit+0x130>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001c36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c3a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c42:	f107 0318 	add.w	r3, r7, #24
 8001c46:	4618      	mov	r0, r3
 8001c48:	f002 f8e4 	bl	8003e14 <HAL_RCCEx_PeriphCLKConfig>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8001c52:	f7ff ff53 	bl	8001afc <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c56:	4b19      	ldr	r3, [pc, #100]	@ (8001cbc <HAL_I2C_MspInit+0x13c>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5a:	4a18      	ldr	r2, [pc, #96]	@ (8001cbc <HAL_I2C_MspInit+0x13c>)
 8001c5c:	f043 0320 	orr.w	r3, r3, #32
 8001c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c62:	4b16      	ldr	r3, [pc, #88]	@ (8001cbc <HAL_I2C_MspInit+0x13c>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c66:	f003 0320 	and.w	r3, r3, #32
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c74:	2312      	movs	r3, #18
 8001c76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c80:	2303      	movs	r3, #3
 8001c82:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c86:	2304      	movs	r3, #4
 8001c88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c8c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c90:	4619      	mov	r1, r3
 8001c92:	480d      	ldr	r0, [pc, #52]	@ (8001cc8 <HAL_I2C_MspInit+0x148>)
 8001c94:	f000 fac2 	bl	800221c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c98:	4b08      	ldr	r3, [pc, #32]	@ (8001cbc <HAL_I2C_MspInit+0x13c>)
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9c:	4a07      	ldr	r2, [pc, #28]	@ (8001cbc <HAL_I2C_MspInit+0x13c>)
 8001c9e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ca2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ca4:	4b05      	ldr	r3, [pc, #20]	@ (8001cbc <HAL_I2C_MspInit+0x13c>)
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cac:	60bb      	str	r3, [r7, #8]
 8001cae:	68bb      	ldr	r3, [r7, #8]
}
 8001cb0:	bf00      	nop
 8001cb2:	37b0      	adds	r7, #176	@ 0xb0
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40005400 	.word	0x40005400
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	40020400 	.word	0x40020400
 8001cc4:	40005800 	.word	0x40005800
 8001cc8:	40021400 	.word	0x40021400

08001ccc <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08a      	sub	sp, #40	@ 0x28
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
 8001ce2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cec:	d127      	bne.n	8001d3e <HAL_TIM_Encoder_MspInit+0x72>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cee:	4b16      	ldr	r3, [pc, #88]	@ (8001d48 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf2:	4a15      	ldr	r2, [pc, #84]	@ (8001d48 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cfa:	4b13      	ldr	r3, [pc, #76]	@ (8001d48 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d06:	4b10      	ldr	r3, [pc, #64]	@ (8001d48 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0a:	4a0f      	ldr	r2, [pc, #60]	@ (8001d48 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d12:	4b0d      	ldr	r3, [pc, #52]	@ (8001d48 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	2302      	movs	r3, #2
 8001d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d32:	f107 0314 	add.w	r3, r7, #20
 8001d36:	4619      	mov	r1, r3
 8001d38:	4804      	ldr	r0, [pc, #16]	@ (8001d4c <HAL_TIM_Encoder_MspInit+0x80>)
 8001d3a:	f000 fa6f 	bl	800221c <HAL_GPIO_Init>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001d3e:	bf00      	nop
 8001d40:	3728      	adds	r7, #40	@ 0x28
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40020000 	.word	0x40020000

08001d50 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b0aa      	sub	sp, #168	@ 0xa8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d68:	f107 0310 	add.w	r3, r7, #16
 8001d6c:	2284      	movs	r2, #132	@ 0x84
 8001d6e:	2100      	movs	r1, #0
 8001d70:	4618      	mov	r0, r3
 8001d72:	f003 fbf5 	bl	8005560 <memset>
  if(huart->Instance==USART2)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a21      	ldr	r2, [pc, #132]	@ (8001e00 <HAL_UART_MspInit+0xb0>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d13a      	bne.n	8001df6 <HAL_UART_MspInit+0xa6>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d80:	2380      	movs	r3, #128	@ 0x80
 8001d82:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d84:	2300      	movs	r3, #0
 8001d86:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d88:	f107 0310 	add.w	r3, r7, #16
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f002 f841 	bl	8003e14 <HAL_RCCEx_PeriphCLKConfig>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d98:	f7ff feb0 	bl	8001afc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d9c:	4b19      	ldr	r3, [pc, #100]	@ (8001e04 <HAL_UART_MspInit+0xb4>)
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da0:	4a18      	ldr	r2, [pc, #96]	@ (8001e04 <HAL_UART_MspInit+0xb4>)
 8001da2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001da6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001da8:	4b16      	ldr	r3, [pc, #88]	@ (8001e04 <HAL_UART_MspInit+0xb4>)
 8001daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db4:	4b13      	ldr	r3, [pc, #76]	@ (8001e04 <HAL_UART_MspInit+0xb4>)
 8001db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db8:	4a12      	ldr	r2, [pc, #72]	@ (8001e04 <HAL_UART_MspInit+0xb4>)
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dc0:	4b10      	ldr	r3, [pc, #64]	@ (8001e04 <HAL_UART_MspInit+0xb4>)
 8001dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001dcc:	230c      	movs	r3, #12
 8001dce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dde:	2303      	movs	r3, #3
 8001de0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001de4:	2307      	movs	r3, #7
 8001de6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dea:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001dee:	4619      	mov	r1, r3
 8001df0:	4805      	ldr	r0, [pc, #20]	@ (8001e08 <HAL_UART_MspInit+0xb8>)
 8001df2:	f000 fa13 	bl	800221c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001df6:	bf00      	nop
 8001df8:	37a8      	adds	r7, #168	@ 0xa8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40004400 	.word	0x40004400
 8001e04:	40023800 	.word	0x40023800
 8001e08:	40020000 	.word	0x40020000

08001e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e10:	bf00      	nop
 8001e12:	e7fd      	b.n	8001e10 <NMI_Handler+0x4>

08001e14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e18:	bf00      	nop
 8001e1a:	e7fd      	b.n	8001e18 <HardFault_Handler+0x4>

08001e1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e20:	bf00      	nop
 8001e22:	e7fd      	b.n	8001e20 <MemManage_Handler+0x4>

08001e24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e28:	bf00      	nop
 8001e2a:	e7fd      	b.n	8001e28 <BusFault_Handler+0x4>

08001e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e30:	bf00      	nop
 8001e32:	e7fd      	b.n	8001e30 <UsageFault_Handler+0x4>

08001e34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e62:	f000 f8b1 	bl	8001fc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e74:	4a14      	ldr	r2, [pc, #80]	@ (8001ec8 <_sbrk+0x5c>)
 8001e76:	4b15      	ldr	r3, [pc, #84]	@ (8001ecc <_sbrk+0x60>)
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e80:	4b13      	ldr	r3, [pc, #76]	@ (8001ed0 <_sbrk+0x64>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d102      	bne.n	8001e8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e88:	4b11      	ldr	r3, [pc, #68]	@ (8001ed0 <_sbrk+0x64>)
 8001e8a:	4a12      	ldr	r2, [pc, #72]	@ (8001ed4 <_sbrk+0x68>)
 8001e8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e8e:	4b10      	ldr	r3, [pc, #64]	@ (8001ed0 <_sbrk+0x64>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4413      	add	r3, r2
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d207      	bcs.n	8001eac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e9c:	f003 fb68 	bl	8005570 <__errno>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	220c      	movs	r2, #12
 8001ea4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ea6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001eaa:	e009      	b.n	8001ec0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001eac:	4b08      	ldr	r3, [pc, #32]	@ (8001ed0 <_sbrk+0x64>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eb2:	4b07      	ldr	r3, [pc, #28]	@ (8001ed0 <_sbrk+0x64>)
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4413      	add	r3, r2
 8001eba:	4a05      	ldr	r2, [pc, #20]	@ (8001ed0 <_sbrk+0x64>)
 8001ebc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20050000 	.word	0x20050000
 8001ecc:	00000400 	.word	0x00000400
 8001ed0:	2000040c 	.word	0x2000040c
 8001ed4:	20000560 	.word	0x20000560

08001ed8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001edc:	4b06      	ldr	r3, [pc, #24]	@ (8001ef8 <SystemInit+0x20>)
 8001ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ee2:	4a05      	ldr	r2, [pc, #20]	@ (8001ef8 <SystemInit+0x20>)
 8001ee4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ee8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eec:	bf00      	nop
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001efc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f34 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f00:	f7ff ffea 	bl	8001ed8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f04:	480c      	ldr	r0, [pc, #48]	@ (8001f38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f06:	490d      	ldr	r1, [pc, #52]	@ (8001f3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f08:	4a0d      	ldr	r2, [pc, #52]	@ (8001f40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f0c:	e002      	b.n	8001f14 <LoopCopyDataInit>

08001f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f12:	3304      	adds	r3, #4

08001f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f18:	d3f9      	bcc.n	8001f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f1c:	4c0a      	ldr	r4, [pc, #40]	@ (8001f48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f20:	e001      	b.n	8001f26 <LoopFillZerobss>

08001f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f24:	3204      	adds	r2, #4

08001f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f28:	d3fb      	bcc.n	8001f22 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8001f2a:	f003 fb27 	bl	800557c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f2e:	f7ff fad1 	bl	80014d4 <main>
  bx  lr    
 8001f32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f34:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f3c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001f40:	080060fc 	.word	0x080060fc
  ldr r2, =_sbss
 8001f44:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001f48:	2000055c 	.word	0x2000055c

08001f4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f4c:	e7fe      	b.n	8001f4c <ADC_IRQHandler>

08001f4e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f52:	2003      	movs	r0, #3
 8001f54:	f000 f92e 	bl	80021b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f58:	200f      	movs	r0, #15
 8001f5a:	f000 f805 	bl	8001f68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f5e:	f7ff fdeb 	bl	8001b38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f70:	4b12      	ldr	r3, [pc, #72]	@ (8001fbc <HAL_InitTick+0x54>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	4b12      	ldr	r3, [pc, #72]	@ (8001fc0 <HAL_InitTick+0x58>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	4619      	mov	r1, r3
 8001f7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f86:	4618      	mov	r0, r3
 8001f88:	f000 f93b 	bl	8002202 <HAL_SYSTICK_Config>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e00e      	b.n	8001fb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b0f      	cmp	r3, #15
 8001f9a:	d80a      	bhi.n	8001fb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001fa4:	f000 f911 	bl	80021ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fa8:	4a06      	ldr	r2, [pc, #24]	@ (8001fc4 <HAL_InitTick+0x5c>)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	e000      	b.n	8001fb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	20000004 	.word	0x20000004
 8001fc0:	2000000c 	.word	0x2000000c
 8001fc4:	20000008 	.word	0x20000008

08001fc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fcc:	4b06      	ldr	r3, [pc, #24]	@ (8001fe8 <HAL_IncTick+0x20>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	4b06      	ldr	r3, [pc, #24]	@ (8001fec <HAL_IncTick+0x24>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	4a04      	ldr	r2, [pc, #16]	@ (8001fec <HAL_IncTick+0x24>)
 8001fda:	6013      	str	r3, [r2, #0]
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	2000000c 	.word	0x2000000c
 8001fec:	20000410 	.word	0x20000410

08001ff0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ff4:	4b03      	ldr	r3, [pc, #12]	@ (8002004 <HAL_GetTick+0x14>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	20000410 	.word	0x20000410

08002008 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002010:	f7ff ffee 	bl	8001ff0 <HAL_GetTick>
 8002014:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002020:	d005      	beq.n	800202e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002022:	4b0a      	ldr	r3, [pc, #40]	@ (800204c <HAL_Delay+0x44>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	461a      	mov	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4413      	add	r3, r2
 800202c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800202e:	bf00      	nop
 8002030:	f7ff ffde 	bl	8001ff0 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	429a      	cmp	r2, r3
 800203e:	d8f7      	bhi.n	8002030 <HAL_Delay+0x28>
  {
  }
}
 8002040:	bf00      	nop
 8002042:	bf00      	nop
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	2000000c 	.word	0x2000000c

08002050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002060:	4b0b      	ldr	r3, [pc, #44]	@ (8002090 <__NVIC_SetPriorityGrouping+0x40>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002066:	68ba      	ldr	r2, [r7, #8]
 8002068:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800206c:	4013      	ands	r3, r2
 800206e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002078:	4b06      	ldr	r3, [pc, #24]	@ (8002094 <__NVIC_SetPriorityGrouping+0x44>)
 800207a:	4313      	orrs	r3, r2
 800207c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800207e:	4a04      	ldr	r2, [pc, #16]	@ (8002090 <__NVIC_SetPriorityGrouping+0x40>)
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	60d3      	str	r3, [r2, #12]
}
 8002084:	bf00      	nop
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	e000ed00 	.word	0xe000ed00
 8002094:	05fa0000 	.word	0x05fa0000

08002098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800209c:	4b04      	ldr	r3, [pc, #16]	@ (80020b0 <__NVIC_GetPriorityGrouping+0x18>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	0a1b      	lsrs	r3, r3, #8
 80020a2:	f003 0307 	and.w	r3, r3, #7
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	6039      	str	r1, [r7, #0]
 80020be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	db0a      	blt.n	80020de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	b2da      	uxtb	r2, r3
 80020cc:	490c      	ldr	r1, [pc, #48]	@ (8002100 <__NVIC_SetPriority+0x4c>)
 80020ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d2:	0112      	lsls	r2, r2, #4
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	440b      	add	r3, r1
 80020d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020dc:	e00a      	b.n	80020f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	4908      	ldr	r1, [pc, #32]	@ (8002104 <__NVIC_SetPriority+0x50>)
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	f003 030f 	and.w	r3, r3, #15
 80020ea:	3b04      	subs	r3, #4
 80020ec:	0112      	lsls	r2, r2, #4
 80020ee:	b2d2      	uxtb	r2, r2
 80020f0:	440b      	add	r3, r1
 80020f2:	761a      	strb	r2, [r3, #24]
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	e000e100 	.word	0xe000e100
 8002104:	e000ed00 	.word	0xe000ed00

08002108 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002108:	b480      	push	{r7}
 800210a:	b089      	sub	sp, #36	@ 0x24
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	f1c3 0307 	rsb	r3, r3, #7
 8002122:	2b04      	cmp	r3, #4
 8002124:	bf28      	it	cs
 8002126:	2304      	movcs	r3, #4
 8002128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	3304      	adds	r3, #4
 800212e:	2b06      	cmp	r3, #6
 8002130:	d902      	bls.n	8002138 <NVIC_EncodePriority+0x30>
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	3b03      	subs	r3, #3
 8002136:	e000      	b.n	800213a <NVIC_EncodePriority+0x32>
 8002138:	2300      	movs	r3, #0
 800213a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800213c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	43da      	mvns	r2, r3
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	401a      	ands	r2, r3
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002150:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	fa01 f303 	lsl.w	r3, r1, r3
 800215a:	43d9      	mvns	r1, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002160:	4313      	orrs	r3, r2
         );
}
 8002162:	4618      	mov	r0, r3
 8002164:	3724      	adds	r7, #36	@ 0x24
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
	...

08002170 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3b01      	subs	r3, #1
 800217c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002180:	d301      	bcc.n	8002186 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002182:	2301      	movs	r3, #1
 8002184:	e00f      	b.n	80021a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002186:	4a0a      	ldr	r2, [pc, #40]	@ (80021b0 <SysTick_Config+0x40>)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3b01      	subs	r3, #1
 800218c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800218e:	210f      	movs	r1, #15
 8002190:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002194:	f7ff ff8e 	bl	80020b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002198:	4b05      	ldr	r3, [pc, #20]	@ (80021b0 <SysTick_Config+0x40>)
 800219a:	2200      	movs	r2, #0
 800219c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800219e:	4b04      	ldr	r3, [pc, #16]	@ (80021b0 <SysTick_Config+0x40>)
 80021a0:	2207      	movs	r2, #7
 80021a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	e000e010 	.word	0xe000e010

080021b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f7ff ff47 	bl	8002050 <__NVIC_SetPriorityGrouping>
}
 80021c2:	bf00      	nop
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b086      	sub	sp, #24
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	4603      	mov	r3, r0
 80021d2:	60b9      	str	r1, [r7, #8]
 80021d4:	607a      	str	r2, [r7, #4]
 80021d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021dc:	f7ff ff5c 	bl	8002098 <__NVIC_GetPriorityGrouping>
 80021e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	68b9      	ldr	r1, [r7, #8]
 80021e6:	6978      	ldr	r0, [r7, #20]
 80021e8:	f7ff ff8e 	bl	8002108 <NVIC_EncodePriority>
 80021ec:	4602      	mov	r2, r0
 80021ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021f2:	4611      	mov	r1, r2
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff ff5d 	bl	80020b4 <__NVIC_SetPriority>
}
 80021fa:	bf00      	nop
 80021fc:	3718      	adds	r7, #24
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b082      	sub	sp, #8
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7ff ffb0 	bl	8002170 <SysTick_Config>
 8002210:	4603      	mov	r3, r0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
	...

0800221c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800221c:	b480      	push	{r7}
 800221e:	b089      	sub	sp, #36	@ 0x24
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002226:	2300      	movs	r3, #0
 8002228:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800222e:	2300      	movs	r3, #0
 8002230:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002232:	2300      	movs	r3, #0
 8002234:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
 800223a:	e175      	b.n	8002528 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800223c:	2201      	movs	r2, #1
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	4013      	ands	r3, r2
 800224e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	429a      	cmp	r2, r3
 8002256:	f040 8164 	bne.w	8002522 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	2b01      	cmp	r3, #1
 8002264:	d005      	beq.n	8002272 <HAL_GPIO_Init+0x56>
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d130      	bne.n	80022d4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	2203      	movs	r2, #3
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43db      	mvns	r3, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4013      	ands	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	68da      	ldr	r2, [r3, #12]
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4313      	orrs	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022a8:	2201      	movs	r2, #1
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	091b      	lsrs	r3, r3, #4
 80022be:	f003 0201 	and.w	r2, r3, #1
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f003 0303 	and.w	r3, r3, #3
 80022dc:	2b03      	cmp	r3, #3
 80022de:	d017      	beq.n	8002310 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	2203      	movs	r2, #3
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4013      	ands	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 0303 	and.w	r3, r3, #3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d123      	bne.n	8002364 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	08da      	lsrs	r2, r3, #3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3208      	adds	r2, #8
 8002324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	220f      	movs	r2, #15
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4013      	ands	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	691a      	ldr	r2, [r3, #16]
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4313      	orrs	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	08da      	lsrs	r2, r3, #3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	3208      	adds	r2, #8
 800235e:	69b9      	ldr	r1, [r7, #24]
 8002360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	2203      	movs	r2, #3
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f003 0203 	and.w	r2, r3, #3
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f000 80be 	beq.w	8002522 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023a6:	4b66      	ldr	r3, [pc, #408]	@ (8002540 <HAL_GPIO_Init+0x324>)
 80023a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023aa:	4a65      	ldr	r2, [pc, #404]	@ (8002540 <HAL_GPIO_Init+0x324>)
 80023ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80023b2:	4b63      	ldr	r3, [pc, #396]	@ (8002540 <HAL_GPIO_Init+0x324>)
 80023b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80023be:	4a61      	ldr	r2, [pc, #388]	@ (8002544 <HAL_GPIO_Init+0x328>)
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	089b      	lsrs	r3, r3, #2
 80023c4:	3302      	adds	r3, #2
 80023c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	f003 0303 	and.w	r3, r3, #3
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	220f      	movs	r2, #15
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43db      	mvns	r3, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4013      	ands	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a58      	ldr	r2, [pc, #352]	@ (8002548 <HAL_GPIO_Init+0x32c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d037      	beq.n	800245a <HAL_GPIO_Init+0x23e>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a57      	ldr	r2, [pc, #348]	@ (800254c <HAL_GPIO_Init+0x330>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d031      	beq.n	8002456 <HAL_GPIO_Init+0x23a>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a56      	ldr	r2, [pc, #344]	@ (8002550 <HAL_GPIO_Init+0x334>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d02b      	beq.n	8002452 <HAL_GPIO_Init+0x236>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a55      	ldr	r2, [pc, #340]	@ (8002554 <HAL_GPIO_Init+0x338>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d025      	beq.n	800244e <HAL_GPIO_Init+0x232>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a54      	ldr	r2, [pc, #336]	@ (8002558 <HAL_GPIO_Init+0x33c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d01f      	beq.n	800244a <HAL_GPIO_Init+0x22e>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a53      	ldr	r2, [pc, #332]	@ (800255c <HAL_GPIO_Init+0x340>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d019      	beq.n	8002446 <HAL_GPIO_Init+0x22a>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a52      	ldr	r2, [pc, #328]	@ (8002560 <HAL_GPIO_Init+0x344>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d013      	beq.n	8002442 <HAL_GPIO_Init+0x226>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a51      	ldr	r2, [pc, #324]	@ (8002564 <HAL_GPIO_Init+0x348>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d00d      	beq.n	800243e <HAL_GPIO_Init+0x222>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a50      	ldr	r2, [pc, #320]	@ (8002568 <HAL_GPIO_Init+0x34c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d007      	beq.n	800243a <HAL_GPIO_Init+0x21e>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a4f      	ldr	r2, [pc, #316]	@ (800256c <HAL_GPIO_Init+0x350>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d101      	bne.n	8002436 <HAL_GPIO_Init+0x21a>
 8002432:	2309      	movs	r3, #9
 8002434:	e012      	b.n	800245c <HAL_GPIO_Init+0x240>
 8002436:	230a      	movs	r3, #10
 8002438:	e010      	b.n	800245c <HAL_GPIO_Init+0x240>
 800243a:	2308      	movs	r3, #8
 800243c:	e00e      	b.n	800245c <HAL_GPIO_Init+0x240>
 800243e:	2307      	movs	r3, #7
 8002440:	e00c      	b.n	800245c <HAL_GPIO_Init+0x240>
 8002442:	2306      	movs	r3, #6
 8002444:	e00a      	b.n	800245c <HAL_GPIO_Init+0x240>
 8002446:	2305      	movs	r3, #5
 8002448:	e008      	b.n	800245c <HAL_GPIO_Init+0x240>
 800244a:	2304      	movs	r3, #4
 800244c:	e006      	b.n	800245c <HAL_GPIO_Init+0x240>
 800244e:	2303      	movs	r3, #3
 8002450:	e004      	b.n	800245c <HAL_GPIO_Init+0x240>
 8002452:	2302      	movs	r3, #2
 8002454:	e002      	b.n	800245c <HAL_GPIO_Init+0x240>
 8002456:	2301      	movs	r3, #1
 8002458:	e000      	b.n	800245c <HAL_GPIO_Init+0x240>
 800245a:	2300      	movs	r3, #0
 800245c:	69fa      	ldr	r2, [r7, #28]
 800245e:	f002 0203 	and.w	r2, r2, #3
 8002462:	0092      	lsls	r2, r2, #2
 8002464:	4093      	lsls	r3, r2
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4313      	orrs	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800246c:	4935      	ldr	r1, [pc, #212]	@ (8002544 <HAL_GPIO_Init+0x328>)
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	089b      	lsrs	r3, r3, #2
 8002472:	3302      	adds	r3, #2
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800247a:	4b3d      	ldr	r3, [pc, #244]	@ (8002570 <HAL_GPIO_Init+0x354>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	43db      	mvns	r3, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4013      	ands	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	4313      	orrs	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800249e:	4a34      	ldr	r2, [pc, #208]	@ (8002570 <HAL_GPIO_Init+0x354>)
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024a4:	4b32      	ldr	r3, [pc, #200]	@ (8002570 <HAL_GPIO_Init+0x354>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d003      	beq.n	80024c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024c8:	4a29      	ldr	r2, [pc, #164]	@ (8002570 <HAL_GPIO_Init+0x354>)
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024ce:	4b28      	ldr	r3, [pc, #160]	@ (8002570 <HAL_GPIO_Init+0x354>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	43db      	mvns	r3, r3
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	4013      	ands	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024f2:	4a1f      	ldr	r2, [pc, #124]	@ (8002570 <HAL_GPIO_Init+0x354>)
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002570 <HAL_GPIO_Init+0x354>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	43db      	mvns	r3, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4013      	ands	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d003      	beq.n	800251c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	4313      	orrs	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800251c:	4a14      	ldr	r2, [pc, #80]	@ (8002570 <HAL_GPIO_Init+0x354>)
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	3301      	adds	r3, #1
 8002526:	61fb      	str	r3, [r7, #28]
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	2b0f      	cmp	r3, #15
 800252c:	f67f ae86 	bls.w	800223c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002530:	bf00      	nop
 8002532:	bf00      	nop
 8002534:	3724      	adds	r7, #36	@ 0x24
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	40023800 	.word	0x40023800
 8002544:	40013800 	.word	0x40013800
 8002548:	40020000 	.word	0x40020000
 800254c:	40020400 	.word	0x40020400
 8002550:	40020800 	.word	0x40020800
 8002554:	40020c00 	.word	0x40020c00
 8002558:	40021000 	.word	0x40021000
 800255c:	40021400 	.word	0x40021400
 8002560:	40021800 	.word	0x40021800
 8002564:	40021c00 	.word	0x40021c00
 8002568:	40022000 	.word	0x40022000
 800256c:	40022400 	.word	0x40022400
 8002570:	40013c00 	.word	0x40013c00

08002574 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	460b      	mov	r3, r1
 800257e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	691a      	ldr	r2, [r3, #16]
 8002584:	887b      	ldrh	r3, [r7, #2]
 8002586:	4013      	ands	r3, r2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d002      	beq.n	8002592 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800258c:	2301      	movs	r3, #1
 800258e:	73fb      	strb	r3, [r7, #15]
 8002590:	e001      	b.n	8002596 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002592:	2300      	movs	r3, #0
 8002594:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002596:	7bfb      	ldrb	r3, [r7, #15]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	807b      	strh	r3, [r7, #2]
 80025b0:	4613      	mov	r3, r2
 80025b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025b4:	787b      	ldrb	r3, [r7, #1]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025ba:	887a      	ldrh	r2, [r7, #2]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80025c0:	e003      	b.n	80025ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80025c2:	887b      	ldrh	r3, [r7, #2]
 80025c4:	041a      	lsls	r2, r3, #16
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	619a      	str	r2, [r3, #24]
}
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b085      	sub	sp, #20
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
 80025de:	460b      	mov	r3, r1
 80025e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025e8:	887a      	ldrh	r2, [r7, #2]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	4013      	ands	r3, r2
 80025ee:	041a      	lsls	r2, r3, #16
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	43d9      	mvns	r1, r3
 80025f4:	887b      	ldrh	r3, [r7, #2]
 80025f6:	400b      	ands	r3, r1
 80025f8:	431a      	orrs	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	619a      	str	r2, [r3, #24]
}
 80025fe:	bf00      	nop
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
	...

0800260c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e08b      	b.n	8002736 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d106      	bne.n	8002638 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7ff faa4 	bl	8001b80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2224      	movs	r2, #36	@ 0x24
 800263c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 0201 	bic.w	r2, r2, #1
 800264e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800265c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800266c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d107      	bne.n	8002686 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689a      	ldr	r2, [r3, #8]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002682:	609a      	str	r2, [r3, #8]
 8002684:	e006      	b.n	8002694 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002692:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	2b02      	cmp	r3, #2
 800269a:	d108      	bne.n	80026ae <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	685a      	ldr	r2, [r3, #4]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026aa:	605a      	str	r2, [r3, #4]
 80026ac:	e007      	b.n	80026be <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	6859      	ldr	r1, [r3, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002740 <HAL_I2C_Init+0x134>)
 80026ca:	430b      	orrs	r3, r1
 80026cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68da      	ldr	r2, [r3, #12]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	691a      	ldr	r2, [r3, #16]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	430a      	orrs	r2, r1
 80026f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	69d9      	ldr	r1, [r3, #28]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a1a      	ldr	r2, [r3, #32]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	430a      	orrs	r2, r1
 8002706:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f042 0201 	orr.w	r2, r2, #1
 8002716:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2220      	movs	r2, #32
 8002722:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	02008000 	.word	0x02008000

08002744 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b088      	sub	sp, #32
 8002748:	af02      	add	r7, sp, #8
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	4608      	mov	r0, r1
 800274e:	4611      	mov	r1, r2
 8002750:	461a      	mov	r2, r3
 8002752:	4603      	mov	r3, r0
 8002754:	817b      	strh	r3, [r7, #10]
 8002756:	460b      	mov	r3, r1
 8002758:	813b      	strh	r3, [r7, #8]
 800275a:	4613      	mov	r3, r2
 800275c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b20      	cmp	r3, #32
 8002768:	f040 80f9 	bne.w	800295e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800276c:	6a3b      	ldr	r3, [r7, #32]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d002      	beq.n	8002778 <HAL_I2C_Mem_Write+0x34>
 8002772:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002774:	2b00      	cmp	r3, #0
 8002776:	d105      	bne.n	8002784 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800277e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e0ed      	b.n	8002960 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800278a:	2b01      	cmp	r3, #1
 800278c:	d101      	bne.n	8002792 <HAL_I2C_Mem_Write+0x4e>
 800278e:	2302      	movs	r3, #2
 8002790:	e0e6      	b.n	8002960 <HAL_I2C_Mem_Write+0x21c>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800279a:	f7ff fc29 	bl	8001ff0 <HAL_GetTick>
 800279e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	2319      	movs	r3, #25
 80027a6:	2201      	movs	r2, #1
 80027a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f000 fbc9 	bl	8002f44 <I2C_WaitOnFlagUntilTimeout>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e0d1      	b.n	8002960 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2221      	movs	r2, #33	@ 0x21
 80027c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2240      	movs	r2, #64	@ 0x40
 80027c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6a3a      	ldr	r2, [r7, #32]
 80027d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80027dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027e4:	88f8      	ldrh	r0, [r7, #6]
 80027e6:	893a      	ldrh	r2, [r7, #8]
 80027e8:	8979      	ldrh	r1, [r7, #10]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	9301      	str	r3, [sp, #4]
 80027ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	4603      	mov	r3, r0
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f000 fad9 	bl	8002dac <I2C_RequestMemoryWrite>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d005      	beq.n	800280c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e0a9      	b.n	8002960 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002810:	b29b      	uxth	r3, r3
 8002812:	2bff      	cmp	r3, #255	@ 0xff
 8002814:	d90e      	bls.n	8002834 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	22ff      	movs	r2, #255	@ 0xff
 800281a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002820:	b2da      	uxtb	r2, r3
 8002822:	8979      	ldrh	r1, [r7, #10]
 8002824:	2300      	movs	r3, #0
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f000 fd4d 	bl	80032cc <I2C_TransferConfig>
 8002832:	e00f      	b.n	8002854 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002838:	b29a      	uxth	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002842:	b2da      	uxtb	r2, r3
 8002844:	8979      	ldrh	r1, [r7, #10]
 8002846:	2300      	movs	r3, #0
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f000 fd3c 	bl	80032cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f000 fbcc 	bl	8002ff6 <I2C_WaitOnTXISFlagUntilTimeout>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e07b      	b.n	8002960 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286c:	781a      	ldrb	r2, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002878:	1c5a      	adds	r2, r3, #1
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002882:	b29b      	uxth	r3, r3
 8002884:	3b01      	subs	r3, #1
 8002886:	b29a      	uxth	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002890:	3b01      	subs	r3, #1
 8002892:	b29a      	uxth	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800289c:	b29b      	uxth	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d034      	beq.n	800290c <HAL_I2C_Mem_Write+0x1c8>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d130      	bne.n	800290c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028b0:	2200      	movs	r2, #0
 80028b2:	2180      	movs	r1, #128	@ 0x80
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f000 fb45 	bl	8002f44 <I2C_WaitOnFlagUntilTimeout>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e04d      	b.n	8002960 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	2bff      	cmp	r3, #255	@ 0xff
 80028cc:	d90e      	bls.n	80028ec <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	22ff      	movs	r2, #255	@ 0xff
 80028d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	8979      	ldrh	r1, [r7, #10]
 80028dc:	2300      	movs	r3, #0
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80028e4:	68f8      	ldr	r0, [r7, #12]
 80028e6:	f000 fcf1 	bl	80032cc <I2C_TransferConfig>
 80028ea:	e00f      	b.n	800290c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	8979      	ldrh	r1, [r7, #10]
 80028fe:	2300      	movs	r3, #0
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f000 fce0 	bl	80032cc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002910:	b29b      	uxth	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d19e      	bne.n	8002854 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f000 fbb2 	bl	8003084 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e01a      	b.n	8002960 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2220      	movs	r2, #32
 8002930:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6859      	ldr	r1, [r3, #4]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	4b0a      	ldr	r3, [pc, #40]	@ (8002968 <HAL_I2C_Mem_Write+0x224>)
 800293e:	400b      	ands	r3, r1
 8002940:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2220      	movs	r2, #32
 8002946:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800295a:	2300      	movs	r3, #0
 800295c:	e000      	b.n	8002960 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800295e:	2302      	movs	r3, #2
  }
}
 8002960:	4618      	mov	r0, r3
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	fe00e800 	.word	0xfe00e800

0800296c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b088      	sub	sp, #32
 8002970:	af02      	add	r7, sp, #8
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	4608      	mov	r0, r1
 8002976:	4611      	mov	r1, r2
 8002978:	461a      	mov	r2, r3
 800297a:	4603      	mov	r3, r0
 800297c:	817b      	strh	r3, [r7, #10]
 800297e:	460b      	mov	r3, r1
 8002980:	813b      	strh	r3, [r7, #8]
 8002982:	4613      	mov	r3, r2
 8002984:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b20      	cmp	r3, #32
 8002990:	f040 80fd 	bne.w	8002b8e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002994:	6a3b      	ldr	r3, [r7, #32]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d002      	beq.n	80029a0 <HAL_I2C_Mem_Read+0x34>
 800299a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800299c:	2b00      	cmp	r3, #0
 800299e:	d105      	bne.n	80029ac <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029a6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e0f1      	b.n	8002b90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d101      	bne.n	80029ba <HAL_I2C_Mem_Read+0x4e>
 80029b6:	2302      	movs	r3, #2
 80029b8:	e0ea      	b.n	8002b90 <HAL_I2C_Mem_Read+0x224>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029c2:	f7ff fb15 	bl	8001ff0 <HAL_GetTick>
 80029c6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	2319      	movs	r3, #25
 80029ce:	2201      	movs	r2, #1
 80029d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f000 fab5 	bl	8002f44 <I2C_WaitOnFlagUntilTimeout>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e0d5      	b.n	8002b90 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2222      	movs	r2, #34	@ 0x22
 80029e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2240      	movs	r2, #64	@ 0x40
 80029f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6a3a      	ldr	r2, [r7, #32]
 80029fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002a04:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a0c:	88f8      	ldrh	r0, [r7, #6]
 8002a0e:	893a      	ldrh	r2, [r7, #8]
 8002a10:	8979      	ldrh	r1, [r7, #10]
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	9301      	str	r3, [sp, #4]
 8002a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f000 fa19 	bl	8002e54 <I2C_RequestMemoryRead>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d005      	beq.n	8002a34 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e0ad      	b.n	8002b90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	2bff      	cmp	r3, #255	@ 0xff
 8002a3c:	d90e      	bls.n	8002a5c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2201      	movs	r2, #1
 8002a42:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	8979      	ldrh	r1, [r7, #10]
 8002a4c:	4b52      	ldr	r3, [pc, #328]	@ (8002b98 <HAL_I2C_Mem_Read+0x22c>)
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f000 fc39 	bl	80032cc <I2C_TransferConfig>
 8002a5a:	e00f      	b.n	8002a7c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	8979      	ldrh	r1, [r7, #10]
 8002a6e:	4b4a      	ldr	r3, [pc, #296]	@ (8002b98 <HAL_I2C_Mem_Read+0x22c>)
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 fc28 	bl	80032cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a82:	2200      	movs	r2, #0
 8002a84:	2104      	movs	r1, #4
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f000 fa5c 	bl	8002f44 <I2C_WaitOnFlagUntilTimeout>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e07c      	b.n	8002b90 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa8:	1c5a      	adds	r2, r3, #1
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d034      	beq.n	8002b3c <HAL_I2C_Mem_Read+0x1d0>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d130      	bne.n	8002b3c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	2180      	movs	r1, #128	@ 0x80
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 fa2d 	bl	8002f44 <I2C_WaitOnFlagUntilTimeout>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e04d      	b.n	8002b90 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	2bff      	cmp	r3, #255	@ 0xff
 8002afc:	d90e      	bls.n	8002b1c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2201      	movs	r2, #1
 8002b02:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	8979      	ldrh	r1, [r7, #10]
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f000 fbd9 	bl	80032cc <I2C_TransferConfig>
 8002b1a:	e00f      	b.n	8002b3c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	8979      	ldrh	r1, [r7, #10]
 8002b2e:	2300      	movs	r3, #0
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b36:	68f8      	ldr	r0, [r7, #12]
 8002b38:	f000 fbc8 	bl	80032cc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d19a      	bne.n	8002a7c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 fa9a 	bl	8003084 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e01a      	b.n	8002b90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6859      	ldr	r1, [r3, #4]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b9c <HAL_I2C_Mem_Read+0x230>)
 8002b6e:	400b      	ands	r3, r1
 8002b70:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2220      	movs	r2, #32
 8002b76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	e000      	b.n	8002b90 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002b8e:	2302      	movs	r3, #2
  }
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3718      	adds	r7, #24
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	80002400 	.word	0x80002400
 8002b9c:	fe00e800 	.word	0xfe00e800

08002ba0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08a      	sub	sp, #40	@ 0x28
 8002ba4:	af02      	add	r7, sp, #8
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	607a      	str	r2, [r7, #4]
 8002baa:	603b      	str	r3, [r7, #0]
 8002bac:	460b      	mov	r3, r1
 8002bae:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	617b      	str	r3, [r7, #20]

  HAL_StatusTypeDef status = HAL_OK;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	77fb      	strb	r3, [r7, #31]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b20      	cmp	r3, #32
 8002bc2:	f040 80e9 	bne.w	8002d98 <HAL_I2C_IsDeviceReady+0x1f8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002bd4:	d101      	bne.n	8002bda <HAL_I2C_IsDeviceReady+0x3a>
    {
      return HAL_BUSY;
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	e0df      	b.n	8002d9a <HAL_I2C_IsDeviceReady+0x1fa>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d101      	bne.n	8002be8 <HAL_I2C_IsDeviceReady+0x48>
 8002be4:	2302      	movs	r3, #2
 8002be6:	e0d8      	b.n	8002d9a <HAL_I2C_IsDeviceReady+0x1fa>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2224      	movs	r2, #36	@ 0x24
 8002bf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d105      	bne.n	8002c12 <HAL_I2C_IsDeviceReady+0x72>
 8002c06:	897b      	ldrh	r3, [r7, #10]
 8002c08:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c0c:	4b65      	ldr	r3, [pc, #404]	@ (8002da4 <HAL_I2C_IsDeviceReady+0x204>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	e004      	b.n	8002c1c <HAL_I2C_IsDeviceReady+0x7c>
 8002c12:	897b      	ldrh	r3, [r7, #10]
 8002c14:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c18:	4b63      	ldr	r3, [pc, #396]	@ (8002da8 <HAL_I2C_IsDeviceReady+0x208>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	6812      	ldr	r2, [r2, #0]
 8002c20:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002c22:	f7ff f9e5 	bl	8001ff0 <HAL_GetTick>
 8002c26:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	f003 0320 	and.w	r3, r3, #32
 8002c32:	2b20      	cmp	r3, #32
 8002c34:	bf0c      	ite	eq
 8002c36:	2301      	moveq	r3, #1
 8002c38:	2300      	movne	r3, #0
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	77bb      	strb	r3, [r7, #30]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	f003 0310 	and.w	r3, r3, #16
 8002c48:	2b10      	cmp	r3, #16
 8002c4a:	bf0c      	ite	eq
 8002c4c:	2301      	moveq	r3, #1
 8002c4e:	2300      	movne	r3, #0
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	777b      	strb	r3, [r7, #29]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002c54:	e034      	b.n	8002cc0 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c5c:	d01a      	beq.n	8002c94 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c5e:	f7ff f9c7 	bl	8001ff0 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d302      	bcc.n	8002c74 <HAL_I2C_IsDeviceReady+0xd4>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10f      	bne.n	8002c94 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2220      	movs	r2, #32
 8002c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c80:	f043 0220 	orr.w	r2, r3, #32
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e082      	b.n	8002d9a <HAL_I2C_IsDeviceReady+0x1fa>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	f003 0320 	and.w	r3, r3, #32
 8002c9e:	2b20      	cmp	r3, #32
 8002ca0:	bf0c      	ite	eq
 8002ca2:	2301      	moveq	r3, #1
 8002ca4:	2300      	movne	r3, #0
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	77bb      	strb	r3, [r7, #30]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	f003 0310 	and.w	r3, r3, #16
 8002cb4:	2b10      	cmp	r3, #16
 8002cb6:	bf0c      	ite	eq
 8002cb8:	2301      	moveq	r3, #1
 8002cba:	2300      	movne	r3, #0
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	777b      	strb	r3, [r7, #29]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002cc0:	7fbb      	ldrb	r3, [r7, #30]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d102      	bne.n	8002ccc <HAL_I2C_IsDeviceReady+0x12c>
 8002cc6:	7f7b      	ldrb	r3, [r7, #29]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0c4      	beq.n	8002c56 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	f003 0310 	and.w	r3, r3, #16
 8002cd6:	2b10      	cmp	r3, #16
 8002cd8:	d027      	beq.n	8002d2a <HAL_I2C_IsDeviceReady+0x18a>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	2120      	movs	r1, #32
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 f92d 	bl	8002f44 <I2C_WaitOnFlagUntilTimeout>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00e      	beq.n	8002d0e <HAL_I2C_IsDeviceReady+0x16e>
        {
          /* A non acknowledge appear during STOP Flag waiting process, a new trial must be performed */
          if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cf4:	2b04      	cmp	r3, #4
 8002cf6:	d107      	bne.n	8002d08 <HAL_I2C_IsDeviceReady+0x168>
          {
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2220      	movs	r2, #32
 8002cfe:	61da      	str	r2, [r3, #28]

            /* Reset the error code for next trial */
            hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	645a      	str	r2, [r3, #68]	@ 0x44
 8002d06:	e026      	b.n	8002d56 <HAL_I2C_IsDeviceReady+0x1b6>
          }
          else
          {
            status = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	77fb      	strb	r3, [r7, #31]
 8002d0c:	e023      	b.n	8002d56 <HAL_I2C_IsDeviceReady+0x1b6>
        else
        {
          /* A acknowledge appear during STOP Flag waiting process, this mean that device respond to its address */

          /* Clear STOP Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2220      	movs	r2, #32
 8002d14:	61da      	str	r2, [r3, #28]

          /* Device is ready */
          hi2c->State = HAL_I2C_STATE_READY;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2220      	movs	r2, #32
 8002d1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_OK;
 8002d26:	2300      	movs	r3, #0
 8002d28:	e037      	b.n	8002d9a <HAL_I2C_IsDeviceReady+0x1fa>
      {
        /* A non acknowledge is detected, this mean that device not respond to its address,
           a new trial must be performed */

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2210      	movs	r2, #16
 8002d30:	61da      	str	r2, [r3, #28]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	2120      	movs	r1, #32
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 f901 	bl	8002f44 <I2C_WaitOnFlagUntilTimeout>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d002      	beq.n	8002d4e <HAL_I2C_IsDeviceReady+0x1ae>
        {
          status = HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	77fb      	strb	r3, [r7, #31]
 8002d4c:	e003      	b.n	8002d56 <HAL_I2C_IsDeviceReady+0x1b6>
        }
        else
        {
          /* Clear STOP Flag, auto generated with autoend*/
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2220      	movs	r2, #32
 8002d54:	61da      	str	r2, [r3, #28]
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	3301      	adds	r3, #1
 8002d5a:	617b      	str	r3, [r7, #20]

      if ((I2C_Trials < Trials) && (status == HAL_ERROR))
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d904      	bls.n	8002d6e <HAL_I2C_IsDeviceReady+0x1ce>
 8002d64:	7ffb      	ldrb	r3, [r7, #31]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d101      	bne.n	8002d6e <HAL_I2C_IsDeviceReady+0x1ce>
      {
        status = HAL_OK;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	77fb      	strb	r3, [r7, #31]
      }

    } while (I2C_Trials < Trials);
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	f63f af43 	bhi.w	8002bfe <HAL_I2C_IsDeviceReady+0x5e>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d84:	f043 0220 	orr.w	r2, r3, #32
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e000      	b.n	8002d9a <HAL_I2C_IsDeviceReady+0x1fa>
  }
  else
  {
    return HAL_BUSY;
 8002d98:	2302      	movs	r3, #2
  }
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3720      	adds	r7, #32
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	02002000 	.word	0x02002000
 8002da8:	02002800 	.word	0x02002800

08002dac <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af02      	add	r7, sp, #8
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	4608      	mov	r0, r1
 8002db6:	4611      	mov	r1, r2
 8002db8:	461a      	mov	r2, r3
 8002dba:	4603      	mov	r3, r0
 8002dbc:	817b      	strh	r3, [r7, #10]
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	813b      	strh	r3, [r7, #8]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002dc6:	88fb      	ldrh	r3, [r7, #6]
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	8979      	ldrh	r1, [r7, #10]
 8002dcc:	4b20      	ldr	r3, [pc, #128]	@ (8002e50 <I2C_RequestMemoryWrite+0xa4>)
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f000 fa79 	bl	80032cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dda:	69fa      	ldr	r2, [r7, #28]
 8002ddc:	69b9      	ldr	r1, [r7, #24]
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f000 f909 	bl	8002ff6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e02c      	b.n	8002e48 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002dee:	88fb      	ldrh	r3, [r7, #6]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d105      	bne.n	8002e00 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002df4:	893b      	ldrh	r3, [r7, #8]
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	629a      	str	r2, [r3, #40]	@ 0x28
 8002dfe:	e015      	b.n	8002e2c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e00:	893b      	ldrh	r3, [r7, #8]
 8002e02:	0a1b      	lsrs	r3, r3, #8
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	b2da      	uxtb	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e0e:	69fa      	ldr	r2, [r7, #28]
 8002e10:	69b9      	ldr	r1, [r7, #24]
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 f8ef 	bl	8002ff6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e012      	b.n	8002e48 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e22:	893b      	ldrh	r3, [r7, #8]
 8002e24:	b2da      	uxtb	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	2200      	movs	r2, #0
 8002e34:	2180      	movs	r1, #128	@ 0x80
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f000 f884 	bl	8002f44 <I2C_WaitOnFlagUntilTimeout>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e000      	b.n	8002e48 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	80002000 	.word	0x80002000

08002e54 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af02      	add	r7, sp, #8
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	4608      	mov	r0, r1
 8002e5e:	4611      	mov	r1, r2
 8002e60:	461a      	mov	r2, r3
 8002e62:	4603      	mov	r3, r0
 8002e64:	817b      	strh	r3, [r7, #10]
 8002e66:	460b      	mov	r3, r1
 8002e68:	813b      	strh	r3, [r7, #8]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002e6e:	88fb      	ldrh	r3, [r7, #6]
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	8979      	ldrh	r1, [r7, #10]
 8002e74:	4b20      	ldr	r3, [pc, #128]	@ (8002ef8 <I2C_RequestMemoryRead+0xa4>)
 8002e76:	9300      	str	r3, [sp, #0]
 8002e78:	2300      	movs	r3, #0
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 fa26 	bl	80032cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e80:	69fa      	ldr	r2, [r7, #28]
 8002e82:	69b9      	ldr	r1, [r7, #24]
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f000 f8b6 	bl	8002ff6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e02c      	b.n	8002eee <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e94:	88fb      	ldrh	r3, [r7, #6]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d105      	bne.n	8002ea6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e9a:	893b      	ldrh	r3, [r7, #8]
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	629a      	str	r2, [r3, #40]	@ 0x28
 8002ea4:	e015      	b.n	8002ed2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ea6:	893b      	ldrh	r3, [r7, #8]
 8002ea8:	0a1b      	lsrs	r3, r3, #8
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	b2da      	uxtb	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eb4:	69fa      	ldr	r2, [r7, #28]
 8002eb6:	69b9      	ldr	r1, [r7, #24]
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f000 f89c 	bl	8002ff6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e012      	b.n	8002eee <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ec8:	893b      	ldrh	r3, [r7, #8]
 8002eca:	b2da      	uxtb	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	2140      	movs	r1, #64	@ 0x40
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 f831 	bl	8002f44 <I2C_WaitOnFlagUntilTimeout>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e000      	b.n	8002eee <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	80002000 	.word	0x80002000

08002efc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d103      	bne.n	8002f1a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2200      	movs	r2, #0
 8002f18:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d007      	beq.n	8002f38 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699a      	ldr	r2, [r3, #24]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f042 0201 	orr.w	r2, r2, #1
 8002f36:	619a      	str	r2, [r3, #24]
  }
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	603b      	str	r3, [r7, #0]
 8002f50:	4613      	mov	r3, r2
 8002f52:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f54:	e03b      	b.n	8002fce <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	6839      	ldr	r1, [r7, #0]
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f000 f8d6 	bl	800310c <I2C_IsErrorOccurred>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e041      	b.n	8002fee <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f70:	d02d      	beq.n	8002fce <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f72:	f7ff f83d 	bl	8001ff0 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d302      	bcc.n	8002f88 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d122      	bne.n	8002fce <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699a      	ldr	r2, [r3, #24]
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	4013      	ands	r3, r2
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	bf0c      	ite	eq
 8002f98:	2301      	moveq	r3, #1
 8002f9a:	2300      	movne	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	79fb      	ldrb	r3, [r7, #7]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d113      	bne.n	8002fce <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002faa:	f043 0220 	orr.w	r2, r3, #32
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2220      	movs	r2, #32
 8002fb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e00f      	b.n	8002fee <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	699a      	ldr	r2, [r3, #24]
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	68ba      	ldr	r2, [r7, #8]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	bf0c      	ite	eq
 8002fde:	2301      	moveq	r3, #1
 8002fe0:	2300      	movne	r3, #0
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	79fb      	ldrb	r3, [r7, #7]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d0b4      	beq.n	8002f56 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b084      	sub	sp, #16
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	60f8      	str	r0, [r7, #12]
 8002ffe:	60b9      	str	r1, [r7, #8]
 8003000:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003002:	e033      	b.n	800306c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	68b9      	ldr	r1, [r7, #8]
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f000 f87f 	bl	800310c <I2C_IsErrorOccurred>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e031      	b.n	800307c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800301e:	d025      	beq.n	800306c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003020:	f7fe ffe6 	bl	8001ff0 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	429a      	cmp	r2, r3
 800302e:	d302      	bcc.n	8003036 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d11a      	bne.n	800306c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b02      	cmp	r3, #2
 8003042:	d013      	beq.n	800306c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003048:	f043 0220 	orr.w	r2, r3, #32
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e007      	b.n	800307c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b02      	cmp	r3, #2
 8003078:	d1c4      	bne.n	8003004 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003090:	e02f      	b.n	80030f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	68b9      	ldr	r1, [r7, #8]
 8003096:	68f8      	ldr	r0, [r7, #12]
 8003098:	f000 f838 	bl	800310c <I2C_IsErrorOccurred>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e02d      	b.n	8003102 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030a6:	f7fe ffa3 	bl	8001ff0 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	68ba      	ldr	r2, [r7, #8]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d302      	bcc.n	80030bc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d11a      	bne.n	80030f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	f003 0320 	and.w	r3, r3, #32
 80030c6:	2b20      	cmp	r3, #32
 80030c8:	d013      	beq.n	80030f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ce:	f043 0220 	orr.w	r2, r3, #32
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2220      	movs	r2, #32
 80030da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e007      	b.n	8003102 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	f003 0320 	and.w	r3, r3, #32
 80030fc:	2b20      	cmp	r3, #32
 80030fe:	d1c8      	bne.n	8003092 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
	...

0800310c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b08a      	sub	sp, #40	@ 0x28
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003118:	2300      	movs	r3, #0
 800311a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003126:	2300      	movs	r3, #0
 8003128:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	f003 0310 	and.w	r3, r3, #16
 8003134:	2b00      	cmp	r3, #0
 8003136:	d068      	beq.n	800320a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2210      	movs	r2, #16
 800313e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003140:	e049      	b.n	80031d6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003148:	d045      	beq.n	80031d6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800314a:	f7fe ff51 	bl	8001ff0 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	68ba      	ldr	r2, [r7, #8]
 8003156:	429a      	cmp	r2, r3
 8003158:	d302      	bcc.n	8003160 <I2C_IsErrorOccurred+0x54>
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d13a      	bne.n	80031d6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800316a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003172:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800317e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003182:	d121      	bne.n	80031c8 <I2C_IsErrorOccurred+0xbc>
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800318a:	d01d      	beq.n	80031c8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800318c:	7cfb      	ldrb	r3, [r7, #19]
 800318e:	2b20      	cmp	r3, #32
 8003190:	d01a      	beq.n	80031c8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	685a      	ldr	r2, [r3, #4]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80031a0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80031a2:	f7fe ff25 	bl	8001ff0 <HAL_GetTick>
 80031a6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031a8:	e00e      	b.n	80031c8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80031aa:	f7fe ff21 	bl	8001ff0 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b19      	cmp	r3, #25
 80031b6:	d907      	bls.n	80031c8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80031b8:	6a3b      	ldr	r3, [r7, #32]
 80031ba:	f043 0320 	orr.w	r3, r3, #32
 80031be:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80031c6:	e006      	b.n	80031d6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	f003 0320 	and.w	r3, r3, #32
 80031d2:	2b20      	cmp	r3, #32
 80031d4:	d1e9      	bne.n	80031aa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	f003 0320 	and.w	r3, r3, #32
 80031e0:	2b20      	cmp	r3, #32
 80031e2:	d003      	beq.n	80031ec <I2C_IsErrorOccurred+0xe0>
 80031e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0aa      	beq.n	8003142 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80031ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d103      	bne.n	80031fc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2220      	movs	r2, #32
 80031fa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80031fc:	6a3b      	ldr	r3, [r7, #32]
 80031fe:	f043 0304 	orr.w	r3, r3, #4
 8003202:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00b      	beq.n	8003234 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800321c:	6a3b      	ldr	r3, [r7, #32]
 800321e:	f043 0301 	orr.w	r3, r3, #1
 8003222:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800322c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00b      	beq.n	8003256 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800323e:	6a3b      	ldr	r3, [r7, #32]
 8003240:	f043 0308 	orr.w	r3, r3, #8
 8003244:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800324e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00b      	beq.n	8003278 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003260:	6a3b      	ldr	r3, [r7, #32]
 8003262:	f043 0302 	orr.w	r3, r3, #2
 8003266:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003270:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003278:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800327c:	2b00      	cmp	r3, #0
 800327e:	d01c      	beq.n	80032ba <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f7ff fe3b 	bl	8002efc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6859      	ldr	r1, [r3, #4]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	4b0d      	ldr	r3, [pc, #52]	@ (80032c8 <I2C_IsErrorOccurred+0x1bc>)
 8003292:	400b      	ands	r3, r1
 8003294:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800329a:	6a3b      	ldr	r3, [r7, #32]
 800329c:	431a      	orrs	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2220      	movs	r2, #32
 80032a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80032ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3728      	adds	r7, #40	@ 0x28
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	fe00e800 	.word	0xfe00e800

080032cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b087      	sub	sp, #28
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	607b      	str	r3, [r7, #4]
 80032d6:	460b      	mov	r3, r1
 80032d8:	817b      	strh	r3, [r7, #10]
 80032da:	4613      	mov	r3, r2
 80032dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032de:	897b      	ldrh	r3, [r7, #10]
 80032e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032e4:	7a7b      	ldrb	r3, [r7, #9]
 80032e6:	041b      	lsls	r3, r3, #16
 80032e8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032ec:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032f2:	6a3b      	ldr	r3, [r7, #32]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80032fa:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	6a3b      	ldr	r3, [r7, #32]
 8003304:	0d5b      	lsrs	r3, r3, #21
 8003306:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800330a:	4b08      	ldr	r3, [pc, #32]	@ (800332c <I2C_TransferConfig+0x60>)
 800330c:	430b      	orrs	r3, r1
 800330e:	43db      	mvns	r3, r3
 8003310:	ea02 0103 	and.w	r1, r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	430a      	orrs	r2, r1
 800331c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800331e:	bf00      	nop
 8003320:	371c      	adds	r7, #28
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	03ff63ff 	.word	0x03ff63ff

08003330 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b20      	cmp	r3, #32
 8003344:	d138      	bne.n	80033b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800334c:	2b01      	cmp	r3, #1
 800334e:	d101      	bne.n	8003354 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003350:	2302      	movs	r3, #2
 8003352:	e032      	b.n	80033ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2224      	movs	r2, #36	@ 0x24
 8003360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 0201 	bic.w	r2, r2, #1
 8003372:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003382:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6819      	ldr	r1, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	430a      	orrs	r2, r1
 8003392:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f042 0201 	orr.w	r2, r2, #1
 80033a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2220      	movs	r2, #32
 80033a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80033b4:	2300      	movs	r3, #0
 80033b6:	e000      	b.n	80033ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80033b8:	2302      	movs	r3, #2
  }
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr

080033c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033c6:	b480      	push	{r7}
 80033c8:	b085      	sub	sp, #20
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
 80033ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	2b20      	cmp	r3, #32
 80033da:	d139      	bne.n	8003450 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d101      	bne.n	80033ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033e6:	2302      	movs	r3, #2
 80033e8:	e033      	b.n	8003452 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2224      	movs	r2, #36	@ 0x24
 80033f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 0201 	bic.w	r2, r2, #1
 8003408:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003418:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	021b      	lsls	r3, r3, #8
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	4313      	orrs	r3, r2
 8003422:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0201 	orr.w	r2, r2, #1
 800343a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2220      	movs	r2, #32
 8003440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800344c:	2300      	movs	r3, #0
 800344e:	e000      	b.n	8003452 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003450:	2302      	movs	r3, #2
  }
}
 8003452:	4618      	mov	r0, r3
 8003454:	3714      	adds	r7, #20
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
	...

08003460 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003466:	2300      	movs	r3, #0
 8003468:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800346a:	4b23      	ldr	r3, [pc, #140]	@ (80034f8 <HAL_PWREx_EnableOverDrive+0x98>)
 800346c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346e:	4a22      	ldr	r2, [pc, #136]	@ (80034f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003470:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003474:	6413      	str	r3, [r2, #64]	@ 0x40
 8003476:	4b20      	ldr	r3, [pc, #128]	@ (80034f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800347e:	603b      	str	r3, [r7, #0]
 8003480:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003482:	4b1e      	ldr	r3, [pc, #120]	@ (80034fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a1d      	ldr	r2, [pc, #116]	@ (80034fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003488:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800348c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800348e:	f7fe fdaf 	bl	8001ff0 <HAL_GetTick>
 8003492:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003494:	e009      	b.n	80034aa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003496:	f7fe fdab 	bl	8001ff0 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80034a4:	d901      	bls.n	80034aa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e022      	b.n	80034f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80034aa:	4b14      	ldr	r3, [pc, #80]	@ (80034fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034b6:	d1ee      	bne.n	8003496 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80034b8:	4b10      	ldr	r3, [pc, #64]	@ (80034fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a0f      	ldr	r2, [pc, #60]	@ (80034fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80034be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034c4:	f7fe fd94 	bl	8001ff0 <HAL_GetTick>
 80034c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80034ca:	e009      	b.n	80034e0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80034cc:	f7fe fd90 	bl	8001ff0 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80034da:	d901      	bls.n	80034e0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e007      	b.n	80034f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80034e0:	4b06      	ldr	r3, [pc, #24]	@ (80034fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80034ec:	d1ee      	bne.n	80034cc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3708      	adds	r7, #8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40023800 	.word	0x40023800
 80034fc:	40007000 	.word	0x40007000

08003500 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003508:	2300      	movs	r3, #0
 800350a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e291      	b.n	8003a3a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b00      	cmp	r3, #0
 8003520:	f000 8087 	beq.w	8003632 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003524:	4b96      	ldr	r3, [pc, #600]	@ (8003780 <HAL_RCC_OscConfig+0x280>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f003 030c 	and.w	r3, r3, #12
 800352c:	2b04      	cmp	r3, #4
 800352e:	d00c      	beq.n	800354a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003530:	4b93      	ldr	r3, [pc, #588]	@ (8003780 <HAL_RCC_OscConfig+0x280>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f003 030c 	and.w	r3, r3, #12
 8003538:	2b08      	cmp	r3, #8
 800353a:	d112      	bne.n	8003562 <HAL_RCC_OscConfig+0x62>
 800353c:	4b90      	ldr	r3, [pc, #576]	@ (8003780 <HAL_RCC_OscConfig+0x280>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003544:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003548:	d10b      	bne.n	8003562 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800354a:	4b8d      	ldr	r3, [pc, #564]	@ (8003780 <HAL_RCC_OscConfig+0x280>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d06c      	beq.n	8003630 <HAL_RCC_OscConfig+0x130>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d168      	bne.n	8003630 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e26b      	b.n	8003a3a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800356a:	d106      	bne.n	800357a <HAL_RCC_OscConfig+0x7a>
 800356c:	4b84      	ldr	r3, [pc, #528]	@ (8003780 <HAL_RCC_OscConfig+0x280>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a83      	ldr	r2, [pc, #524]	@ (8003780 <HAL_RCC_OscConfig+0x280>)
 8003572:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003576:	6013      	str	r3, [r2, #0]
 8003578:	e02e      	b.n	80035d8 <HAL_RCC_OscConfig+0xd8>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10c      	bne.n	800359c <HAL_RCC_OscConfig+0x9c>
 8003582:	4b7f      	ldr	r3, [pc, #508]	@ (8003780 <HAL_RCC_OscConfig+0x280>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a7e      	ldr	r2, [pc, #504]	@ (8003780 <HAL_RCC_OscConfig+0x280>)
 8003588:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800358c:	6013      	str	r3, [r2, #0]
 800358e:	4b7c      	ldr	r3, [pc, #496]	@ (8003780 <HAL_RCC_OscConfig+0x280>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a7b      	ldr	r2, [pc, #492]	@ (8003780 <HAL_RCC_OscConfig+0x280>)
 8003594:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003598:	6013      	str	r3, [r2, #0]
 800359a:	e01d      	b.n	80035d8 <HAL_RCC_OscConfig+0xd8>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035a4:	d10c      	bne.n	80035c0 <HAL_RCC_OscConfig+0xc0>
 80035a6:	4b76      	ldr	r3, [pc, #472]	@ (8003780 <HAL_RCC_OscConfig+0x280>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a75      	ldr	r2, [pc, #468]	@ (8003780 <HAL_RCC_OscConfig+0x280>)
 80035ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035b0:	6013      	str	r3, [r2, #0]
 80035b2:	4b73      	ldr	r3, [pc, #460]	@ (8003780 <HAL_RCC_OscConfig+0x280>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a72      	ldr	r2, [pc, #456]	@ (8003780 <HAL_RCC_OscConfig+0x280>)
 80035b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035bc:	6013      	str	r3, [r2, #0]
 80035be:	e00b      	b.n	80035d8 <HAL_RCC_OscConfig+0xd8>
 80035c0:	4b6f      	ldr	r3, [pc, #444]	@ (8003780 <HAL_RCC_OscConfig+0x280>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a6e      	ldr	r2, [pc, #440]	@ (8003780 <HAL_RCC_OscConfig+0x280>)
 80035c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035ca:	6013      	str	r3, [r2, #0]
 80035cc:	4b6c      	ldr	r3, [pc, #432]	@ (8003780 <HAL_RCC_OscConfig+0x280>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a6b      	ldr	r2, [pc, #428]	@ (8003780 <HAL_RCC_OscConfig+0x280>)
 80035d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d013      	beq.n	8003608 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e0:	f7fe fd06 	bl	8001ff0 <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035e8:	f7fe fd02 	bl	8001ff0 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b64      	cmp	r3, #100	@ 0x64
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e21f      	b.n	8003a3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035fa:	4b61      	ldr	r3, [pc, #388]	@ (8003780 <HAL_RCC_OscConfig+0x280>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d0f0      	beq.n	80035e8 <HAL_RCC_OscConfig+0xe8>
 8003606:	e014      	b.n	8003632 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003608:	f7fe fcf2 	bl	8001ff0 <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003610:	f7fe fcee 	bl	8001ff0 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b64      	cmp	r3, #100	@ 0x64
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e20b      	b.n	8003a3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003622:	4b57      	ldr	r3, [pc, #348]	@ (8003780 <HAL_RCC_OscConfig+0x280>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1f0      	bne.n	8003610 <HAL_RCC_OscConfig+0x110>
 800362e:	e000      	b.n	8003632 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003630:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d069      	beq.n	8003712 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800363e:	4b50      	ldr	r3, [pc, #320]	@ (8003780 <HAL_RCC_OscConfig+0x280>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 030c 	and.w	r3, r3, #12
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00b      	beq.n	8003662 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800364a:	4b4d      	ldr	r3, [pc, #308]	@ (8003780 <HAL_RCC_OscConfig+0x280>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 030c 	and.w	r3, r3, #12
 8003652:	2b08      	cmp	r3, #8
 8003654:	d11c      	bne.n	8003690 <HAL_RCC_OscConfig+0x190>
 8003656:	4b4a      	ldr	r3, [pc, #296]	@ (8003780 <HAL_RCC_OscConfig+0x280>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d116      	bne.n	8003690 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003662:	4b47      	ldr	r3, [pc, #284]	@ (8003780 <HAL_RCC_OscConfig+0x280>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d005      	beq.n	800367a <HAL_RCC_OscConfig+0x17a>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d001      	beq.n	800367a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e1df      	b.n	8003a3a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800367a:	4b41      	ldr	r3, [pc, #260]	@ (8003780 <HAL_RCC_OscConfig+0x280>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	493d      	ldr	r1, [pc, #244]	@ (8003780 <HAL_RCC_OscConfig+0x280>)
 800368a:	4313      	orrs	r3, r2
 800368c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800368e:	e040      	b.n	8003712 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d023      	beq.n	80036e0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003698:	4b39      	ldr	r3, [pc, #228]	@ (8003780 <HAL_RCC_OscConfig+0x280>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a38      	ldr	r2, [pc, #224]	@ (8003780 <HAL_RCC_OscConfig+0x280>)
 800369e:	f043 0301 	orr.w	r3, r3, #1
 80036a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a4:	f7fe fca4 	bl	8001ff0 <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036aa:	e008      	b.n	80036be <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ac:	f7fe fca0 	bl	8001ff0 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e1bd      	b.n	8003a3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036be:	4b30      	ldr	r3, [pc, #192]	@ (8003780 <HAL_RCC_OscConfig+0x280>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d0f0      	beq.n	80036ac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ca:	4b2d      	ldr	r3, [pc, #180]	@ (8003780 <HAL_RCC_OscConfig+0x280>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	4929      	ldr	r1, [pc, #164]	@ (8003780 <HAL_RCC_OscConfig+0x280>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	600b      	str	r3, [r1, #0]
 80036de:	e018      	b.n	8003712 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036e0:	4b27      	ldr	r3, [pc, #156]	@ (8003780 <HAL_RCC_OscConfig+0x280>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a26      	ldr	r2, [pc, #152]	@ (8003780 <HAL_RCC_OscConfig+0x280>)
 80036e6:	f023 0301 	bic.w	r3, r3, #1
 80036ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ec:	f7fe fc80 	bl	8001ff0 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036f4:	f7fe fc7c 	bl	8001ff0 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e199      	b.n	8003a3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003706:	4b1e      	ldr	r3, [pc, #120]	@ (8003780 <HAL_RCC_OscConfig+0x280>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1f0      	bne.n	80036f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0308 	and.w	r3, r3, #8
 800371a:	2b00      	cmp	r3, #0
 800371c:	d038      	beq.n	8003790 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d019      	beq.n	800375a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003726:	4b16      	ldr	r3, [pc, #88]	@ (8003780 <HAL_RCC_OscConfig+0x280>)
 8003728:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800372a:	4a15      	ldr	r2, [pc, #84]	@ (8003780 <HAL_RCC_OscConfig+0x280>)
 800372c:	f043 0301 	orr.w	r3, r3, #1
 8003730:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003732:	f7fe fc5d 	bl	8001ff0 <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003738:	e008      	b.n	800374c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800373a:	f7fe fc59 	bl	8001ff0 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e176      	b.n	8003a3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800374c:	4b0c      	ldr	r3, [pc, #48]	@ (8003780 <HAL_RCC_OscConfig+0x280>)
 800374e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0f0      	beq.n	800373a <HAL_RCC_OscConfig+0x23a>
 8003758:	e01a      	b.n	8003790 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800375a:	4b09      	ldr	r3, [pc, #36]	@ (8003780 <HAL_RCC_OscConfig+0x280>)
 800375c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800375e:	4a08      	ldr	r2, [pc, #32]	@ (8003780 <HAL_RCC_OscConfig+0x280>)
 8003760:	f023 0301 	bic.w	r3, r3, #1
 8003764:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003766:	f7fe fc43 	bl	8001ff0 <HAL_GetTick>
 800376a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800376c:	e00a      	b.n	8003784 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800376e:	f7fe fc3f 	bl	8001ff0 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d903      	bls.n	8003784 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e15c      	b.n	8003a3a <HAL_RCC_OscConfig+0x53a>
 8003780:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003784:	4b91      	ldr	r3, [pc, #580]	@ (80039cc <HAL_RCC_OscConfig+0x4cc>)
 8003786:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1ee      	bne.n	800376e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 80a4 	beq.w	80038e6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800379e:	4b8b      	ldr	r3, [pc, #556]	@ (80039cc <HAL_RCC_OscConfig+0x4cc>)
 80037a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10d      	bne.n	80037c6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80037aa:	4b88      	ldr	r3, [pc, #544]	@ (80039cc <HAL_RCC_OscConfig+0x4cc>)
 80037ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ae:	4a87      	ldr	r2, [pc, #540]	@ (80039cc <HAL_RCC_OscConfig+0x4cc>)
 80037b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80037b6:	4b85      	ldr	r3, [pc, #532]	@ (80039cc <HAL_RCC_OscConfig+0x4cc>)
 80037b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037be:	60bb      	str	r3, [r7, #8]
 80037c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037c2:	2301      	movs	r3, #1
 80037c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037c6:	4b82      	ldr	r3, [pc, #520]	@ (80039d0 <HAL_RCC_OscConfig+0x4d0>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d118      	bne.n	8003804 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80037d2:	4b7f      	ldr	r3, [pc, #508]	@ (80039d0 <HAL_RCC_OscConfig+0x4d0>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a7e      	ldr	r2, [pc, #504]	@ (80039d0 <HAL_RCC_OscConfig+0x4d0>)
 80037d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037de:	f7fe fc07 	bl	8001ff0 <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037e4:	e008      	b.n	80037f8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037e6:	f7fe fc03 	bl	8001ff0 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b64      	cmp	r3, #100	@ 0x64
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e120      	b.n	8003a3a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037f8:	4b75      	ldr	r3, [pc, #468]	@ (80039d0 <HAL_RCC_OscConfig+0x4d0>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003800:	2b00      	cmp	r3, #0
 8003802:	d0f0      	beq.n	80037e6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d106      	bne.n	800381a <HAL_RCC_OscConfig+0x31a>
 800380c:	4b6f      	ldr	r3, [pc, #444]	@ (80039cc <HAL_RCC_OscConfig+0x4cc>)
 800380e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003810:	4a6e      	ldr	r2, [pc, #440]	@ (80039cc <HAL_RCC_OscConfig+0x4cc>)
 8003812:	f043 0301 	orr.w	r3, r3, #1
 8003816:	6713      	str	r3, [r2, #112]	@ 0x70
 8003818:	e02d      	b.n	8003876 <HAL_RCC_OscConfig+0x376>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10c      	bne.n	800383c <HAL_RCC_OscConfig+0x33c>
 8003822:	4b6a      	ldr	r3, [pc, #424]	@ (80039cc <HAL_RCC_OscConfig+0x4cc>)
 8003824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003826:	4a69      	ldr	r2, [pc, #420]	@ (80039cc <HAL_RCC_OscConfig+0x4cc>)
 8003828:	f023 0301 	bic.w	r3, r3, #1
 800382c:	6713      	str	r3, [r2, #112]	@ 0x70
 800382e:	4b67      	ldr	r3, [pc, #412]	@ (80039cc <HAL_RCC_OscConfig+0x4cc>)
 8003830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003832:	4a66      	ldr	r2, [pc, #408]	@ (80039cc <HAL_RCC_OscConfig+0x4cc>)
 8003834:	f023 0304 	bic.w	r3, r3, #4
 8003838:	6713      	str	r3, [r2, #112]	@ 0x70
 800383a:	e01c      	b.n	8003876 <HAL_RCC_OscConfig+0x376>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	2b05      	cmp	r3, #5
 8003842:	d10c      	bne.n	800385e <HAL_RCC_OscConfig+0x35e>
 8003844:	4b61      	ldr	r3, [pc, #388]	@ (80039cc <HAL_RCC_OscConfig+0x4cc>)
 8003846:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003848:	4a60      	ldr	r2, [pc, #384]	@ (80039cc <HAL_RCC_OscConfig+0x4cc>)
 800384a:	f043 0304 	orr.w	r3, r3, #4
 800384e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003850:	4b5e      	ldr	r3, [pc, #376]	@ (80039cc <HAL_RCC_OscConfig+0x4cc>)
 8003852:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003854:	4a5d      	ldr	r2, [pc, #372]	@ (80039cc <HAL_RCC_OscConfig+0x4cc>)
 8003856:	f043 0301 	orr.w	r3, r3, #1
 800385a:	6713      	str	r3, [r2, #112]	@ 0x70
 800385c:	e00b      	b.n	8003876 <HAL_RCC_OscConfig+0x376>
 800385e:	4b5b      	ldr	r3, [pc, #364]	@ (80039cc <HAL_RCC_OscConfig+0x4cc>)
 8003860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003862:	4a5a      	ldr	r2, [pc, #360]	@ (80039cc <HAL_RCC_OscConfig+0x4cc>)
 8003864:	f023 0301 	bic.w	r3, r3, #1
 8003868:	6713      	str	r3, [r2, #112]	@ 0x70
 800386a:	4b58      	ldr	r3, [pc, #352]	@ (80039cc <HAL_RCC_OscConfig+0x4cc>)
 800386c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800386e:	4a57      	ldr	r2, [pc, #348]	@ (80039cc <HAL_RCC_OscConfig+0x4cc>)
 8003870:	f023 0304 	bic.w	r3, r3, #4
 8003874:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d015      	beq.n	80038aa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800387e:	f7fe fbb7 	bl	8001ff0 <HAL_GetTick>
 8003882:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003884:	e00a      	b.n	800389c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003886:	f7fe fbb3 	bl	8001ff0 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003894:	4293      	cmp	r3, r2
 8003896:	d901      	bls.n	800389c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e0ce      	b.n	8003a3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800389c:	4b4b      	ldr	r3, [pc, #300]	@ (80039cc <HAL_RCC_OscConfig+0x4cc>)
 800389e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d0ee      	beq.n	8003886 <HAL_RCC_OscConfig+0x386>
 80038a8:	e014      	b.n	80038d4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038aa:	f7fe fba1 	bl	8001ff0 <HAL_GetTick>
 80038ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038b0:	e00a      	b.n	80038c8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038b2:	f7fe fb9d 	bl	8001ff0 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e0b8      	b.n	8003a3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038c8:	4b40      	ldr	r3, [pc, #256]	@ (80039cc <HAL_RCC_OscConfig+0x4cc>)
 80038ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1ee      	bne.n	80038b2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80038d4:	7dfb      	ldrb	r3, [r7, #23]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d105      	bne.n	80038e6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038da:	4b3c      	ldr	r3, [pc, #240]	@ (80039cc <HAL_RCC_OscConfig+0x4cc>)
 80038dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038de:	4a3b      	ldr	r2, [pc, #236]	@ (80039cc <HAL_RCC_OscConfig+0x4cc>)
 80038e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038e4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f000 80a4 	beq.w	8003a38 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038f0:	4b36      	ldr	r3, [pc, #216]	@ (80039cc <HAL_RCC_OscConfig+0x4cc>)
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f003 030c 	and.w	r3, r3, #12
 80038f8:	2b08      	cmp	r3, #8
 80038fa:	d06b      	beq.n	80039d4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	2b02      	cmp	r3, #2
 8003902:	d149      	bne.n	8003998 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003904:	4b31      	ldr	r3, [pc, #196]	@ (80039cc <HAL_RCC_OscConfig+0x4cc>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a30      	ldr	r2, [pc, #192]	@ (80039cc <HAL_RCC_OscConfig+0x4cc>)
 800390a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800390e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003910:	f7fe fb6e 	bl	8001ff0 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003918:	f7fe fb6a 	bl	8001ff0 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e087      	b.n	8003a3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800392a:	4b28      	ldr	r3, [pc, #160]	@ (80039cc <HAL_RCC_OscConfig+0x4cc>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1f0      	bne.n	8003918 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	69da      	ldr	r2, [r3, #28]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	431a      	orrs	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003944:	019b      	lsls	r3, r3, #6
 8003946:	431a      	orrs	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800394c:	085b      	lsrs	r3, r3, #1
 800394e:	3b01      	subs	r3, #1
 8003950:	041b      	lsls	r3, r3, #16
 8003952:	431a      	orrs	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003958:	061b      	lsls	r3, r3, #24
 800395a:	4313      	orrs	r3, r2
 800395c:	4a1b      	ldr	r2, [pc, #108]	@ (80039cc <HAL_RCC_OscConfig+0x4cc>)
 800395e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003962:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003964:	4b19      	ldr	r3, [pc, #100]	@ (80039cc <HAL_RCC_OscConfig+0x4cc>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a18      	ldr	r2, [pc, #96]	@ (80039cc <HAL_RCC_OscConfig+0x4cc>)
 800396a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800396e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003970:	f7fe fb3e 	bl	8001ff0 <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003976:	e008      	b.n	800398a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003978:	f7fe fb3a 	bl	8001ff0 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e057      	b.n	8003a3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800398a:	4b10      	ldr	r3, [pc, #64]	@ (80039cc <HAL_RCC_OscConfig+0x4cc>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0f0      	beq.n	8003978 <HAL_RCC_OscConfig+0x478>
 8003996:	e04f      	b.n	8003a38 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003998:	4b0c      	ldr	r3, [pc, #48]	@ (80039cc <HAL_RCC_OscConfig+0x4cc>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a0b      	ldr	r2, [pc, #44]	@ (80039cc <HAL_RCC_OscConfig+0x4cc>)
 800399e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a4:	f7fe fb24 	bl	8001ff0 <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039aa:	e008      	b.n	80039be <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ac:	f7fe fb20 	bl	8001ff0 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e03d      	b.n	8003a3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039be:	4b03      	ldr	r3, [pc, #12]	@ (80039cc <HAL_RCC_OscConfig+0x4cc>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1f0      	bne.n	80039ac <HAL_RCC_OscConfig+0x4ac>
 80039ca:	e035      	b.n	8003a38 <HAL_RCC_OscConfig+0x538>
 80039cc:	40023800 	.word	0x40023800
 80039d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80039d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003a44 <HAL_RCC_OscConfig+0x544>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d028      	beq.n	8003a34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d121      	bne.n	8003a34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d11a      	bne.n	8003a34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a04:	4013      	ands	r3, r2
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a0a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d111      	bne.n	8003a34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a1a:	085b      	lsrs	r3, r3, #1
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d107      	bne.n	8003a34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a2e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d001      	beq.n	8003a38 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e000      	b.n	8003a3a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3718      	adds	r7, #24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	40023800 	.word	0x40023800

08003a48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003a52:	2300      	movs	r3, #0
 8003a54:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d101      	bne.n	8003a60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e0d0      	b.n	8003c02 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a60:	4b6a      	ldr	r3, [pc, #424]	@ (8003c0c <HAL_RCC_ClockConfig+0x1c4>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 030f 	and.w	r3, r3, #15
 8003a68:	683a      	ldr	r2, [r7, #0]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d910      	bls.n	8003a90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a6e:	4b67      	ldr	r3, [pc, #412]	@ (8003c0c <HAL_RCC_ClockConfig+0x1c4>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f023 020f 	bic.w	r2, r3, #15
 8003a76:	4965      	ldr	r1, [pc, #404]	@ (8003c0c <HAL_RCC_ClockConfig+0x1c4>)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a7e:	4b63      	ldr	r3, [pc, #396]	@ (8003c0c <HAL_RCC_ClockConfig+0x1c4>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d001      	beq.n	8003a90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e0b8      	b.n	8003c02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d020      	beq.n	8003ade <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0304 	and.w	r3, r3, #4
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d005      	beq.n	8003ab4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003aa8:	4b59      	ldr	r3, [pc, #356]	@ (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	4a58      	ldr	r2, [pc, #352]	@ (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003aae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003ab2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0308 	and.w	r3, r3, #8
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d005      	beq.n	8003acc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ac0:	4b53      	ldr	r3, [pc, #332]	@ (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	4a52      	ldr	r2, [pc, #328]	@ (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003ac6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003aca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003acc:	4b50      	ldr	r3, [pc, #320]	@ (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	494d      	ldr	r1, [pc, #308]	@ (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d040      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d107      	bne.n	8003b02 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003af2:	4b47      	ldr	r3, [pc, #284]	@ (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d115      	bne.n	8003b2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e07f      	b.n	8003c02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d107      	bne.n	8003b1a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b0a:	4b41      	ldr	r3, [pc, #260]	@ (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d109      	bne.n	8003b2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e073      	b.n	8003c02 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b1a:	4b3d      	ldr	r3, [pc, #244]	@ (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e06b      	b.n	8003c02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b2a:	4b39      	ldr	r3, [pc, #228]	@ (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f023 0203 	bic.w	r2, r3, #3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	4936      	ldr	r1, [pc, #216]	@ (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b3c:	f7fe fa58 	bl	8001ff0 <HAL_GetTick>
 8003b40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b42:	e00a      	b.n	8003b5a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b44:	f7fe fa54 	bl	8001ff0 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e053      	b.n	8003c02 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b5a:	4b2d      	ldr	r3, [pc, #180]	@ (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 020c 	and.w	r2, r3, #12
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d1eb      	bne.n	8003b44 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b6c:	4b27      	ldr	r3, [pc, #156]	@ (8003c0c <HAL_RCC_ClockConfig+0x1c4>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 030f 	and.w	r3, r3, #15
 8003b74:	683a      	ldr	r2, [r7, #0]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d210      	bcs.n	8003b9c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b7a:	4b24      	ldr	r3, [pc, #144]	@ (8003c0c <HAL_RCC_ClockConfig+0x1c4>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f023 020f 	bic.w	r2, r3, #15
 8003b82:	4922      	ldr	r1, [pc, #136]	@ (8003c0c <HAL_RCC_ClockConfig+0x1c4>)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b8a:	4b20      	ldr	r3, [pc, #128]	@ (8003c0c <HAL_RCC_ClockConfig+0x1c4>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 030f 	and.w	r3, r3, #15
 8003b92:	683a      	ldr	r2, [r7, #0]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d001      	beq.n	8003b9c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e032      	b.n	8003c02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0304 	and.w	r3, r3, #4
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d008      	beq.n	8003bba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ba8:	4b19      	ldr	r3, [pc, #100]	@ (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	4916      	ldr	r1, [pc, #88]	@ (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0308 	and.w	r3, r3, #8
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d009      	beq.n	8003bda <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003bc6:	4b12      	ldr	r3, [pc, #72]	@ (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	490e      	ldr	r1, [pc, #56]	@ (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bda:	f000 f821 	bl	8003c20 <HAL_RCC_GetSysClockFreq>
 8003bde:	4602      	mov	r2, r0
 8003be0:	4b0b      	ldr	r3, [pc, #44]	@ (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	091b      	lsrs	r3, r3, #4
 8003be6:	f003 030f 	and.w	r3, r3, #15
 8003bea:	490a      	ldr	r1, [pc, #40]	@ (8003c14 <HAL_RCC_ClockConfig+0x1cc>)
 8003bec:	5ccb      	ldrb	r3, [r1, r3]
 8003bee:	fa22 f303 	lsr.w	r3, r2, r3
 8003bf2:	4a09      	ldr	r2, [pc, #36]	@ (8003c18 <HAL_RCC_ClockConfig+0x1d0>)
 8003bf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003bf6:	4b09      	ldr	r3, [pc, #36]	@ (8003c1c <HAL_RCC_ClockConfig+0x1d4>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7fe f9b4 	bl	8001f68 <HAL_InitTick>

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	40023c00 	.word	0x40023c00
 8003c10:	40023800 	.word	0x40023800
 8003c14:	080060a0 	.word	0x080060a0
 8003c18:	20000004 	.word	0x20000004
 8003c1c:	20000008 	.word	0x20000008

08003c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c24:	b090      	sub	sp, #64	@ 0x40
 8003c26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c30:	2300      	movs	r3, #0
 8003c32:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8003c34:	2300      	movs	r3, #0
 8003c36:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c38:	4b59      	ldr	r3, [pc, #356]	@ (8003da0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f003 030c 	and.w	r3, r3, #12
 8003c40:	2b08      	cmp	r3, #8
 8003c42:	d00d      	beq.n	8003c60 <HAL_RCC_GetSysClockFreq+0x40>
 8003c44:	2b08      	cmp	r3, #8
 8003c46:	f200 80a1 	bhi.w	8003d8c <HAL_RCC_GetSysClockFreq+0x16c>
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d002      	beq.n	8003c54 <HAL_RCC_GetSysClockFreq+0x34>
 8003c4e:	2b04      	cmp	r3, #4
 8003c50:	d003      	beq.n	8003c5a <HAL_RCC_GetSysClockFreq+0x3a>
 8003c52:	e09b      	b.n	8003d8c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c54:	4b53      	ldr	r3, [pc, #332]	@ (8003da4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c56:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c58:	e09b      	b.n	8003d92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c5a:	4b53      	ldr	r3, [pc, #332]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c5c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c5e:	e098      	b.n	8003d92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c60:	4b4f      	ldr	r3, [pc, #316]	@ (8003da0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c68:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003c6a:	4b4d      	ldr	r3, [pc, #308]	@ (8003da0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d028      	beq.n	8003cc8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c76:	4b4a      	ldr	r3, [pc, #296]	@ (8003da0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	099b      	lsrs	r3, r3, #6
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	623b      	str	r3, [r7, #32]
 8003c80:	627a      	str	r2, [r7, #36]	@ 0x24
 8003c82:	6a3b      	ldr	r3, [r7, #32]
 8003c84:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c88:	2100      	movs	r1, #0
 8003c8a:	4b47      	ldr	r3, [pc, #284]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c8c:	fb03 f201 	mul.w	r2, r3, r1
 8003c90:	2300      	movs	r3, #0
 8003c92:	fb00 f303 	mul.w	r3, r0, r3
 8003c96:	4413      	add	r3, r2
 8003c98:	4a43      	ldr	r2, [pc, #268]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c9a:	fba0 1202 	umull	r1, r2, r0, r2
 8003c9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ca0:	460a      	mov	r2, r1
 8003ca2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003ca4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ca6:	4413      	add	r3, r2
 8003ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003caa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cac:	2200      	movs	r2, #0
 8003cae:	61bb      	str	r3, [r7, #24]
 8003cb0:	61fa      	str	r2, [r7, #28]
 8003cb2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cb6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003cba:	f7fc fe37 	bl	800092c <__aeabi_uldivmod>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cc6:	e053      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cc8:	4b35      	ldr	r3, [pc, #212]	@ (8003da0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	099b      	lsrs	r3, r3, #6
 8003cce:	2200      	movs	r2, #0
 8003cd0:	613b      	str	r3, [r7, #16]
 8003cd2:	617a      	str	r2, [r7, #20]
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003cda:	f04f 0b00 	mov.w	fp, #0
 8003cde:	4652      	mov	r2, sl
 8003ce0:	465b      	mov	r3, fp
 8003ce2:	f04f 0000 	mov.w	r0, #0
 8003ce6:	f04f 0100 	mov.w	r1, #0
 8003cea:	0159      	lsls	r1, r3, #5
 8003cec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cf0:	0150      	lsls	r0, r2, #5
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	ebb2 080a 	subs.w	r8, r2, sl
 8003cfa:	eb63 090b 	sbc.w	r9, r3, fp
 8003cfe:	f04f 0200 	mov.w	r2, #0
 8003d02:	f04f 0300 	mov.w	r3, #0
 8003d06:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003d0a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003d0e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003d12:	ebb2 0408 	subs.w	r4, r2, r8
 8003d16:	eb63 0509 	sbc.w	r5, r3, r9
 8003d1a:	f04f 0200 	mov.w	r2, #0
 8003d1e:	f04f 0300 	mov.w	r3, #0
 8003d22:	00eb      	lsls	r3, r5, #3
 8003d24:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d28:	00e2      	lsls	r2, r4, #3
 8003d2a:	4614      	mov	r4, r2
 8003d2c:	461d      	mov	r5, r3
 8003d2e:	eb14 030a 	adds.w	r3, r4, sl
 8003d32:	603b      	str	r3, [r7, #0]
 8003d34:	eb45 030b 	adc.w	r3, r5, fp
 8003d38:	607b      	str	r3, [r7, #4]
 8003d3a:	f04f 0200 	mov.w	r2, #0
 8003d3e:	f04f 0300 	mov.w	r3, #0
 8003d42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d46:	4629      	mov	r1, r5
 8003d48:	028b      	lsls	r3, r1, #10
 8003d4a:	4621      	mov	r1, r4
 8003d4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d50:	4621      	mov	r1, r4
 8003d52:	028a      	lsls	r2, r1, #10
 8003d54:	4610      	mov	r0, r2
 8003d56:	4619      	mov	r1, r3
 8003d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	60bb      	str	r3, [r7, #8]
 8003d5e:	60fa      	str	r2, [r7, #12]
 8003d60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d64:	f7fc fde2 	bl	800092c <__aeabi_uldivmod>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003d70:	4b0b      	ldr	r3, [pc, #44]	@ (8003da0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	0c1b      	lsrs	r3, r3, #16
 8003d76:	f003 0303 	and.w	r3, r3, #3
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	005b      	lsls	r3, r3, #1
 8003d7e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003d80:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d88:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003d8a:	e002      	b.n	8003d92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d8c:	4b05      	ldr	r3, [pc, #20]	@ (8003da4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d8e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003d90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3740      	adds	r7, #64	@ 0x40
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d9e:	bf00      	nop
 8003da0:	40023800 	.word	0x40023800
 8003da4:	00f42400 	.word	0x00f42400
 8003da8:	017d7840 	.word	0x017d7840

08003dac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003db0:	4b03      	ldr	r3, [pc, #12]	@ (8003dc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003db2:	681b      	ldr	r3, [r3, #0]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	20000004 	.word	0x20000004

08003dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003dc8:	f7ff fff0 	bl	8003dac <HAL_RCC_GetHCLKFreq>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	4b05      	ldr	r3, [pc, #20]	@ (8003de4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	0a9b      	lsrs	r3, r3, #10
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	4903      	ldr	r1, [pc, #12]	@ (8003de8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dda:	5ccb      	ldrb	r3, [r1, r3]
 8003ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	40023800 	.word	0x40023800
 8003de8:	080060b0 	.word	0x080060b0

08003dec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003df0:	f7ff ffdc 	bl	8003dac <HAL_RCC_GetHCLKFreq>
 8003df4:	4602      	mov	r2, r0
 8003df6:	4b05      	ldr	r3, [pc, #20]	@ (8003e0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	0b5b      	lsrs	r3, r3, #13
 8003dfc:	f003 0307 	and.w	r3, r3, #7
 8003e00:	4903      	ldr	r1, [pc, #12]	@ (8003e10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e02:	5ccb      	ldrb	r3, [r1, r3]
 8003e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	080060b0 	.word	0x080060b0

08003e14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b088      	sub	sp, #32
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003e20:	2300      	movs	r3, #0
 8003e22:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003e24:	2300      	movs	r3, #0
 8003e26:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d012      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e3c:	4b69      	ldr	r3, [pc, #420]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	4a68      	ldr	r2, [pc, #416]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e42:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003e46:	6093      	str	r3, [r2, #8]
 8003e48:	4b66      	ldr	r3, [pc, #408]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e4a:	689a      	ldr	r2, [r3, #8]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e50:	4964      	ldr	r1, [pc, #400]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d017      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e6e:	4b5d      	ldr	r3, [pc, #372]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e74:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e7c:	4959      	ldr	r1, [pc, #356]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e88:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e8c:	d101      	bne.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d017      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003eaa:	4b4e      	ldr	r3, [pc, #312]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003eb0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb8:	494a      	ldr	r1, [pc, #296]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ec8:	d101      	bne.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0320 	and.w	r3, r3, #32
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 808b 	beq.w	800400e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ef8:	4b3a      	ldr	r3, [pc, #232]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efc:	4a39      	ldr	r2, [pc, #228]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003efe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f02:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f04:	4b37      	ldr	r3, [pc, #220]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f0c:	60bb      	str	r3, [r7, #8]
 8003f0e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003f10:	4b35      	ldr	r3, [pc, #212]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a34      	ldr	r2, [pc, #208]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f1c:	f7fe f868 	bl	8001ff0 <HAL_GetTick>
 8003f20:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f22:	e008      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f24:	f7fe f864 	bl	8001ff0 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b64      	cmp	r3, #100	@ 0x64
 8003f30:	d901      	bls.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e357      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f36:	4b2c      	ldr	r3, [pc, #176]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d0f0      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f42:	4b28      	ldr	r3, [pc, #160]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f4a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d035      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d02e      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f60:	4b20      	ldr	r3, [pc, #128]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f68:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f6e:	4a1d      	ldr	r2, [pc, #116]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f74:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f76:	4b1b      	ldr	r3, [pc, #108]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f7a:	4a1a      	ldr	r2, [pc, #104]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f80:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003f82:	4a18      	ldr	r2, [pc, #96]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f88:	4b16      	ldr	r3, [pc, #88]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d114      	bne.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f94:	f7fe f82c 	bl	8001ff0 <HAL_GetTick>
 8003f98:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f9a:	e00a      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f9c:	f7fe f828 	bl	8001ff0 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e319      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d0ee      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fca:	d111      	bne.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003fcc:	4b05      	ldr	r3, [pc, #20]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003fd8:	4b04      	ldr	r3, [pc, #16]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003fda:	400b      	ands	r3, r1
 8003fdc:	4901      	ldr	r1, [pc, #4]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	608b      	str	r3, [r1, #8]
 8003fe2:	e00b      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003fe4:	40023800 	.word	0x40023800
 8003fe8:	40007000 	.word	0x40007000
 8003fec:	0ffffcff 	.word	0x0ffffcff
 8003ff0:	4baa      	ldr	r3, [pc, #680]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	4aa9      	ldr	r2, [pc, #676]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ff6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003ffa:	6093      	str	r3, [r2, #8]
 8003ffc:	4ba7      	ldr	r3, [pc, #668]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ffe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004004:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004008:	49a4      	ldr	r1, [pc, #656]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800400a:	4313      	orrs	r3, r2
 800400c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0310 	and.w	r3, r3, #16
 8004016:	2b00      	cmp	r3, #0
 8004018:	d010      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800401a:	4ba0      	ldr	r3, [pc, #640]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800401c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004020:	4a9e      	ldr	r2, [pc, #632]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004022:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004026:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800402a:	4b9c      	ldr	r3, [pc, #624]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800402c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004034:	4999      	ldr	r1, [pc, #612]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004036:	4313      	orrs	r3, r2
 8004038:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00a      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004048:	4b94      	ldr	r3, [pc, #592]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800404a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800404e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004056:	4991      	ldr	r1, [pc, #580]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004058:	4313      	orrs	r3, r2
 800405a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00a      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800406a:	4b8c      	ldr	r3, [pc, #560]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800406c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004070:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004078:	4988      	ldr	r1, [pc, #544]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800407a:	4313      	orrs	r3, r2
 800407c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00a      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800408c:	4b83      	ldr	r3, [pc, #524]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800408e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004092:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800409a:	4980      	ldr	r1, [pc, #512]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800409c:	4313      	orrs	r3, r2
 800409e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00a      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040ae:	4b7b      	ldr	r3, [pc, #492]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040b4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040bc:	4977      	ldr	r1, [pc, #476]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00a      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040d0:	4b72      	ldr	r3, [pc, #456]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040d6:	f023 0203 	bic.w	r2, r3, #3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040de:	496f      	ldr	r1, [pc, #444]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00a      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040f2:	4b6a      	ldr	r3, [pc, #424]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040f8:	f023 020c 	bic.w	r2, r3, #12
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004100:	4966      	ldr	r1, [pc, #408]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004102:	4313      	orrs	r3, r2
 8004104:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00a      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004114:	4b61      	ldr	r3, [pc, #388]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800411a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004122:	495e      	ldr	r1, [pc, #376]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004124:	4313      	orrs	r3, r2
 8004126:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00a      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004136:	4b59      	ldr	r3, [pc, #356]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004138:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800413c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004144:	4955      	ldr	r1, [pc, #340]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004146:	4313      	orrs	r3, r2
 8004148:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00a      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004158:	4b50      	ldr	r3, [pc, #320]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800415a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800415e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004166:	494d      	ldr	r1, [pc, #308]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004168:	4313      	orrs	r3, r2
 800416a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00a      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800417a:	4b48      	ldr	r3, [pc, #288]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800417c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004180:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004188:	4944      	ldr	r1, [pc, #272]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800418a:	4313      	orrs	r3, r2
 800418c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00a      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800419c:	4b3f      	ldr	r3, [pc, #252]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800419e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041a2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041aa:	493c      	ldr	r1, [pc, #240]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00a      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80041be:	4b37      	ldr	r3, [pc, #220]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041c4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041cc:	4933      	ldr	r1, [pc, #204]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00a      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80041e0:	4b2e      	ldr	r3, [pc, #184]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041e6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041ee:	492b      	ldr	r1, [pc, #172]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d011      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004202:	4b26      	ldr	r3, [pc, #152]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004204:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004208:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004210:	4922      	ldr	r1, [pc, #136]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004212:	4313      	orrs	r3, r2
 8004214:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800421c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004220:	d101      	bne.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004222:	2301      	movs	r3, #1
 8004224:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0308 	and.w	r3, r3, #8
 800422e:	2b00      	cmp	r3, #0
 8004230:	d001      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004232:	2301      	movs	r3, #1
 8004234:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00a      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004242:	4b16      	ldr	r3, [pc, #88]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004244:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004248:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004250:	4912      	ldr	r1, [pc, #72]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004252:	4313      	orrs	r3, r2
 8004254:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00b      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004264:	4b0d      	ldr	r3, [pc, #52]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004266:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800426a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004274:	4909      	ldr	r1, [pc, #36]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004276:	4313      	orrs	r3, r2
 8004278:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d006      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	f000 80d9 	beq.w	8004442 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004290:	4b02      	ldr	r3, [pc, #8]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a01      	ldr	r2, [pc, #4]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004296:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800429a:	e001      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800429c:	40023800 	.word	0x40023800
 80042a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042a2:	f7fd fea5 	bl	8001ff0 <HAL_GetTick>
 80042a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042a8:	e008      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80042aa:	f7fd fea1 	bl	8001ff0 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	2b64      	cmp	r3, #100	@ 0x64
 80042b6:	d901      	bls.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e194      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042bc:	4b6c      	ldr	r3, [pc, #432]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1f0      	bne.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d021      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d11d      	bne.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80042dc:	4b64      	ldr	r3, [pc, #400]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042e2:	0c1b      	lsrs	r3, r3, #16
 80042e4:	f003 0303 	and.w	r3, r3, #3
 80042e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80042ea:	4b61      	ldr	r3, [pc, #388]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042f0:	0e1b      	lsrs	r3, r3, #24
 80042f2:	f003 030f 	and.w	r3, r3, #15
 80042f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	019a      	lsls	r2, r3, #6
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	041b      	lsls	r3, r3, #16
 8004302:	431a      	orrs	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	061b      	lsls	r3, r3, #24
 8004308:	431a      	orrs	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	071b      	lsls	r3, r3, #28
 8004310:	4957      	ldr	r1, [pc, #348]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004312:	4313      	orrs	r3, r2
 8004314:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d004      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004328:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800432c:	d00a      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004336:	2b00      	cmp	r3, #0
 8004338:	d02e      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004342:	d129      	bne.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004344:	4b4a      	ldr	r3, [pc, #296]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004346:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800434a:	0c1b      	lsrs	r3, r3, #16
 800434c:	f003 0303 	and.w	r3, r3, #3
 8004350:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004352:	4b47      	ldr	r3, [pc, #284]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004354:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004358:	0f1b      	lsrs	r3, r3, #28
 800435a:	f003 0307 	and.w	r3, r3, #7
 800435e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	019a      	lsls	r2, r3, #6
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	041b      	lsls	r3, r3, #16
 800436a:	431a      	orrs	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	061b      	lsls	r3, r3, #24
 8004372:	431a      	orrs	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	071b      	lsls	r3, r3, #28
 8004378:	493d      	ldr	r1, [pc, #244]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800437a:	4313      	orrs	r3, r2
 800437c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004380:	4b3b      	ldr	r3, [pc, #236]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004382:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004386:	f023 021f 	bic.w	r2, r3, #31
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800438e:	3b01      	subs	r3, #1
 8004390:	4937      	ldr	r1, [pc, #220]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004392:	4313      	orrs	r3, r2
 8004394:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d01d      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80043a4:	4b32      	ldr	r3, [pc, #200]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043aa:	0e1b      	lsrs	r3, r3, #24
 80043ac:	f003 030f 	and.w	r3, r3, #15
 80043b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80043b2:	4b2f      	ldr	r3, [pc, #188]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043b8:	0f1b      	lsrs	r3, r3, #28
 80043ba:	f003 0307 	and.w	r3, r3, #7
 80043be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	019a      	lsls	r2, r3, #6
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	041b      	lsls	r3, r3, #16
 80043cc:	431a      	orrs	r2, r3
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	061b      	lsls	r3, r3, #24
 80043d2:	431a      	orrs	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	071b      	lsls	r3, r3, #28
 80043d8:	4925      	ldr	r1, [pc, #148]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d011      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	019a      	lsls	r2, r3, #6
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	041b      	lsls	r3, r3, #16
 80043f8:	431a      	orrs	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	061b      	lsls	r3, r3, #24
 8004400:	431a      	orrs	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	071b      	lsls	r3, r3, #28
 8004408:	4919      	ldr	r1, [pc, #100]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800440a:	4313      	orrs	r3, r2
 800440c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004410:	4b17      	ldr	r3, [pc, #92]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a16      	ldr	r2, [pc, #88]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004416:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800441a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800441c:	f7fd fde8 	bl	8001ff0 <HAL_GetTick>
 8004420:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004422:	e008      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004424:	f7fd fde4 	bl	8001ff0 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b64      	cmp	r3, #100	@ 0x64
 8004430:	d901      	bls.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e0d7      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004436:	4b0e      	ldr	r3, [pc, #56]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d0f0      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	2b01      	cmp	r3, #1
 8004446:	f040 80cd 	bne.w	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800444a:	4b09      	ldr	r3, [pc, #36]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a08      	ldr	r2, [pc, #32]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004450:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004454:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004456:	f7fd fdcb 	bl	8001ff0 <HAL_GetTick>
 800445a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800445c:	e00a      	b.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800445e:	f7fd fdc7 	bl	8001ff0 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b64      	cmp	r3, #100	@ 0x64
 800446a:	d903      	bls.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e0ba      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004470:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004474:	4b5e      	ldr	r3, [pc, #376]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800447c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004480:	d0ed      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d003      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004492:	2b00      	cmp	r3, #0
 8004494:	d009      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d02e      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d12a      	bne.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80044aa:	4b51      	ldr	r3, [pc, #324]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044b0:	0c1b      	lsrs	r3, r3, #16
 80044b2:	f003 0303 	and.w	r3, r3, #3
 80044b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80044b8:	4b4d      	ldr	r3, [pc, #308]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044be:	0f1b      	lsrs	r3, r3, #28
 80044c0:	f003 0307 	and.w	r3, r3, #7
 80044c4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	019a      	lsls	r2, r3, #6
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	041b      	lsls	r3, r3, #16
 80044d0:	431a      	orrs	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	061b      	lsls	r3, r3, #24
 80044d8:	431a      	orrs	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	071b      	lsls	r3, r3, #28
 80044de:	4944      	ldr	r1, [pc, #272]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80044e6:	4b42      	ldr	r3, [pc, #264]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044ec:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f4:	3b01      	subs	r3, #1
 80044f6:	021b      	lsls	r3, r3, #8
 80044f8:	493d      	ldr	r1, [pc, #244]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d022      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004510:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004514:	d11d      	bne.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004516:	4b36      	ldr	r3, [pc, #216]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004518:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800451c:	0e1b      	lsrs	r3, r3, #24
 800451e:	f003 030f 	and.w	r3, r3, #15
 8004522:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004524:	4b32      	ldr	r3, [pc, #200]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800452a:	0f1b      	lsrs	r3, r3, #28
 800452c:	f003 0307 	and.w	r3, r3, #7
 8004530:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	019a      	lsls	r2, r3, #6
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a1b      	ldr	r3, [r3, #32]
 800453c:	041b      	lsls	r3, r3, #16
 800453e:	431a      	orrs	r2, r3
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	061b      	lsls	r3, r3, #24
 8004544:	431a      	orrs	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	071b      	lsls	r3, r3, #28
 800454a:	4929      	ldr	r1, [pc, #164]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800454c:	4313      	orrs	r3, r2
 800454e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0308 	and.w	r3, r3, #8
 800455a:	2b00      	cmp	r3, #0
 800455c:	d028      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800455e:	4b24      	ldr	r3, [pc, #144]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004560:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004564:	0e1b      	lsrs	r3, r3, #24
 8004566:	f003 030f 	and.w	r3, r3, #15
 800456a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800456c:	4b20      	ldr	r3, [pc, #128]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800456e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004572:	0c1b      	lsrs	r3, r3, #16
 8004574:	f003 0303 	and.w	r3, r3, #3
 8004578:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	019a      	lsls	r2, r3, #6
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	041b      	lsls	r3, r3, #16
 8004584:	431a      	orrs	r2, r3
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	061b      	lsls	r3, r3, #24
 800458a:	431a      	orrs	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	69db      	ldr	r3, [r3, #28]
 8004590:	071b      	lsls	r3, r3, #28
 8004592:	4917      	ldr	r1, [pc, #92]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004594:	4313      	orrs	r3, r2
 8004596:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800459a:	4b15      	ldr	r3, [pc, #84]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800459c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045a0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a8:	4911      	ldr	r1, [pc, #68]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80045b0:	4b0f      	ldr	r3, [pc, #60]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a0e      	ldr	r2, [pc, #56]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045bc:	f7fd fd18 	bl	8001ff0 <HAL_GetTick>
 80045c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80045c2:	e008      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80045c4:	f7fd fd14 	bl	8001ff0 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b64      	cmp	r3, #100	@ 0x64
 80045d0:	d901      	bls.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e007      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80045d6:	4b06      	ldr	r3, [pc, #24]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80045de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045e2:	d1ef      	bne.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3720      	adds	r7, #32
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	40023800 	.word	0x40023800

080045f4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d101      	bne.n	8004608 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e08f      	b.n	8004728 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800460e:	b2db      	uxtb	r3, r3
 8004610:	2b00      	cmp	r3, #0
 8004612:	d106      	bne.n	8004622 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f7fd fb55 	bl	8001ccc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2202      	movs	r2, #2
 8004626:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6899      	ldr	r1, [r3, #8]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	4b3e      	ldr	r3, [pc, #248]	@ (8004730 <HAL_TIM_Encoder_Init+0x13c>)
 8004636:	400b      	ands	r3, r1
 8004638:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	3304      	adds	r3, #4
 8004642:	4619      	mov	r1, r3
 8004644:	4610      	mov	r0, r2
 8004646:	f000 f909 	bl	800485c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	6a1b      	ldr	r3, [r3, #32]
 8004660:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	4313      	orrs	r3, r2
 800466a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	4b31      	ldr	r3, [pc, #196]	@ (8004734 <HAL_TIM_Encoder_Init+0x140>)
 8004670:	4013      	ands	r3, r2
 8004672:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	689a      	ldr	r2, [r3, #8]
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	021b      	lsls	r3, r3, #8
 800467e:	4313      	orrs	r3, r2
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	4313      	orrs	r3, r2
 8004684:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	4b2b      	ldr	r3, [pc, #172]	@ (8004738 <HAL_TIM_Encoder_Init+0x144>)
 800468a:	4013      	ands	r3, r2
 800468c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	4b2a      	ldr	r3, [pc, #168]	@ (800473c <HAL_TIM_Encoder_Init+0x148>)
 8004692:	4013      	ands	r3, r2
 8004694:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	68da      	ldr	r2, [r3, #12]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	69db      	ldr	r3, [r3, #28]
 800469e:	021b      	lsls	r3, r3, #8
 80046a0:	4313      	orrs	r3, r2
 80046a2:	693a      	ldr	r2, [r7, #16]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	011a      	lsls	r2, r3, #4
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	031b      	lsls	r3, r3, #12
 80046b4:	4313      	orrs	r3, r2
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80046c2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80046ca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	685a      	ldr	r2, [r3, #4]
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	695b      	ldr	r3, [r3, #20]
 80046d4:	011b      	lsls	r3, r3, #4
 80046d6:	4313      	orrs	r3, r2
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	4313      	orrs	r3, r2
 80046dc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3718      	adds	r7, #24
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	fffebff8 	.word	0xfffebff8
 8004734:	fffffcfc 	.word	0xfffffcfc
 8004738:	fffff3f3 	.word	0xfffff3f3
 800473c:	ffff0f0f 	.word	0xffff0f0f

08004740 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004750:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004758:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004760:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004768:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d110      	bne.n	8004792 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004770:	7bfb      	ldrb	r3, [r7, #15]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d102      	bne.n	800477c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004776:	7b7b      	ldrb	r3, [r7, #13]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d001      	beq.n	8004780 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e069      	b.n	8004854 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2202      	movs	r2, #2
 8004784:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2202      	movs	r2, #2
 800478c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004790:	e031      	b.n	80047f6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b04      	cmp	r3, #4
 8004796:	d110      	bne.n	80047ba <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004798:	7bbb      	ldrb	r3, [r7, #14]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d102      	bne.n	80047a4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800479e:	7b3b      	ldrb	r3, [r7, #12]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d001      	beq.n	80047a8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e055      	b.n	8004854 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2202      	movs	r2, #2
 80047ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2202      	movs	r2, #2
 80047b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80047b8:	e01d      	b.n	80047f6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80047ba:	7bfb      	ldrb	r3, [r7, #15]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d108      	bne.n	80047d2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80047c0:	7bbb      	ldrb	r3, [r7, #14]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d105      	bne.n	80047d2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80047c6:	7b7b      	ldrb	r3, [r7, #13]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d102      	bne.n	80047d2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80047cc:	7b3b      	ldrb	r3, [r7, #12]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d001      	beq.n	80047d6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e03e      	b.n	8004854 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2202      	movs	r2, #2
 80047da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2202      	movs	r2, #2
 80047e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2202      	movs	r2, #2
 80047ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2202      	movs	r2, #2
 80047f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d003      	beq.n	8004804 <HAL_TIM_Encoder_Start+0xc4>
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	2b04      	cmp	r3, #4
 8004800:	d008      	beq.n	8004814 <HAL_TIM_Encoder_Start+0xd4>
 8004802:	e00f      	b.n	8004824 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2201      	movs	r2, #1
 800480a:	2100      	movs	r1, #0
 800480c:	4618      	mov	r0, r3
 800480e:	f000 f8cb 	bl	80049a8 <TIM_CCxChannelCmd>
      break;
 8004812:	e016      	b.n	8004842 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2201      	movs	r2, #1
 800481a:	2104      	movs	r1, #4
 800481c:	4618      	mov	r0, r3
 800481e:	f000 f8c3 	bl	80049a8 <TIM_CCxChannelCmd>
      break;
 8004822:	e00e      	b.n	8004842 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2201      	movs	r2, #1
 800482a:	2100      	movs	r1, #0
 800482c:	4618      	mov	r0, r3
 800482e:	f000 f8bb 	bl	80049a8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2201      	movs	r2, #1
 8004838:	2104      	movs	r1, #4
 800483a:	4618      	mov	r0, r3
 800483c:	f000 f8b4 	bl	80049a8 <TIM_CCxChannelCmd>
      break;
 8004840:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f042 0201 	orr.w	r2, r2, #1
 8004850:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	3710      	adds	r7, #16
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a43      	ldr	r2, [pc, #268]	@ (800497c <TIM_Base_SetConfig+0x120>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d013      	beq.n	800489c <TIM_Base_SetConfig+0x40>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800487a:	d00f      	beq.n	800489c <TIM_Base_SetConfig+0x40>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a40      	ldr	r2, [pc, #256]	@ (8004980 <TIM_Base_SetConfig+0x124>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d00b      	beq.n	800489c <TIM_Base_SetConfig+0x40>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a3f      	ldr	r2, [pc, #252]	@ (8004984 <TIM_Base_SetConfig+0x128>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d007      	beq.n	800489c <TIM_Base_SetConfig+0x40>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a3e      	ldr	r2, [pc, #248]	@ (8004988 <TIM_Base_SetConfig+0x12c>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d003      	beq.n	800489c <TIM_Base_SetConfig+0x40>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a3d      	ldr	r2, [pc, #244]	@ (800498c <TIM_Base_SetConfig+0x130>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d108      	bne.n	80048ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a32      	ldr	r2, [pc, #200]	@ (800497c <TIM_Base_SetConfig+0x120>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d02b      	beq.n	800490e <TIM_Base_SetConfig+0xb2>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048bc:	d027      	beq.n	800490e <TIM_Base_SetConfig+0xb2>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a2f      	ldr	r2, [pc, #188]	@ (8004980 <TIM_Base_SetConfig+0x124>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d023      	beq.n	800490e <TIM_Base_SetConfig+0xb2>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a2e      	ldr	r2, [pc, #184]	@ (8004984 <TIM_Base_SetConfig+0x128>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d01f      	beq.n	800490e <TIM_Base_SetConfig+0xb2>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a2d      	ldr	r2, [pc, #180]	@ (8004988 <TIM_Base_SetConfig+0x12c>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d01b      	beq.n	800490e <TIM_Base_SetConfig+0xb2>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a2c      	ldr	r2, [pc, #176]	@ (800498c <TIM_Base_SetConfig+0x130>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d017      	beq.n	800490e <TIM_Base_SetConfig+0xb2>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a2b      	ldr	r2, [pc, #172]	@ (8004990 <TIM_Base_SetConfig+0x134>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d013      	beq.n	800490e <TIM_Base_SetConfig+0xb2>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a2a      	ldr	r2, [pc, #168]	@ (8004994 <TIM_Base_SetConfig+0x138>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d00f      	beq.n	800490e <TIM_Base_SetConfig+0xb2>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a29      	ldr	r2, [pc, #164]	@ (8004998 <TIM_Base_SetConfig+0x13c>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d00b      	beq.n	800490e <TIM_Base_SetConfig+0xb2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a28      	ldr	r2, [pc, #160]	@ (800499c <TIM_Base_SetConfig+0x140>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d007      	beq.n	800490e <TIM_Base_SetConfig+0xb2>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a27      	ldr	r2, [pc, #156]	@ (80049a0 <TIM_Base_SetConfig+0x144>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d003      	beq.n	800490e <TIM_Base_SetConfig+0xb2>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a26      	ldr	r2, [pc, #152]	@ (80049a4 <TIM_Base_SetConfig+0x148>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d108      	bne.n	8004920 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004914:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	4313      	orrs	r3, r2
 800491e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	4313      	orrs	r3, r2
 800492c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	689a      	ldr	r2, [r3, #8]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a0e      	ldr	r2, [pc, #56]	@ (800497c <TIM_Base_SetConfig+0x120>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d003      	beq.n	800494e <TIM_Base_SetConfig+0xf2>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a10      	ldr	r2, [pc, #64]	@ (800498c <TIM_Base_SetConfig+0x130>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d103      	bne.n	8004956 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	691a      	ldr	r2, [r3, #16]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f043 0204 	orr.w	r2, r3, #4
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2201      	movs	r2, #1
 8004966:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	601a      	str	r2, [r3, #0]
}
 800496e:	bf00      	nop
 8004970:	3714      	adds	r7, #20
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	40010000 	.word	0x40010000
 8004980:	40000400 	.word	0x40000400
 8004984:	40000800 	.word	0x40000800
 8004988:	40000c00 	.word	0x40000c00
 800498c:	40010400 	.word	0x40010400
 8004990:	40014000 	.word	0x40014000
 8004994:	40014400 	.word	0x40014400
 8004998:	40014800 	.word	0x40014800
 800499c:	40001800 	.word	0x40001800
 80049a0:	40001c00 	.word	0x40001c00
 80049a4:	40002000 	.word	0x40002000

080049a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b087      	sub	sp, #28
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	f003 031f 	and.w	r3, r3, #31
 80049ba:	2201      	movs	r2, #1
 80049bc:	fa02 f303 	lsl.w	r3, r2, r3
 80049c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6a1a      	ldr	r2, [r3, #32]
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	43db      	mvns	r3, r3
 80049ca:	401a      	ands	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6a1a      	ldr	r2, [r3, #32]
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	f003 031f 	and.w	r3, r3, #31
 80049da:	6879      	ldr	r1, [r7, #4]
 80049dc:	fa01 f303 	lsl.w	r3, r1, r3
 80049e0:	431a      	orrs	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	621a      	str	r2, [r3, #32]
}
 80049e6:	bf00      	nop
 80049e8:	371c      	adds	r7, #28
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
	...

080049f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d101      	bne.n	8004a0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a08:	2302      	movs	r3, #2
 8004a0a:	e06d      	b.n	8004ae8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2202      	movs	r2, #2
 8004a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a30      	ldr	r2, [pc, #192]	@ (8004af4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d004      	beq.n	8004a40 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a2f      	ldr	r2, [pc, #188]	@ (8004af8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d108      	bne.n	8004a52 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004a46:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a58:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a20      	ldr	r2, [pc, #128]	@ (8004af4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d022      	beq.n	8004abc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a7e:	d01d      	beq.n	8004abc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a1d      	ldr	r2, [pc, #116]	@ (8004afc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d018      	beq.n	8004abc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a1c      	ldr	r2, [pc, #112]	@ (8004b00 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d013      	beq.n	8004abc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a1a      	ldr	r2, [pc, #104]	@ (8004b04 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d00e      	beq.n	8004abc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a15      	ldr	r2, [pc, #84]	@ (8004af8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d009      	beq.n	8004abc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a16      	ldr	r2, [pc, #88]	@ (8004b08 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d004      	beq.n	8004abc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a15      	ldr	r2, [pc, #84]	@ (8004b0c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d10c      	bne.n	8004ad6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ac2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3714      	adds	r7, #20
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr
 8004af4:	40010000 	.word	0x40010000
 8004af8:	40010400 	.word	0x40010400
 8004afc:	40000400 	.word	0x40000400
 8004b00:	40000800 	.word	0x40000800
 8004b04:	40000c00 	.word	0x40000c00
 8004b08:	40014000 	.word	0x40014000
 8004b0c:	40001800 	.word	0x40001800

08004b10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e040      	b.n	8004ba4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d106      	bne.n	8004b38 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f7fd f90c 	bl	8001d50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2224      	movs	r2, #36	@ 0x24
 8004b3c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f022 0201 	bic.w	r2, r2, #1
 8004b4c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d002      	beq.n	8004b5c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 fb16 	bl	8005188 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 f8af 	bl	8004cc0 <UART_SetConfig>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d101      	bne.n	8004b6c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e01b      	b.n	8004ba4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685a      	ldr	r2, [r3, #4]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689a      	ldr	r2, [r3, #8]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f042 0201 	orr.w	r2, r2, #1
 8004b9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 fb95 	bl	80052cc <UART_CheckIdleState>
 8004ba2:	4603      	mov	r3, r0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3708      	adds	r7, #8
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b08a      	sub	sp, #40	@ 0x28
 8004bb0:	af02      	add	r7, sp, #8
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	603b      	str	r3, [r7, #0]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bc0:	2b20      	cmp	r3, #32
 8004bc2:	d177      	bne.n	8004cb4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d002      	beq.n	8004bd0 <HAL_UART_Transmit+0x24>
 8004bca:	88fb      	ldrh	r3, [r7, #6]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d101      	bne.n	8004bd4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e070      	b.n	8004cb6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2221      	movs	r2, #33	@ 0x21
 8004be0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004be2:	f7fd fa05 	bl	8001ff0 <HAL_GetTick>
 8004be6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	88fa      	ldrh	r2, [r7, #6]
 8004bec:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	88fa      	ldrh	r2, [r7, #6]
 8004bf4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c00:	d108      	bne.n	8004c14 <HAL_UART_Transmit+0x68>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d104      	bne.n	8004c14 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	61bb      	str	r3, [r7, #24]
 8004c12:	e003      	b.n	8004c1c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c1c:	e02f      	b.n	8004c7e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	9300      	str	r3, [sp, #0]
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	2200      	movs	r2, #0
 8004c26:	2180      	movs	r1, #128	@ 0x80
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f000 fba6 	bl	800537a <UART_WaitOnFlagUntilTimeout>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d004      	beq.n	8004c3e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2220      	movs	r2, #32
 8004c38:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e03b      	b.n	8004cb6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d10b      	bne.n	8004c5c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	881b      	ldrh	r3, [r3, #0]
 8004c48:	461a      	mov	r2, r3
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c52:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	3302      	adds	r3, #2
 8004c58:	61bb      	str	r3, [r7, #24]
 8004c5a:	e007      	b.n	8004c6c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	781a      	ldrb	r2, [r3, #0]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	3301      	adds	r3, #1
 8004c6a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	3b01      	subs	r3, #1
 8004c76:	b29a      	uxth	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1c9      	bne.n	8004c1e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	9300      	str	r3, [sp, #0]
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	2200      	movs	r2, #0
 8004c92:	2140      	movs	r1, #64	@ 0x40
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f000 fb70 	bl	800537a <UART_WaitOnFlagUntilTimeout>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d004      	beq.n	8004caa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e005      	b.n	8004cb6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2220      	movs	r2, #32
 8004cae:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	e000      	b.n	8004cb6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004cb4:	2302      	movs	r3, #2
  }
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3720      	adds	r7, #32
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
	...

08004cc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b088      	sub	sp, #32
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689a      	ldr	r2, [r3, #8]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	431a      	orrs	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	69db      	ldr	r3, [r3, #28]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	4ba6      	ldr	r3, [pc, #664]	@ (8004f84 <UART_SetConfig+0x2c4>)
 8004cec:	4013      	ands	r3, r2
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	6812      	ldr	r2, [r2, #0]
 8004cf2:	6979      	ldr	r1, [r7, #20]
 8004cf4:	430b      	orrs	r3, r1
 8004cf6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68da      	ldr	r2, [r3, #12]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	697a      	ldr	r2, [r7, #20]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a94      	ldr	r2, [pc, #592]	@ (8004f88 <UART_SetConfig+0x2c8>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d120      	bne.n	8004d7e <UART_SetConfig+0xbe>
 8004d3c:	4b93      	ldr	r3, [pc, #588]	@ (8004f8c <UART_SetConfig+0x2cc>)
 8004d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d42:	f003 0303 	and.w	r3, r3, #3
 8004d46:	2b03      	cmp	r3, #3
 8004d48:	d816      	bhi.n	8004d78 <UART_SetConfig+0xb8>
 8004d4a:	a201      	add	r2, pc, #4	@ (adr r2, 8004d50 <UART_SetConfig+0x90>)
 8004d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d50:	08004d61 	.word	0x08004d61
 8004d54:	08004d6d 	.word	0x08004d6d
 8004d58:	08004d67 	.word	0x08004d67
 8004d5c:	08004d73 	.word	0x08004d73
 8004d60:	2301      	movs	r3, #1
 8004d62:	77fb      	strb	r3, [r7, #31]
 8004d64:	e150      	b.n	8005008 <UART_SetConfig+0x348>
 8004d66:	2302      	movs	r3, #2
 8004d68:	77fb      	strb	r3, [r7, #31]
 8004d6a:	e14d      	b.n	8005008 <UART_SetConfig+0x348>
 8004d6c:	2304      	movs	r3, #4
 8004d6e:	77fb      	strb	r3, [r7, #31]
 8004d70:	e14a      	b.n	8005008 <UART_SetConfig+0x348>
 8004d72:	2308      	movs	r3, #8
 8004d74:	77fb      	strb	r3, [r7, #31]
 8004d76:	e147      	b.n	8005008 <UART_SetConfig+0x348>
 8004d78:	2310      	movs	r3, #16
 8004d7a:	77fb      	strb	r3, [r7, #31]
 8004d7c:	e144      	b.n	8005008 <UART_SetConfig+0x348>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a83      	ldr	r2, [pc, #524]	@ (8004f90 <UART_SetConfig+0x2d0>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d132      	bne.n	8004dee <UART_SetConfig+0x12e>
 8004d88:	4b80      	ldr	r3, [pc, #512]	@ (8004f8c <UART_SetConfig+0x2cc>)
 8004d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d8e:	f003 030c 	and.w	r3, r3, #12
 8004d92:	2b0c      	cmp	r3, #12
 8004d94:	d828      	bhi.n	8004de8 <UART_SetConfig+0x128>
 8004d96:	a201      	add	r2, pc, #4	@ (adr r2, 8004d9c <UART_SetConfig+0xdc>)
 8004d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9c:	08004dd1 	.word	0x08004dd1
 8004da0:	08004de9 	.word	0x08004de9
 8004da4:	08004de9 	.word	0x08004de9
 8004da8:	08004de9 	.word	0x08004de9
 8004dac:	08004ddd 	.word	0x08004ddd
 8004db0:	08004de9 	.word	0x08004de9
 8004db4:	08004de9 	.word	0x08004de9
 8004db8:	08004de9 	.word	0x08004de9
 8004dbc:	08004dd7 	.word	0x08004dd7
 8004dc0:	08004de9 	.word	0x08004de9
 8004dc4:	08004de9 	.word	0x08004de9
 8004dc8:	08004de9 	.word	0x08004de9
 8004dcc:	08004de3 	.word	0x08004de3
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	77fb      	strb	r3, [r7, #31]
 8004dd4:	e118      	b.n	8005008 <UART_SetConfig+0x348>
 8004dd6:	2302      	movs	r3, #2
 8004dd8:	77fb      	strb	r3, [r7, #31]
 8004dda:	e115      	b.n	8005008 <UART_SetConfig+0x348>
 8004ddc:	2304      	movs	r3, #4
 8004dde:	77fb      	strb	r3, [r7, #31]
 8004de0:	e112      	b.n	8005008 <UART_SetConfig+0x348>
 8004de2:	2308      	movs	r3, #8
 8004de4:	77fb      	strb	r3, [r7, #31]
 8004de6:	e10f      	b.n	8005008 <UART_SetConfig+0x348>
 8004de8:	2310      	movs	r3, #16
 8004dea:	77fb      	strb	r3, [r7, #31]
 8004dec:	e10c      	b.n	8005008 <UART_SetConfig+0x348>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a68      	ldr	r2, [pc, #416]	@ (8004f94 <UART_SetConfig+0x2d4>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d120      	bne.n	8004e3a <UART_SetConfig+0x17a>
 8004df8:	4b64      	ldr	r3, [pc, #400]	@ (8004f8c <UART_SetConfig+0x2cc>)
 8004dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dfe:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004e02:	2b30      	cmp	r3, #48	@ 0x30
 8004e04:	d013      	beq.n	8004e2e <UART_SetConfig+0x16e>
 8004e06:	2b30      	cmp	r3, #48	@ 0x30
 8004e08:	d814      	bhi.n	8004e34 <UART_SetConfig+0x174>
 8004e0a:	2b20      	cmp	r3, #32
 8004e0c:	d009      	beq.n	8004e22 <UART_SetConfig+0x162>
 8004e0e:	2b20      	cmp	r3, #32
 8004e10:	d810      	bhi.n	8004e34 <UART_SetConfig+0x174>
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d002      	beq.n	8004e1c <UART_SetConfig+0x15c>
 8004e16:	2b10      	cmp	r3, #16
 8004e18:	d006      	beq.n	8004e28 <UART_SetConfig+0x168>
 8004e1a:	e00b      	b.n	8004e34 <UART_SetConfig+0x174>
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	77fb      	strb	r3, [r7, #31]
 8004e20:	e0f2      	b.n	8005008 <UART_SetConfig+0x348>
 8004e22:	2302      	movs	r3, #2
 8004e24:	77fb      	strb	r3, [r7, #31]
 8004e26:	e0ef      	b.n	8005008 <UART_SetConfig+0x348>
 8004e28:	2304      	movs	r3, #4
 8004e2a:	77fb      	strb	r3, [r7, #31]
 8004e2c:	e0ec      	b.n	8005008 <UART_SetConfig+0x348>
 8004e2e:	2308      	movs	r3, #8
 8004e30:	77fb      	strb	r3, [r7, #31]
 8004e32:	e0e9      	b.n	8005008 <UART_SetConfig+0x348>
 8004e34:	2310      	movs	r3, #16
 8004e36:	77fb      	strb	r3, [r7, #31]
 8004e38:	e0e6      	b.n	8005008 <UART_SetConfig+0x348>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a56      	ldr	r2, [pc, #344]	@ (8004f98 <UART_SetConfig+0x2d8>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d120      	bne.n	8004e86 <UART_SetConfig+0x1c6>
 8004e44:	4b51      	ldr	r3, [pc, #324]	@ (8004f8c <UART_SetConfig+0x2cc>)
 8004e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e4a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004e4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e50:	d013      	beq.n	8004e7a <UART_SetConfig+0x1ba>
 8004e52:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e54:	d814      	bhi.n	8004e80 <UART_SetConfig+0x1c0>
 8004e56:	2b80      	cmp	r3, #128	@ 0x80
 8004e58:	d009      	beq.n	8004e6e <UART_SetConfig+0x1ae>
 8004e5a:	2b80      	cmp	r3, #128	@ 0x80
 8004e5c:	d810      	bhi.n	8004e80 <UART_SetConfig+0x1c0>
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d002      	beq.n	8004e68 <UART_SetConfig+0x1a8>
 8004e62:	2b40      	cmp	r3, #64	@ 0x40
 8004e64:	d006      	beq.n	8004e74 <UART_SetConfig+0x1b4>
 8004e66:	e00b      	b.n	8004e80 <UART_SetConfig+0x1c0>
 8004e68:	2300      	movs	r3, #0
 8004e6a:	77fb      	strb	r3, [r7, #31]
 8004e6c:	e0cc      	b.n	8005008 <UART_SetConfig+0x348>
 8004e6e:	2302      	movs	r3, #2
 8004e70:	77fb      	strb	r3, [r7, #31]
 8004e72:	e0c9      	b.n	8005008 <UART_SetConfig+0x348>
 8004e74:	2304      	movs	r3, #4
 8004e76:	77fb      	strb	r3, [r7, #31]
 8004e78:	e0c6      	b.n	8005008 <UART_SetConfig+0x348>
 8004e7a:	2308      	movs	r3, #8
 8004e7c:	77fb      	strb	r3, [r7, #31]
 8004e7e:	e0c3      	b.n	8005008 <UART_SetConfig+0x348>
 8004e80:	2310      	movs	r3, #16
 8004e82:	77fb      	strb	r3, [r7, #31]
 8004e84:	e0c0      	b.n	8005008 <UART_SetConfig+0x348>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a44      	ldr	r2, [pc, #272]	@ (8004f9c <UART_SetConfig+0x2dc>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d125      	bne.n	8004edc <UART_SetConfig+0x21c>
 8004e90:	4b3e      	ldr	r3, [pc, #248]	@ (8004f8c <UART_SetConfig+0x2cc>)
 8004e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e9e:	d017      	beq.n	8004ed0 <UART_SetConfig+0x210>
 8004ea0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ea4:	d817      	bhi.n	8004ed6 <UART_SetConfig+0x216>
 8004ea6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004eaa:	d00b      	beq.n	8004ec4 <UART_SetConfig+0x204>
 8004eac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004eb0:	d811      	bhi.n	8004ed6 <UART_SetConfig+0x216>
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d003      	beq.n	8004ebe <UART_SetConfig+0x1fe>
 8004eb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004eba:	d006      	beq.n	8004eca <UART_SetConfig+0x20a>
 8004ebc:	e00b      	b.n	8004ed6 <UART_SetConfig+0x216>
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	77fb      	strb	r3, [r7, #31]
 8004ec2:	e0a1      	b.n	8005008 <UART_SetConfig+0x348>
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	77fb      	strb	r3, [r7, #31]
 8004ec8:	e09e      	b.n	8005008 <UART_SetConfig+0x348>
 8004eca:	2304      	movs	r3, #4
 8004ecc:	77fb      	strb	r3, [r7, #31]
 8004ece:	e09b      	b.n	8005008 <UART_SetConfig+0x348>
 8004ed0:	2308      	movs	r3, #8
 8004ed2:	77fb      	strb	r3, [r7, #31]
 8004ed4:	e098      	b.n	8005008 <UART_SetConfig+0x348>
 8004ed6:	2310      	movs	r3, #16
 8004ed8:	77fb      	strb	r3, [r7, #31]
 8004eda:	e095      	b.n	8005008 <UART_SetConfig+0x348>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a2f      	ldr	r2, [pc, #188]	@ (8004fa0 <UART_SetConfig+0x2e0>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d125      	bne.n	8004f32 <UART_SetConfig+0x272>
 8004ee6:	4b29      	ldr	r3, [pc, #164]	@ (8004f8c <UART_SetConfig+0x2cc>)
 8004ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004ef0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ef4:	d017      	beq.n	8004f26 <UART_SetConfig+0x266>
 8004ef6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004efa:	d817      	bhi.n	8004f2c <UART_SetConfig+0x26c>
 8004efc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f00:	d00b      	beq.n	8004f1a <UART_SetConfig+0x25a>
 8004f02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f06:	d811      	bhi.n	8004f2c <UART_SetConfig+0x26c>
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d003      	beq.n	8004f14 <UART_SetConfig+0x254>
 8004f0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f10:	d006      	beq.n	8004f20 <UART_SetConfig+0x260>
 8004f12:	e00b      	b.n	8004f2c <UART_SetConfig+0x26c>
 8004f14:	2301      	movs	r3, #1
 8004f16:	77fb      	strb	r3, [r7, #31]
 8004f18:	e076      	b.n	8005008 <UART_SetConfig+0x348>
 8004f1a:	2302      	movs	r3, #2
 8004f1c:	77fb      	strb	r3, [r7, #31]
 8004f1e:	e073      	b.n	8005008 <UART_SetConfig+0x348>
 8004f20:	2304      	movs	r3, #4
 8004f22:	77fb      	strb	r3, [r7, #31]
 8004f24:	e070      	b.n	8005008 <UART_SetConfig+0x348>
 8004f26:	2308      	movs	r3, #8
 8004f28:	77fb      	strb	r3, [r7, #31]
 8004f2a:	e06d      	b.n	8005008 <UART_SetConfig+0x348>
 8004f2c:	2310      	movs	r3, #16
 8004f2e:	77fb      	strb	r3, [r7, #31]
 8004f30:	e06a      	b.n	8005008 <UART_SetConfig+0x348>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a1b      	ldr	r2, [pc, #108]	@ (8004fa4 <UART_SetConfig+0x2e4>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d138      	bne.n	8004fae <UART_SetConfig+0x2ee>
 8004f3c:	4b13      	ldr	r3, [pc, #76]	@ (8004f8c <UART_SetConfig+0x2cc>)
 8004f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f42:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004f46:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004f4a:	d017      	beq.n	8004f7c <UART_SetConfig+0x2bc>
 8004f4c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004f50:	d82a      	bhi.n	8004fa8 <UART_SetConfig+0x2e8>
 8004f52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f56:	d00b      	beq.n	8004f70 <UART_SetConfig+0x2b0>
 8004f58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f5c:	d824      	bhi.n	8004fa8 <UART_SetConfig+0x2e8>
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d003      	beq.n	8004f6a <UART_SetConfig+0x2aa>
 8004f62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f66:	d006      	beq.n	8004f76 <UART_SetConfig+0x2b6>
 8004f68:	e01e      	b.n	8004fa8 <UART_SetConfig+0x2e8>
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	77fb      	strb	r3, [r7, #31]
 8004f6e:	e04b      	b.n	8005008 <UART_SetConfig+0x348>
 8004f70:	2302      	movs	r3, #2
 8004f72:	77fb      	strb	r3, [r7, #31]
 8004f74:	e048      	b.n	8005008 <UART_SetConfig+0x348>
 8004f76:	2304      	movs	r3, #4
 8004f78:	77fb      	strb	r3, [r7, #31]
 8004f7a:	e045      	b.n	8005008 <UART_SetConfig+0x348>
 8004f7c:	2308      	movs	r3, #8
 8004f7e:	77fb      	strb	r3, [r7, #31]
 8004f80:	e042      	b.n	8005008 <UART_SetConfig+0x348>
 8004f82:	bf00      	nop
 8004f84:	efff69f3 	.word	0xefff69f3
 8004f88:	40011000 	.word	0x40011000
 8004f8c:	40023800 	.word	0x40023800
 8004f90:	40004400 	.word	0x40004400
 8004f94:	40004800 	.word	0x40004800
 8004f98:	40004c00 	.word	0x40004c00
 8004f9c:	40005000 	.word	0x40005000
 8004fa0:	40011400 	.word	0x40011400
 8004fa4:	40007800 	.word	0x40007800
 8004fa8:	2310      	movs	r3, #16
 8004faa:	77fb      	strb	r3, [r7, #31]
 8004fac:	e02c      	b.n	8005008 <UART_SetConfig+0x348>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a72      	ldr	r2, [pc, #456]	@ (800517c <UART_SetConfig+0x4bc>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d125      	bne.n	8005004 <UART_SetConfig+0x344>
 8004fb8:	4b71      	ldr	r3, [pc, #452]	@ (8005180 <UART_SetConfig+0x4c0>)
 8004fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fbe:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004fc2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004fc6:	d017      	beq.n	8004ff8 <UART_SetConfig+0x338>
 8004fc8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004fcc:	d817      	bhi.n	8004ffe <UART_SetConfig+0x33e>
 8004fce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fd2:	d00b      	beq.n	8004fec <UART_SetConfig+0x32c>
 8004fd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fd8:	d811      	bhi.n	8004ffe <UART_SetConfig+0x33e>
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d003      	beq.n	8004fe6 <UART_SetConfig+0x326>
 8004fde:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004fe2:	d006      	beq.n	8004ff2 <UART_SetConfig+0x332>
 8004fe4:	e00b      	b.n	8004ffe <UART_SetConfig+0x33e>
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	77fb      	strb	r3, [r7, #31]
 8004fea:	e00d      	b.n	8005008 <UART_SetConfig+0x348>
 8004fec:	2302      	movs	r3, #2
 8004fee:	77fb      	strb	r3, [r7, #31]
 8004ff0:	e00a      	b.n	8005008 <UART_SetConfig+0x348>
 8004ff2:	2304      	movs	r3, #4
 8004ff4:	77fb      	strb	r3, [r7, #31]
 8004ff6:	e007      	b.n	8005008 <UART_SetConfig+0x348>
 8004ff8:	2308      	movs	r3, #8
 8004ffa:	77fb      	strb	r3, [r7, #31]
 8004ffc:	e004      	b.n	8005008 <UART_SetConfig+0x348>
 8004ffe:	2310      	movs	r3, #16
 8005000:	77fb      	strb	r3, [r7, #31]
 8005002:	e001      	b.n	8005008 <UART_SetConfig+0x348>
 8005004:	2310      	movs	r3, #16
 8005006:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	69db      	ldr	r3, [r3, #28]
 800500c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005010:	d15b      	bne.n	80050ca <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005012:	7ffb      	ldrb	r3, [r7, #31]
 8005014:	2b08      	cmp	r3, #8
 8005016:	d828      	bhi.n	800506a <UART_SetConfig+0x3aa>
 8005018:	a201      	add	r2, pc, #4	@ (adr r2, 8005020 <UART_SetConfig+0x360>)
 800501a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800501e:	bf00      	nop
 8005020:	08005045 	.word	0x08005045
 8005024:	0800504d 	.word	0x0800504d
 8005028:	08005055 	.word	0x08005055
 800502c:	0800506b 	.word	0x0800506b
 8005030:	0800505b 	.word	0x0800505b
 8005034:	0800506b 	.word	0x0800506b
 8005038:	0800506b 	.word	0x0800506b
 800503c:	0800506b 	.word	0x0800506b
 8005040:	08005063 	.word	0x08005063
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005044:	f7fe febe 	bl	8003dc4 <HAL_RCC_GetPCLK1Freq>
 8005048:	61b8      	str	r0, [r7, #24]
        break;
 800504a:	e013      	b.n	8005074 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800504c:	f7fe fece 	bl	8003dec <HAL_RCC_GetPCLK2Freq>
 8005050:	61b8      	str	r0, [r7, #24]
        break;
 8005052:	e00f      	b.n	8005074 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005054:	4b4b      	ldr	r3, [pc, #300]	@ (8005184 <UART_SetConfig+0x4c4>)
 8005056:	61bb      	str	r3, [r7, #24]
        break;
 8005058:	e00c      	b.n	8005074 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800505a:	f7fe fde1 	bl	8003c20 <HAL_RCC_GetSysClockFreq>
 800505e:	61b8      	str	r0, [r7, #24]
        break;
 8005060:	e008      	b.n	8005074 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005062:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005066:	61bb      	str	r3, [r7, #24]
        break;
 8005068:	e004      	b.n	8005074 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800506a:	2300      	movs	r3, #0
 800506c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	77bb      	strb	r3, [r7, #30]
        break;
 8005072:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d074      	beq.n	8005164 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	005a      	lsls	r2, r3, #1
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	085b      	lsrs	r3, r3, #1
 8005084:	441a      	add	r2, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	fbb2 f3f3 	udiv	r3, r2, r3
 800508e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	2b0f      	cmp	r3, #15
 8005094:	d916      	bls.n	80050c4 <UART_SetConfig+0x404>
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800509c:	d212      	bcs.n	80050c4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	f023 030f 	bic.w	r3, r3, #15
 80050a6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	085b      	lsrs	r3, r3, #1
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	f003 0307 	and.w	r3, r3, #7
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	89fb      	ldrh	r3, [r7, #14]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	89fa      	ldrh	r2, [r7, #14]
 80050c0:	60da      	str	r2, [r3, #12]
 80050c2:	e04f      	b.n	8005164 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	77bb      	strb	r3, [r7, #30]
 80050c8:	e04c      	b.n	8005164 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050ca:	7ffb      	ldrb	r3, [r7, #31]
 80050cc:	2b08      	cmp	r3, #8
 80050ce:	d828      	bhi.n	8005122 <UART_SetConfig+0x462>
 80050d0:	a201      	add	r2, pc, #4	@ (adr r2, 80050d8 <UART_SetConfig+0x418>)
 80050d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d6:	bf00      	nop
 80050d8:	080050fd 	.word	0x080050fd
 80050dc:	08005105 	.word	0x08005105
 80050e0:	0800510d 	.word	0x0800510d
 80050e4:	08005123 	.word	0x08005123
 80050e8:	08005113 	.word	0x08005113
 80050ec:	08005123 	.word	0x08005123
 80050f0:	08005123 	.word	0x08005123
 80050f4:	08005123 	.word	0x08005123
 80050f8:	0800511b 	.word	0x0800511b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050fc:	f7fe fe62 	bl	8003dc4 <HAL_RCC_GetPCLK1Freq>
 8005100:	61b8      	str	r0, [r7, #24]
        break;
 8005102:	e013      	b.n	800512c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005104:	f7fe fe72 	bl	8003dec <HAL_RCC_GetPCLK2Freq>
 8005108:	61b8      	str	r0, [r7, #24]
        break;
 800510a:	e00f      	b.n	800512c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800510c:	4b1d      	ldr	r3, [pc, #116]	@ (8005184 <UART_SetConfig+0x4c4>)
 800510e:	61bb      	str	r3, [r7, #24]
        break;
 8005110:	e00c      	b.n	800512c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005112:	f7fe fd85 	bl	8003c20 <HAL_RCC_GetSysClockFreq>
 8005116:	61b8      	str	r0, [r7, #24]
        break;
 8005118:	e008      	b.n	800512c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800511a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800511e:	61bb      	str	r3, [r7, #24]
        break;
 8005120:	e004      	b.n	800512c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005122:	2300      	movs	r3, #0
 8005124:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	77bb      	strb	r3, [r7, #30]
        break;
 800512a:	bf00      	nop
    }

    if (pclk != 0U)
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d018      	beq.n	8005164 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	085a      	lsrs	r2, r3, #1
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	441a      	add	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	fbb2 f3f3 	udiv	r3, r2, r3
 8005144:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	2b0f      	cmp	r3, #15
 800514a:	d909      	bls.n	8005160 <UART_SetConfig+0x4a0>
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005152:	d205      	bcs.n	8005160 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	b29a      	uxth	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	60da      	str	r2, [r3, #12]
 800515e:	e001      	b.n	8005164 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005170:	7fbb      	ldrb	r3, [r7, #30]
}
 8005172:	4618      	mov	r0, r3
 8005174:	3720      	adds	r7, #32
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	40007c00 	.word	0x40007c00
 8005180:	40023800 	.word	0x40023800
 8005184:	00f42400 	.word	0x00f42400

08005188 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005194:	f003 0308 	and.w	r3, r3, #8
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00a      	beq.n	80051b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00a      	beq.n	80051d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	430a      	orrs	r2, r1
 80051d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d8:	f003 0302 	and.w	r3, r3, #2
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00a      	beq.n	80051f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051fa:	f003 0304 	and.w	r3, r3, #4
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00a      	beq.n	8005218 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	430a      	orrs	r2, r1
 8005216:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800521c:	f003 0310 	and.w	r3, r3, #16
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00a      	beq.n	800523a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	430a      	orrs	r2, r1
 8005238:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800523e:	f003 0320 	and.w	r3, r3, #32
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00a      	beq.n	800525c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	430a      	orrs	r2, r1
 800525a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005264:	2b00      	cmp	r3, #0
 8005266:	d01a      	beq.n	800529e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	430a      	orrs	r2, r1
 800527c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005282:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005286:	d10a      	bne.n	800529e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	430a      	orrs	r2, r1
 800529c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00a      	beq.n	80052c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	430a      	orrs	r2, r1
 80052be:	605a      	str	r2, [r3, #4]
  }
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b08c      	sub	sp, #48	@ 0x30
 80052d0:	af02      	add	r7, sp, #8
 80052d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052dc:	f7fc fe88 	bl	8001ff0 <HAL_GetTick>
 80052e0:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0308 	and.w	r3, r3, #8
 80052ec:	2b08      	cmp	r3, #8
 80052ee:	d12e      	bne.n	800534e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f8:	2200      	movs	r2, #0
 80052fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f83b 	bl	800537a <UART_WaitOnFlagUntilTimeout>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d021      	beq.n	800534e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	e853 3f00 	ldrex	r3, [r3]
 8005316:	60fb      	str	r3, [r7, #12]
   return(result);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800531e:	623b      	str	r3, [r7, #32]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	461a      	mov	r2, r3
 8005326:	6a3b      	ldr	r3, [r7, #32]
 8005328:	61fb      	str	r3, [r7, #28]
 800532a:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532c:	69b9      	ldr	r1, [r7, #24]
 800532e:	69fa      	ldr	r2, [r7, #28]
 8005330:	e841 2300 	strex	r3, r2, [r1]
 8005334:	617b      	str	r3, [r7, #20]
   return(result);
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1e6      	bne.n	800530a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2220      	movs	r2, #32
 8005340:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e011      	b.n	8005372 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2220      	movs	r2, #32
 8005352:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2220      	movs	r2, #32
 8005358:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3728      	adds	r7, #40	@ 0x28
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}

0800537a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800537a:	b580      	push	{r7, lr}
 800537c:	b084      	sub	sp, #16
 800537e:	af00      	add	r7, sp, #0
 8005380:	60f8      	str	r0, [r7, #12]
 8005382:	60b9      	str	r1, [r7, #8]
 8005384:	603b      	str	r3, [r7, #0]
 8005386:	4613      	mov	r3, r2
 8005388:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800538a:	e04f      	b.n	800542c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005392:	d04b      	beq.n	800542c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005394:	f7fc fe2c 	bl	8001ff0 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	69ba      	ldr	r2, [r7, #24]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d302      	bcc.n	80053aa <UART_WaitOnFlagUntilTimeout+0x30>
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d101      	bne.n	80053ae <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e04e      	b.n	800544c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0304 	and.w	r3, r3, #4
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d037      	beq.n	800542c <UART_WaitOnFlagUntilTimeout+0xb2>
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	2b80      	cmp	r3, #128	@ 0x80
 80053c0:	d034      	beq.n	800542c <UART_WaitOnFlagUntilTimeout+0xb2>
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	2b40      	cmp	r3, #64	@ 0x40
 80053c6:	d031      	beq.n	800542c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	69db      	ldr	r3, [r3, #28]
 80053ce:	f003 0308 	and.w	r3, r3, #8
 80053d2:	2b08      	cmp	r3, #8
 80053d4:	d110      	bne.n	80053f8 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2208      	movs	r2, #8
 80053dc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	f000 f838 	bl	8005454 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2208      	movs	r2, #8
 80053e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e029      	b.n	800544c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	69db      	ldr	r3, [r3, #28]
 80053fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005402:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005406:	d111      	bne.n	800542c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005410:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f000 f81e 	bl	8005454 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2220      	movs	r2, #32
 800541c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e00f      	b.n	800544c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	69da      	ldr	r2, [r3, #28]
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	4013      	ands	r3, r2
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	429a      	cmp	r2, r3
 800543a:	bf0c      	ite	eq
 800543c:	2301      	moveq	r3, #1
 800543e:	2300      	movne	r3, #0
 8005440:	b2db      	uxtb	r3, r3
 8005442:	461a      	mov	r2, r3
 8005444:	79fb      	ldrb	r3, [r7, #7]
 8005446:	429a      	cmp	r2, r3
 8005448:	d0a0      	beq.n	800538c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3710      	adds	r7, #16
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005454:	b480      	push	{r7}
 8005456:	b095      	sub	sp, #84	@ 0x54
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005464:	e853 3f00 	ldrex	r3, [r3]
 8005468:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800546a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800546c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005470:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	461a      	mov	r2, r3
 8005478:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800547a:	643b      	str	r3, [r7, #64]	@ 0x40
 800547c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005480:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005482:	e841 2300 	strex	r3, r2, [r1]
 8005486:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1e6      	bne.n	800545c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	3308      	adds	r3, #8
 8005494:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005496:	6a3b      	ldr	r3, [r7, #32]
 8005498:	e853 3f00 	ldrex	r3, [r3]
 800549c:	61fb      	str	r3, [r7, #28]
   return(result);
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	f023 0301 	bic.w	r3, r3, #1
 80054a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	3308      	adds	r3, #8
 80054ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054b6:	e841 2300 	strex	r3, r2, [r1]
 80054ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80054bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1e5      	bne.n	800548e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d118      	bne.n	80054fc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	e853 3f00 	ldrex	r3, [r3]
 80054d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	f023 0310 	bic.w	r3, r3, #16
 80054de:	647b      	str	r3, [r7, #68]	@ 0x44
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	461a      	mov	r2, r3
 80054e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054e8:	61bb      	str	r3, [r7, #24]
 80054ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ec:	6979      	ldr	r1, [r7, #20]
 80054ee:	69ba      	ldr	r2, [r7, #24]
 80054f0:	e841 2300 	strex	r3, r2, [r1]
 80054f4:	613b      	str	r3, [r7, #16]
   return(result);
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1e6      	bne.n	80054ca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2220      	movs	r2, #32
 8005500:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005510:	bf00      	nop
 8005512:	3754      	adds	r7, #84	@ 0x54
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <siprintf>:
 800551c:	b40e      	push	{r1, r2, r3}
 800551e:	b510      	push	{r4, lr}
 8005520:	b09d      	sub	sp, #116	@ 0x74
 8005522:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005524:	9002      	str	r0, [sp, #8]
 8005526:	9006      	str	r0, [sp, #24]
 8005528:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800552c:	480a      	ldr	r0, [pc, #40]	@ (8005558 <siprintf+0x3c>)
 800552e:	9107      	str	r1, [sp, #28]
 8005530:	9104      	str	r1, [sp, #16]
 8005532:	490a      	ldr	r1, [pc, #40]	@ (800555c <siprintf+0x40>)
 8005534:	f853 2b04 	ldr.w	r2, [r3], #4
 8005538:	9105      	str	r1, [sp, #20]
 800553a:	2400      	movs	r4, #0
 800553c:	a902      	add	r1, sp, #8
 800553e:	6800      	ldr	r0, [r0, #0]
 8005540:	9301      	str	r3, [sp, #4]
 8005542:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005544:	f000 f89c 	bl	8005680 <_svfiprintf_r>
 8005548:	9b02      	ldr	r3, [sp, #8]
 800554a:	701c      	strb	r4, [r3, #0]
 800554c:	b01d      	add	sp, #116	@ 0x74
 800554e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005552:	b003      	add	sp, #12
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	20000010 	.word	0x20000010
 800555c:	ffff0208 	.word	0xffff0208

08005560 <memset>:
 8005560:	4402      	add	r2, r0
 8005562:	4603      	mov	r3, r0
 8005564:	4293      	cmp	r3, r2
 8005566:	d100      	bne.n	800556a <memset+0xa>
 8005568:	4770      	bx	lr
 800556a:	f803 1b01 	strb.w	r1, [r3], #1
 800556e:	e7f9      	b.n	8005564 <memset+0x4>

08005570 <__errno>:
 8005570:	4b01      	ldr	r3, [pc, #4]	@ (8005578 <__errno+0x8>)
 8005572:	6818      	ldr	r0, [r3, #0]
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	20000010 	.word	0x20000010

0800557c <__libc_init_array>:
 800557c:	b570      	push	{r4, r5, r6, lr}
 800557e:	4d0d      	ldr	r5, [pc, #52]	@ (80055b4 <__libc_init_array+0x38>)
 8005580:	4c0d      	ldr	r4, [pc, #52]	@ (80055b8 <__libc_init_array+0x3c>)
 8005582:	1b64      	subs	r4, r4, r5
 8005584:	10a4      	asrs	r4, r4, #2
 8005586:	2600      	movs	r6, #0
 8005588:	42a6      	cmp	r6, r4
 800558a:	d109      	bne.n	80055a0 <__libc_init_array+0x24>
 800558c:	4d0b      	ldr	r5, [pc, #44]	@ (80055bc <__libc_init_array+0x40>)
 800558e:	4c0c      	ldr	r4, [pc, #48]	@ (80055c0 <__libc_init_array+0x44>)
 8005590:	f000 fc64 	bl	8005e5c <_init>
 8005594:	1b64      	subs	r4, r4, r5
 8005596:	10a4      	asrs	r4, r4, #2
 8005598:	2600      	movs	r6, #0
 800559a:	42a6      	cmp	r6, r4
 800559c:	d105      	bne.n	80055aa <__libc_init_array+0x2e>
 800559e:	bd70      	pop	{r4, r5, r6, pc}
 80055a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80055a4:	4798      	blx	r3
 80055a6:	3601      	adds	r6, #1
 80055a8:	e7ee      	b.n	8005588 <__libc_init_array+0xc>
 80055aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80055ae:	4798      	blx	r3
 80055b0:	3601      	adds	r6, #1
 80055b2:	e7f2      	b.n	800559a <__libc_init_array+0x1e>
 80055b4:	080060f4 	.word	0x080060f4
 80055b8:	080060f4 	.word	0x080060f4
 80055bc:	080060f4 	.word	0x080060f4
 80055c0:	080060f8 	.word	0x080060f8

080055c4 <__retarget_lock_acquire_recursive>:
 80055c4:	4770      	bx	lr

080055c6 <__retarget_lock_release_recursive>:
 80055c6:	4770      	bx	lr

080055c8 <__ssputs_r>:
 80055c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055cc:	688e      	ldr	r6, [r1, #8]
 80055ce:	461f      	mov	r7, r3
 80055d0:	42be      	cmp	r6, r7
 80055d2:	680b      	ldr	r3, [r1, #0]
 80055d4:	4682      	mov	sl, r0
 80055d6:	460c      	mov	r4, r1
 80055d8:	4690      	mov	r8, r2
 80055da:	d82d      	bhi.n	8005638 <__ssputs_r+0x70>
 80055dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80055e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80055e4:	d026      	beq.n	8005634 <__ssputs_r+0x6c>
 80055e6:	6965      	ldr	r5, [r4, #20]
 80055e8:	6909      	ldr	r1, [r1, #16]
 80055ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80055ee:	eba3 0901 	sub.w	r9, r3, r1
 80055f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80055f6:	1c7b      	adds	r3, r7, #1
 80055f8:	444b      	add	r3, r9
 80055fa:	106d      	asrs	r5, r5, #1
 80055fc:	429d      	cmp	r5, r3
 80055fe:	bf38      	it	cc
 8005600:	461d      	movcc	r5, r3
 8005602:	0553      	lsls	r3, r2, #21
 8005604:	d527      	bpl.n	8005656 <__ssputs_r+0x8e>
 8005606:	4629      	mov	r1, r5
 8005608:	f000 f958 	bl	80058bc <_malloc_r>
 800560c:	4606      	mov	r6, r0
 800560e:	b360      	cbz	r0, 800566a <__ssputs_r+0xa2>
 8005610:	6921      	ldr	r1, [r4, #16]
 8005612:	464a      	mov	r2, r9
 8005614:	f000 fbc2 	bl	8005d9c <memcpy>
 8005618:	89a3      	ldrh	r3, [r4, #12]
 800561a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800561e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005622:	81a3      	strh	r3, [r4, #12]
 8005624:	6126      	str	r6, [r4, #16]
 8005626:	6165      	str	r5, [r4, #20]
 8005628:	444e      	add	r6, r9
 800562a:	eba5 0509 	sub.w	r5, r5, r9
 800562e:	6026      	str	r6, [r4, #0]
 8005630:	60a5      	str	r5, [r4, #8]
 8005632:	463e      	mov	r6, r7
 8005634:	42be      	cmp	r6, r7
 8005636:	d900      	bls.n	800563a <__ssputs_r+0x72>
 8005638:	463e      	mov	r6, r7
 800563a:	6820      	ldr	r0, [r4, #0]
 800563c:	4632      	mov	r2, r6
 800563e:	4641      	mov	r1, r8
 8005640:	f000 fb82 	bl	8005d48 <memmove>
 8005644:	68a3      	ldr	r3, [r4, #8]
 8005646:	1b9b      	subs	r3, r3, r6
 8005648:	60a3      	str	r3, [r4, #8]
 800564a:	6823      	ldr	r3, [r4, #0]
 800564c:	4433      	add	r3, r6
 800564e:	6023      	str	r3, [r4, #0]
 8005650:	2000      	movs	r0, #0
 8005652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005656:	462a      	mov	r2, r5
 8005658:	f000 fb48 	bl	8005cec <_realloc_r>
 800565c:	4606      	mov	r6, r0
 800565e:	2800      	cmp	r0, #0
 8005660:	d1e0      	bne.n	8005624 <__ssputs_r+0x5c>
 8005662:	6921      	ldr	r1, [r4, #16]
 8005664:	4650      	mov	r0, sl
 8005666:	f000 fba7 	bl	8005db8 <_free_r>
 800566a:	230c      	movs	r3, #12
 800566c:	f8ca 3000 	str.w	r3, [sl]
 8005670:	89a3      	ldrh	r3, [r4, #12]
 8005672:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005676:	81a3      	strh	r3, [r4, #12]
 8005678:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800567c:	e7e9      	b.n	8005652 <__ssputs_r+0x8a>
	...

08005680 <_svfiprintf_r>:
 8005680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005684:	4698      	mov	r8, r3
 8005686:	898b      	ldrh	r3, [r1, #12]
 8005688:	061b      	lsls	r3, r3, #24
 800568a:	b09d      	sub	sp, #116	@ 0x74
 800568c:	4607      	mov	r7, r0
 800568e:	460d      	mov	r5, r1
 8005690:	4614      	mov	r4, r2
 8005692:	d510      	bpl.n	80056b6 <_svfiprintf_r+0x36>
 8005694:	690b      	ldr	r3, [r1, #16]
 8005696:	b973      	cbnz	r3, 80056b6 <_svfiprintf_r+0x36>
 8005698:	2140      	movs	r1, #64	@ 0x40
 800569a:	f000 f90f 	bl	80058bc <_malloc_r>
 800569e:	6028      	str	r0, [r5, #0]
 80056a0:	6128      	str	r0, [r5, #16]
 80056a2:	b930      	cbnz	r0, 80056b2 <_svfiprintf_r+0x32>
 80056a4:	230c      	movs	r3, #12
 80056a6:	603b      	str	r3, [r7, #0]
 80056a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80056ac:	b01d      	add	sp, #116	@ 0x74
 80056ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056b2:	2340      	movs	r3, #64	@ 0x40
 80056b4:	616b      	str	r3, [r5, #20]
 80056b6:	2300      	movs	r3, #0
 80056b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80056ba:	2320      	movs	r3, #32
 80056bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80056c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80056c4:	2330      	movs	r3, #48	@ 0x30
 80056c6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005864 <_svfiprintf_r+0x1e4>
 80056ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80056ce:	f04f 0901 	mov.w	r9, #1
 80056d2:	4623      	mov	r3, r4
 80056d4:	469a      	mov	sl, r3
 80056d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056da:	b10a      	cbz	r2, 80056e0 <_svfiprintf_r+0x60>
 80056dc:	2a25      	cmp	r2, #37	@ 0x25
 80056de:	d1f9      	bne.n	80056d4 <_svfiprintf_r+0x54>
 80056e0:	ebba 0b04 	subs.w	fp, sl, r4
 80056e4:	d00b      	beq.n	80056fe <_svfiprintf_r+0x7e>
 80056e6:	465b      	mov	r3, fp
 80056e8:	4622      	mov	r2, r4
 80056ea:	4629      	mov	r1, r5
 80056ec:	4638      	mov	r0, r7
 80056ee:	f7ff ff6b 	bl	80055c8 <__ssputs_r>
 80056f2:	3001      	adds	r0, #1
 80056f4:	f000 80a7 	beq.w	8005846 <_svfiprintf_r+0x1c6>
 80056f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80056fa:	445a      	add	r2, fp
 80056fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80056fe:	f89a 3000 	ldrb.w	r3, [sl]
 8005702:	2b00      	cmp	r3, #0
 8005704:	f000 809f 	beq.w	8005846 <_svfiprintf_r+0x1c6>
 8005708:	2300      	movs	r3, #0
 800570a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800570e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005712:	f10a 0a01 	add.w	sl, sl, #1
 8005716:	9304      	str	r3, [sp, #16]
 8005718:	9307      	str	r3, [sp, #28]
 800571a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800571e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005720:	4654      	mov	r4, sl
 8005722:	2205      	movs	r2, #5
 8005724:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005728:	484e      	ldr	r0, [pc, #312]	@ (8005864 <_svfiprintf_r+0x1e4>)
 800572a:	f7fa fd79 	bl	8000220 <memchr>
 800572e:	9a04      	ldr	r2, [sp, #16]
 8005730:	b9d8      	cbnz	r0, 800576a <_svfiprintf_r+0xea>
 8005732:	06d0      	lsls	r0, r2, #27
 8005734:	bf44      	itt	mi
 8005736:	2320      	movmi	r3, #32
 8005738:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800573c:	0711      	lsls	r1, r2, #28
 800573e:	bf44      	itt	mi
 8005740:	232b      	movmi	r3, #43	@ 0x2b
 8005742:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005746:	f89a 3000 	ldrb.w	r3, [sl]
 800574a:	2b2a      	cmp	r3, #42	@ 0x2a
 800574c:	d015      	beq.n	800577a <_svfiprintf_r+0xfa>
 800574e:	9a07      	ldr	r2, [sp, #28]
 8005750:	4654      	mov	r4, sl
 8005752:	2000      	movs	r0, #0
 8005754:	f04f 0c0a 	mov.w	ip, #10
 8005758:	4621      	mov	r1, r4
 800575a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800575e:	3b30      	subs	r3, #48	@ 0x30
 8005760:	2b09      	cmp	r3, #9
 8005762:	d94b      	bls.n	80057fc <_svfiprintf_r+0x17c>
 8005764:	b1b0      	cbz	r0, 8005794 <_svfiprintf_r+0x114>
 8005766:	9207      	str	r2, [sp, #28]
 8005768:	e014      	b.n	8005794 <_svfiprintf_r+0x114>
 800576a:	eba0 0308 	sub.w	r3, r0, r8
 800576e:	fa09 f303 	lsl.w	r3, r9, r3
 8005772:	4313      	orrs	r3, r2
 8005774:	9304      	str	r3, [sp, #16]
 8005776:	46a2      	mov	sl, r4
 8005778:	e7d2      	b.n	8005720 <_svfiprintf_r+0xa0>
 800577a:	9b03      	ldr	r3, [sp, #12]
 800577c:	1d19      	adds	r1, r3, #4
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	9103      	str	r1, [sp, #12]
 8005782:	2b00      	cmp	r3, #0
 8005784:	bfbb      	ittet	lt
 8005786:	425b      	neglt	r3, r3
 8005788:	f042 0202 	orrlt.w	r2, r2, #2
 800578c:	9307      	strge	r3, [sp, #28]
 800578e:	9307      	strlt	r3, [sp, #28]
 8005790:	bfb8      	it	lt
 8005792:	9204      	strlt	r2, [sp, #16]
 8005794:	7823      	ldrb	r3, [r4, #0]
 8005796:	2b2e      	cmp	r3, #46	@ 0x2e
 8005798:	d10a      	bne.n	80057b0 <_svfiprintf_r+0x130>
 800579a:	7863      	ldrb	r3, [r4, #1]
 800579c:	2b2a      	cmp	r3, #42	@ 0x2a
 800579e:	d132      	bne.n	8005806 <_svfiprintf_r+0x186>
 80057a0:	9b03      	ldr	r3, [sp, #12]
 80057a2:	1d1a      	adds	r2, r3, #4
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	9203      	str	r2, [sp, #12]
 80057a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80057ac:	3402      	adds	r4, #2
 80057ae:	9305      	str	r3, [sp, #20]
 80057b0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005874 <_svfiprintf_r+0x1f4>
 80057b4:	7821      	ldrb	r1, [r4, #0]
 80057b6:	2203      	movs	r2, #3
 80057b8:	4650      	mov	r0, sl
 80057ba:	f7fa fd31 	bl	8000220 <memchr>
 80057be:	b138      	cbz	r0, 80057d0 <_svfiprintf_r+0x150>
 80057c0:	9b04      	ldr	r3, [sp, #16]
 80057c2:	eba0 000a 	sub.w	r0, r0, sl
 80057c6:	2240      	movs	r2, #64	@ 0x40
 80057c8:	4082      	lsls	r2, r0
 80057ca:	4313      	orrs	r3, r2
 80057cc:	3401      	adds	r4, #1
 80057ce:	9304      	str	r3, [sp, #16]
 80057d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057d4:	4824      	ldr	r0, [pc, #144]	@ (8005868 <_svfiprintf_r+0x1e8>)
 80057d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80057da:	2206      	movs	r2, #6
 80057dc:	f7fa fd20 	bl	8000220 <memchr>
 80057e0:	2800      	cmp	r0, #0
 80057e2:	d036      	beq.n	8005852 <_svfiprintf_r+0x1d2>
 80057e4:	4b21      	ldr	r3, [pc, #132]	@ (800586c <_svfiprintf_r+0x1ec>)
 80057e6:	bb1b      	cbnz	r3, 8005830 <_svfiprintf_r+0x1b0>
 80057e8:	9b03      	ldr	r3, [sp, #12]
 80057ea:	3307      	adds	r3, #7
 80057ec:	f023 0307 	bic.w	r3, r3, #7
 80057f0:	3308      	adds	r3, #8
 80057f2:	9303      	str	r3, [sp, #12]
 80057f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057f6:	4433      	add	r3, r6
 80057f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80057fa:	e76a      	b.n	80056d2 <_svfiprintf_r+0x52>
 80057fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8005800:	460c      	mov	r4, r1
 8005802:	2001      	movs	r0, #1
 8005804:	e7a8      	b.n	8005758 <_svfiprintf_r+0xd8>
 8005806:	2300      	movs	r3, #0
 8005808:	3401      	adds	r4, #1
 800580a:	9305      	str	r3, [sp, #20]
 800580c:	4619      	mov	r1, r3
 800580e:	f04f 0c0a 	mov.w	ip, #10
 8005812:	4620      	mov	r0, r4
 8005814:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005818:	3a30      	subs	r2, #48	@ 0x30
 800581a:	2a09      	cmp	r2, #9
 800581c:	d903      	bls.n	8005826 <_svfiprintf_r+0x1a6>
 800581e:	2b00      	cmp	r3, #0
 8005820:	d0c6      	beq.n	80057b0 <_svfiprintf_r+0x130>
 8005822:	9105      	str	r1, [sp, #20]
 8005824:	e7c4      	b.n	80057b0 <_svfiprintf_r+0x130>
 8005826:	fb0c 2101 	mla	r1, ip, r1, r2
 800582a:	4604      	mov	r4, r0
 800582c:	2301      	movs	r3, #1
 800582e:	e7f0      	b.n	8005812 <_svfiprintf_r+0x192>
 8005830:	ab03      	add	r3, sp, #12
 8005832:	9300      	str	r3, [sp, #0]
 8005834:	462a      	mov	r2, r5
 8005836:	4b0e      	ldr	r3, [pc, #56]	@ (8005870 <_svfiprintf_r+0x1f0>)
 8005838:	a904      	add	r1, sp, #16
 800583a:	4638      	mov	r0, r7
 800583c:	f3af 8000 	nop.w
 8005840:	1c42      	adds	r2, r0, #1
 8005842:	4606      	mov	r6, r0
 8005844:	d1d6      	bne.n	80057f4 <_svfiprintf_r+0x174>
 8005846:	89ab      	ldrh	r3, [r5, #12]
 8005848:	065b      	lsls	r3, r3, #25
 800584a:	f53f af2d 	bmi.w	80056a8 <_svfiprintf_r+0x28>
 800584e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005850:	e72c      	b.n	80056ac <_svfiprintf_r+0x2c>
 8005852:	ab03      	add	r3, sp, #12
 8005854:	9300      	str	r3, [sp, #0]
 8005856:	462a      	mov	r2, r5
 8005858:	4b05      	ldr	r3, [pc, #20]	@ (8005870 <_svfiprintf_r+0x1f0>)
 800585a:	a904      	add	r1, sp, #16
 800585c:	4638      	mov	r0, r7
 800585e:	f000 f91b 	bl	8005a98 <_printf_i>
 8005862:	e7ed      	b.n	8005840 <_svfiprintf_r+0x1c0>
 8005864:	080060b8 	.word	0x080060b8
 8005868:	080060c2 	.word	0x080060c2
 800586c:	00000000 	.word	0x00000000
 8005870:	080055c9 	.word	0x080055c9
 8005874:	080060be 	.word	0x080060be

08005878 <sbrk_aligned>:
 8005878:	b570      	push	{r4, r5, r6, lr}
 800587a:	4e0f      	ldr	r6, [pc, #60]	@ (80058b8 <sbrk_aligned+0x40>)
 800587c:	460c      	mov	r4, r1
 800587e:	6831      	ldr	r1, [r6, #0]
 8005880:	4605      	mov	r5, r0
 8005882:	b911      	cbnz	r1, 800588a <sbrk_aligned+0x12>
 8005884:	f000 fa7a 	bl	8005d7c <_sbrk_r>
 8005888:	6030      	str	r0, [r6, #0]
 800588a:	4621      	mov	r1, r4
 800588c:	4628      	mov	r0, r5
 800588e:	f000 fa75 	bl	8005d7c <_sbrk_r>
 8005892:	1c43      	adds	r3, r0, #1
 8005894:	d103      	bne.n	800589e <sbrk_aligned+0x26>
 8005896:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800589a:	4620      	mov	r0, r4
 800589c:	bd70      	pop	{r4, r5, r6, pc}
 800589e:	1cc4      	adds	r4, r0, #3
 80058a0:	f024 0403 	bic.w	r4, r4, #3
 80058a4:	42a0      	cmp	r0, r4
 80058a6:	d0f8      	beq.n	800589a <sbrk_aligned+0x22>
 80058a8:	1a21      	subs	r1, r4, r0
 80058aa:	4628      	mov	r0, r5
 80058ac:	f000 fa66 	bl	8005d7c <_sbrk_r>
 80058b0:	3001      	adds	r0, #1
 80058b2:	d1f2      	bne.n	800589a <sbrk_aligned+0x22>
 80058b4:	e7ef      	b.n	8005896 <sbrk_aligned+0x1e>
 80058b6:	bf00      	nop
 80058b8:	20000550 	.word	0x20000550

080058bc <_malloc_r>:
 80058bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058c0:	1ccd      	adds	r5, r1, #3
 80058c2:	f025 0503 	bic.w	r5, r5, #3
 80058c6:	3508      	adds	r5, #8
 80058c8:	2d0c      	cmp	r5, #12
 80058ca:	bf38      	it	cc
 80058cc:	250c      	movcc	r5, #12
 80058ce:	2d00      	cmp	r5, #0
 80058d0:	4606      	mov	r6, r0
 80058d2:	db01      	blt.n	80058d8 <_malloc_r+0x1c>
 80058d4:	42a9      	cmp	r1, r5
 80058d6:	d904      	bls.n	80058e2 <_malloc_r+0x26>
 80058d8:	230c      	movs	r3, #12
 80058da:	6033      	str	r3, [r6, #0]
 80058dc:	2000      	movs	r0, #0
 80058de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80059b8 <_malloc_r+0xfc>
 80058e6:	f000 f9f5 	bl	8005cd4 <__malloc_lock>
 80058ea:	f8d8 3000 	ldr.w	r3, [r8]
 80058ee:	461c      	mov	r4, r3
 80058f0:	bb44      	cbnz	r4, 8005944 <_malloc_r+0x88>
 80058f2:	4629      	mov	r1, r5
 80058f4:	4630      	mov	r0, r6
 80058f6:	f7ff ffbf 	bl	8005878 <sbrk_aligned>
 80058fa:	1c43      	adds	r3, r0, #1
 80058fc:	4604      	mov	r4, r0
 80058fe:	d158      	bne.n	80059b2 <_malloc_r+0xf6>
 8005900:	f8d8 4000 	ldr.w	r4, [r8]
 8005904:	4627      	mov	r7, r4
 8005906:	2f00      	cmp	r7, #0
 8005908:	d143      	bne.n	8005992 <_malloc_r+0xd6>
 800590a:	2c00      	cmp	r4, #0
 800590c:	d04b      	beq.n	80059a6 <_malloc_r+0xea>
 800590e:	6823      	ldr	r3, [r4, #0]
 8005910:	4639      	mov	r1, r7
 8005912:	4630      	mov	r0, r6
 8005914:	eb04 0903 	add.w	r9, r4, r3
 8005918:	f000 fa30 	bl	8005d7c <_sbrk_r>
 800591c:	4581      	cmp	r9, r0
 800591e:	d142      	bne.n	80059a6 <_malloc_r+0xea>
 8005920:	6821      	ldr	r1, [r4, #0]
 8005922:	1a6d      	subs	r5, r5, r1
 8005924:	4629      	mov	r1, r5
 8005926:	4630      	mov	r0, r6
 8005928:	f7ff ffa6 	bl	8005878 <sbrk_aligned>
 800592c:	3001      	adds	r0, #1
 800592e:	d03a      	beq.n	80059a6 <_malloc_r+0xea>
 8005930:	6823      	ldr	r3, [r4, #0]
 8005932:	442b      	add	r3, r5
 8005934:	6023      	str	r3, [r4, #0]
 8005936:	f8d8 3000 	ldr.w	r3, [r8]
 800593a:	685a      	ldr	r2, [r3, #4]
 800593c:	bb62      	cbnz	r2, 8005998 <_malloc_r+0xdc>
 800593e:	f8c8 7000 	str.w	r7, [r8]
 8005942:	e00f      	b.n	8005964 <_malloc_r+0xa8>
 8005944:	6822      	ldr	r2, [r4, #0]
 8005946:	1b52      	subs	r2, r2, r5
 8005948:	d420      	bmi.n	800598c <_malloc_r+0xd0>
 800594a:	2a0b      	cmp	r2, #11
 800594c:	d917      	bls.n	800597e <_malloc_r+0xc2>
 800594e:	1961      	adds	r1, r4, r5
 8005950:	42a3      	cmp	r3, r4
 8005952:	6025      	str	r5, [r4, #0]
 8005954:	bf18      	it	ne
 8005956:	6059      	strne	r1, [r3, #4]
 8005958:	6863      	ldr	r3, [r4, #4]
 800595a:	bf08      	it	eq
 800595c:	f8c8 1000 	streq.w	r1, [r8]
 8005960:	5162      	str	r2, [r4, r5]
 8005962:	604b      	str	r3, [r1, #4]
 8005964:	4630      	mov	r0, r6
 8005966:	f000 f9bb 	bl	8005ce0 <__malloc_unlock>
 800596a:	f104 000b 	add.w	r0, r4, #11
 800596e:	1d23      	adds	r3, r4, #4
 8005970:	f020 0007 	bic.w	r0, r0, #7
 8005974:	1ac2      	subs	r2, r0, r3
 8005976:	bf1c      	itt	ne
 8005978:	1a1b      	subne	r3, r3, r0
 800597a:	50a3      	strne	r3, [r4, r2]
 800597c:	e7af      	b.n	80058de <_malloc_r+0x22>
 800597e:	6862      	ldr	r2, [r4, #4]
 8005980:	42a3      	cmp	r3, r4
 8005982:	bf0c      	ite	eq
 8005984:	f8c8 2000 	streq.w	r2, [r8]
 8005988:	605a      	strne	r2, [r3, #4]
 800598a:	e7eb      	b.n	8005964 <_malloc_r+0xa8>
 800598c:	4623      	mov	r3, r4
 800598e:	6864      	ldr	r4, [r4, #4]
 8005990:	e7ae      	b.n	80058f0 <_malloc_r+0x34>
 8005992:	463c      	mov	r4, r7
 8005994:	687f      	ldr	r7, [r7, #4]
 8005996:	e7b6      	b.n	8005906 <_malloc_r+0x4a>
 8005998:	461a      	mov	r2, r3
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	42a3      	cmp	r3, r4
 800599e:	d1fb      	bne.n	8005998 <_malloc_r+0xdc>
 80059a0:	2300      	movs	r3, #0
 80059a2:	6053      	str	r3, [r2, #4]
 80059a4:	e7de      	b.n	8005964 <_malloc_r+0xa8>
 80059a6:	230c      	movs	r3, #12
 80059a8:	6033      	str	r3, [r6, #0]
 80059aa:	4630      	mov	r0, r6
 80059ac:	f000 f998 	bl	8005ce0 <__malloc_unlock>
 80059b0:	e794      	b.n	80058dc <_malloc_r+0x20>
 80059b2:	6005      	str	r5, [r0, #0]
 80059b4:	e7d6      	b.n	8005964 <_malloc_r+0xa8>
 80059b6:	bf00      	nop
 80059b8:	20000554 	.word	0x20000554

080059bc <_printf_common>:
 80059bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059c0:	4616      	mov	r6, r2
 80059c2:	4698      	mov	r8, r3
 80059c4:	688a      	ldr	r2, [r1, #8]
 80059c6:	690b      	ldr	r3, [r1, #16]
 80059c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80059cc:	4293      	cmp	r3, r2
 80059ce:	bfb8      	it	lt
 80059d0:	4613      	movlt	r3, r2
 80059d2:	6033      	str	r3, [r6, #0]
 80059d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80059d8:	4607      	mov	r7, r0
 80059da:	460c      	mov	r4, r1
 80059dc:	b10a      	cbz	r2, 80059e2 <_printf_common+0x26>
 80059de:	3301      	adds	r3, #1
 80059e0:	6033      	str	r3, [r6, #0]
 80059e2:	6823      	ldr	r3, [r4, #0]
 80059e4:	0699      	lsls	r1, r3, #26
 80059e6:	bf42      	ittt	mi
 80059e8:	6833      	ldrmi	r3, [r6, #0]
 80059ea:	3302      	addmi	r3, #2
 80059ec:	6033      	strmi	r3, [r6, #0]
 80059ee:	6825      	ldr	r5, [r4, #0]
 80059f0:	f015 0506 	ands.w	r5, r5, #6
 80059f4:	d106      	bne.n	8005a04 <_printf_common+0x48>
 80059f6:	f104 0a19 	add.w	sl, r4, #25
 80059fa:	68e3      	ldr	r3, [r4, #12]
 80059fc:	6832      	ldr	r2, [r6, #0]
 80059fe:	1a9b      	subs	r3, r3, r2
 8005a00:	42ab      	cmp	r3, r5
 8005a02:	dc26      	bgt.n	8005a52 <_printf_common+0x96>
 8005a04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005a08:	6822      	ldr	r2, [r4, #0]
 8005a0a:	3b00      	subs	r3, #0
 8005a0c:	bf18      	it	ne
 8005a0e:	2301      	movne	r3, #1
 8005a10:	0692      	lsls	r2, r2, #26
 8005a12:	d42b      	bmi.n	8005a6c <_printf_common+0xb0>
 8005a14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005a18:	4641      	mov	r1, r8
 8005a1a:	4638      	mov	r0, r7
 8005a1c:	47c8      	blx	r9
 8005a1e:	3001      	adds	r0, #1
 8005a20:	d01e      	beq.n	8005a60 <_printf_common+0xa4>
 8005a22:	6823      	ldr	r3, [r4, #0]
 8005a24:	6922      	ldr	r2, [r4, #16]
 8005a26:	f003 0306 	and.w	r3, r3, #6
 8005a2a:	2b04      	cmp	r3, #4
 8005a2c:	bf02      	ittt	eq
 8005a2e:	68e5      	ldreq	r5, [r4, #12]
 8005a30:	6833      	ldreq	r3, [r6, #0]
 8005a32:	1aed      	subeq	r5, r5, r3
 8005a34:	68a3      	ldr	r3, [r4, #8]
 8005a36:	bf0c      	ite	eq
 8005a38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a3c:	2500      	movne	r5, #0
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	bfc4      	itt	gt
 8005a42:	1a9b      	subgt	r3, r3, r2
 8005a44:	18ed      	addgt	r5, r5, r3
 8005a46:	2600      	movs	r6, #0
 8005a48:	341a      	adds	r4, #26
 8005a4a:	42b5      	cmp	r5, r6
 8005a4c:	d11a      	bne.n	8005a84 <_printf_common+0xc8>
 8005a4e:	2000      	movs	r0, #0
 8005a50:	e008      	b.n	8005a64 <_printf_common+0xa8>
 8005a52:	2301      	movs	r3, #1
 8005a54:	4652      	mov	r2, sl
 8005a56:	4641      	mov	r1, r8
 8005a58:	4638      	mov	r0, r7
 8005a5a:	47c8      	blx	r9
 8005a5c:	3001      	adds	r0, #1
 8005a5e:	d103      	bne.n	8005a68 <_printf_common+0xac>
 8005a60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a68:	3501      	adds	r5, #1
 8005a6a:	e7c6      	b.n	80059fa <_printf_common+0x3e>
 8005a6c:	18e1      	adds	r1, r4, r3
 8005a6e:	1c5a      	adds	r2, r3, #1
 8005a70:	2030      	movs	r0, #48	@ 0x30
 8005a72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005a76:	4422      	add	r2, r4
 8005a78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005a7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005a80:	3302      	adds	r3, #2
 8005a82:	e7c7      	b.n	8005a14 <_printf_common+0x58>
 8005a84:	2301      	movs	r3, #1
 8005a86:	4622      	mov	r2, r4
 8005a88:	4641      	mov	r1, r8
 8005a8a:	4638      	mov	r0, r7
 8005a8c:	47c8      	blx	r9
 8005a8e:	3001      	adds	r0, #1
 8005a90:	d0e6      	beq.n	8005a60 <_printf_common+0xa4>
 8005a92:	3601      	adds	r6, #1
 8005a94:	e7d9      	b.n	8005a4a <_printf_common+0x8e>
	...

08005a98 <_printf_i>:
 8005a98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a9c:	7e0f      	ldrb	r7, [r1, #24]
 8005a9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005aa0:	2f78      	cmp	r7, #120	@ 0x78
 8005aa2:	4691      	mov	r9, r2
 8005aa4:	4680      	mov	r8, r0
 8005aa6:	460c      	mov	r4, r1
 8005aa8:	469a      	mov	sl, r3
 8005aaa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005aae:	d807      	bhi.n	8005ac0 <_printf_i+0x28>
 8005ab0:	2f62      	cmp	r7, #98	@ 0x62
 8005ab2:	d80a      	bhi.n	8005aca <_printf_i+0x32>
 8005ab4:	2f00      	cmp	r7, #0
 8005ab6:	f000 80d1 	beq.w	8005c5c <_printf_i+0x1c4>
 8005aba:	2f58      	cmp	r7, #88	@ 0x58
 8005abc:	f000 80b8 	beq.w	8005c30 <_printf_i+0x198>
 8005ac0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ac4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005ac8:	e03a      	b.n	8005b40 <_printf_i+0xa8>
 8005aca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005ace:	2b15      	cmp	r3, #21
 8005ad0:	d8f6      	bhi.n	8005ac0 <_printf_i+0x28>
 8005ad2:	a101      	add	r1, pc, #4	@ (adr r1, 8005ad8 <_printf_i+0x40>)
 8005ad4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ad8:	08005b31 	.word	0x08005b31
 8005adc:	08005b45 	.word	0x08005b45
 8005ae0:	08005ac1 	.word	0x08005ac1
 8005ae4:	08005ac1 	.word	0x08005ac1
 8005ae8:	08005ac1 	.word	0x08005ac1
 8005aec:	08005ac1 	.word	0x08005ac1
 8005af0:	08005b45 	.word	0x08005b45
 8005af4:	08005ac1 	.word	0x08005ac1
 8005af8:	08005ac1 	.word	0x08005ac1
 8005afc:	08005ac1 	.word	0x08005ac1
 8005b00:	08005ac1 	.word	0x08005ac1
 8005b04:	08005c43 	.word	0x08005c43
 8005b08:	08005b6f 	.word	0x08005b6f
 8005b0c:	08005bfd 	.word	0x08005bfd
 8005b10:	08005ac1 	.word	0x08005ac1
 8005b14:	08005ac1 	.word	0x08005ac1
 8005b18:	08005c65 	.word	0x08005c65
 8005b1c:	08005ac1 	.word	0x08005ac1
 8005b20:	08005b6f 	.word	0x08005b6f
 8005b24:	08005ac1 	.word	0x08005ac1
 8005b28:	08005ac1 	.word	0x08005ac1
 8005b2c:	08005c05 	.word	0x08005c05
 8005b30:	6833      	ldr	r3, [r6, #0]
 8005b32:	1d1a      	adds	r2, r3, #4
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	6032      	str	r2, [r6, #0]
 8005b38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005b40:	2301      	movs	r3, #1
 8005b42:	e09c      	b.n	8005c7e <_printf_i+0x1e6>
 8005b44:	6833      	ldr	r3, [r6, #0]
 8005b46:	6820      	ldr	r0, [r4, #0]
 8005b48:	1d19      	adds	r1, r3, #4
 8005b4a:	6031      	str	r1, [r6, #0]
 8005b4c:	0606      	lsls	r6, r0, #24
 8005b4e:	d501      	bpl.n	8005b54 <_printf_i+0xbc>
 8005b50:	681d      	ldr	r5, [r3, #0]
 8005b52:	e003      	b.n	8005b5c <_printf_i+0xc4>
 8005b54:	0645      	lsls	r5, r0, #25
 8005b56:	d5fb      	bpl.n	8005b50 <_printf_i+0xb8>
 8005b58:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005b5c:	2d00      	cmp	r5, #0
 8005b5e:	da03      	bge.n	8005b68 <_printf_i+0xd0>
 8005b60:	232d      	movs	r3, #45	@ 0x2d
 8005b62:	426d      	negs	r5, r5
 8005b64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b68:	4858      	ldr	r0, [pc, #352]	@ (8005ccc <_printf_i+0x234>)
 8005b6a:	230a      	movs	r3, #10
 8005b6c:	e011      	b.n	8005b92 <_printf_i+0xfa>
 8005b6e:	6821      	ldr	r1, [r4, #0]
 8005b70:	6833      	ldr	r3, [r6, #0]
 8005b72:	0608      	lsls	r0, r1, #24
 8005b74:	f853 5b04 	ldr.w	r5, [r3], #4
 8005b78:	d402      	bmi.n	8005b80 <_printf_i+0xe8>
 8005b7a:	0649      	lsls	r1, r1, #25
 8005b7c:	bf48      	it	mi
 8005b7e:	b2ad      	uxthmi	r5, r5
 8005b80:	2f6f      	cmp	r7, #111	@ 0x6f
 8005b82:	4852      	ldr	r0, [pc, #328]	@ (8005ccc <_printf_i+0x234>)
 8005b84:	6033      	str	r3, [r6, #0]
 8005b86:	bf14      	ite	ne
 8005b88:	230a      	movne	r3, #10
 8005b8a:	2308      	moveq	r3, #8
 8005b8c:	2100      	movs	r1, #0
 8005b8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005b92:	6866      	ldr	r6, [r4, #4]
 8005b94:	60a6      	str	r6, [r4, #8]
 8005b96:	2e00      	cmp	r6, #0
 8005b98:	db05      	blt.n	8005ba6 <_printf_i+0x10e>
 8005b9a:	6821      	ldr	r1, [r4, #0]
 8005b9c:	432e      	orrs	r6, r5
 8005b9e:	f021 0104 	bic.w	r1, r1, #4
 8005ba2:	6021      	str	r1, [r4, #0]
 8005ba4:	d04b      	beq.n	8005c3e <_printf_i+0x1a6>
 8005ba6:	4616      	mov	r6, r2
 8005ba8:	fbb5 f1f3 	udiv	r1, r5, r3
 8005bac:	fb03 5711 	mls	r7, r3, r1, r5
 8005bb0:	5dc7      	ldrb	r7, [r0, r7]
 8005bb2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005bb6:	462f      	mov	r7, r5
 8005bb8:	42bb      	cmp	r3, r7
 8005bba:	460d      	mov	r5, r1
 8005bbc:	d9f4      	bls.n	8005ba8 <_printf_i+0x110>
 8005bbe:	2b08      	cmp	r3, #8
 8005bc0:	d10b      	bne.n	8005bda <_printf_i+0x142>
 8005bc2:	6823      	ldr	r3, [r4, #0]
 8005bc4:	07df      	lsls	r7, r3, #31
 8005bc6:	d508      	bpl.n	8005bda <_printf_i+0x142>
 8005bc8:	6923      	ldr	r3, [r4, #16]
 8005bca:	6861      	ldr	r1, [r4, #4]
 8005bcc:	4299      	cmp	r1, r3
 8005bce:	bfde      	ittt	le
 8005bd0:	2330      	movle	r3, #48	@ 0x30
 8005bd2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005bd6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005bda:	1b92      	subs	r2, r2, r6
 8005bdc:	6122      	str	r2, [r4, #16]
 8005bde:	f8cd a000 	str.w	sl, [sp]
 8005be2:	464b      	mov	r3, r9
 8005be4:	aa03      	add	r2, sp, #12
 8005be6:	4621      	mov	r1, r4
 8005be8:	4640      	mov	r0, r8
 8005bea:	f7ff fee7 	bl	80059bc <_printf_common>
 8005bee:	3001      	adds	r0, #1
 8005bf0:	d14a      	bne.n	8005c88 <_printf_i+0x1f0>
 8005bf2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005bf6:	b004      	add	sp, #16
 8005bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bfc:	6823      	ldr	r3, [r4, #0]
 8005bfe:	f043 0320 	orr.w	r3, r3, #32
 8005c02:	6023      	str	r3, [r4, #0]
 8005c04:	4832      	ldr	r0, [pc, #200]	@ (8005cd0 <_printf_i+0x238>)
 8005c06:	2778      	movs	r7, #120	@ 0x78
 8005c08:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005c0c:	6823      	ldr	r3, [r4, #0]
 8005c0e:	6831      	ldr	r1, [r6, #0]
 8005c10:	061f      	lsls	r7, r3, #24
 8005c12:	f851 5b04 	ldr.w	r5, [r1], #4
 8005c16:	d402      	bmi.n	8005c1e <_printf_i+0x186>
 8005c18:	065f      	lsls	r7, r3, #25
 8005c1a:	bf48      	it	mi
 8005c1c:	b2ad      	uxthmi	r5, r5
 8005c1e:	6031      	str	r1, [r6, #0]
 8005c20:	07d9      	lsls	r1, r3, #31
 8005c22:	bf44      	itt	mi
 8005c24:	f043 0320 	orrmi.w	r3, r3, #32
 8005c28:	6023      	strmi	r3, [r4, #0]
 8005c2a:	b11d      	cbz	r5, 8005c34 <_printf_i+0x19c>
 8005c2c:	2310      	movs	r3, #16
 8005c2e:	e7ad      	b.n	8005b8c <_printf_i+0xf4>
 8005c30:	4826      	ldr	r0, [pc, #152]	@ (8005ccc <_printf_i+0x234>)
 8005c32:	e7e9      	b.n	8005c08 <_printf_i+0x170>
 8005c34:	6823      	ldr	r3, [r4, #0]
 8005c36:	f023 0320 	bic.w	r3, r3, #32
 8005c3a:	6023      	str	r3, [r4, #0]
 8005c3c:	e7f6      	b.n	8005c2c <_printf_i+0x194>
 8005c3e:	4616      	mov	r6, r2
 8005c40:	e7bd      	b.n	8005bbe <_printf_i+0x126>
 8005c42:	6833      	ldr	r3, [r6, #0]
 8005c44:	6825      	ldr	r5, [r4, #0]
 8005c46:	6961      	ldr	r1, [r4, #20]
 8005c48:	1d18      	adds	r0, r3, #4
 8005c4a:	6030      	str	r0, [r6, #0]
 8005c4c:	062e      	lsls	r6, r5, #24
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	d501      	bpl.n	8005c56 <_printf_i+0x1be>
 8005c52:	6019      	str	r1, [r3, #0]
 8005c54:	e002      	b.n	8005c5c <_printf_i+0x1c4>
 8005c56:	0668      	lsls	r0, r5, #25
 8005c58:	d5fb      	bpl.n	8005c52 <_printf_i+0x1ba>
 8005c5a:	8019      	strh	r1, [r3, #0]
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	6123      	str	r3, [r4, #16]
 8005c60:	4616      	mov	r6, r2
 8005c62:	e7bc      	b.n	8005bde <_printf_i+0x146>
 8005c64:	6833      	ldr	r3, [r6, #0]
 8005c66:	1d1a      	adds	r2, r3, #4
 8005c68:	6032      	str	r2, [r6, #0]
 8005c6a:	681e      	ldr	r6, [r3, #0]
 8005c6c:	6862      	ldr	r2, [r4, #4]
 8005c6e:	2100      	movs	r1, #0
 8005c70:	4630      	mov	r0, r6
 8005c72:	f7fa fad5 	bl	8000220 <memchr>
 8005c76:	b108      	cbz	r0, 8005c7c <_printf_i+0x1e4>
 8005c78:	1b80      	subs	r0, r0, r6
 8005c7a:	6060      	str	r0, [r4, #4]
 8005c7c:	6863      	ldr	r3, [r4, #4]
 8005c7e:	6123      	str	r3, [r4, #16]
 8005c80:	2300      	movs	r3, #0
 8005c82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c86:	e7aa      	b.n	8005bde <_printf_i+0x146>
 8005c88:	6923      	ldr	r3, [r4, #16]
 8005c8a:	4632      	mov	r2, r6
 8005c8c:	4649      	mov	r1, r9
 8005c8e:	4640      	mov	r0, r8
 8005c90:	47d0      	blx	sl
 8005c92:	3001      	adds	r0, #1
 8005c94:	d0ad      	beq.n	8005bf2 <_printf_i+0x15a>
 8005c96:	6823      	ldr	r3, [r4, #0]
 8005c98:	079b      	lsls	r3, r3, #30
 8005c9a:	d413      	bmi.n	8005cc4 <_printf_i+0x22c>
 8005c9c:	68e0      	ldr	r0, [r4, #12]
 8005c9e:	9b03      	ldr	r3, [sp, #12]
 8005ca0:	4298      	cmp	r0, r3
 8005ca2:	bfb8      	it	lt
 8005ca4:	4618      	movlt	r0, r3
 8005ca6:	e7a6      	b.n	8005bf6 <_printf_i+0x15e>
 8005ca8:	2301      	movs	r3, #1
 8005caa:	4632      	mov	r2, r6
 8005cac:	4649      	mov	r1, r9
 8005cae:	4640      	mov	r0, r8
 8005cb0:	47d0      	blx	sl
 8005cb2:	3001      	adds	r0, #1
 8005cb4:	d09d      	beq.n	8005bf2 <_printf_i+0x15a>
 8005cb6:	3501      	adds	r5, #1
 8005cb8:	68e3      	ldr	r3, [r4, #12]
 8005cba:	9903      	ldr	r1, [sp, #12]
 8005cbc:	1a5b      	subs	r3, r3, r1
 8005cbe:	42ab      	cmp	r3, r5
 8005cc0:	dcf2      	bgt.n	8005ca8 <_printf_i+0x210>
 8005cc2:	e7eb      	b.n	8005c9c <_printf_i+0x204>
 8005cc4:	2500      	movs	r5, #0
 8005cc6:	f104 0619 	add.w	r6, r4, #25
 8005cca:	e7f5      	b.n	8005cb8 <_printf_i+0x220>
 8005ccc:	080060c9 	.word	0x080060c9
 8005cd0:	080060da 	.word	0x080060da

08005cd4 <__malloc_lock>:
 8005cd4:	4801      	ldr	r0, [pc, #4]	@ (8005cdc <__malloc_lock+0x8>)
 8005cd6:	f7ff bc75 	b.w	80055c4 <__retarget_lock_acquire_recursive>
 8005cda:	bf00      	nop
 8005cdc:	2000054c 	.word	0x2000054c

08005ce0 <__malloc_unlock>:
 8005ce0:	4801      	ldr	r0, [pc, #4]	@ (8005ce8 <__malloc_unlock+0x8>)
 8005ce2:	f7ff bc70 	b.w	80055c6 <__retarget_lock_release_recursive>
 8005ce6:	bf00      	nop
 8005ce8:	2000054c 	.word	0x2000054c

08005cec <_realloc_r>:
 8005cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cf0:	4607      	mov	r7, r0
 8005cf2:	4614      	mov	r4, r2
 8005cf4:	460d      	mov	r5, r1
 8005cf6:	b921      	cbnz	r1, 8005d02 <_realloc_r+0x16>
 8005cf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005cfc:	4611      	mov	r1, r2
 8005cfe:	f7ff bddd 	b.w	80058bc <_malloc_r>
 8005d02:	b92a      	cbnz	r2, 8005d10 <_realloc_r+0x24>
 8005d04:	f000 f858 	bl	8005db8 <_free_r>
 8005d08:	4625      	mov	r5, r4
 8005d0a:	4628      	mov	r0, r5
 8005d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d10:	f000 f89c 	bl	8005e4c <_malloc_usable_size_r>
 8005d14:	4284      	cmp	r4, r0
 8005d16:	4606      	mov	r6, r0
 8005d18:	d802      	bhi.n	8005d20 <_realloc_r+0x34>
 8005d1a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005d1e:	d8f4      	bhi.n	8005d0a <_realloc_r+0x1e>
 8005d20:	4621      	mov	r1, r4
 8005d22:	4638      	mov	r0, r7
 8005d24:	f7ff fdca 	bl	80058bc <_malloc_r>
 8005d28:	4680      	mov	r8, r0
 8005d2a:	b908      	cbnz	r0, 8005d30 <_realloc_r+0x44>
 8005d2c:	4645      	mov	r5, r8
 8005d2e:	e7ec      	b.n	8005d0a <_realloc_r+0x1e>
 8005d30:	42b4      	cmp	r4, r6
 8005d32:	4622      	mov	r2, r4
 8005d34:	4629      	mov	r1, r5
 8005d36:	bf28      	it	cs
 8005d38:	4632      	movcs	r2, r6
 8005d3a:	f000 f82f 	bl	8005d9c <memcpy>
 8005d3e:	4629      	mov	r1, r5
 8005d40:	4638      	mov	r0, r7
 8005d42:	f000 f839 	bl	8005db8 <_free_r>
 8005d46:	e7f1      	b.n	8005d2c <_realloc_r+0x40>

08005d48 <memmove>:
 8005d48:	4288      	cmp	r0, r1
 8005d4a:	b510      	push	{r4, lr}
 8005d4c:	eb01 0402 	add.w	r4, r1, r2
 8005d50:	d902      	bls.n	8005d58 <memmove+0x10>
 8005d52:	4284      	cmp	r4, r0
 8005d54:	4623      	mov	r3, r4
 8005d56:	d807      	bhi.n	8005d68 <memmove+0x20>
 8005d58:	1e43      	subs	r3, r0, #1
 8005d5a:	42a1      	cmp	r1, r4
 8005d5c:	d008      	beq.n	8005d70 <memmove+0x28>
 8005d5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d66:	e7f8      	b.n	8005d5a <memmove+0x12>
 8005d68:	4402      	add	r2, r0
 8005d6a:	4601      	mov	r1, r0
 8005d6c:	428a      	cmp	r2, r1
 8005d6e:	d100      	bne.n	8005d72 <memmove+0x2a>
 8005d70:	bd10      	pop	{r4, pc}
 8005d72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d7a:	e7f7      	b.n	8005d6c <memmove+0x24>

08005d7c <_sbrk_r>:
 8005d7c:	b538      	push	{r3, r4, r5, lr}
 8005d7e:	4d06      	ldr	r5, [pc, #24]	@ (8005d98 <_sbrk_r+0x1c>)
 8005d80:	2300      	movs	r3, #0
 8005d82:	4604      	mov	r4, r0
 8005d84:	4608      	mov	r0, r1
 8005d86:	602b      	str	r3, [r5, #0]
 8005d88:	f7fc f870 	bl	8001e6c <_sbrk>
 8005d8c:	1c43      	adds	r3, r0, #1
 8005d8e:	d102      	bne.n	8005d96 <_sbrk_r+0x1a>
 8005d90:	682b      	ldr	r3, [r5, #0]
 8005d92:	b103      	cbz	r3, 8005d96 <_sbrk_r+0x1a>
 8005d94:	6023      	str	r3, [r4, #0]
 8005d96:	bd38      	pop	{r3, r4, r5, pc}
 8005d98:	20000558 	.word	0x20000558

08005d9c <memcpy>:
 8005d9c:	440a      	add	r2, r1
 8005d9e:	4291      	cmp	r1, r2
 8005da0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005da4:	d100      	bne.n	8005da8 <memcpy+0xc>
 8005da6:	4770      	bx	lr
 8005da8:	b510      	push	{r4, lr}
 8005daa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005db2:	4291      	cmp	r1, r2
 8005db4:	d1f9      	bne.n	8005daa <memcpy+0xe>
 8005db6:	bd10      	pop	{r4, pc}

08005db8 <_free_r>:
 8005db8:	b538      	push	{r3, r4, r5, lr}
 8005dba:	4605      	mov	r5, r0
 8005dbc:	2900      	cmp	r1, #0
 8005dbe:	d041      	beq.n	8005e44 <_free_r+0x8c>
 8005dc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dc4:	1f0c      	subs	r4, r1, #4
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	bfb8      	it	lt
 8005dca:	18e4      	addlt	r4, r4, r3
 8005dcc:	f7ff ff82 	bl	8005cd4 <__malloc_lock>
 8005dd0:	4a1d      	ldr	r2, [pc, #116]	@ (8005e48 <_free_r+0x90>)
 8005dd2:	6813      	ldr	r3, [r2, #0]
 8005dd4:	b933      	cbnz	r3, 8005de4 <_free_r+0x2c>
 8005dd6:	6063      	str	r3, [r4, #4]
 8005dd8:	6014      	str	r4, [r2, #0]
 8005dda:	4628      	mov	r0, r5
 8005ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005de0:	f7ff bf7e 	b.w	8005ce0 <__malloc_unlock>
 8005de4:	42a3      	cmp	r3, r4
 8005de6:	d908      	bls.n	8005dfa <_free_r+0x42>
 8005de8:	6820      	ldr	r0, [r4, #0]
 8005dea:	1821      	adds	r1, r4, r0
 8005dec:	428b      	cmp	r3, r1
 8005dee:	bf01      	itttt	eq
 8005df0:	6819      	ldreq	r1, [r3, #0]
 8005df2:	685b      	ldreq	r3, [r3, #4]
 8005df4:	1809      	addeq	r1, r1, r0
 8005df6:	6021      	streq	r1, [r4, #0]
 8005df8:	e7ed      	b.n	8005dd6 <_free_r+0x1e>
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	b10b      	cbz	r3, 8005e04 <_free_r+0x4c>
 8005e00:	42a3      	cmp	r3, r4
 8005e02:	d9fa      	bls.n	8005dfa <_free_r+0x42>
 8005e04:	6811      	ldr	r1, [r2, #0]
 8005e06:	1850      	adds	r0, r2, r1
 8005e08:	42a0      	cmp	r0, r4
 8005e0a:	d10b      	bne.n	8005e24 <_free_r+0x6c>
 8005e0c:	6820      	ldr	r0, [r4, #0]
 8005e0e:	4401      	add	r1, r0
 8005e10:	1850      	adds	r0, r2, r1
 8005e12:	4283      	cmp	r3, r0
 8005e14:	6011      	str	r1, [r2, #0]
 8005e16:	d1e0      	bne.n	8005dda <_free_r+0x22>
 8005e18:	6818      	ldr	r0, [r3, #0]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	6053      	str	r3, [r2, #4]
 8005e1e:	4408      	add	r0, r1
 8005e20:	6010      	str	r0, [r2, #0]
 8005e22:	e7da      	b.n	8005dda <_free_r+0x22>
 8005e24:	d902      	bls.n	8005e2c <_free_r+0x74>
 8005e26:	230c      	movs	r3, #12
 8005e28:	602b      	str	r3, [r5, #0]
 8005e2a:	e7d6      	b.n	8005dda <_free_r+0x22>
 8005e2c:	6820      	ldr	r0, [r4, #0]
 8005e2e:	1821      	adds	r1, r4, r0
 8005e30:	428b      	cmp	r3, r1
 8005e32:	bf04      	itt	eq
 8005e34:	6819      	ldreq	r1, [r3, #0]
 8005e36:	685b      	ldreq	r3, [r3, #4]
 8005e38:	6063      	str	r3, [r4, #4]
 8005e3a:	bf04      	itt	eq
 8005e3c:	1809      	addeq	r1, r1, r0
 8005e3e:	6021      	streq	r1, [r4, #0]
 8005e40:	6054      	str	r4, [r2, #4]
 8005e42:	e7ca      	b.n	8005dda <_free_r+0x22>
 8005e44:	bd38      	pop	{r3, r4, r5, pc}
 8005e46:	bf00      	nop
 8005e48:	20000554 	.word	0x20000554

08005e4c <_malloc_usable_size_r>:
 8005e4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e50:	1f18      	subs	r0, r3, #4
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	bfbc      	itt	lt
 8005e56:	580b      	ldrlt	r3, [r1, r0]
 8005e58:	18c0      	addlt	r0, r0, r3
 8005e5a:	4770      	bx	lr

08005e5c <_init>:
 8005e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e5e:	bf00      	nop
 8005e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e62:	bc08      	pop	{r3}
 8005e64:	469e      	mov	lr, r3
 8005e66:	4770      	bx	lr

08005e68 <_fini>:
 8005e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e6a:	bf00      	nop
 8005e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e6e:	bc08      	pop	{r3}
 8005e70:	469e      	mov	lr, r3
 8005e72:	4770      	bx	lr
