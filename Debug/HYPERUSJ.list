
HYPERUSJ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005724  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023c  080058f4  080058f4  000068f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b30  08005b30  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005b30  08005b30  00006b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b38  08005b38  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b38  08005b38  00006b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b3c  08005b3c  00006b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005b40  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c0  2000005c  08005b9c  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000051c  08005b9c  0000751c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001207c  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022b3  00000000  00000000  00019108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001048  00000000  00000000  0001b3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ce3  00000000  00000000  0001c408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000273b0  00000000  00000000  0001d0eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001407f  00000000  00000000  0004449b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f464a  00000000  00000000  0005851a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014cb64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b24  00000000  00000000  0014cba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001516cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080058dc 	.word	0x080058dc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	080058dc 	.word	0x080058dc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	@ 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__aeabi_d2f>:
 800088c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000890:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000894:	bf24      	itt	cs
 8000896:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800089a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800089e:	d90d      	bls.n	80008bc <__aeabi_d2f+0x30>
 80008a0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80008a4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008a8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008ac:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80008b0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008b4:	bf08      	it	eq
 80008b6:	f020 0001 	biceq.w	r0, r0, #1
 80008ba:	4770      	bx	lr
 80008bc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80008c0:	d121      	bne.n	8000906 <__aeabi_d2f+0x7a>
 80008c2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80008c6:	bfbc      	itt	lt
 80008c8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80008cc:	4770      	bxlt	lr
 80008ce:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008d2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008d6:	f1c2 0218 	rsb	r2, r2, #24
 80008da:	f1c2 0c20 	rsb	ip, r2, #32
 80008de:	fa10 f30c 	lsls.w	r3, r0, ip
 80008e2:	fa20 f002 	lsr.w	r0, r0, r2
 80008e6:	bf18      	it	ne
 80008e8:	f040 0001 	orrne.w	r0, r0, #1
 80008ec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008f0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008f4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008f8:	ea40 000c 	orr.w	r0, r0, ip
 80008fc:	fa23 f302 	lsr.w	r3, r3, r2
 8000900:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000904:	e7cc      	b.n	80008a0 <__aeabi_d2f+0x14>
 8000906:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800090a:	d107      	bne.n	800091c <__aeabi_d2f+0x90>
 800090c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000910:	bf1e      	ittt	ne
 8000912:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000916:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800091a:	4770      	bxne	lr
 800091c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000920:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000924:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop

0800092c <__aeabi_uldivmod>:
 800092c:	b953      	cbnz	r3, 8000944 <__aeabi_uldivmod+0x18>
 800092e:	b94a      	cbnz	r2, 8000944 <__aeabi_uldivmod+0x18>
 8000930:	2900      	cmp	r1, #0
 8000932:	bf08      	it	eq
 8000934:	2800      	cmpeq	r0, #0
 8000936:	bf1c      	itt	ne
 8000938:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800093c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000940:	f000 b988 	b.w	8000c54 <__aeabi_idiv0>
 8000944:	f1ad 0c08 	sub.w	ip, sp, #8
 8000948:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800094c:	f000 f806 	bl	800095c <__udivmoddi4>
 8000950:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000954:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000958:	b004      	add	sp, #16
 800095a:	4770      	bx	lr

0800095c <__udivmoddi4>:
 800095c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000960:	9d08      	ldr	r5, [sp, #32]
 8000962:	468e      	mov	lr, r1
 8000964:	4604      	mov	r4, r0
 8000966:	4688      	mov	r8, r1
 8000968:	2b00      	cmp	r3, #0
 800096a:	d14a      	bne.n	8000a02 <__udivmoddi4+0xa6>
 800096c:	428a      	cmp	r2, r1
 800096e:	4617      	mov	r7, r2
 8000970:	d962      	bls.n	8000a38 <__udivmoddi4+0xdc>
 8000972:	fab2 f682 	clz	r6, r2
 8000976:	b14e      	cbz	r6, 800098c <__udivmoddi4+0x30>
 8000978:	f1c6 0320 	rsb	r3, r6, #32
 800097c:	fa01 f806 	lsl.w	r8, r1, r6
 8000980:	fa20 f303 	lsr.w	r3, r0, r3
 8000984:	40b7      	lsls	r7, r6
 8000986:	ea43 0808 	orr.w	r8, r3, r8
 800098a:	40b4      	lsls	r4, r6
 800098c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000990:	fa1f fc87 	uxth.w	ip, r7
 8000994:	fbb8 f1fe 	udiv	r1, r8, lr
 8000998:	0c23      	lsrs	r3, r4, #16
 800099a:	fb0e 8811 	mls	r8, lr, r1, r8
 800099e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009a2:	fb01 f20c 	mul.w	r2, r1, ip
 80009a6:	429a      	cmp	r2, r3
 80009a8:	d909      	bls.n	80009be <__udivmoddi4+0x62>
 80009aa:	18fb      	adds	r3, r7, r3
 80009ac:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80009b0:	f080 80ea 	bcs.w	8000b88 <__udivmoddi4+0x22c>
 80009b4:	429a      	cmp	r2, r3
 80009b6:	f240 80e7 	bls.w	8000b88 <__udivmoddi4+0x22c>
 80009ba:	3902      	subs	r1, #2
 80009bc:	443b      	add	r3, r7
 80009be:	1a9a      	subs	r2, r3, r2
 80009c0:	b2a3      	uxth	r3, r4
 80009c2:	fbb2 f0fe 	udiv	r0, r2, lr
 80009c6:	fb0e 2210 	mls	r2, lr, r0, r2
 80009ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80009ce:	fb00 fc0c 	mul.w	ip, r0, ip
 80009d2:	459c      	cmp	ip, r3
 80009d4:	d909      	bls.n	80009ea <__udivmoddi4+0x8e>
 80009d6:	18fb      	adds	r3, r7, r3
 80009d8:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80009dc:	f080 80d6 	bcs.w	8000b8c <__udivmoddi4+0x230>
 80009e0:	459c      	cmp	ip, r3
 80009e2:	f240 80d3 	bls.w	8000b8c <__udivmoddi4+0x230>
 80009e6:	443b      	add	r3, r7
 80009e8:	3802      	subs	r0, #2
 80009ea:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009ee:	eba3 030c 	sub.w	r3, r3, ip
 80009f2:	2100      	movs	r1, #0
 80009f4:	b11d      	cbz	r5, 80009fe <__udivmoddi4+0xa2>
 80009f6:	40f3      	lsrs	r3, r6
 80009f8:	2200      	movs	r2, #0
 80009fa:	e9c5 3200 	strd	r3, r2, [r5]
 80009fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a02:	428b      	cmp	r3, r1
 8000a04:	d905      	bls.n	8000a12 <__udivmoddi4+0xb6>
 8000a06:	b10d      	cbz	r5, 8000a0c <__udivmoddi4+0xb0>
 8000a08:	e9c5 0100 	strd	r0, r1, [r5]
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4608      	mov	r0, r1
 8000a10:	e7f5      	b.n	80009fe <__udivmoddi4+0xa2>
 8000a12:	fab3 f183 	clz	r1, r3
 8000a16:	2900      	cmp	r1, #0
 8000a18:	d146      	bne.n	8000aa8 <__udivmoddi4+0x14c>
 8000a1a:	4573      	cmp	r3, lr
 8000a1c:	d302      	bcc.n	8000a24 <__udivmoddi4+0xc8>
 8000a1e:	4282      	cmp	r2, r0
 8000a20:	f200 8105 	bhi.w	8000c2e <__udivmoddi4+0x2d2>
 8000a24:	1a84      	subs	r4, r0, r2
 8000a26:	eb6e 0203 	sbc.w	r2, lr, r3
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	4690      	mov	r8, r2
 8000a2e:	2d00      	cmp	r5, #0
 8000a30:	d0e5      	beq.n	80009fe <__udivmoddi4+0xa2>
 8000a32:	e9c5 4800 	strd	r4, r8, [r5]
 8000a36:	e7e2      	b.n	80009fe <__udivmoddi4+0xa2>
 8000a38:	2a00      	cmp	r2, #0
 8000a3a:	f000 8090 	beq.w	8000b5e <__udivmoddi4+0x202>
 8000a3e:	fab2 f682 	clz	r6, r2
 8000a42:	2e00      	cmp	r6, #0
 8000a44:	f040 80a4 	bne.w	8000b90 <__udivmoddi4+0x234>
 8000a48:	1a8a      	subs	r2, r1, r2
 8000a4a:	0c03      	lsrs	r3, r0, #16
 8000a4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a50:	b280      	uxth	r0, r0
 8000a52:	b2bc      	uxth	r4, r7
 8000a54:	2101      	movs	r1, #1
 8000a56:	fbb2 fcfe 	udiv	ip, r2, lr
 8000a5a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000a5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a62:	fb04 f20c 	mul.w	r2, r4, ip
 8000a66:	429a      	cmp	r2, r3
 8000a68:	d907      	bls.n	8000a7a <__udivmoddi4+0x11e>
 8000a6a:	18fb      	adds	r3, r7, r3
 8000a6c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000a70:	d202      	bcs.n	8000a78 <__udivmoddi4+0x11c>
 8000a72:	429a      	cmp	r2, r3
 8000a74:	f200 80e0 	bhi.w	8000c38 <__udivmoddi4+0x2dc>
 8000a78:	46c4      	mov	ip, r8
 8000a7a:	1a9b      	subs	r3, r3, r2
 8000a7c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000a80:	fb0e 3312 	mls	r3, lr, r2, r3
 8000a84:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000a88:	fb02 f404 	mul.w	r4, r2, r4
 8000a8c:	429c      	cmp	r4, r3
 8000a8e:	d907      	bls.n	8000aa0 <__udivmoddi4+0x144>
 8000a90:	18fb      	adds	r3, r7, r3
 8000a92:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000a96:	d202      	bcs.n	8000a9e <__udivmoddi4+0x142>
 8000a98:	429c      	cmp	r4, r3
 8000a9a:	f200 80ca 	bhi.w	8000c32 <__udivmoddi4+0x2d6>
 8000a9e:	4602      	mov	r2, r0
 8000aa0:	1b1b      	subs	r3, r3, r4
 8000aa2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000aa6:	e7a5      	b.n	80009f4 <__udivmoddi4+0x98>
 8000aa8:	f1c1 0620 	rsb	r6, r1, #32
 8000aac:	408b      	lsls	r3, r1
 8000aae:	fa22 f706 	lsr.w	r7, r2, r6
 8000ab2:	431f      	orrs	r7, r3
 8000ab4:	fa0e f401 	lsl.w	r4, lr, r1
 8000ab8:	fa20 f306 	lsr.w	r3, r0, r6
 8000abc:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ac0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ac4:	4323      	orrs	r3, r4
 8000ac6:	fa00 f801 	lsl.w	r8, r0, r1
 8000aca:	fa1f fc87 	uxth.w	ip, r7
 8000ace:	fbbe f0f9 	udiv	r0, lr, r9
 8000ad2:	0c1c      	lsrs	r4, r3, #16
 8000ad4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ad8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000adc:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ae0:	45a6      	cmp	lr, r4
 8000ae2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ae6:	d909      	bls.n	8000afc <__udivmoddi4+0x1a0>
 8000ae8:	193c      	adds	r4, r7, r4
 8000aea:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000aee:	f080 809c 	bcs.w	8000c2a <__udivmoddi4+0x2ce>
 8000af2:	45a6      	cmp	lr, r4
 8000af4:	f240 8099 	bls.w	8000c2a <__udivmoddi4+0x2ce>
 8000af8:	3802      	subs	r0, #2
 8000afa:	443c      	add	r4, r7
 8000afc:	eba4 040e 	sub.w	r4, r4, lr
 8000b00:	fa1f fe83 	uxth.w	lr, r3
 8000b04:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b08:	fb09 4413 	mls	r4, r9, r3, r4
 8000b0c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000b10:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b14:	45a4      	cmp	ip, r4
 8000b16:	d908      	bls.n	8000b2a <__udivmoddi4+0x1ce>
 8000b18:	193c      	adds	r4, r7, r4
 8000b1a:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000b1e:	f080 8082 	bcs.w	8000c26 <__udivmoddi4+0x2ca>
 8000b22:	45a4      	cmp	ip, r4
 8000b24:	d97f      	bls.n	8000c26 <__udivmoddi4+0x2ca>
 8000b26:	3b02      	subs	r3, #2
 8000b28:	443c      	add	r4, r7
 8000b2a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000b2e:	eba4 040c 	sub.w	r4, r4, ip
 8000b32:	fba0 ec02 	umull	lr, ip, r0, r2
 8000b36:	4564      	cmp	r4, ip
 8000b38:	4673      	mov	r3, lr
 8000b3a:	46e1      	mov	r9, ip
 8000b3c:	d362      	bcc.n	8000c04 <__udivmoddi4+0x2a8>
 8000b3e:	d05f      	beq.n	8000c00 <__udivmoddi4+0x2a4>
 8000b40:	b15d      	cbz	r5, 8000b5a <__udivmoddi4+0x1fe>
 8000b42:	ebb8 0203 	subs.w	r2, r8, r3
 8000b46:	eb64 0409 	sbc.w	r4, r4, r9
 8000b4a:	fa04 f606 	lsl.w	r6, r4, r6
 8000b4e:	fa22 f301 	lsr.w	r3, r2, r1
 8000b52:	431e      	orrs	r6, r3
 8000b54:	40cc      	lsrs	r4, r1
 8000b56:	e9c5 6400 	strd	r6, r4, [r5]
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	e74f      	b.n	80009fe <__udivmoddi4+0xa2>
 8000b5e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000b62:	0c01      	lsrs	r1, r0, #16
 8000b64:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000b68:	b280      	uxth	r0, r0
 8000b6a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000b6e:	463b      	mov	r3, r7
 8000b70:	4638      	mov	r0, r7
 8000b72:	463c      	mov	r4, r7
 8000b74:	46b8      	mov	r8, r7
 8000b76:	46be      	mov	lr, r7
 8000b78:	2620      	movs	r6, #32
 8000b7a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000b7e:	eba2 0208 	sub.w	r2, r2, r8
 8000b82:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000b86:	e766      	b.n	8000a56 <__udivmoddi4+0xfa>
 8000b88:	4601      	mov	r1, r0
 8000b8a:	e718      	b.n	80009be <__udivmoddi4+0x62>
 8000b8c:	4610      	mov	r0, r2
 8000b8e:	e72c      	b.n	80009ea <__udivmoddi4+0x8e>
 8000b90:	f1c6 0220 	rsb	r2, r6, #32
 8000b94:	fa2e f302 	lsr.w	r3, lr, r2
 8000b98:	40b7      	lsls	r7, r6
 8000b9a:	40b1      	lsls	r1, r6
 8000b9c:	fa20 f202 	lsr.w	r2, r0, r2
 8000ba0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba4:	430a      	orrs	r2, r1
 8000ba6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000baa:	b2bc      	uxth	r4, r7
 8000bac:	fb0e 3318 	mls	r3, lr, r8, r3
 8000bb0:	0c11      	lsrs	r1, r2, #16
 8000bb2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bb6:	fb08 f904 	mul.w	r9, r8, r4
 8000bba:	40b0      	lsls	r0, r6
 8000bbc:	4589      	cmp	r9, r1
 8000bbe:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000bc2:	b280      	uxth	r0, r0
 8000bc4:	d93e      	bls.n	8000c44 <__udivmoddi4+0x2e8>
 8000bc6:	1879      	adds	r1, r7, r1
 8000bc8:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000bcc:	d201      	bcs.n	8000bd2 <__udivmoddi4+0x276>
 8000bce:	4589      	cmp	r9, r1
 8000bd0:	d81f      	bhi.n	8000c12 <__udivmoddi4+0x2b6>
 8000bd2:	eba1 0109 	sub.w	r1, r1, r9
 8000bd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bda:	fb09 f804 	mul.w	r8, r9, r4
 8000bde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000be2:	b292      	uxth	r2, r2
 8000be4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000be8:	4542      	cmp	r2, r8
 8000bea:	d229      	bcs.n	8000c40 <__udivmoddi4+0x2e4>
 8000bec:	18ba      	adds	r2, r7, r2
 8000bee:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000bf2:	d2c4      	bcs.n	8000b7e <__udivmoddi4+0x222>
 8000bf4:	4542      	cmp	r2, r8
 8000bf6:	d2c2      	bcs.n	8000b7e <__udivmoddi4+0x222>
 8000bf8:	f1a9 0102 	sub.w	r1, r9, #2
 8000bfc:	443a      	add	r2, r7
 8000bfe:	e7be      	b.n	8000b7e <__udivmoddi4+0x222>
 8000c00:	45f0      	cmp	r8, lr
 8000c02:	d29d      	bcs.n	8000b40 <__udivmoddi4+0x1e4>
 8000c04:	ebbe 0302 	subs.w	r3, lr, r2
 8000c08:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000c0c:	3801      	subs	r0, #1
 8000c0e:	46e1      	mov	r9, ip
 8000c10:	e796      	b.n	8000b40 <__udivmoddi4+0x1e4>
 8000c12:	eba7 0909 	sub.w	r9, r7, r9
 8000c16:	4449      	add	r1, r9
 8000c18:	f1a8 0c02 	sub.w	ip, r8, #2
 8000c1c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c20:	fb09 f804 	mul.w	r8, r9, r4
 8000c24:	e7db      	b.n	8000bde <__udivmoddi4+0x282>
 8000c26:	4673      	mov	r3, lr
 8000c28:	e77f      	b.n	8000b2a <__udivmoddi4+0x1ce>
 8000c2a:	4650      	mov	r0, sl
 8000c2c:	e766      	b.n	8000afc <__udivmoddi4+0x1a0>
 8000c2e:	4608      	mov	r0, r1
 8000c30:	e6fd      	b.n	8000a2e <__udivmoddi4+0xd2>
 8000c32:	443b      	add	r3, r7
 8000c34:	3a02      	subs	r2, #2
 8000c36:	e733      	b.n	8000aa0 <__udivmoddi4+0x144>
 8000c38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c3c:	443b      	add	r3, r7
 8000c3e:	e71c      	b.n	8000a7a <__udivmoddi4+0x11e>
 8000c40:	4649      	mov	r1, r9
 8000c42:	e79c      	b.n	8000b7e <__udivmoddi4+0x222>
 8000c44:	eba1 0109 	sub.w	r1, r1, r9
 8000c48:	46c4      	mov	ip, r8
 8000c4a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c4e:	fb09 f804 	mul.w	r8, r9, r4
 8000c52:	e7c4      	b.n	8000bde <__udivmoddi4+0x282>

08000c54 <__aeabi_idiv0>:
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <INA226_INIT>:
void INA226_I2C_Write(uint8_t pByte, uint16_t Data);
void INA226_I2C_Read(uint8_t pByte, uint16_t* pData);
void INA226_I2C_ReadBuff(uint8_t pByte, uint8_t* pData, uint16_t size);

void INA226_INIT(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
	INA226_I2C_Write(INA226_CONFIG_REG, 0x4127); // Default
 8000c5c:	f244 1127 	movw	r1, #16679	@ 0x4127
 8000c60:	2000      	movs	r0, #0
 8000c62:	f000 f8d5 	bl	8000e10 <INA226_I2C_Write>
	INA226_SetCalibration(R_SHUNT,8);
 8000c66:	eef2 0a00 	vmov.f32	s1, #32	@ 0x41000000  8.0
 8000c6a:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8000c78 <INA226_INIT+0x20>
 8000c6e:	f000 f885 	bl	8000d7c <INA226_SetCalibration>
//	INA226_Config(ShuntAndBusCont, ConvTime_1ms1, ConvTime_1ms1, Num_AVG_1); // Default
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	3c23d70a 	.word	0x3c23d70a

08000c7c <INA226_ID>:
	
	INA226_I2C_Write(INA226_CONFIG_REG, reg);
}

uint16_t INA226_ID(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
	INA226_I2C_Read(INA226_DIE_ID_REG,Buff);
 8000c80:	4905      	ldr	r1, [pc, #20]	@ (8000c98 <INA226_ID+0x1c>)
 8000c82:	20ff      	movs	r0, #255	@ 0xff
 8000c84:	f000 f8e8 	bl	8000e58 <INA226_I2C_Read>
	tempReg = Buff[0]; 
 8000c88:	4b03      	ldr	r3, [pc, #12]	@ (8000c98 <INA226_ID+0x1c>)
 8000c8a:	881a      	ldrh	r2, [r3, #0]
 8000c8c:	4b03      	ldr	r3, [pc, #12]	@ (8000c9c <INA226_ID+0x20>)
 8000c8e:	801a      	strh	r2, [r3, #0]
	return tempReg;
 8000c90:	4b02      	ldr	r3, [pc, #8]	@ (8000c9c <INA226_ID+0x20>)
 8000c92:	881b      	ldrh	r3, [r3, #0]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20000078 	.word	0x20000078
 8000c9c:	2000008c 	.word	0x2000008c

08000ca0 <INA226_ShuntVoltage>:
//	*current = INA226_values.Current * 1e-03;
//	*power   = INA226_values.Power * 25e-03;
	
}

float INA226_ShuntVoltage (void){
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0

	INA226_I2C_Read(INA226_SHUNT_VOLTAGE_REG,&tempReg);
 8000ca4:	490e      	ldr	r1, [pc, #56]	@ (8000ce0 <INA226_ShuntVoltage+0x40>)
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	f000 f8d6 	bl	8000e58 <INA226_I2C_Read>
	return tempReg * 2.5e-06;
 8000cac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce0 <INA226_ShuntVoltage+0x40>)
 8000cae:	881b      	ldrh	r3, [r3, #0]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff fd81 	bl	80007b8 <__aeabi_i2d>
 8000cb6:	a308      	add	r3, pc, #32	@ (adr r3, 8000cd8 <INA226_ShuntVoltage+0x38>)
 8000cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cbc:	f7ff fb00 	bl	80002c0 <__aeabi_dmul>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	460b      	mov	r3, r1
 8000cc4:	4610      	mov	r0, r2
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	f7ff fde0 	bl	800088c <__aeabi_d2f>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	ee07 3a90 	vmov	s15, r3

}
 8000cd2:	eeb0 0a67 	vmov.f32	s0, s15
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	88e368f1 	.word	0x88e368f1
 8000cdc:	3ec4f8b5 	.word	0x3ec4f8b5
 8000ce0:	2000008c 	.word	0x2000008c

08000ce4 <INA226_BusVoltage>:

float INA226_BusVoltage (void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
	INA226_I2C_Read(INA226_BUS_VOLTAGE_REG,&tempReg);
 8000ce8:	4908      	ldr	r1, [pc, #32]	@ (8000d0c <INA226_BusVoltage+0x28>)
 8000cea:	2002      	movs	r0, #2
 8000cec:	f000 f8b4 	bl	8000e58 <INA226_I2C_Read>
	return tempReg * 1.25e-03f;	
 8000cf0:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <INA226_BusVoltage+0x28>)
 8000cf2:	881b      	ldrh	r3, [r3, #0]
 8000cf4:	ee07 3a90 	vmov	s15, r3
 8000cf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cfc:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 8000d10 <INA226_BusVoltage+0x2c>
 8000d00:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000d04:	eeb0 0a67 	vmov.f32	s0, s15
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	2000008c 	.word	0x2000008c
 8000d10:	3aa3d70a 	.word	0x3aa3d70a

08000d14 <INA226_Power>:

float INA226_Power (void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
	INA226_I2C_Read(INA226_POWER_REG,&tempReg);
 8000d18:	490a      	ldr	r1, [pc, #40]	@ (8000d44 <INA226_Power+0x30>)
 8000d1a:	2003      	movs	r0, #3
 8000d1c:	f000 f89c 	bl	8000e58 <INA226_I2C_Read>
	
	return tempReg * (INA226_values.CurrentLSB*25);
 8000d20:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <INA226_Power+0x30>)
 8000d22:	881b      	ldrh	r3, [r3, #0]
 8000d24:	ee07 3a90 	vmov	s15, r3
 8000d28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d2c:	4b06      	ldr	r3, [pc, #24]	@ (8000d48 <INA226_Power+0x34>)
 8000d2e:	edd3 7a03 	vldr	s15, [r3, #12]
 8000d32:	eef3 6a09 	vmov.f32	s13, #57	@ 0x41c80000  25.0
 8000d36:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8000d3e:	eeb0 0a67 	vmov.f32	s0, s15
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	2000008c 	.word	0x2000008c
 8000d48:	20000090 	.word	0x20000090

08000d4c <INA226_Current>:

float INA226_Current (void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
	INA226_I2C_Read(INA226_CURRENT_REG,&tempReg);
 8000d50:	4908      	ldr	r1, [pc, #32]	@ (8000d74 <INA226_Current+0x28>)
 8000d52:	2004      	movs	r0, #4
 8000d54:	f000 f880 	bl	8000e58 <INA226_I2C_Read>
	
	return tempReg * INA226_values.CurrentLSB;
 8000d58:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <INA226_Current+0x28>)
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	ee07 3a90 	vmov	s15, r3
 8000d60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d64:	4b04      	ldr	r3, [pc, #16]	@ (8000d78 <INA226_Current+0x2c>)
 8000d66:	edd3 7a03 	vldr	s15, [r3, #12]
 8000d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
//	return ((INA226_ShuntVoltage()*INA226_values.Calibration)/2048) * INA226_values.CurrentLSB;
}
 8000d6e:	eeb0 0a67 	vmov.f32	s0, s15
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	2000008c 	.word	0x2000008c
 8000d78:	20000090 	.word	0x20000090

08000d7c <INA226_SetCalibration>:

void INA226_SetCalibration (float R_Shunt,float MaxExpCurrent)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	ed87 0a01 	vstr	s0, [r7, #4]
 8000d86:	edc7 0a00 	vstr	s1, [r7]
	float Current_LSB;
	float CAL;
	
	if(MaxExpCurrent > 8)
 8000d8a:	edd7 7a00 	vldr	s15, [r7]
 8000d8e:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8000d92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d9a:	dd01      	ble.n	8000da0 <INA226_SetCalibration+0x24>
	{
		MaxExpCurrent = 8.192f;
 8000d9c:	4b18      	ldr	r3, [pc, #96]	@ (8000e00 <INA226_SetCalibration+0x84>)
 8000d9e:	603b      	str	r3, [r7, #0]
	}
	
	Current_LSB = MaxExpCurrent / 32768.0f;
 8000da0:	ed97 7a00 	vldr	s14, [r7]
 8000da4:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8000e04 <INA226_SetCalibration+0x88>
 8000da8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dac:	edc7 7a03 	vstr	s15, [r7, #12]
	
	CAL = 0.00512f/(Current_LSB*R_Shunt);
 8000db0:	ed97 7a03 	vldr	s14, [r7, #12]
 8000db4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000db8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000dbc:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8000e08 <INA226_SetCalibration+0x8c>
 8000dc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dc4:	edc7 7a02 	vstr	s15, [r7, #8]
	INA226_values.Calibration = CAL;
 8000dc8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000dcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dd0:	ee17 3a90 	vmov	r3, s15
 8000dd4:	b29a      	uxth	r2, r3
 8000dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8000e0c <INA226_SetCalibration+0x90>)
 8000dd8:	811a      	strh	r2, [r3, #8]
	INA226_values.CurrentLSB = Current_LSB;
 8000dda:	4a0c      	ldr	r2, [pc, #48]	@ (8000e0c <INA226_SetCalibration+0x90>)
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	60d3      	str	r3, [r2, #12]
	INA226_I2C_Write(INA226_CALIBRATION_REG, (uint16_t)CAL);
 8000de0:	edd7 7a02 	vldr	s15, [r7, #8]
 8000de4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000de8:	ee17 3a90 	vmov	r3, s15
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	4619      	mov	r1, r3
 8000df0:	2005      	movs	r0, #5
 8000df2:	f000 f80d 	bl	8000e10 <INA226_I2C_Write>
}
 8000df6:	bf00      	nop
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	4103126f 	.word	0x4103126f
 8000e04:	47000000 	.word	0x47000000
 8000e08:	3ba7c5ac 	.word	0x3ba7c5ac
 8000e0c:	20000090 	.word	0x20000090

08000e10 <INA226_I2C_Write>:
}

/*	*/

void INA226_I2C_Write(uint8_t pByte, uint16_t Data)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b088      	sub	sp, #32
 8000e14:	af04      	add	r7, sp, #16
 8000e16:	4603      	mov	r3, r0
 8000e18:	460a      	mov	r2, r1
 8000e1a:	71fb      	strb	r3, [r7, #7]
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	80bb      	strh	r3, [r7, #4]
	uint8_t reg[2];
	
	reg[0] = (Data & 0xFF00) >> 8;
 8000e20:	88bb      	ldrh	r3, [r7, #4]
 8000e22:	0a1b      	lsrs	r3, r3, #8
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	733b      	strb	r3, [r7, #12]
	reg[1] =  Data & 0xFF;
 8000e2a:	88bb      	ldrh	r3, [r7, #4]
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	737b      	strb	r3, [r7, #13]
	
	HAL_I2C_Mem_Write(&hi2c2, INA226_ADDRESS << 1, pByte, 1, reg, 2, 100);
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	b29a      	uxth	r2, r3
 8000e34:	2364      	movs	r3, #100	@ 0x64
 8000e36:	9302      	str	r3, [sp, #8]
 8000e38:	2302      	movs	r3, #2
 8000e3a:	9301      	str	r3, [sp, #4]
 8000e3c:	f107 030c 	add.w	r3, r7, #12
 8000e40:	9300      	str	r3, [sp, #0]
 8000e42:	2301      	movs	r3, #1
 8000e44:	2180      	movs	r1, #128	@ 0x80
 8000e46:	4803      	ldr	r0, [pc, #12]	@ (8000e54 <INA226_I2C_Write+0x44>)
 8000e48:	f001 fa70 	bl	800232c <HAL_I2C_Mem_Write>
	
}
 8000e4c:	bf00      	nop
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	200000f4 	.word	0x200000f4

08000e58 <INA226_I2C_Read>:

void INA226_I2C_Read(uint8_t pByte, uint16_t* pData)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b088      	sub	sp, #32
 8000e5c:	af04      	add	r7, sp, #16
 8000e5e:	4603      	mov	r3, r0
 8000e60:	6039      	str	r1, [r7, #0]
 8000e62:	71fb      	strb	r3, [r7, #7]
	uint8_t reg[2];

	HAL_I2C_Mem_Read(&hi2c2, INA226_ADDRESS << 1, pByte, 1, reg, 2, 100);
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	b29a      	uxth	r2, r3
 8000e68:	2364      	movs	r3, #100	@ 0x64
 8000e6a:	9302      	str	r3, [sp, #8]
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	9301      	str	r3, [sp, #4]
 8000e70:	f107 030c 	add.w	r3, r7, #12
 8000e74:	9300      	str	r3, [sp, #0]
 8000e76:	2301      	movs	r3, #1
 8000e78:	2180      	movs	r1, #128	@ 0x80
 8000e7a:	4809      	ldr	r0, [pc, #36]	@ (8000ea0 <INA226_I2C_Read+0x48>)
 8000e7c:	f001 fb6a 	bl	8002554 <HAL_I2C_Mem_Read>
	*pData = (reg[0] << 8) | reg[1];
 8000e80:	7b3b      	ldrb	r3, [r7, #12]
 8000e82:	b21b      	sxth	r3, r3
 8000e84:	021b      	lsls	r3, r3, #8
 8000e86:	b21a      	sxth	r2, r3
 8000e88:	7b7b      	ldrb	r3, [r7, #13]
 8000e8a:	b21b      	sxth	r3, r3
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	b21b      	sxth	r3, r3
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	801a      	strh	r2, [r3, #0]
	
}
 8000e96:	bf00      	nop
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200000f4 	.word	0x200000f4

08000ea4 <INA226_Test_Simple>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// INA226 basit test fonksiyonu
void INA226_Test_Simple(void) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
    // I2C adres taraması
    sprintf(uart_buffer, "I2C2 adres taraması (0x40-0x4F):\r\n");
 8000eaa:	4937      	ldr	r1, [pc, #220]	@ (8000f88 <INA226_Test_Simple+0xe4>)
 8000eac:	4837      	ldr	r0, [pc, #220]	@ (8000f8c <INA226_Test_Simple+0xe8>)
 8000eae:	f004 f875 	bl	8004f9c <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 8000eb2:	4836      	ldr	r0, [pc, #216]	@ (8000f8c <INA226_Test_Simple+0xe8>)
 8000eb4:	f7ff f9ac 	bl	8000210 <strlen>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	b29a      	uxth	r2, r3
 8000ebc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ec0:	4932      	ldr	r1, [pc, #200]	@ (8000f8c <INA226_Test_Simple+0xe8>)
 8000ec2:	4833      	ldr	r0, [pc, #204]	@ (8000f90 <INA226_Test_Simple+0xec>)
 8000ec4:	f003 fbb2 	bl	800462c <HAL_UART_Transmit>

    for (uint8_t addr = 0x40; addr <= 0x4F; addr++) {
 8000ec8:	2340      	movs	r3, #64	@ 0x40
 8000eca:	71fb      	strb	r3, [r7, #7]
 8000ecc:	e020      	b.n	8000f10 <INA226_Test_Simple+0x6c>
        if (HAL_I2C_IsDeviceReady(&hi2c2, addr << 1, 3, 1000) == HAL_OK) {
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	b299      	uxth	r1, r3
 8000ed6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eda:	2203      	movs	r2, #3
 8000edc:	482d      	ldr	r0, [pc, #180]	@ (8000f94 <INA226_Test_Simple+0xf0>)
 8000ede:	f001 fc53 	bl	8002788 <HAL_I2C_IsDeviceReady>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d110      	bne.n	8000f0a <INA226_Test_Simple+0x66>
            sprintf(uart_buffer, "  Cihaz bulundu: 0x%02X\r\n", addr);
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	461a      	mov	r2, r3
 8000eec:	492a      	ldr	r1, [pc, #168]	@ (8000f98 <INA226_Test_Simple+0xf4>)
 8000eee:	4827      	ldr	r0, [pc, #156]	@ (8000f8c <INA226_Test_Simple+0xe8>)
 8000ef0:	f004 f854 	bl	8004f9c <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 8000ef4:	4825      	ldr	r0, [pc, #148]	@ (8000f8c <INA226_Test_Simple+0xe8>)
 8000ef6:	f7ff f98b 	bl	8000210 <strlen>
 8000efa:	4603      	mov	r3, r0
 8000efc:	b29a      	uxth	r2, r3
 8000efe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f02:	4922      	ldr	r1, [pc, #136]	@ (8000f8c <INA226_Test_Simple+0xe8>)
 8000f04:	4822      	ldr	r0, [pc, #136]	@ (8000f90 <INA226_Test_Simple+0xec>)
 8000f06:	f003 fb91 	bl	800462c <HAL_UART_Transmit>
    for (uint8_t addr = 0x40; addr <= 0x4F; addr++) {
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	71fb      	strb	r3, [r7, #7]
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	2b4f      	cmp	r3, #79	@ 0x4f
 8000f14:	d9db      	bls.n	8000ece <INA226_Test_Simple+0x2a>
        }
    }

    // INA226 Device ID test
    uint16_t device_id = INA226_ID();
 8000f16:	f7ff feb1 	bl	8000c7c <INA226_ID>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	80bb      	strh	r3, [r7, #4]
    sprintf(uart_buffer, "INA226 Device ID: 0x%04X (0x2260 bekleniyor)\r\n", device_id);
 8000f1e:	88bb      	ldrh	r3, [r7, #4]
 8000f20:	461a      	mov	r2, r3
 8000f22:	491e      	ldr	r1, [pc, #120]	@ (8000f9c <INA226_Test_Simple+0xf8>)
 8000f24:	4819      	ldr	r0, [pc, #100]	@ (8000f8c <INA226_Test_Simple+0xe8>)
 8000f26:	f004 f839 	bl	8004f9c <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 8000f2a:	4818      	ldr	r0, [pc, #96]	@ (8000f8c <INA226_Test_Simple+0xe8>)
 8000f2c:	f7ff f970 	bl	8000210 <strlen>
 8000f30:	4603      	mov	r3, r0
 8000f32:	b29a      	uxth	r2, r3
 8000f34:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f38:	4914      	ldr	r1, [pc, #80]	@ (8000f8c <INA226_Test_Simple+0xe8>)
 8000f3a:	4815      	ldr	r0, [pc, #84]	@ (8000f90 <INA226_Test_Simple+0xec>)
 8000f3c:	f003 fb76 	bl	800462c <HAL_UART_Transmit>

    if (device_id == 0x2260) {
 8000f40:	88bb      	ldrh	r3, [r7, #4]
 8000f42:	f242 2260 	movw	r2, #8800	@ 0x2260
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d107      	bne.n	8000f5a <INA226_Test_Simple+0xb6>
        ina226_connection_status = 1;
 8000f4a:	4b15      	ldr	r3, [pc, #84]	@ (8000fa0 <INA226_Test_Simple+0xfc>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	701a      	strb	r2, [r3, #0]
        sprintf(uart_buffer, "INA226 bağlantısı BAŞARILI!\r\n");
 8000f50:	4914      	ldr	r1, [pc, #80]	@ (8000fa4 <INA226_Test_Simple+0x100>)
 8000f52:	480e      	ldr	r0, [pc, #56]	@ (8000f8c <INA226_Test_Simple+0xe8>)
 8000f54:	f004 f822 	bl	8004f9c <siprintf>
 8000f58:	e006      	b.n	8000f68 <INA226_Test_Simple+0xc4>
    } else {
        ina226_connection_status = 0;
 8000f5a:	4b11      	ldr	r3, [pc, #68]	@ (8000fa0 <INA226_Test_Simple+0xfc>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	701a      	strb	r2, [r3, #0]
        sprintf(uart_buffer, "INA226 bağlantısı BAŞARISIZ!\r\n");
 8000f60:	4911      	ldr	r1, [pc, #68]	@ (8000fa8 <INA226_Test_Simple+0x104>)
 8000f62:	480a      	ldr	r0, [pc, #40]	@ (8000f8c <INA226_Test_Simple+0xe8>)
 8000f64:	f004 f81a 	bl	8004f9c <siprintf>
    }
    HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 8000f68:	4808      	ldr	r0, [pc, #32]	@ (8000f8c <INA226_Test_Simple+0xe8>)
 8000f6a:	f7ff f951 	bl	8000210 <strlen>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f76:	4905      	ldr	r1, [pc, #20]	@ (8000f8c <INA226_Test_Simple+0xe8>)
 8000f78:	4805      	ldr	r0, [pc, #20]	@ (8000f90 <INA226_Test_Simple+0xec>)
 8000f7a:	f003 fb57 	bl	800462c <HAL_UART_Transmit>
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	080058f4 	.word	0x080058f4
 8000f8c:	2000023c 	.word	0x2000023c
 8000f90:	20000194 	.word	0x20000194
 8000f94:	200000f4 	.word	0x200000f4
 8000f98:	08005918 	.word	0x08005918
 8000f9c:	08005934 	.word	0x08005934
 8000fa0:	20000234 	.word	0x20000234
 8000fa4:	08005964 	.word	0x08005964
 8000fa8:	08005988 	.word	0x08005988

08000fac <INA226_Test_Raw>:

// INA226 ham veri okuma
void INA226_Test_Raw(void) {
 8000fac:	b590      	push	{r4, r7, lr}
 8000fae:	b089      	sub	sp, #36	@ 0x24
 8000fb0:	af04      	add	r7, sp, #16
    if (ina226_connection_status == 1) {
 8000fb2:	4b2d      	ldr	r3, [pc, #180]	@ (8001068 <INA226_Test_Raw+0xbc>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d151      	bne.n	8001060 <INA226_Test_Raw+0xb4>
        // Ham bus voltage register oku
        uint16_t raw_voltage = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	81fb      	strh	r3, [r7, #14]
        uint8_t reg_data[2];

        HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c2, 0x40 << 1, 0x02, 1, reg_data, 2, 1000);
 8000fc0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fc4:	9302      	str	r3, [sp, #8]
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	9301      	str	r3, [sp, #4]
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	2301      	movs	r3, #1
 8000fd0:	2202      	movs	r2, #2
 8000fd2:	2180      	movs	r1, #128	@ 0x80
 8000fd4:	4825      	ldr	r0, [pc, #148]	@ (800106c <INA226_Test_Raw+0xc0>)
 8000fd6:	f001 fabd 	bl	8002554 <HAL_I2C_Mem_Read>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	737b      	strb	r3, [r7, #13]

        if (status == HAL_OK) {
 8000fde:	7b7b      	ldrb	r3, [r7, #13]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d12c      	bne.n	800103e <INA226_Test_Raw+0x92>
            raw_voltage = (reg_data[0] << 8) | reg_data[1];
 8000fe4:	793b      	ldrb	r3, [r7, #4]
 8000fe6:	b21b      	sxth	r3, r3
 8000fe8:	021b      	lsls	r3, r3, #8
 8000fea:	b21a      	sxth	r2, r3
 8000fec:	797b      	ldrb	r3, [r7, #5]
 8000fee:	b21b      	sxth	r3, r3
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	b21b      	sxth	r3, r3
 8000ff4:	81fb      	strh	r3, [r7, #14]
            float voltage = raw_voltage * 1.25e-3f;
 8000ff6:	89fb      	ldrh	r3, [r7, #14]
 8000ff8:	ee07 3a90 	vmov	s15, r3
 8000ffc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001000:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001070 <INA226_Test_Raw+0xc4>
 8001004:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001008:	edc7 7a02 	vstr	s15, [r7, #8]

            sprintf(uart_buffer, "Ham veri: 0x%04X, Voltaj: %.3fV\r\n", raw_voltage, voltage);
 800100c:	89fc      	ldrh	r4, [r7, #14]
 800100e:	68b8      	ldr	r0, [r7, #8]
 8001010:	f7ff fbe4 	bl	80007dc <__aeabi_f2d>
 8001014:	4602      	mov	r2, r0
 8001016:	460b      	mov	r3, r1
 8001018:	e9cd 2300 	strd	r2, r3, [sp]
 800101c:	4622      	mov	r2, r4
 800101e:	4915      	ldr	r1, [pc, #84]	@ (8001074 <INA226_Test_Raw+0xc8>)
 8001020:	4815      	ldr	r0, [pc, #84]	@ (8001078 <INA226_Test_Raw+0xcc>)
 8001022:	f003 ffbb 	bl	8004f9c <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 8001026:	4814      	ldr	r0, [pc, #80]	@ (8001078 <INA226_Test_Raw+0xcc>)
 8001028:	f7ff f8f2 	bl	8000210 <strlen>
 800102c:	4603      	mov	r3, r0
 800102e:	b29a      	uxth	r2, r3
 8001030:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001034:	4910      	ldr	r1, [pc, #64]	@ (8001078 <INA226_Test_Raw+0xcc>)
 8001036:	4811      	ldr	r0, [pc, #68]	@ (800107c <INA226_Test_Raw+0xd0>)
 8001038:	f003 faf8 	bl	800462c <HAL_UART_Transmit>
        } else {
            sprintf(uart_buffer, "Ham veri okuma hatası! Status: %d\r\n", status);
            HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
        }
    }
}
 800103c:	e010      	b.n	8001060 <INA226_Test_Raw+0xb4>
            sprintf(uart_buffer, "Ham veri okuma hatası! Status: %d\r\n", status);
 800103e:	7b7b      	ldrb	r3, [r7, #13]
 8001040:	461a      	mov	r2, r3
 8001042:	490f      	ldr	r1, [pc, #60]	@ (8001080 <INA226_Test_Raw+0xd4>)
 8001044:	480c      	ldr	r0, [pc, #48]	@ (8001078 <INA226_Test_Raw+0xcc>)
 8001046:	f003 ffa9 	bl	8004f9c <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 800104a:	480b      	ldr	r0, [pc, #44]	@ (8001078 <INA226_Test_Raw+0xcc>)
 800104c:	f7ff f8e0 	bl	8000210 <strlen>
 8001050:	4603      	mov	r3, r0
 8001052:	b29a      	uxth	r2, r3
 8001054:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001058:	4907      	ldr	r1, [pc, #28]	@ (8001078 <INA226_Test_Raw+0xcc>)
 800105a:	4808      	ldr	r0, [pc, #32]	@ (800107c <INA226_Test_Raw+0xd0>)
 800105c:	f003 fae6 	bl	800462c <HAL_UART_Transmit>
}
 8001060:	bf00      	nop
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	bd90      	pop	{r4, r7, pc}
 8001068:	20000234 	.word	0x20000234
 800106c:	200000f4 	.word	0x200000f4
 8001070:	3aa3d70a 	.word	0x3aa3d70a
 8001074:	080059ac 	.word	0x080059ac
 8001078:	2000023c 	.word	0x2000023c
 800107c:	20000194 	.word	0x20000194
 8001080:	080059d0 	.word	0x080059d0

08001084 <INA226_ReadAllValues_Fixed>:

// INA226 tüm değerleri oku - düzeltilmiş
void INA226_ReadAllValues_Fixed(void) {
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
    if (ina226_connection_status == 1) {
 8001088:	4b35      	ldr	r3, [pc, #212]	@ (8001160 <INA226_ReadAllValues_Fixed+0xdc>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b01      	cmp	r3, #1
 8001090:	d14c      	bne.n	800112c <INA226_ReadAllValues_Fixed+0xa8>
        // Bus voltajı oku
        ina226_bus_voltage = INA226_BusVoltage();
 8001092:	f7ff fe27 	bl	8000ce4 <INA226_BusVoltage>
 8001096:	eef0 7a40 	vmov.f32	s15, s0
 800109a:	4b32      	ldr	r3, [pc, #200]	@ (8001164 <INA226_ReadAllValues_Fixed+0xe0>)
 800109c:	edc3 7a00 	vstr	s15, [r3]

        // Shunt voltajı oku
        ina226_shunt_voltage = INA226_ShuntVoltage() * 1000.0f; // V'den mV'ye
 80010a0:	f7ff fdfe 	bl	8000ca0 <INA226_ShuntVoltage>
 80010a4:	eef0 7a40 	vmov.f32	s15, s0
 80010a8:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001168 <INA226_ReadAllValues_Fixed+0xe4>
 80010ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010b0:	4b2e      	ldr	r3, [pc, #184]	@ (800116c <INA226_ReadAllValues_Fixed+0xe8>)
 80010b2:	edc3 7a00 	vstr	s15, [r3]

        // Akım oku
        ina226_current = INA226_Current();
 80010b6:	f7ff fe49 	bl	8000d4c <INA226_Current>
 80010ba:	eef0 7a40 	vmov.f32	s15, s0
 80010be:	4b2c      	ldr	r3, [pc, #176]	@ (8001170 <INA226_ReadAllValues_Fixed+0xec>)
 80010c0:	edc3 7a00 	vstr	s15, [r3]
        ina226_current_ma = ina226_current * 1000.0f;
 80010c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001170 <INA226_ReadAllValues_Fixed+0xec>)
 80010c6:	edd3 7a00 	vldr	s15, [r3]
 80010ca:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8001168 <INA226_ReadAllValues_Fixed+0xe4>
 80010ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010d2:	4b28      	ldr	r3, [pc, #160]	@ (8001174 <INA226_ReadAllValues_Fixed+0xf0>)
 80010d4:	edc3 7a00 	vstr	s15, [r3]

        // Güç oku
        ina226_power = INA226_Power();
 80010d8:	f7ff fe1c 	bl	8000d14 <INA226_Power>
 80010dc:	eef0 7a40 	vmov.f32	s15, s0
 80010e0:	4b25      	ldr	r3, [pc, #148]	@ (8001178 <INA226_ReadAllValues_Fixed+0xf4>)
 80010e2:	edc3 7a00 	vstr	s15, [r3]
        ina226_power_mw = ina226_power * 1000.0f;
 80010e6:	4b24      	ldr	r3, [pc, #144]	@ (8001178 <INA226_ReadAllValues_Fixed+0xf4>)
 80010e8:	edd3 7a00 	vldr	s15, [r3]
 80010ec:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001168 <INA226_ReadAllValues_Fixed+0xe4>
 80010f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010f4:	4b21      	ldr	r3, [pc, #132]	@ (800117c <INA226_ReadAllValues_Fixed+0xf8>)
 80010f6:	edc3 7a00 	vstr	s15, [r3]

        // Hata kontrolu
        if (ina226_bus_voltage < 0.0f || ina226_bus_voltage > 36.0f) {
 80010fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001164 <INA226_ReadAllValues_Fixed+0xe0>)
 80010fc:	edd3 7a00 	vldr	s15, [r3]
 8001100:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001108:	d40a      	bmi.n	8001120 <INA226_ReadAllValues_Fixed+0x9c>
 800110a:	4b16      	ldr	r3, [pc, #88]	@ (8001164 <INA226_ReadAllValues_Fixed+0xe0>)
 800110c:	edd3 7a00 	vldr	s15, [r3]
 8001110:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001180 <INA226_ReadAllValues_Fixed+0xfc>
 8001114:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111c:	dc00      	bgt.n	8001120 <INA226_ReadAllValues_Fixed+0x9c>
        ina226_current = 0.0f;
        ina226_power = 0.0f;
        ina226_current_ma = 0.0f;
        ina226_power_mw = 0.0f;
    }
}
 800111e:	e01d      	b.n	800115c <INA226_ReadAllValues_Fixed+0xd8>
            ina226_error_count++;
 8001120:	4b18      	ldr	r3, [pc, #96]	@ (8001184 <INA226_ReadAllValues_Fixed+0x100>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	3301      	adds	r3, #1
 8001126:	4a17      	ldr	r2, [pc, #92]	@ (8001184 <INA226_ReadAllValues_Fixed+0x100>)
 8001128:	6013      	str	r3, [r2, #0]
}
 800112a:	e017      	b.n	800115c <INA226_ReadAllValues_Fixed+0xd8>
        ina226_bus_voltage = 0.0f;
 800112c:	4b0d      	ldr	r3, [pc, #52]	@ (8001164 <INA226_ReadAllValues_Fixed+0xe0>)
 800112e:	f04f 0200 	mov.w	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
        ina226_shunt_voltage = 0.0f;
 8001134:	4b0d      	ldr	r3, [pc, #52]	@ (800116c <INA226_ReadAllValues_Fixed+0xe8>)
 8001136:	f04f 0200 	mov.w	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
        ina226_current = 0.0f;
 800113c:	4b0c      	ldr	r3, [pc, #48]	@ (8001170 <INA226_ReadAllValues_Fixed+0xec>)
 800113e:	f04f 0200 	mov.w	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
        ina226_power = 0.0f;
 8001144:	4b0c      	ldr	r3, [pc, #48]	@ (8001178 <INA226_ReadAllValues_Fixed+0xf4>)
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
        ina226_current_ma = 0.0f;
 800114c:	4b09      	ldr	r3, [pc, #36]	@ (8001174 <INA226_ReadAllValues_Fixed+0xf0>)
 800114e:	f04f 0200 	mov.w	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
        ina226_power_mw = 0.0f;
 8001154:	4b09      	ldr	r3, [pc, #36]	@ (800117c <INA226_ReadAllValues_Fixed+0xf8>)
 8001156:	f04f 0200 	mov.w	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000234 	.word	0x20000234
 8001164:	2000021c 	.word	0x2000021c
 8001168:	447a0000 	.word	0x447a0000
 800116c:	20000220 	.word	0x20000220
 8001170:	20000224 	.word	0x20000224
 8001174:	2000022c 	.word	0x2000022c
 8001178:	20000228 	.word	0x20000228
 800117c:	20000230 	.word	0x20000230
 8001180:	42100000 	.word	0x42100000
 8001184:	20000238 	.word	0x20000238

08001188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800118c:	b086      	sub	sp, #24
 800118e:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 8001190:	f000 fce9 	bl	8001b66 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001194:	f000 f8de 	bl	8001354 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001198:	f000 fa3e 	bl	8001618 <MX_GPIO_Init>
  MX_I2C1_Init();
 800119c:	f000 f946 	bl	800142c <MX_I2C1_Init>
  MX_I2C2_Init();
 80011a0:	f000 f980 	bl	80014a4 <MX_I2C2_Init>
  MX_TIM2_Init();
 80011a4:	f000 f9ba 	bl	800151c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80011a8:	f000 fa0c 	bl	80015c4 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */
  // Sistem başlatma
  sprintf(uart_buffer, "=== INA226 Düzeltilmiş Test Sistemi ===\r\n\r\n");
 80011ac:	495b      	ldr	r1, [pc, #364]	@ (800131c <main+0x194>)
 80011ae:	485c      	ldr	r0, [pc, #368]	@ (8001320 <main+0x198>)
 80011b0:	f003 fef4 	bl	8004f9c <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 80011b4:	485a      	ldr	r0, [pc, #360]	@ (8001320 <main+0x198>)
 80011b6:	f7ff f82b 	bl	8000210 <strlen>
 80011ba:	4603      	mov	r3, r0
 80011bc:	b29a      	uxth	r2, r3
 80011be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011c2:	4957      	ldr	r1, [pc, #348]	@ (8001320 <main+0x198>)
 80011c4:	4857      	ldr	r0, [pc, #348]	@ (8001324 <main+0x19c>)
 80011c6:	f003 fa31 	bl	800462c <HAL_UART_Transmit>

  // INA226 başlatma
  sprintf(uart_buffer, "INA226 başlatılıyor...\r\n");
 80011ca:	4957      	ldr	r1, [pc, #348]	@ (8001328 <main+0x1a0>)
 80011cc:	4854      	ldr	r0, [pc, #336]	@ (8001320 <main+0x198>)
 80011ce:	f003 fee5 	bl	8004f9c <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 80011d2:	4853      	ldr	r0, [pc, #332]	@ (8001320 <main+0x198>)
 80011d4:	f7ff f81c 	bl	8000210 <strlen>
 80011d8:	4603      	mov	r3, r0
 80011da:	b29a      	uxth	r2, r3
 80011dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011e0:	494f      	ldr	r1, [pc, #316]	@ (8001320 <main+0x198>)
 80011e2:	4850      	ldr	r0, [pc, #320]	@ (8001324 <main+0x19c>)
 80011e4:	f003 fa22 	bl	800462c <HAL_UART_Transmit>

  INA226_INIT();
 80011e8:	f7ff fd36 	bl	8000c58 <INA226_INIT>
  HAL_Delay(100);
 80011ec:	2064      	movs	r0, #100	@ 0x64
 80011ee:	f000 fd17 	bl	8001c20 <HAL_Delay>

  // INA226 basit test
  INA226_Test_Simple();
 80011f2:	f7ff fe57 	bl	8000ea4 <INA226_Test_Simple>
  HAL_Delay(500);
 80011f6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011fa:	f000 fd11 	bl	8001c20 <HAL_Delay>

  // Sistem hazır
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80011fe:	2201      	movs	r2, #1
 8001200:	2101      	movs	r1, #1
 8001202:	484a      	ldr	r0, [pc, #296]	@ (800132c <main+0x1a4>)
 8001204:	f000 ffc2 	bl	800218c <HAL_GPIO_WritePin>
  sprintf(uart_buffer, "\r\nTest başlıyor... 4.7V pilinizi kontrol edin!\r\n\r\n");
 8001208:	4949      	ldr	r1, [pc, #292]	@ (8001330 <main+0x1a8>)
 800120a:	4845      	ldr	r0, [pc, #276]	@ (8001320 <main+0x198>)
 800120c:	f003 fec6 	bl	8004f9c <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 8001210:	4843      	ldr	r0, [pc, #268]	@ (8001320 <main+0x198>)
 8001212:	f7fe fffd 	bl	8000210 <strlen>
 8001216:	4603      	mov	r3, r0
 8001218:	b29a      	uxth	r2, r3
 800121a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800121e:	4940      	ldr	r1, [pc, #256]	@ (8001320 <main+0x198>)
 8001220:	4840      	ldr	r0, [pc, #256]	@ (8001324 <main+0x19c>)
 8001222:	f003 fa03 	bl	800462c <HAL_UART_Transmit>
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */

    // --- INA226 Test ve Okuma ---
    INA226_Test_Raw();           // Ham veri oku
 8001226:	f7ff fec1 	bl	8000fac <INA226_Test_Raw>
    INA226_ReadAllValues_Fixed(); // Kütüphane fonksiyonları ile oku
 800122a:	f7ff ff2b 	bl	8001084 <INA226_ReadAllValues_Fixed>

    // --- INA226 Raporu ---
    if (ina226_connection_status == 1) {
 800122e:	4b41      	ldr	r3, [pc, #260]	@ (8001334 <main+0x1ac>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	b2db      	uxtb	r3, r3
 8001234:	2b01      	cmp	r3, #1
 8001236:	d148      	bne.n	80012ca <main+0x142>
        sprintf(uart_buffer, "INA226: Bus=%.3fV | Shunt=%.3fmV | Akım=%.2fmA | Güç=%.2fmW\r\n",
 8001238:	4b3f      	ldr	r3, [pc, #252]	@ (8001338 <main+0x1b0>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff facd 	bl	80007dc <__aeabi_f2d>
 8001242:	4682      	mov	sl, r0
 8001244:	468b      	mov	fp, r1
 8001246:	4b3d      	ldr	r3, [pc, #244]	@ (800133c <main+0x1b4>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fac6 	bl	80007dc <__aeabi_f2d>
 8001250:	4604      	mov	r4, r0
 8001252:	460d      	mov	r5, r1
 8001254:	4b3a      	ldr	r3, [pc, #232]	@ (8001340 <main+0x1b8>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fabf 	bl	80007dc <__aeabi_f2d>
 800125e:	4680      	mov	r8, r0
 8001260:	4689      	mov	r9, r1
 8001262:	4b38      	ldr	r3, [pc, #224]	@ (8001344 <main+0x1bc>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff fab8 	bl	80007dc <__aeabi_f2d>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001274:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001278:	e9cd 4500 	strd	r4, r5, [sp]
 800127c:	4652      	mov	r2, sl
 800127e:	465b      	mov	r3, fp
 8001280:	4931      	ldr	r1, [pc, #196]	@ (8001348 <main+0x1c0>)
 8001282:	4827      	ldr	r0, [pc, #156]	@ (8001320 <main+0x198>)
 8001284:	f003 fe8a 	bl	8004f9c <siprintf>
               ina226_bus_voltage, ina226_shunt_voltage, ina226_current_ma, ina226_power_mw);
        HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 8001288:	4825      	ldr	r0, [pc, #148]	@ (8001320 <main+0x198>)
 800128a:	f7fe ffc1 	bl	8000210 <strlen>
 800128e:	4603      	mov	r3, r0
 8001290:	b29a      	uxth	r2, r3
 8001292:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001296:	4922      	ldr	r1, [pc, #136]	@ (8001320 <main+0x198>)
 8001298:	4822      	ldr	r0, [pc, #136]	@ (8001324 <main+0x19c>)
 800129a:	f003 f9c7 	bl	800462c <HAL_UART_Transmit>

        // LED durumu
        if (ina226_bus_voltage > 3.0f) {
 800129e:	4b26      	ldr	r3, [pc, #152]	@ (8001338 <main+0x1b0>)
 80012a0:	edd3 7a00 	vldr	s15, [r3]
 80012a4:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80012a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b0:	dd05      	ble.n	80012be <main+0x136>
            HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); // Yeşil LED
 80012b2:	2201      	movs	r2, #1
 80012b4:	2180      	movs	r1, #128	@ 0x80
 80012b6:	481d      	ldr	r0, [pc, #116]	@ (800132c <main+0x1a4>)
 80012b8:	f000 ff68 	bl	800218c <HAL_GPIO_WritePin>
 80012bc:	e01a      	b.n	80012f4 <main+0x16c>
        } else {
            HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012be:	2200      	movs	r2, #0
 80012c0:	2180      	movs	r1, #128	@ 0x80
 80012c2:	481a      	ldr	r0, [pc, #104]	@ (800132c <main+0x1a4>)
 80012c4:	f000 ff62 	bl	800218c <HAL_GPIO_WritePin>
 80012c8:	e014      	b.n	80012f4 <main+0x16c>
        }
    } else {
        sprintf(uart_buffer, "INA226: BAĞLANTI YOK!\r\n");
 80012ca:	4920      	ldr	r1, [pc, #128]	@ (800134c <main+0x1c4>)
 80012cc:	4814      	ldr	r0, [pc, #80]	@ (8001320 <main+0x198>)
 80012ce:	f003 fe65 	bl	8004f9c <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 80012d2:	4813      	ldr	r0, [pc, #76]	@ (8001320 <main+0x198>)
 80012d4:	f7fe ff9c 	bl	8000210 <strlen>
 80012d8:	4603      	mov	r3, r0
 80012da:	b29a      	uxth	r2, r3
 80012dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012e0:	490f      	ldr	r1, [pc, #60]	@ (8001320 <main+0x198>)
 80012e2:	4810      	ldr	r0, [pc, #64]	@ (8001324 <main+0x19c>)
 80012e4:	f003 f9a2 	bl	800462c <HAL_UART_Transmit>
        HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET); // Kırmızı LED
 80012e8:	2201      	movs	r2, #1
 80012ea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012ee:	480f      	ldr	r0, [pc, #60]	@ (800132c <main+0x1a4>)
 80012f0:	f000 ff4c 	bl	800218c <HAL_GPIO_WritePin>
    }

    sprintf(uart_buffer, "---\r\n");
 80012f4:	4916      	ldr	r1, [pc, #88]	@ (8001350 <main+0x1c8>)
 80012f6:	480a      	ldr	r0, [pc, #40]	@ (8001320 <main+0x198>)
 80012f8:	f003 fe50 	bl	8004f9c <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 80012fc:	4808      	ldr	r0, [pc, #32]	@ (8001320 <main+0x198>)
 80012fe:	f7fe ff87 	bl	8000210 <strlen>
 8001302:	4603      	mov	r3, r0
 8001304:	b29a      	uxth	r2, r3
 8001306:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800130a:	4905      	ldr	r1, [pc, #20]	@ (8001320 <main+0x198>)
 800130c:	4805      	ldr	r0, [pc, #20]	@ (8001324 <main+0x19c>)
 800130e:	f003 f98d 	bl	800462c <HAL_UART_Transmit>

    HAL_Delay(2000); // 2 saniye aralık
 8001312:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001316:	f000 fc83 	bl	8001c20 <HAL_Delay>
    INA226_Test_Raw();           // Ham veri oku
 800131a:	e784      	b.n	8001226 <main+0x9e>
 800131c:	080059f8 	.word	0x080059f8
 8001320:	2000023c 	.word	0x2000023c
 8001324:	20000194 	.word	0x20000194
 8001328:	08005a28 	.word	0x08005a28
 800132c:	40020400 	.word	0x40020400
 8001330:	08005a44 	.word	0x08005a44
 8001334:	20000234 	.word	0x20000234
 8001338:	2000021c 	.word	0x2000021c
 800133c:	20000220 	.word	0x20000220
 8001340:	2000022c 	.word	0x2000022c
 8001344:	20000230 	.word	0x20000230
 8001348:	08005a7c 	.word	0x08005a7c
 800134c:	08005ac0 	.word	0x08005ac0
 8001350:	08005adc 	.word	0x08005adc

08001354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b094      	sub	sp, #80	@ 0x50
 8001358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800135a:	f107 0320 	add.w	r3, r7, #32
 800135e:	2230      	movs	r2, #48	@ 0x30
 8001360:	2100      	movs	r1, #0
 8001362:	4618      	mov	r0, r3
 8001364:	f003 fe3c 	bl	8004fe0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001378:	4b2a      	ldr	r3, [pc, #168]	@ (8001424 <SystemClock_Config+0xd0>)
 800137a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137c:	4a29      	ldr	r2, [pc, #164]	@ (8001424 <SystemClock_Config+0xd0>)
 800137e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001382:	6413      	str	r3, [r2, #64]	@ 0x40
 8001384:	4b27      	ldr	r3, [pc, #156]	@ (8001424 <SystemClock_Config+0xd0>)
 8001386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001388:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001390:	4b25      	ldr	r3, [pc, #148]	@ (8001428 <SystemClock_Config+0xd4>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a24      	ldr	r2, [pc, #144]	@ (8001428 <SystemClock_Config+0xd4>)
 8001396:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800139a:	6013      	str	r3, [r2, #0]
 800139c:	4b22      	ldr	r3, [pc, #136]	@ (8001428 <SystemClock_Config+0xd4>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013a8:	2301      	movs	r3, #1
 80013aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80013ac:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80013b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013b2:	2302      	movs	r3, #2
 80013b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013bc:	2304      	movs	r3, #4
 80013be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 80013c0:	23c8      	movs	r3, #200	@ 0xc8
 80013c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013c4:	2302      	movs	r3, #2
 80013c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013c8:	2304      	movs	r3, #4
 80013ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013cc:	f107 0320 	add.w	r3, r7, #32
 80013d0:	4618      	mov	r0, r3
 80013d2:	f001 fe89 	bl	80030e8 <HAL_RCC_OscConfig>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80013dc:	f000 f99a 	bl	8001714 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80013e0:	f001 fe32 	bl	8003048 <HAL_PWREx_EnableOverDrive>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80013ea:	f000 f993 	bl	8001714 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 80013ee:	230f      	movs	r3, #15
 80013f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f2:	2302      	movs	r3, #2
 80013f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013fa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80013fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001400:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001404:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001406:	f107 030c 	add.w	r3, r7, #12
 800140a:	2106      	movs	r1, #6
 800140c:	4618      	mov	r0, r3
 800140e:	f002 f90f 	bl	8003630 <HAL_RCC_ClockConfig>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001418:	f000 f97c 	bl	8001714 <Error_Handler>
  }
}
 800141c:	bf00      	nop
 800141e:	3750      	adds	r7, #80	@ 0x50
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40023800 	.word	0x40023800
 8001428:	40007000 	.word	0x40007000

0800142c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001430:	4b19      	ldr	r3, [pc, #100]	@ (8001498 <MX_I2C1_Init+0x6c>)
 8001432:	4a1a      	ldr	r2, [pc, #104]	@ (800149c <MX_I2C1_Init+0x70>)
 8001434:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00A0A3F7;
 8001436:	4b18      	ldr	r3, [pc, #96]	@ (8001498 <MX_I2C1_Init+0x6c>)
 8001438:	4a19      	ldr	r2, [pc, #100]	@ (80014a0 <MX_I2C1_Init+0x74>)
 800143a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800143c:	4b16      	ldr	r3, [pc, #88]	@ (8001498 <MX_I2C1_Init+0x6c>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001442:	4b15      	ldr	r3, [pc, #84]	@ (8001498 <MX_I2C1_Init+0x6c>)
 8001444:	2201      	movs	r2, #1
 8001446:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001448:	4b13      	ldr	r3, [pc, #76]	@ (8001498 <MX_I2C1_Init+0x6c>)
 800144a:	2200      	movs	r2, #0
 800144c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800144e:	4b12      	ldr	r3, [pc, #72]	@ (8001498 <MX_I2C1_Init+0x6c>)
 8001450:	2200      	movs	r2, #0
 8001452:	615a      	str	r2, [r3, #20]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001454:	4b10      	ldr	r3, [pc, #64]	@ (8001498 <MX_I2C1_Init+0x6c>)
 8001456:	2200      	movs	r2, #0
 8001458:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800145a:	4b0f      	ldr	r3, [pc, #60]	@ (8001498 <MX_I2C1_Init+0x6c>)
 800145c:	2200      	movs	r2, #0
 800145e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001460:	480d      	ldr	r0, [pc, #52]	@ (8001498 <MX_I2C1_Init+0x6c>)
 8001462:	f000 fec7 	bl	80021f4 <HAL_I2C_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_I2C1_Init+0x44>
  {
    Error_Handler();
 800146c:	f000 f952 	bl	8001714 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001470:	2100      	movs	r1, #0
 8001472:	4809      	ldr	r0, [pc, #36]	@ (8001498 <MX_I2C1_Init+0x6c>)
 8001474:	f001 fd50 	bl	8002f18 <HAL_I2CEx_ConfigAnalogFilter>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_I2C1_Init+0x56>
  {
    Error_Handler();
 800147e:	f000 f949 	bl	8001714 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001482:	2100      	movs	r1, #0
 8001484:	4804      	ldr	r0, [pc, #16]	@ (8001498 <MX_I2C1_Init+0x6c>)
 8001486:	f001 fd92 	bl	8002fae <HAL_I2CEx_ConfigDigitalFilter>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_I2C1_Init+0x68>
  {
    Error_Handler();
 8001490:	f000 f940 	bl	8001714 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */
}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}
 8001498:	200000a0 	.word	0x200000a0
 800149c:	40005400 	.word	0x40005400
 80014a0:	00a0a3f7 	.word	0x00a0a3f7

080014a4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_Init 0 */
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */
  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80014a8:	4b19      	ldr	r3, [pc, #100]	@ (8001510 <MX_I2C2_Init+0x6c>)
 80014aa:	4a1a      	ldr	r2, [pc, #104]	@ (8001514 <MX_I2C2_Init+0x70>)
 80014ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00A0A3F7;
 80014ae:	4b18      	ldr	r3, [pc, #96]	@ (8001510 <MX_I2C2_Init+0x6c>)
 80014b0:	4a19      	ldr	r2, [pc, #100]	@ (8001518 <MX_I2C2_Init+0x74>)
 80014b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80014b4:	4b16      	ldr	r3, [pc, #88]	@ (8001510 <MX_I2C2_Init+0x6c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014ba:	4b15      	ldr	r3, [pc, #84]	@ (8001510 <MX_I2C2_Init+0x6c>)
 80014bc:	2201      	movs	r2, #1
 80014be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014c0:	4b13      	ldr	r3, [pc, #76]	@ (8001510 <MX_I2C2_Init+0x6c>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80014c6:	4b12      	ldr	r3, [pc, #72]	@ (8001510 <MX_I2C2_Init+0x6c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	615a      	str	r2, [r3, #20]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014cc:	4b10      	ldr	r3, [pc, #64]	@ (8001510 <MX_I2C2_Init+0x6c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001510 <MX_I2C2_Init+0x6c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80014d8:	480d      	ldr	r0, [pc, #52]	@ (8001510 <MX_I2C2_Init+0x6c>)
 80014da:	f000 fe8b 	bl	80021f4 <HAL_I2C_Init>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_I2C2_Init+0x44>
  {
    Error_Handler();
 80014e4:	f000 f916 	bl	8001714 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014e8:	2100      	movs	r1, #0
 80014ea:	4809      	ldr	r0, [pc, #36]	@ (8001510 <MX_I2C2_Init+0x6c>)
 80014ec:	f001 fd14 	bl	8002f18 <HAL_I2CEx_ConfigAnalogFilter>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_I2C2_Init+0x56>
  {
    Error_Handler();
 80014f6:	f000 f90d 	bl	8001714 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80014fa:	2100      	movs	r1, #0
 80014fc:	4804      	ldr	r0, [pc, #16]	@ (8001510 <MX_I2C2_Init+0x6c>)
 80014fe:	f001 fd56 	bl	8002fae <HAL_I2CEx_ConfigDigitalFilter>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_I2C2_Init+0x68>
  {
    Error_Handler();
 8001508:	f000 f904 	bl	8001714 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */
  /* USER CODE END I2C2_Init 2 */
}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}
 8001510:	200000f4 	.word	0x200000f4
 8001514:	40005800 	.word	0x40005800
 8001518:	00a0a3f7 	.word	0x00a0a3f7

0800151c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08c      	sub	sp, #48	@ 0x30
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_Init 0 */
  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001522:	f107 030c 	add.w	r3, r7, #12
 8001526:	2224      	movs	r2, #36	@ 0x24
 8001528:	2100      	movs	r1, #0
 800152a:	4618      	mov	r0, r3
 800152c:	f003 fd58 	bl	8004fe0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001530:	463b      	mov	r3, r7
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800153a:	4b21      	ldr	r3, [pc, #132]	@ (80015c0 <MX_TIM2_Init+0xa4>)
 800153c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001540:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001542:	4b1f      	ldr	r3, [pc, #124]	@ (80015c0 <MX_TIM2_Init+0xa4>)
 8001544:	2200      	movs	r2, #0
 8001546:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001548:	4b1d      	ldr	r3, [pc, #116]	@ (80015c0 <MX_TIM2_Init+0xa4>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800154e:	4b1c      	ldr	r3, [pc, #112]	@ (80015c0 <MX_TIM2_Init+0xa4>)
 8001550:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001554:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001556:	4b1a      	ldr	r3, [pc, #104]	@ (80015c0 <MX_TIM2_Init+0xa4>)
 8001558:	2200      	movs	r2, #0
 800155a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155c:	4b18      	ldr	r3, [pc, #96]	@ (80015c0 <MX_TIM2_Init+0xa4>)
 800155e:	2200      	movs	r2, #0
 8001560:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001562:	2303      	movs	r3, #3
 8001564:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800156a:	2301      	movs	r3, #1
 800156c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800156e:	2300      	movs	r3, #0
 8001570:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001576:	2300      	movs	r3, #0
 8001578:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800157a:	2301      	movs	r3, #1
 800157c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800157e:	2300      	movs	r3, #0
 8001580:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001582:	2300      	movs	r3, #0
 8001584:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001586:	f107 030c 	add.w	r3, r7, #12
 800158a:	4619      	mov	r1, r3
 800158c:	480c      	ldr	r0, [pc, #48]	@ (80015c0 <MX_TIM2_Init+0xa4>)
 800158e:	f002 fe25 	bl	80041dc <HAL_TIM_Encoder_Init>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001598:	f000 f8bc 	bl	8001714 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800159c:	2300      	movs	r3, #0
 800159e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015a4:	463b      	mov	r3, r7
 80015a6:	4619      	mov	r1, r3
 80015a8:	4805      	ldr	r0, [pc, #20]	@ (80015c0 <MX_TIM2_Init+0xa4>)
 80015aa:	f002 ff63 	bl	8004474 <HAL_TIMEx_MasterConfigSynchronization>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80015b4:	f000 f8ae 	bl	8001714 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */
}
 80015b8:	bf00      	nop
 80015ba:	3730      	adds	r7, #48	@ 0x30
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20000148 	.word	0x20000148

080015c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015c8:	4b11      	ldr	r3, [pc, #68]	@ (8001610 <MX_USART2_UART_Init+0x4c>)
 80015ca:	4a12      	ldr	r2, [pc, #72]	@ (8001614 <MX_USART2_UART_Init+0x50>)
 80015cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015ce:	4b10      	ldr	r3, [pc, #64]	@ (8001610 <MX_USART2_UART_Init+0x4c>)
 80015d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001610 <MX_USART2_UART_Init+0x4c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001610 <MX_USART2_UART_Init+0x4c>)
 80015de:	2200      	movs	r2, #0
 80015e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001610 <MX_USART2_UART_Init+0x4c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015e8:	4b09      	ldr	r3, [pc, #36]	@ (8001610 <MX_USART2_UART_Init+0x4c>)
 80015ea:	220c      	movs	r2, #12
 80015ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ee:	4b08      	ldr	r3, [pc, #32]	@ (8001610 <MX_USART2_UART_Init+0x4c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015f4:	4b06      	ldr	r3, [pc, #24]	@ (8001610 <MX_USART2_UART_Init+0x4c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015fa:	4805      	ldr	r0, [pc, #20]	@ (8001610 <MX_USART2_UART_Init+0x4c>)
 80015fc:	f002 ffc8 	bl	8004590 <HAL_UART_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001606:	f000 f885 	bl	8001714 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000194 	.word	0x20000194
 8001614:	40004400 	.word	0x40004400

08001618 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08c      	sub	sp, #48	@ 0x30
 800161c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161e:	f107 031c 	add.w	r3, r7, #28
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]
 8001628:	609a      	str	r2, [r3, #8]
 800162a:	60da      	str	r2, [r3, #12]
 800162c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800162e:	4b36      	ldr	r3, [pc, #216]	@ (8001708 <MX_GPIO_Init+0xf0>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001632:	4a35      	ldr	r2, [pc, #212]	@ (8001708 <MX_GPIO_Init+0xf0>)
 8001634:	f043 0304 	orr.w	r3, r3, #4
 8001638:	6313      	str	r3, [r2, #48]	@ 0x30
 800163a:	4b33      	ldr	r3, [pc, #204]	@ (8001708 <MX_GPIO_Init+0xf0>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	f003 0304 	and.w	r3, r3, #4
 8001642:	61bb      	str	r3, [r7, #24]
 8001644:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001646:	4b30      	ldr	r3, [pc, #192]	@ (8001708 <MX_GPIO_Init+0xf0>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164a:	4a2f      	ldr	r2, [pc, #188]	@ (8001708 <MX_GPIO_Init+0xf0>)
 800164c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001650:	6313      	str	r3, [r2, #48]	@ 0x30
 8001652:	4b2d      	ldr	r3, [pc, #180]	@ (8001708 <MX_GPIO_Init+0xf0>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800165a:	617b      	str	r3, [r7, #20]
 800165c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800165e:	4b2a      	ldr	r3, [pc, #168]	@ (8001708 <MX_GPIO_Init+0xf0>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	4a29      	ldr	r2, [pc, #164]	@ (8001708 <MX_GPIO_Init+0xf0>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	6313      	str	r3, [r2, #48]	@ 0x30
 800166a:	4b27      	ldr	r3, [pc, #156]	@ (8001708 <MX_GPIO_Init+0xf0>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001676:	4b24      	ldr	r3, [pc, #144]	@ (8001708 <MX_GPIO_Init+0xf0>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167a:	4a23      	ldr	r2, [pc, #140]	@ (8001708 <MX_GPIO_Init+0xf0>)
 800167c:	f043 0302 	orr.w	r3, r3, #2
 8001680:	6313      	str	r3, [r2, #48]	@ 0x30
 8001682:	4b21      	ldr	r3, [pc, #132]	@ (8001708 <MX_GPIO_Init+0xf0>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800168e:	4b1e      	ldr	r3, [pc, #120]	@ (8001708 <MX_GPIO_Init+0xf0>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	4a1d      	ldr	r2, [pc, #116]	@ (8001708 <MX_GPIO_Init+0xf0>)
 8001694:	f043 0308 	orr.w	r3, r3, #8
 8001698:	6313      	str	r3, [r2, #48]	@ 0x30
 800169a:	4b1b      	ldr	r3, [pc, #108]	@ (8001708 <MX_GPIO_Init+0xf0>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169e:	f003 0308 	and.w	r3, r3, #8
 80016a2:	60bb      	str	r3, [r7, #8]
 80016a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016a6:	4b18      	ldr	r3, [pc, #96]	@ (8001708 <MX_GPIO_Init+0xf0>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016aa:	4a17      	ldr	r2, [pc, #92]	@ (8001708 <MX_GPIO_Init+0xf0>)
 80016ac:	f043 0320 	orr.w	r3, r3, #32
 80016b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b2:	4b15      	ldr	r3, [pc, #84]	@ (8001708 <MX_GPIO_Init+0xf0>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	f003 0320 	and.w	r3, r3, #32
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80016be:	2200      	movs	r2, #0
 80016c0:	f244 0181 	movw	r1, #16513	@ 0x4081
 80016c4:	4811      	ldr	r0, [pc, #68]	@ (800170c <MX_GPIO_Init+0xf4>)
 80016c6:	f000 fd61 	bl	800218c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80016ca:	f244 0381 	movw	r3, #16513	@ 0x4081
 80016ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d0:	2301      	movs	r3, #1
 80016d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d8:	2300      	movs	r3, #0
 80016da:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016dc:	f107 031c 	add.w	r3, r7, #28
 80016e0:	4619      	mov	r1, r3
 80016e2:	480a      	ldr	r0, [pc, #40]	@ (800170c <MX_GPIO_Init+0xf4>)
 80016e4:	f000 fba6 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF5 (IR Sensor) */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80016e8:	2320      	movs	r3, #32
 80016ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ec:	2300      	movs	r3, #0
 80016ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016f4:	f107 031c 	add.w	r3, r7, #28
 80016f8:	4619      	mov	r1, r3
 80016fa:	4805      	ldr	r0, [pc, #20]	@ (8001710 <MX_GPIO_Init+0xf8>)
 80016fc:	f000 fb9a 	bl	8001e34 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001700:	bf00      	nop
 8001702:	3730      	adds	r7, #48	@ 0x30
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40023800 	.word	0x40023800
 800170c:	40020400 	.word	0x40020400
 8001710:	40021400 	.word	0x40021400

08001714 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001718:	b672      	cpsid	i
}
 800171a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 800171c:	2101      	movs	r1, #1
 800171e:	480b      	ldr	r0, [pc, #44]	@ (800174c <Error_Handler+0x38>)
 8001720:	f000 fd4d 	bl	80021be <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 8001724:	2064      	movs	r0, #100	@ 0x64
 8001726:	f000 fa7b 	bl	8001c20 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 800172a:	2180      	movs	r1, #128	@ 0x80
 800172c:	4807      	ldr	r0, [pc, #28]	@ (800174c <Error_Handler+0x38>)
 800172e:	f000 fd46 	bl	80021be <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 8001732:	2064      	movs	r0, #100	@ 0x64
 8001734:	f000 fa74 	bl	8001c20 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8001738:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800173c:	4803      	ldr	r0, [pc, #12]	@ (800174c <Error_Handler+0x38>)
 800173e:	f000 fd3e 	bl	80021be <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 8001742:	2064      	movs	r0, #100	@ 0x64
 8001744:	f000 fa6c 	bl	8001c20 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8001748:	bf00      	nop
 800174a:	e7e7      	b.n	800171c <Error_Handler+0x8>
 800174c:	40020400 	.word	0x40020400

08001750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001756:	4b0f      	ldr	r3, [pc, #60]	@ (8001794 <HAL_MspInit+0x44>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175a:	4a0e      	ldr	r2, [pc, #56]	@ (8001794 <HAL_MspInit+0x44>)
 800175c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001760:	6413      	str	r3, [r2, #64]	@ 0x40
 8001762:	4b0c      	ldr	r3, [pc, #48]	@ (8001794 <HAL_MspInit+0x44>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800176a:	607b      	str	r3, [r7, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800176e:	4b09      	ldr	r3, [pc, #36]	@ (8001794 <HAL_MspInit+0x44>)
 8001770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001772:	4a08      	ldr	r2, [pc, #32]	@ (8001794 <HAL_MspInit+0x44>)
 8001774:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001778:	6453      	str	r3, [r2, #68]	@ 0x44
 800177a:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <HAL_MspInit+0x44>)
 800177c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800177e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001782:	603b      	str	r3, [r7, #0]
 8001784:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	40023800 	.word	0x40023800

08001798 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b0ac      	sub	sp, #176	@ 0xb0
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017b0:	f107 0318 	add.w	r3, r7, #24
 80017b4:	2284      	movs	r2, #132	@ 0x84
 80017b6:	2100      	movs	r1, #0
 80017b8:	4618      	mov	r0, r3
 80017ba:	f003 fc11 	bl	8004fe0 <memset>
  if(hi2c->Instance==I2C1)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a43      	ldr	r2, [pc, #268]	@ (80018d0 <HAL_I2C_MspInit+0x138>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d13d      	bne.n	8001844 <HAL_I2C_MspInit+0xac>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80017c8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017cc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80017ce:	2300      	movs	r3, #0
 80017d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017d2:	f107 0318 	add.w	r3, r7, #24
 80017d6:	4618      	mov	r0, r3
 80017d8:	f002 f910 	bl	80039fc <HAL_RCCEx_PeriphCLKConfig>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80017e2:	f7ff ff97 	bl	8001714 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e6:	4b3b      	ldr	r3, [pc, #236]	@ (80018d4 <HAL_I2C_MspInit+0x13c>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	4a3a      	ldr	r2, [pc, #232]	@ (80018d4 <HAL_I2C_MspInit+0x13c>)
 80017ec:	f043 0302 	orr.w	r3, r3, #2
 80017f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017f2:	4b38      	ldr	r3, [pc, #224]	@ (80018d4 <HAL_I2C_MspInit+0x13c>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017fe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001802:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001806:	2312      	movs	r3, #18
 8001808:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001812:	2303      	movs	r3, #3
 8001814:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001818:	2304      	movs	r3, #4
 800181a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001822:	4619      	mov	r1, r3
 8001824:	482c      	ldr	r0, [pc, #176]	@ (80018d8 <HAL_I2C_MspInit+0x140>)
 8001826:	f000 fb05 	bl	8001e34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800182a:	4b2a      	ldr	r3, [pc, #168]	@ (80018d4 <HAL_I2C_MspInit+0x13c>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182e:	4a29      	ldr	r2, [pc, #164]	@ (80018d4 <HAL_I2C_MspInit+0x13c>)
 8001830:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001834:	6413      	str	r3, [r2, #64]	@ 0x40
 8001836:	4b27      	ldr	r3, [pc, #156]	@ (80018d4 <HAL_I2C_MspInit+0x13c>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001842:	e041      	b.n	80018c8 <HAL_I2C_MspInit+0x130>
  else if(hi2c->Instance==I2C2)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a24      	ldr	r2, [pc, #144]	@ (80018dc <HAL_I2C_MspInit+0x144>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d13c      	bne.n	80018c8 <HAL_I2C_MspInit+0x130>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800184e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001852:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001854:	2300      	movs	r3, #0
 8001856:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800185a:	f107 0318 	add.w	r3, r7, #24
 800185e:	4618      	mov	r0, r3
 8001860:	f002 f8cc 	bl	80039fc <HAL_RCCEx_PeriphCLKConfig>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 800186a:	f7ff ff53 	bl	8001714 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800186e:	4b19      	ldr	r3, [pc, #100]	@ (80018d4 <HAL_I2C_MspInit+0x13c>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001872:	4a18      	ldr	r2, [pc, #96]	@ (80018d4 <HAL_I2C_MspInit+0x13c>)
 8001874:	f043 0320 	orr.w	r3, r3, #32
 8001878:	6313      	str	r3, [r2, #48]	@ 0x30
 800187a:	4b16      	ldr	r3, [pc, #88]	@ (80018d4 <HAL_I2C_MspInit+0x13c>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187e:	f003 0320 	and.w	r3, r3, #32
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001886:	2303      	movs	r3, #3
 8001888:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800188c:	2312      	movs	r3, #18
 800188e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001898:	2303      	movs	r3, #3
 800189a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800189e:	2304      	movs	r3, #4
 80018a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018a4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80018a8:	4619      	mov	r1, r3
 80018aa:	480d      	ldr	r0, [pc, #52]	@ (80018e0 <HAL_I2C_MspInit+0x148>)
 80018ac:	f000 fac2 	bl	8001e34 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018b0:	4b08      	ldr	r3, [pc, #32]	@ (80018d4 <HAL_I2C_MspInit+0x13c>)
 80018b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b4:	4a07      	ldr	r2, [pc, #28]	@ (80018d4 <HAL_I2C_MspInit+0x13c>)
 80018b6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80018bc:	4b05      	ldr	r3, [pc, #20]	@ (80018d4 <HAL_I2C_MspInit+0x13c>)
 80018be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	68bb      	ldr	r3, [r7, #8]
}
 80018c8:	bf00      	nop
 80018ca:	37b0      	adds	r7, #176	@ 0xb0
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40005400 	.word	0x40005400
 80018d4:	40023800 	.word	0x40023800
 80018d8:	40020400 	.word	0x40020400
 80018dc:	40005800 	.word	0x40005800
 80018e0:	40021400 	.word	0x40021400

080018e4 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08a      	sub	sp, #40	@ 0x28
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001904:	d127      	bne.n	8001956 <HAL_TIM_Encoder_MspInit+0x72>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001906:	4b16      	ldr	r3, [pc, #88]	@ (8001960 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190a:	4a15      	ldr	r2, [pc, #84]	@ (8001960 <HAL_TIM_Encoder_MspInit+0x7c>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	6413      	str	r3, [r2, #64]	@ 0x40
 8001912:	4b13      	ldr	r3, [pc, #76]	@ (8001960 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191e:	4b10      	ldr	r3, [pc, #64]	@ (8001960 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001922:	4a0f      	ldr	r2, [pc, #60]	@ (8001960 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6313      	str	r3, [r2, #48]	@ 0x30
 800192a:	4b0d      	ldr	r3, [pc, #52]	@ (8001960 <HAL_TIM_Encoder_MspInit+0x7c>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001936:	2303      	movs	r3, #3
 8001938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193a:	2302      	movs	r3, #2
 800193c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001942:	2300      	movs	r3, #0
 8001944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001946:	2301      	movs	r3, #1
 8001948:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194a:	f107 0314 	add.w	r3, r7, #20
 800194e:	4619      	mov	r1, r3
 8001950:	4804      	ldr	r0, [pc, #16]	@ (8001964 <HAL_TIM_Encoder_MspInit+0x80>)
 8001952:	f000 fa6f 	bl	8001e34 <HAL_GPIO_Init>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001956:	bf00      	nop
 8001958:	3728      	adds	r7, #40	@ 0x28
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800
 8001964:	40020000 	.word	0x40020000

08001968 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b0aa      	sub	sp, #168	@ 0xa8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001970:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001980:	f107 0310 	add.w	r3, r7, #16
 8001984:	2284      	movs	r2, #132	@ 0x84
 8001986:	2100      	movs	r1, #0
 8001988:	4618      	mov	r0, r3
 800198a:	f003 fb29 	bl	8004fe0 <memset>
  if(huart->Instance==USART2)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a21      	ldr	r2, [pc, #132]	@ (8001a18 <HAL_UART_MspInit+0xb0>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d13a      	bne.n	8001a0e <HAL_UART_MspInit+0xa6>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001998:	2380      	movs	r3, #128	@ 0x80
 800199a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800199c:	2300      	movs	r3, #0
 800199e:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019a0:	f107 0310 	add.w	r3, r7, #16
 80019a4:	4618      	mov	r0, r3
 80019a6:	f002 f829 	bl	80039fc <HAL_RCCEx_PeriphCLKConfig>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019b0:	f7ff feb0 	bl	8001714 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019b4:	4b19      	ldr	r3, [pc, #100]	@ (8001a1c <HAL_UART_MspInit+0xb4>)
 80019b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b8:	4a18      	ldr	r2, [pc, #96]	@ (8001a1c <HAL_UART_MspInit+0xb4>)
 80019ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019be:	6413      	str	r3, [r2, #64]	@ 0x40
 80019c0:	4b16      	ldr	r3, [pc, #88]	@ (8001a1c <HAL_UART_MspInit+0xb4>)
 80019c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019cc:	4b13      	ldr	r3, [pc, #76]	@ (8001a1c <HAL_UART_MspInit+0xb4>)
 80019ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d0:	4a12      	ldr	r2, [pc, #72]	@ (8001a1c <HAL_UART_MspInit+0xb4>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80019d8:	4b10      	ldr	r3, [pc, #64]	@ (8001a1c <HAL_UART_MspInit+0xb4>)
 80019da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019e4:	230c      	movs	r3, #12
 80019e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ea:	2302      	movs	r3, #2
 80019ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f6:	2303      	movs	r3, #3
 80019f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019fc:	2307      	movs	r3, #7
 80019fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a02:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001a06:	4619      	mov	r1, r3
 8001a08:	4805      	ldr	r0, [pc, #20]	@ (8001a20 <HAL_UART_MspInit+0xb8>)
 8001a0a:	f000 fa13 	bl	8001e34 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001a0e:	bf00      	nop
 8001a10:	37a8      	adds	r7, #168	@ 0xa8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40004400 	.word	0x40004400
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	40020000 	.word	0x40020000

08001a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a28:	bf00      	nop
 8001a2a:	e7fd      	b.n	8001a28 <NMI_Handler+0x4>

08001a2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a30:	bf00      	nop
 8001a32:	e7fd      	b.n	8001a30 <HardFault_Handler+0x4>

08001a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a38:	bf00      	nop
 8001a3a:	e7fd      	b.n	8001a38 <MemManage_Handler+0x4>

08001a3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a40:	bf00      	nop
 8001a42:	e7fd      	b.n	8001a40 <BusFault_Handler+0x4>

08001a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a48:	bf00      	nop
 8001a4a:	e7fd      	b.n	8001a48 <UsageFault_Handler+0x4>

08001a4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a7a:	f000 f8b1 	bl	8001be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a8c:	4a14      	ldr	r2, [pc, #80]	@ (8001ae0 <_sbrk+0x5c>)
 8001a8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ae4 <_sbrk+0x60>)
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a98:	4b13      	ldr	r3, [pc, #76]	@ (8001ae8 <_sbrk+0x64>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d102      	bne.n	8001aa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aa0:	4b11      	ldr	r3, [pc, #68]	@ (8001ae8 <_sbrk+0x64>)
 8001aa2:	4a12      	ldr	r2, [pc, #72]	@ (8001aec <_sbrk+0x68>)
 8001aa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aa6:	4b10      	ldr	r3, [pc, #64]	@ (8001ae8 <_sbrk+0x64>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4413      	add	r3, r2
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d207      	bcs.n	8001ac4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ab4:	f003 fa9c 	bl	8004ff0 <__errno>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	220c      	movs	r2, #12
 8001abc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001abe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ac2:	e009      	b.n	8001ad8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ac4:	4b08      	ldr	r3, [pc, #32]	@ (8001ae8 <_sbrk+0x64>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aca:	4b07      	ldr	r3, [pc, #28]	@ (8001ae8 <_sbrk+0x64>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	4a05      	ldr	r2, [pc, #20]	@ (8001ae8 <_sbrk+0x64>)
 8001ad4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3718      	adds	r7, #24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20050000 	.word	0x20050000
 8001ae4:	00000400 	.word	0x00000400
 8001ae8:	200003cc 	.word	0x200003cc
 8001aec:	20000520 	.word	0x20000520

08001af0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001af4:	4b06      	ldr	r3, [pc, #24]	@ (8001b10 <SystemInit+0x20>)
 8001af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001afa:	4a05      	ldr	r2, [pc, #20]	@ (8001b10 <SystemInit+0x20>)
 8001afc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b4c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b18:	f7ff ffea 	bl	8001af0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b1c:	480c      	ldr	r0, [pc, #48]	@ (8001b50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b1e:	490d      	ldr	r1, [pc, #52]	@ (8001b54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b20:	4a0d      	ldr	r2, [pc, #52]	@ (8001b58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b24:	e002      	b.n	8001b2c <LoopCopyDataInit>

08001b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b2a:	3304      	adds	r3, #4

08001b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b30:	d3f9      	bcc.n	8001b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b32:	4a0a      	ldr	r2, [pc, #40]	@ (8001b5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b34:	4c0a      	ldr	r4, [pc, #40]	@ (8001b60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b38:	e001      	b.n	8001b3e <LoopFillZerobss>

08001b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b3c:	3204      	adds	r2, #4

08001b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b40:	d3fb      	bcc.n	8001b3a <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8001b42:	f003 fa5b 	bl	8004ffc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b46:	f7ff fb1f 	bl	8001188 <main>
  bx  lr    
 8001b4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b4c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b54:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001b58:	08005b40 	.word	0x08005b40
  ldr r2, =_sbss
 8001b5c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001b60:	2000051c 	.word	0x2000051c

08001b64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b64:	e7fe      	b.n	8001b64 <ADC_IRQHandler>

08001b66 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b6a:	2003      	movs	r0, #3
 8001b6c:	f000 f92e 	bl	8001dcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b70:	200f      	movs	r0, #15
 8001b72:	f000 f805 	bl	8001b80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b76:	f7ff fdeb 	bl	8001750 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b88:	4b12      	ldr	r3, [pc, #72]	@ (8001bd4 <HAL_InitTick+0x54>)
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	4b12      	ldr	r3, [pc, #72]	@ (8001bd8 <HAL_InitTick+0x58>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	4619      	mov	r1, r3
 8001b92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f000 f93b 	bl	8001e1a <HAL_SYSTICK_Config>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e00e      	b.n	8001bcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2b0f      	cmp	r3, #15
 8001bb2:	d80a      	bhi.n	8001bca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001bbc:	f000 f911 	bl	8001de2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bc0:	4a06      	ldr	r2, [pc, #24]	@ (8001bdc <HAL_InitTick+0x5c>)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	e000      	b.n	8001bcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	20000000 	.word	0x20000000
 8001bd8:	20000008 	.word	0x20000008
 8001bdc:	20000004 	.word	0x20000004

08001be0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001be4:	4b06      	ldr	r3, [pc, #24]	@ (8001c00 <HAL_IncTick+0x20>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	461a      	mov	r2, r3
 8001bea:	4b06      	ldr	r3, [pc, #24]	@ (8001c04 <HAL_IncTick+0x24>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4413      	add	r3, r2
 8001bf0:	4a04      	ldr	r2, [pc, #16]	@ (8001c04 <HAL_IncTick+0x24>)
 8001bf2:	6013      	str	r3, [r2, #0]
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	20000008 	.word	0x20000008
 8001c04:	200003d0 	.word	0x200003d0

08001c08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c0c:	4b03      	ldr	r3, [pc, #12]	@ (8001c1c <HAL_GetTick+0x14>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	200003d0 	.word	0x200003d0

08001c20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c28:	f7ff ffee 	bl	8001c08 <HAL_GetTick>
 8001c2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001c38:	d005      	beq.n	8001c46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c64 <HAL_Delay+0x44>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	461a      	mov	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4413      	add	r3, r2
 8001c44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c46:	bf00      	nop
 8001c48:	f7ff ffde 	bl	8001c08 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d8f7      	bhi.n	8001c48 <HAL_Delay+0x28>
  {
  }
}
 8001c58:	bf00      	nop
 8001c5a:	bf00      	nop
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000008 	.word	0x20000008

08001c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c78:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca8 <__NVIC_SetPriorityGrouping+0x40>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c84:	4013      	ands	r3, r2
 8001c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c90:	4b06      	ldr	r3, [pc, #24]	@ (8001cac <__NVIC_SetPriorityGrouping+0x44>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c96:	4a04      	ldr	r2, [pc, #16]	@ (8001ca8 <__NVIC_SetPriorityGrouping+0x40>)
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	60d3      	str	r3, [r2, #12]
}
 8001c9c:	bf00      	nop
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	e000ed00 	.word	0xe000ed00
 8001cac:	05fa0000 	.word	0x05fa0000

08001cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cb4:	4b04      	ldr	r3, [pc, #16]	@ (8001cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	0a1b      	lsrs	r3, r3, #8
 8001cba:	f003 0307 	and.w	r3, r3, #7
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	6039      	str	r1, [r7, #0]
 8001cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	db0a      	blt.n	8001cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	490c      	ldr	r1, [pc, #48]	@ (8001d18 <__NVIC_SetPriority+0x4c>)
 8001ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cea:	0112      	lsls	r2, r2, #4
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	440b      	add	r3, r1
 8001cf0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cf4:	e00a      	b.n	8001d0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	4908      	ldr	r1, [pc, #32]	@ (8001d1c <__NVIC_SetPriority+0x50>)
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	3b04      	subs	r3, #4
 8001d04:	0112      	lsls	r2, r2, #4
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	440b      	add	r3, r1
 8001d0a:	761a      	strb	r2, [r3, #24]
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	e000e100 	.word	0xe000e100
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b089      	sub	sp, #36	@ 0x24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	f1c3 0307 	rsb	r3, r3, #7
 8001d3a:	2b04      	cmp	r3, #4
 8001d3c:	bf28      	it	cs
 8001d3e:	2304      	movcs	r3, #4
 8001d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3304      	adds	r3, #4
 8001d46:	2b06      	cmp	r3, #6
 8001d48:	d902      	bls.n	8001d50 <NVIC_EncodePriority+0x30>
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3b03      	subs	r3, #3
 8001d4e:	e000      	b.n	8001d52 <NVIC_EncodePriority+0x32>
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43da      	mvns	r2, r3
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	401a      	ands	r2, r3
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d68:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d72:	43d9      	mvns	r1, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d78:	4313      	orrs	r3, r2
         );
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3724      	adds	r7, #36	@ 0x24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
	...

08001d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3b01      	subs	r3, #1
 8001d94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d98:	d301      	bcc.n	8001d9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e00f      	b.n	8001dbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc8 <SysTick_Config+0x40>)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3b01      	subs	r3, #1
 8001da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001da6:	210f      	movs	r1, #15
 8001da8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001dac:	f7ff ff8e 	bl	8001ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001db0:	4b05      	ldr	r3, [pc, #20]	@ (8001dc8 <SysTick_Config+0x40>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001db6:	4b04      	ldr	r3, [pc, #16]	@ (8001dc8 <SysTick_Config+0x40>)
 8001db8:	2207      	movs	r2, #7
 8001dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	e000e010 	.word	0xe000e010

08001dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7ff ff47 	bl	8001c68 <__NVIC_SetPriorityGrouping>
}
 8001dda:	bf00      	nop
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b086      	sub	sp, #24
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	4603      	mov	r3, r0
 8001dea:	60b9      	str	r1, [r7, #8]
 8001dec:	607a      	str	r2, [r7, #4]
 8001dee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001df4:	f7ff ff5c 	bl	8001cb0 <__NVIC_GetPriorityGrouping>
 8001df8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	68b9      	ldr	r1, [r7, #8]
 8001dfe:	6978      	ldr	r0, [r7, #20]
 8001e00:	f7ff ff8e 	bl	8001d20 <NVIC_EncodePriority>
 8001e04:	4602      	mov	r2, r0
 8001e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e0a:	4611      	mov	r1, r2
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff ff5d 	bl	8001ccc <__NVIC_SetPriority>
}
 8001e12:	bf00      	nop
 8001e14:	3718      	adds	r7, #24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b082      	sub	sp, #8
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7ff ffb0 	bl	8001d88 <SysTick_Config>
 8001e28:	4603      	mov	r3, r0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
	...

08001e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b089      	sub	sp, #36	@ 0x24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001e46:	2300      	movs	r3, #0
 8001e48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61fb      	str	r3, [r7, #28]
 8001e52:	e175      	b.n	8002140 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001e54:	2201      	movs	r2, #1
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	4013      	ands	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	f040 8164 	bne.w	800213a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f003 0303 	and.w	r3, r3, #3
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d005      	beq.n	8001e8a <HAL_GPIO_Init+0x56>
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f003 0303 	and.w	r3, r3, #3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d130      	bne.n	8001eec <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	2203      	movs	r2, #3
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	091b      	lsrs	r3, r3, #4
 8001ed6:	f003 0201 	and.w	r2, r3, #1
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f003 0303 	and.w	r3, r3, #3
 8001ef4:	2b03      	cmp	r3, #3
 8001ef6:	d017      	beq.n	8001f28 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	2203      	movs	r2, #3
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 0303 	and.w	r3, r3, #3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d123      	bne.n	8001f7c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	08da      	lsrs	r2, r3, #3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3208      	adds	r2, #8
 8001f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	220f      	movs	r2, #15
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	691a      	ldr	r2, [r3, #16]
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	08da      	lsrs	r2, r3, #3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3208      	adds	r2, #8
 8001f76:	69b9      	ldr	r1, [r7, #24]
 8001f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	2203      	movs	r2, #3
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4013      	ands	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 0203 	and.w	r2, r3, #3
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 80be 	beq.w	800213a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fbe:	4b66      	ldr	r3, [pc, #408]	@ (8002158 <HAL_GPIO_Init+0x324>)
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc2:	4a65      	ldr	r2, [pc, #404]	@ (8002158 <HAL_GPIO_Init+0x324>)
 8001fc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fca:	4b63      	ldr	r3, [pc, #396]	@ (8002158 <HAL_GPIO_Init+0x324>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001fd6:	4a61      	ldr	r2, [pc, #388]	@ (800215c <HAL_GPIO_Init+0x328>)
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	089b      	lsrs	r3, r3, #2
 8001fdc:	3302      	adds	r3, #2
 8001fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f003 0303 	and.w	r3, r3, #3
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	220f      	movs	r2, #15
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a58      	ldr	r2, [pc, #352]	@ (8002160 <HAL_GPIO_Init+0x32c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d037      	beq.n	8002072 <HAL_GPIO_Init+0x23e>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a57      	ldr	r2, [pc, #348]	@ (8002164 <HAL_GPIO_Init+0x330>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d031      	beq.n	800206e <HAL_GPIO_Init+0x23a>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a56      	ldr	r2, [pc, #344]	@ (8002168 <HAL_GPIO_Init+0x334>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d02b      	beq.n	800206a <HAL_GPIO_Init+0x236>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a55      	ldr	r2, [pc, #340]	@ (800216c <HAL_GPIO_Init+0x338>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d025      	beq.n	8002066 <HAL_GPIO_Init+0x232>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a54      	ldr	r2, [pc, #336]	@ (8002170 <HAL_GPIO_Init+0x33c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d01f      	beq.n	8002062 <HAL_GPIO_Init+0x22e>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a53      	ldr	r2, [pc, #332]	@ (8002174 <HAL_GPIO_Init+0x340>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d019      	beq.n	800205e <HAL_GPIO_Init+0x22a>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a52      	ldr	r2, [pc, #328]	@ (8002178 <HAL_GPIO_Init+0x344>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d013      	beq.n	800205a <HAL_GPIO_Init+0x226>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a51      	ldr	r2, [pc, #324]	@ (800217c <HAL_GPIO_Init+0x348>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d00d      	beq.n	8002056 <HAL_GPIO_Init+0x222>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a50      	ldr	r2, [pc, #320]	@ (8002180 <HAL_GPIO_Init+0x34c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d007      	beq.n	8002052 <HAL_GPIO_Init+0x21e>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a4f      	ldr	r2, [pc, #316]	@ (8002184 <HAL_GPIO_Init+0x350>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d101      	bne.n	800204e <HAL_GPIO_Init+0x21a>
 800204a:	2309      	movs	r3, #9
 800204c:	e012      	b.n	8002074 <HAL_GPIO_Init+0x240>
 800204e:	230a      	movs	r3, #10
 8002050:	e010      	b.n	8002074 <HAL_GPIO_Init+0x240>
 8002052:	2308      	movs	r3, #8
 8002054:	e00e      	b.n	8002074 <HAL_GPIO_Init+0x240>
 8002056:	2307      	movs	r3, #7
 8002058:	e00c      	b.n	8002074 <HAL_GPIO_Init+0x240>
 800205a:	2306      	movs	r3, #6
 800205c:	e00a      	b.n	8002074 <HAL_GPIO_Init+0x240>
 800205e:	2305      	movs	r3, #5
 8002060:	e008      	b.n	8002074 <HAL_GPIO_Init+0x240>
 8002062:	2304      	movs	r3, #4
 8002064:	e006      	b.n	8002074 <HAL_GPIO_Init+0x240>
 8002066:	2303      	movs	r3, #3
 8002068:	e004      	b.n	8002074 <HAL_GPIO_Init+0x240>
 800206a:	2302      	movs	r3, #2
 800206c:	e002      	b.n	8002074 <HAL_GPIO_Init+0x240>
 800206e:	2301      	movs	r3, #1
 8002070:	e000      	b.n	8002074 <HAL_GPIO_Init+0x240>
 8002072:	2300      	movs	r3, #0
 8002074:	69fa      	ldr	r2, [r7, #28]
 8002076:	f002 0203 	and.w	r2, r2, #3
 800207a:	0092      	lsls	r2, r2, #2
 800207c:	4093      	lsls	r3, r2
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4313      	orrs	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002084:	4935      	ldr	r1, [pc, #212]	@ (800215c <HAL_GPIO_Init+0x328>)
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	089b      	lsrs	r3, r3, #2
 800208a:	3302      	adds	r3, #2
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002092:	4b3d      	ldr	r3, [pc, #244]	@ (8002188 <HAL_GPIO_Init+0x354>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	43db      	mvns	r3, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4013      	ands	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020b6:	4a34      	ldr	r2, [pc, #208]	@ (8002188 <HAL_GPIO_Init+0x354>)
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020bc:	4b32      	ldr	r3, [pc, #200]	@ (8002188 <HAL_GPIO_Init+0x354>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	43db      	mvns	r3, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4013      	ands	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d003      	beq.n	80020e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	4313      	orrs	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020e0:	4a29      	ldr	r2, [pc, #164]	@ (8002188 <HAL_GPIO_Init+0x354>)
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020e6:	4b28      	ldr	r3, [pc, #160]	@ (8002188 <HAL_GPIO_Init+0x354>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	43db      	mvns	r3, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4013      	ands	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	4313      	orrs	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800210a:	4a1f      	ldr	r2, [pc, #124]	@ (8002188 <HAL_GPIO_Init+0x354>)
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002110:	4b1d      	ldr	r3, [pc, #116]	@ (8002188 <HAL_GPIO_Init+0x354>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	43db      	mvns	r3, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4013      	ands	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4313      	orrs	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002134:	4a14      	ldr	r2, [pc, #80]	@ (8002188 <HAL_GPIO_Init+0x354>)
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	3301      	adds	r3, #1
 800213e:	61fb      	str	r3, [r7, #28]
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	2b0f      	cmp	r3, #15
 8002144:	f67f ae86 	bls.w	8001e54 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002148:	bf00      	nop
 800214a:	bf00      	nop
 800214c:	3724      	adds	r7, #36	@ 0x24
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	40023800 	.word	0x40023800
 800215c:	40013800 	.word	0x40013800
 8002160:	40020000 	.word	0x40020000
 8002164:	40020400 	.word	0x40020400
 8002168:	40020800 	.word	0x40020800
 800216c:	40020c00 	.word	0x40020c00
 8002170:	40021000 	.word	0x40021000
 8002174:	40021400 	.word	0x40021400
 8002178:	40021800 	.word	0x40021800
 800217c:	40021c00 	.word	0x40021c00
 8002180:	40022000 	.word	0x40022000
 8002184:	40022400 	.word	0x40022400
 8002188:	40013c00 	.word	0x40013c00

0800218c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	460b      	mov	r3, r1
 8002196:	807b      	strh	r3, [r7, #2]
 8002198:	4613      	mov	r3, r2
 800219a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800219c:	787b      	ldrb	r3, [r7, #1]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021a2:	887a      	ldrh	r2, [r7, #2]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80021a8:	e003      	b.n	80021b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80021aa:	887b      	ldrh	r3, [r7, #2]
 80021ac:	041a      	lsls	r2, r3, #16
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	619a      	str	r2, [r3, #24]
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021be:	b480      	push	{r7}
 80021c0:	b085      	sub	sp, #20
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
 80021c6:	460b      	mov	r3, r1
 80021c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021d0:	887a      	ldrh	r2, [r7, #2]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	4013      	ands	r3, r2
 80021d6:	041a      	lsls	r2, r3, #16
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	43d9      	mvns	r1, r3
 80021dc:	887b      	ldrh	r3, [r7, #2]
 80021de:	400b      	ands	r3, r1
 80021e0:	431a      	orrs	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	619a      	str	r2, [r3, #24]
}
 80021e6:	bf00      	nop
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
	...

080021f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e08b      	b.n	800231e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d106      	bne.n	8002220 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7ff fabc 	bl	8001798 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2224      	movs	r2, #36	@ 0x24
 8002224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 0201 	bic.w	r2, r2, #1
 8002236:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002244:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002254:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d107      	bne.n	800226e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689a      	ldr	r2, [r3, #8]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	e006      	b.n	800227c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689a      	ldr	r2, [r3, #8]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800227a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	2b02      	cmp	r3, #2
 8002282:	d108      	bne.n	8002296 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002292:	605a      	str	r2, [r3, #4]
 8002294:	e007      	b.n	80022a6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6859      	ldr	r1, [r3, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002328 <HAL_I2C_Init+0x134>)
 80022b2:	430b      	orrs	r3, r1
 80022b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68da      	ldr	r2, [r3, #12]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80022c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	691a      	ldr	r2, [r3, #16]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	69d9      	ldr	r1, [r3, #28]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a1a      	ldr	r2, [r3, #32]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 0201 	orr.w	r2, r2, #1
 80022fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2220      	movs	r2, #32
 800230a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	02008000 	.word	0x02008000

0800232c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b088      	sub	sp, #32
 8002330:	af02      	add	r7, sp, #8
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	4608      	mov	r0, r1
 8002336:	4611      	mov	r1, r2
 8002338:	461a      	mov	r2, r3
 800233a:	4603      	mov	r3, r0
 800233c:	817b      	strh	r3, [r7, #10]
 800233e:	460b      	mov	r3, r1
 8002340:	813b      	strh	r3, [r7, #8]
 8002342:	4613      	mov	r3, r2
 8002344:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b20      	cmp	r3, #32
 8002350:	f040 80f9 	bne.w	8002546 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002354:	6a3b      	ldr	r3, [r7, #32]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d002      	beq.n	8002360 <HAL_I2C_Mem_Write+0x34>
 800235a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800235c:	2b00      	cmp	r3, #0
 800235e:	d105      	bne.n	800236c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002366:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e0ed      	b.n	8002548 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002372:	2b01      	cmp	r3, #1
 8002374:	d101      	bne.n	800237a <HAL_I2C_Mem_Write+0x4e>
 8002376:	2302      	movs	r3, #2
 8002378:	e0e6      	b.n	8002548 <HAL_I2C_Mem_Write+0x21c>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002382:	f7ff fc41 	bl	8001c08 <HAL_GetTick>
 8002386:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	2319      	movs	r3, #25
 800238e:	2201      	movs	r2, #1
 8002390:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f000 fbc9 	bl	8002b2c <I2C_WaitOnFlagUntilTimeout>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e0d1      	b.n	8002548 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2221      	movs	r2, #33	@ 0x21
 80023a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2240      	movs	r2, #64	@ 0x40
 80023b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6a3a      	ldr	r2, [r7, #32]
 80023be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80023c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023cc:	88f8      	ldrh	r0, [r7, #6]
 80023ce:	893a      	ldrh	r2, [r7, #8]
 80023d0:	8979      	ldrh	r1, [r7, #10]
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	9301      	str	r3, [sp, #4]
 80023d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	4603      	mov	r3, r0
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	f000 fad9 	bl	8002994 <I2C_RequestMemoryWrite>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d005      	beq.n	80023f4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e0a9      	b.n	8002548 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	2bff      	cmp	r3, #255	@ 0xff
 80023fc:	d90e      	bls.n	800241c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	22ff      	movs	r2, #255	@ 0xff
 8002402:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002408:	b2da      	uxtb	r2, r3
 800240a:	8979      	ldrh	r1, [r7, #10]
 800240c:	2300      	movs	r3, #0
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f000 fd4d 	bl	8002eb4 <I2C_TransferConfig>
 800241a:	e00f      	b.n	800243c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002420:	b29a      	uxth	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800242a:	b2da      	uxtb	r2, r3
 800242c:	8979      	ldrh	r1, [r7, #10]
 800242e:	2300      	movs	r3, #0
 8002430:	9300      	str	r3, [sp, #0]
 8002432:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f000 fd3c 	bl	8002eb4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f000 fbcc 	bl	8002bde <I2C_WaitOnTXISFlagUntilTimeout>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e07b      	b.n	8002548 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002454:	781a      	ldrb	r2, [r3, #0]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002460:	1c5a      	adds	r2, r3, #1
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800246a:	b29b      	uxth	r3, r3
 800246c:	3b01      	subs	r3, #1
 800246e:	b29a      	uxth	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002478:	3b01      	subs	r3, #1
 800247a:	b29a      	uxth	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002484:	b29b      	uxth	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d034      	beq.n	80024f4 <HAL_I2C_Mem_Write+0x1c8>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800248e:	2b00      	cmp	r3, #0
 8002490:	d130      	bne.n	80024f4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002498:	2200      	movs	r2, #0
 800249a:	2180      	movs	r1, #128	@ 0x80
 800249c:	68f8      	ldr	r0, [r7, #12]
 800249e:	f000 fb45 	bl	8002b2c <I2C_WaitOnFlagUntilTimeout>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e04d      	b.n	8002548 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	2bff      	cmp	r3, #255	@ 0xff
 80024b4:	d90e      	bls.n	80024d4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	22ff      	movs	r2, #255	@ 0xff
 80024ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	8979      	ldrh	r1, [r7, #10]
 80024c4:	2300      	movs	r3, #0
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f000 fcf1 	bl	8002eb4 <I2C_TransferConfig>
 80024d2:	e00f      	b.n	80024f4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024d8:	b29a      	uxth	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	8979      	ldrh	r1, [r7, #10]
 80024e6:	2300      	movs	r3, #0
 80024e8:	9300      	str	r3, [sp, #0]
 80024ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f000 fce0 	bl	8002eb4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d19e      	bne.n	800243c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f000 fbb2 	bl	8002c6c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e01a      	b.n	8002548 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2220      	movs	r2, #32
 8002518:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6859      	ldr	r1, [r3, #4]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	4b0a      	ldr	r3, [pc, #40]	@ (8002550 <HAL_I2C_Mem_Write+0x224>)
 8002526:	400b      	ands	r3, r1
 8002528:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2220      	movs	r2, #32
 800252e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002542:	2300      	movs	r3, #0
 8002544:	e000      	b.n	8002548 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002546:	2302      	movs	r3, #2
  }
}
 8002548:	4618      	mov	r0, r3
 800254a:	3718      	adds	r7, #24
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	fe00e800 	.word	0xfe00e800

08002554 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b088      	sub	sp, #32
 8002558:	af02      	add	r7, sp, #8
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	4608      	mov	r0, r1
 800255e:	4611      	mov	r1, r2
 8002560:	461a      	mov	r2, r3
 8002562:	4603      	mov	r3, r0
 8002564:	817b      	strh	r3, [r7, #10]
 8002566:	460b      	mov	r3, r1
 8002568:	813b      	strh	r3, [r7, #8]
 800256a:	4613      	mov	r3, r2
 800256c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b20      	cmp	r3, #32
 8002578:	f040 80fd 	bne.w	8002776 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800257c:	6a3b      	ldr	r3, [r7, #32]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d002      	beq.n	8002588 <HAL_I2C_Mem_Read+0x34>
 8002582:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002584:	2b00      	cmp	r3, #0
 8002586:	d105      	bne.n	8002594 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800258e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e0f1      	b.n	8002778 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800259a:	2b01      	cmp	r3, #1
 800259c:	d101      	bne.n	80025a2 <HAL_I2C_Mem_Read+0x4e>
 800259e:	2302      	movs	r3, #2
 80025a0:	e0ea      	b.n	8002778 <HAL_I2C_Mem_Read+0x224>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025aa:	f7ff fb2d 	bl	8001c08 <HAL_GetTick>
 80025ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	2319      	movs	r3, #25
 80025b6:	2201      	movs	r2, #1
 80025b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f000 fab5 	bl	8002b2c <I2C_WaitOnFlagUntilTimeout>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e0d5      	b.n	8002778 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2222      	movs	r2, #34	@ 0x22
 80025d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2240      	movs	r2, #64	@ 0x40
 80025d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6a3a      	ldr	r2, [r7, #32]
 80025e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80025ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025f4:	88f8      	ldrh	r0, [r7, #6]
 80025f6:	893a      	ldrh	r2, [r7, #8]
 80025f8:	8979      	ldrh	r1, [r7, #10]
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	9301      	str	r3, [sp, #4]
 80025fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	4603      	mov	r3, r0
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f000 fa19 	bl	8002a3c <I2C_RequestMemoryRead>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d005      	beq.n	800261c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e0ad      	b.n	8002778 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002620:	b29b      	uxth	r3, r3
 8002622:	2bff      	cmp	r3, #255	@ 0xff
 8002624:	d90e      	bls.n	8002644 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2201      	movs	r2, #1
 800262a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002630:	b2da      	uxtb	r2, r3
 8002632:	8979      	ldrh	r1, [r7, #10]
 8002634:	4b52      	ldr	r3, [pc, #328]	@ (8002780 <HAL_I2C_Mem_Read+0x22c>)
 8002636:	9300      	str	r3, [sp, #0]
 8002638:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f000 fc39 	bl	8002eb4 <I2C_TransferConfig>
 8002642:	e00f      	b.n	8002664 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002648:	b29a      	uxth	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002652:	b2da      	uxtb	r2, r3
 8002654:	8979      	ldrh	r1, [r7, #10]
 8002656:	4b4a      	ldr	r3, [pc, #296]	@ (8002780 <HAL_I2C_Mem_Read+0x22c>)
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f000 fc28 	bl	8002eb4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800266a:	2200      	movs	r2, #0
 800266c:	2104      	movs	r1, #4
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f000 fa5c 	bl	8002b2c <I2C_WaitOnFlagUntilTimeout>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e07c      	b.n	8002778 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002688:	b2d2      	uxtb	r2, r2
 800268a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002690:	1c5a      	adds	r2, r3, #1
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800269a:	3b01      	subs	r3, #1
 800269c:	b29a      	uxth	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	3b01      	subs	r3, #1
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d034      	beq.n	8002724 <HAL_I2C_Mem_Read+0x1d0>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d130      	bne.n	8002724 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026c8:	2200      	movs	r2, #0
 80026ca:	2180      	movs	r1, #128	@ 0x80
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f000 fa2d 	bl	8002b2c <I2C_WaitOnFlagUntilTimeout>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e04d      	b.n	8002778 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	2bff      	cmp	r3, #255	@ 0xff
 80026e4:	d90e      	bls.n	8002704 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2201      	movs	r2, #1
 80026ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	8979      	ldrh	r1, [r7, #10]
 80026f4:	2300      	movs	r3, #0
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f000 fbd9 	bl	8002eb4 <I2C_TransferConfig>
 8002702:	e00f      	b.n	8002724 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002708:	b29a      	uxth	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002712:	b2da      	uxtb	r2, r3
 8002714:	8979      	ldrh	r1, [r7, #10]
 8002716:	2300      	movs	r3, #0
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f000 fbc8 	bl	8002eb4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002728:	b29b      	uxth	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d19a      	bne.n	8002664 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f000 fa9a 	bl	8002c6c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e01a      	b.n	8002778 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2220      	movs	r2, #32
 8002748:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6859      	ldr	r1, [r3, #4]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	4b0b      	ldr	r3, [pc, #44]	@ (8002784 <HAL_I2C_Mem_Read+0x230>)
 8002756:	400b      	ands	r3, r1
 8002758:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2220      	movs	r2, #32
 800275e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002772:	2300      	movs	r3, #0
 8002774:	e000      	b.n	8002778 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002776:	2302      	movs	r3, #2
  }
}
 8002778:	4618      	mov	r0, r3
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	80002400 	.word	0x80002400
 8002784:	fe00e800 	.word	0xfe00e800

08002788 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b08a      	sub	sp, #40	@ 0x28
 800278c:	af02      	add	r7, sp, #8
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	607a      	str	r2, [r7, #4]
 8002792:	603b      	str	r3, [r7, #0]
 8002794:	460b      	mov	r3, r1
 8002796:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002798:	2300      	movs	r3, #0
 800279a:	617b      	str	r3, [r7, #20]

  HAL_StatusTypeDef status = HAL_OK;
 800279c:	2300      	movs	r3, #0
 800279e:	77fb      	strb	r3, [r7, #31]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b20      	cmp	r3, #32
 80027aa:	f040 80e9 	bne.w	8002980 <HAL_I2C_IsDeviceReady+0x1f8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027bc:	d101      	bne.n	80027c2 <HAL_I2C_IsDeviceReady+0x3a>
    {
      return HAL_BUSY;
 80027be:	2302      	movs	r3, #2
 80027c0:	e0df      	b.n	8002982 <HAL_I2C_IsDeviceReady+0x1fa>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d101      	bne.n	80027d0 <HAL_I2C_IsDeviceReady+0x48>
 80027cc:	2302      	movs	r3, #2
 80027ce:	e0d8      	b.n	8002982 <HAL_I2C_IsDeviceReady+0x1fa>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2224      	movs	r2, #36	@ 0x24
 80027dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d105      	bne.n	80027fa <HAL_I2C_IsDeviceReady+0x72>
 80027ee:	897b      	ldrh	r3, [r7, #10]
 80027f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80027f4:	4b65      	ldr	r3, [pc, #404]	@ (800298c <HAL_I2C_IsDeviceReady+0x204>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	e004      	b.n	8002804 <HAL_I2C_IsDeviceReady+0x7c>
 80027fa:	897b      	ldrh	r3, [r7, #10]
 80027fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002800:	4b63      	ldr	r3, [pc, #396]	@ (8002990 <HAL_I2C_IsDeviceReady+0x208>)
 8002802:	4313      	orrs	r3, r2
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	6812      	ldr	r2, [r2, #0]
 8002808:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800280a:	f7ff f9fd 	bl	8001c08 <HAL_GetTick>
 800280e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	f003 0320 	and.w	r3, r3, #32
 800281a:	2b20      	cmp	r3, #32
 800281c:	bf0c      	ite	eq
 800281e:	2301      	moveq	r3, #1
 8002820:	2300      	movne	r3, #0
 8002822:	b2db      	uxtb	r3, r3
 8002824:	77bb      	strb	r3, [r7, #30]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	f003 0310 	and.w	r3, r3, #16
 8002830:	2b10      	cmp	r3, #16
 8002832:	bf0c      	ite	eq
 8002834:	2301      	moveq	r3, #1
 8002836:	2300      	movne	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	777b      	strb	r3, [r7, #29]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800283c:	e034      	b.n	80028a8 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002844:	d01a      	beq.n	800287c <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002846:	f7ff f9df 	bl	8001c08 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	429a      	cmp	r2, r3
 8002854:	d302      	bcc.n	800285c <HAL_I2C_IsDeviceReady+0xd4>
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d10f      	bne.n	800287c <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2220      	movs	r2, #32
 8002860:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002868:	f043 0220 	orr.w	r2, r3, #32
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e082      	b.n	8002982 <HAL_I2C_IsDeviceReady+0x1fa>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	f003 0320 	and.w	r3, r3, #32
 8002886:	2b20      	cmp	r3, #32
 8002888:	bf0c      	ite	eq
 800288a:	2301      	moveq	r3, #1
 800288c:	2300      	movne	r3, #0
 800288e:	b2db      	uxtb	r3, r3
 8002890:	77bb      	strb	r3, [r7, #30]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	f003 0310 	and.w	r3, r3, #16
 800289c:	2b10      	cmp	r3, #16
 800289e:	bf0c      	ite	eq
 80028a0:	2301      	moveq	r3, #1
 80028a2:	2300      	movne	r3, #0
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	777b      	strb	r3, [r7, #29]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80028a8:	7fbb      	ldrb	r3, [r7, #30]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d102      	bne.n	80028b4 <HAL_I2C_IsDeviceReady+0x12c>
 80028ae:	7f7b      	ldrb	r3, [r7, #29]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d0c4      	beq.n	800283e <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	f003 0310 	and.w	r3, r3, #16
 80028be:	2b10      	cmp	r3, #16
 80028c0:	d027      	beq.n	8002912 <HAL_I2C_IsDeviceReady+0x18a>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	2200      	movs	r2, #0
 80028ca:	2120      	movs	r1, #32
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f000 f92d 	bl	8002b2c <I2C_WaitOnFlagUntilTimeout>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00e      	beq.n	80028f6 <HAL_I2C_IsDeviceReady+0x16e>
        {
          /* A non acknowledge appear during STOP Flag waiting process, a new trial must be performed */
          if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028dc:	2b04      	cmp	r3, #4
 80028de:	d107      	bne.n	80028f0 <HAL_I2C_IsDeviceReady+0x168>
          {
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2220      	movs	r2, #32
 80028e6:	61da      	str	r2, [r3, #28]

            /* Reset the error code for next trial */
            hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2200      	movs	r2, #0
 80028ec:	645a      	str	r2, [r3, #68]	@ 0x44
 80028ee:	e026      	b.n	800293e <HAL_I2C_IsDeviceReady+0x1b6>
          }
          else
          {
            status = HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	77fb      	strb	r3, [r7, #31]
 80028f4:	e023      	b.n	800293e <HAL_I2C_IsDeviceReady+0x1b6>
        else
        {
          /* A acknowledge appear during STOP Flag waiting process, this mean that device respond to its address */

          /* Clear STOP Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2220      	movs	r2, #32
 80028fc:	61da      	str	r2, [r3, #28]

          /* Device is ready */
          hi2c->State = HAL_I2C_STATE_READY;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2220      	movs	r2, #32
 8002902:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_OK;
 800290e:	2300      	movs	r3, #0
 8002910:	e037      	b.n	8002982 <HAL_I2C_IsDeviceReady+0x1fa>
      {
        /* A non acknowledge is detected, this mean that device not respond to its address,
           a new trial must be performed */

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2210      	movs	r2, #16
 8002918:	61da      	str	r2, [r3, #28]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	2200      	movs	r2, #0
 8002922:	2120      	movs	r1, #32
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f000 f901 	bl	8002b2c <I2C_WaitOnFlagUntilTimeout>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d002      	beq.n	8002936 <HAL_I2C_IsDeviceReady+0x1ae>
        {
          status = HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	77fb      	strb	r3, [r7, #31]
 8002934:	e003      	b.n	800293e <HAL_I2C_IsDeviceReady+0x1b6>
        }
        else
        {
          /* Clear STOP Flag, auto generated with autoend*/
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2220      	movs	r2, #32
 800293c:	61da      	str	r2, [r3, #28]
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	3301      	adds	r3, #1
 8002942:	617b      	str	r3, [r7, #20]

      if ((I2C_Trials < Trials) && (status == HAL_ERROR))
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	429a      	cmp	r2, r3
 800294a:	d904      	bls.n	8002956 <HAL_I2C_IsDeviceReady+0x1ce>
 800294c:	7ffb      	ldrb	r3, [r7, #31]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d101      	bne.n	8002956 <HAL_I2C_IsDeviceReady+0x1ce>
      {
        status = HAL_OK;
 8002952:	2300      	movs	r3, #0
 8002954:	77fb      	strb	r3, [r7, #31]
      }

    } while (I2C_Trials < Trials);
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	429a      	cmp	r2, r3
 800295c:	f63f af43 	bhi.w	80027e6 <HAL_I2C_IsDeviceReady+0x5e>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2220      	movs	r2, #32
 8002964:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800296c:	f043 0220 	orr.w	r2, r3, #32
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e000      	b.n	8002982 <HAL_I2C_IsDeviceReady+0x1fa>
  }
  else
  {
    return HAL_BUSY;
 8002980:	2302      	movs	r3, #2
  }
}
 8002982:	4618      	mov	r0, r3
 8002984:	3720      	adds	r7, #32
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	02002000 	.word	0x02002000
 8002990:	02002800 	.word	0x02002800

08002994 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af02      	add	r7, sp, #8
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	4608      	mov	r0, r1
 800299e:	4611      	mov	r1, r2
 80029a0:	461a      	mov	r2, r3
 80029a2:	4603      	mov	r3, r0
 80029a4:	817b      	strh	r3, [r7, #10]
 80029a6:	460b      	mov	r3, r1
 80029a8:	813b      	strh	r3, [r7, #8]
 80029aa:	4613      	mov	r3, r2
 80029ac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80029ae:	88fb      	ldrh	r3, [r7, #6]
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	8979      	ldrh	r1, [r7, #10]
 80029b4:	4b20      	ldr	r3, [pc, #128]	@ (8002a38 <I2C_RequestMemoryWrite+0xa4>)
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 fa79 	bl	8002eb4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029c2:	69fa      	ldr	r2, [r7, #28]
 80029c4:	69b9      	ldr	r1, [r7, #24]
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f000 f909 	bl	8002bde <I2C_WaitOnTXISFlagUntilTimeout>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e02c      	b.n	8002a30 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029d6:	88fb      	ldrh	r3, [r7, #6]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d105      	bne.n	80029e8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029dc:	893b      	ldrh	r3, [r7, #8]
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	629a      	str	r2, [r3, #40]	@ 0x28
 80029e6:	e015      	b.n	8002a14 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80029e8:	893b      	ldrh	r3, [r7, #8]
 80029ea:	0a1b      	lsrs	r3, r3, #8
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	b2da      	uxtb	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029f6:	69fa      	ldr	r2, [r7, #28]
 80029f8:	69b9      	ldr	r1, [r7, #24]
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f000 f8ef 	bl	8002bde <I2C_WaitOnTXISFlagUntilTimeout>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e012      	b.n	8002a30 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a0a:	893b      	ldrh	r3, [r7, #8]
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	9300      	str	r3, [sp, #0]
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	2180      	movs	r1, #128	@ 0x80
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 f884 	bl	8002b2c <I2C_WaitOnFlagUntilTimeout>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e000      	b.n	8002a30 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	80002000 	.word	0x80002000

08002a3c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af02      	add	r7, sp, #8
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	4608      	mov	r0, r1
 8002a46:	4611      	mov	r1, r2
 8002a48:	461a      	mov	r2, r3
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	817b      	strh	r3, [r7, #10]
 8002a4e:	460b      	mov	r3, r1
 8002a50:	813b      	strh	r3, [r7, #8]
 8002a52:	4613      	mov	r3, r2
 8002a54:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002a56:	88fb      	ldrh	r3, [r7, #6]
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	8979      	ldrh	r1, [r7, #10]
 8002a5c:	4b20      	ldr	r3, [pc, #128]	@ (8002ae0 <I2C_RequestMemoryRead+0xa4>)
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	2300      	movs	r3, #0
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f000 fa26 	bl	8002eb4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a68:	69fa      	ldr	r2, [r7, #28]
 8002a6a:	69b9      	ldr	r1, [r7, #24]
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f000 f8b6 	bl	8002bde <I2C_WaitOnTXISFlagUntilTimeout>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e02c      	b.n	8002ad6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a7c:	88fb      	ldrh	r3, [r7, #6]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d105      	bne.n	8002a8e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a82:	893b      	ldrh	r3, [r7, #8]
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002a8c:	e015      	b.n	8002aba <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a8e:	893b      	ldrh	r3, [r7, #8]
 8002a90:	0a1b      	lsrs	r3, r3, #8
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a9c:	69fa      	ldr	r2, [r7, #28]
 8002a9e:	69b9      	ldr	r1, [r7, #24]
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f000 f89c 	bl	8002bde <I2C_WaitOnTXISFlagUntilTimeout>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e012      	b.n	8002ad6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ab0:	893b      	ldrh	r3, [r7, #8]
 8002ab2:	b2da      	uxtb	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	9300      	str	r3, [sp, #0]
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	2140      	movs	r1, #64	@ 0x40
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f000 f831 	bl	8002b2c <I2C_WaitOnFlagUntilTimeout>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e000      	b.n	8002ad6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	80002000 	.word	0x80002000

08002ae4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d103      	bne.n	8002b02 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2200      	movs	r2, #0
 8002b00:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d007      	beq.n	8002b20 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	699a      	ldr	r2, [r3, #24]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 0201 	orr.w	r2, r2, #1
 8002b1e:	619a      	str	r2, [r3, #24]
  }
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	603b      	str	r3, [r7, #0]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b3c:	e03b      	b.n	8002bb6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	6839      	ldr	r1, [r7, #0]
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f000 f8d6 	bl	8002cf4 <I2C_IsErrorOccurred>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e041      	b.n	8002bd6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b58:	d02d      	beq.n	8002bb6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b5a:	f7ff f855 	bl	8001c08 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d302      	bcc.n	8002b70 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d122      	bne.n	8002bb6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	699a      	ldr	r2, [r3, #24]
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	bf0c      	ite	eq
 8002b80:	2301      	moveq	r3, #1
 8002b82:	2300      	movne	r3, #0
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	461a      	mov	r2, r3
 8002b88:	79fb      	ldrb	r3, [r7, #7]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d113      	bne.n	8002bb6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b92:	f043 0220 	orr.w	r2, r3, #32
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2220      	movs	r2, #32
 8002b9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e00f      	b.n	8002bd6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	699a      	ldr	r2, [r3, #24]
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	68ba      	ldr	r2, [r7, #8]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	bf0c      	ite	eq
 8002bc6:	2301      	moveq	r3, #1
 8002bc8:	2300      	movne	r3, #0
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	461a      	mov	r2, r3
 8002bce:	79fb      	ldrb	r3, [r7, #7]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d0b4      	beq.n	8002b3e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b084      	sub	sp, #16
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	60f8      	str	r0, [r7, #12]
 8002be6:	60b9      	str	r1, [r7, #8]
 8002be8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002bea:	e033      	b.n	8002c54 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	68b9      	ldr	r1, [r7, #8]
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 f87f 	bl	8002cf4 <I2C_IsErrorOccurred>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e031      	b.n	8002c64 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c06:	d025      	beq.n	8002c54 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c08:	f7fe fffe 	bl	8001c08 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d302      	bcc.n	8002c1e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d11a      	bne.n	8002c54 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d013      	beq.n	8002c54 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c30:	f043 0220 	orr.w	r2, r3, #32
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e007      	b.n	8002c64 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d1c4      	bne.n	8002bec <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c78:	e02f      	b.n	8002cda <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	68b9      	ldr	r1, [r7, #8]
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f000 f838 	bl	8002cf4 <I2C_IsErrorOccurred>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e02d      	b.n	8002cea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c8e:	f7fe ffbb 	bl	8001c08 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	68ba      	ldr	r2, [r7, #8]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d302      	bcc.n	8002ca4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d11a      	bne.n	8002cda <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	f003 0320 	and.w	r3, r3, #32
 8002cae:	2b20      	cmp	r3, #32
 8002cb0:	d013      	beq.n	8002cda <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb6:	f043 0220 	orr.w	r2, r3, #32
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e007      	b.n	8002cea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	f003 0320 	and.w	r3, r3, #32
 8002ce4:	2b20      	cmp	r3, #32
 8002ce6:	d1c8      	bne.n	8002c7a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
	...

08002cf4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b08a      	sub	sp, #40	@ 0x28
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d00:	2300      	movs	r3, #0
 8002d02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	f003 0310 	and.w	r3, r3, #16
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d068      	beq.n	8002df2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2210      	movs	r2, #16
 8002d26:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d28:	e049      	b.n	8002dbe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d30:	d045      	beq.n	8002dbe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d32:	f7fe ff69 	bl	8001c08 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	68ba      	ldr	r2, [r7, #8]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d302      	bcc.n	8002d48 <I2C_IsErrorOccurred+0x54>
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d13a      	bne.n	8002dbe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d52:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d5a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d6a:	d121      	bne.n	8002db0 <I2C_IsErrorOccurred+0xbc>
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d72:	d01d      	beq.n	8002db0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002d74:	7cfb      	ldrb	r3, [r7, #19]
 8002d76:	2b20      	cmp	r3, #32
 8002d78:	d01a      	beq.n	8002db0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d88:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002d8a:	f7fe ff3d 	bl	8001c08 <HAL_GetTick>
 8002d8e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d90:	e00e      	b.n	8002db0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002d92:	f7fe ff39 	bl	8001c08 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b19      	cmp	r3, #25
 8002d9e:	d907      	bls.n	8002db0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002da0:	6a3b      	ldr	r3, [r7, #32]
 8002da2:	f043 0320 	orr.w	r3, r3, #32
 8002da6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002dae:	e006      	b.n	8002dbe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	f003 0320 	and.w	r3, r3, #32
 8002dba:	2b20      	cmp	r3, #32
 8002dbc:	d1e9      	bne.n	8002d92 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	f003 0320 	and.w	r3, r3, #32
 8002dc8:	2b20      	cmp	r3, #32
 8002dca:	d003      	beq.n	8002dd4 <I2C_IsErrorOccurred+0xe0>
 8002dcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d0aa      	beq.n	8002d2a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002dd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d103      	bne.n	8002de4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2220      	movs	r2, #32
 8002de2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002de4:	6a3b      	ldr	r3, [r7, #32]
 8002de6:	f043 0304 	orr.w	r3, r3, #4
 8002dea:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00b      	beq.n	8002e1c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002e04:	6a3b      	ldr	r3, [r7, #32]
 8002e06:	f043 0301 	orr.w	r3, r3, #1
 8002e0a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e14:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00b      	beq.n	8002e3e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002e26:	6a3b      	ldr	r3, [r7, #32]
 8002e28:	f043 0308 	orr.w	r3, r3, #8
 8002e2c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e36:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00b      	beq.n	8002e60 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002e48:	6a3b      	ldr	r3, [r7, #32]
 8002e4a:	f043 0302 	orr.w	r3, r3, #2
 8002e4e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e58:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002e60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d01c      	beq.n	8002ea2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f7ff fe3b 	bl	8002ae4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6859      	ldr	r1, [r3, #4]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	4b0d      	ldr	r3, [pc, #52]	@ (8002eb0 <I2C_IsErrorOccurred+0x1bc>)
 8002e7a:	400b      	ands	r3, r1
 8002e7c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e82:	6a3b      	ldr	r3, [r7, #32]
 8002e84:	431a      	orrs	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002ea2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3728      	adds	r7, #40	@ 0x28
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	fe00e800 	.word	0xfe00e800

08002eb4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b087      	sub	sp, #28
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	607b      	str	r3, [r7, #4]
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	817b      	strh	r3, [r7, #10]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ec6:	897b      	ldrh	r3, [r7, #10]
 8002ec8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ecc:	7a7b      	ldrb	r3, [r7, #9]
 8002ece:	041b      	lsls	r3, r3, #16
 8002ed0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ed4:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002eda:	6a3b      	ldr	r3, [r7, #32]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ee2:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	6a3b      	ldr	r3, [r7, #32]
 8002eec:	0d5b      	lsrs	r3, r3, #21
 8002eee:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002ef2:	4b08      	ldr	r3, [pc, #32]	@ (8002f14 <I2C_TransferConfig+0x60>)
 8002ef4:	430b      	orrs	r3, r1
 8002ef6:	43db      	mvns	r3, r3
 8002ef8:	ea02 0103 	and.w	r1, r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002f06:	bf00      	nop
 8002f08:	371c      	adds	r7, #28
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	03ff63ff 	.word	0x03ff63ff

08002f18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b20      	cmp	r3, #32
 8002f2c:	d138      	bne.n	8002fa0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d101      	bne.n	8002f3c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f38:	2302      	movs	r3, #2
 8002f3a:	e032      	b.n	8002fa2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2224      	movs	r2, #36	@ 0x24
 8002f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 0201 	bic.w	r2, r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002f6a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6819      	ldr	r1, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0201 	orr.w	r2, r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2220      	movs	r2, #32
 8002f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	e000      	b.n	8002fa2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002fa0:	2302      	movs	r3, #2
  }
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr

08002fae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b085      	sub	sp, #20
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
 8002fb6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b20      	cmp	r3, #32
 8002fc2:	d139      	bne.n	8003038 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d101      	bne.n	8002fd2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	e033      	b.n	800303a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2224      	movs	r2, #36	@ 0x24
 8002fde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 0201 	bic.w	r2, r2, #1
 8002ff0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003000:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	021b      	lsls	r3, r3, #8
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	4313      	orrs	r3, r2
 800300a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f042 0201 	orr.w	r2, r2, #1
 8003022:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2220      	movs	r2, #32
 8003028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003034:	2300      	movs	r3, #0
 8003036:	e000      	b.n	800303a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003038:	2302      	movs	r3, #2
  }
}
 800303a:	4618      	mov	r0, r3
 800303c:	3714      	adds	r7, #20
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
	...

08003048 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800304e:	2300      	movs	r3, #0
 8003050:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003052:	4b23      	ldr	r3, [pc, #140]	@ (80030e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003056:	4a22      	ldr	r2, [pc, #136]	@ (80030e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003058:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800305c:	6413      	str	r3, [r2, #64]	@ 0x40
 800305e:	4b20      	ldr	r3, [pc, #128]	@ (80030e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003062:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003066:	603b      	str	r3, [r7, #0]
 8003068:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800306a:	4b1e      	ldr	r3, [pc, #120]	@ (80030e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a1d      	ldr	r2, [pc, #116]	@ (80030e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003070:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003074:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003076:	f7fe fdc7 	bl	8001c08 <HAL_GetTick>
 800307a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800307c:	e009      	b.n	8003092 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800307e:	f7fe fdc3 	bl	8001c08 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800308c:	d901      	bls.n	8003092 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e022      	b.n	80030d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003092:	4b14      	ldr	r3, [pc, #80]	@ (80030e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800309a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800309e:	d1ee      	bne.n	800307e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80030a0:	4b10      	ldr	r3, [pc, #64]	@ (80030e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a0f      	ldr	r2, [pc, #60]	@ (80030e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030aa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030ac:	f7fe fdac 	bl	8001c08 <HAL_GetTick>
 80030b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80030b2:	e009      	b.n	80030c8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030b4:	f7fe fda8 	bl	8001c08 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80030c2:	d901      	bls.n	80030c8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e007      	b.n	80030d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80030c8:	4b06      	ldr	r3, [pc, #24]	@ (80030e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80030d4:	d1ee      	bne.n	80030b4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40023800 	.word	0x40023800
 80030e4:	40007000 	.word	0x40007000

080030e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80030f0:	2300      	movs	r3, #0
 80030f2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e291      	b.n	8003622 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 8087 	beq.w	800321a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800310c:	4b96      	ldr	r3, [pc, #600]	@ (8003368 <HAL_RCC_OscConfig+0x280>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 030c 	and.w	r3, r3, #12
 8003114:	2b04      	cmp	r3, #4
 8003116:	d00c      	beq.n	8003132 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003118:	4b93      	ldr	r3, [pc, #588]	@ (8003368 <HAL_RCC_OscConfig+0x280>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f003 030c 	and.w	r3, r3, #12
 8003120:	2b08      	cmp	r3, #8
 8003122:	d112      	bne.n	800314a <HAL_RCC_OscConfig+0x62>
 8003124:	4b90      	ldr	r3, [pc, #576]	@ (8003368 <HAL_RCC_OscConfig+0x280>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800312c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003130:	d10b      	bne.n	800314a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003132:	4b8d      	ldr	r3, [pc, #564]	@ (8003368 <HAL_RCC_OscConfig+0x280>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d06c      	beq.n	8003218 <HAL_RCC_OscConfig+0x130>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d168      	bne.n	8003218 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e26b      	b.n	8003622 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003152:	d106      	bne.n	8003162 <HAL_RCC_OscConfig+0x7a>
 8003154:	4b84      	ldr	r3, [pc, #528]	@ (8003368 <HAL_RCC_OscConfig+0x280>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a83      	ldr	r2, [pc, #524]	@ (8003368 <HAL_RCC_OscConfig+0x280>)
 800315a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800315e:	6013      	str	r3, [r2, #0]
 8003160:	e02e      	b.n	80031c0 <HAL_RCC_OscConfig+0xd8>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10c      	bne.n	8003184 <HAL_RCC_OscConfig+0x9c>
 800316a:	4b7f      	ldr	r3, [pc, #508]	@ (8003368 <HAL_RCC_OscConfig+0x280>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a7e      	ldr	r2, [pc, #504]	@ (8003368 <HAL_RCC_OscConfig+0x280>)
 8003170:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003174:	6013      	str	r3, [r2, #0]
 8003176:	4b7c      	ldr	r3, [pc, #496]	@ (8003368 <HAL_RCC_OscConfig+0x280>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a7b      	ldr	r2, [pc, #492]	@ (8003368 <HAL_RCC_OscConfig+0x280>)
 800317c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003180:	6013      	str	r3, [r2, #0]
 8003182:	e01d      	b.n	80031c0 <HAL_RCC_OscConfig+0xd8>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800318c:	d10c      	bne.n	80031a8 <HAL_RCC_OscConfig+0xc0>
 800318e:	4b76      	ldr	r3, [pc, #472]	@ (8003368 <HAL_RCC_OscConfig+0x280>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a75      	ldr	r2, [pc, #468]	@ (8003368 <HAL_RCC_OscConfig+0x280>)
 8003194:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003198:	6013      	str	r3, [r2, #0]
 800319a:	4b73      	ldr	r3, [pc, #460]	@ (8003368 <HAL_RCC_OscConfig+0x280>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a72      	ldr	r2, [pc, #456]	@ (8003368 <HAL_RCC_OscConfig+0x280>)
 80031a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031a4:	6013      	str	r3, [r2, #0]
 80031a6:	e00b      	b.n	80031c0 <HAL_RCC_OscConfig+0xd8>
 80031a8:	4b6f      	ldr	r3, [pc, #444]	@ (8003368 <HAL_RCC_OscConfig+0x280>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a6e      	ldr	r2, [pc, #440]	@ (8003368 <HAL_RCC_OscConfig+0x280>)
 80031ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031b2:	6013      	str	r3, [r2, #0]
 80031b4:	4b6c      	ldr	r3, [pc, #432]	@ (8003368 <HAL_RCC_OscConfig+0x280>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a6b      	ldr	r2, [pc, #428]	@ (8003368 <HAL_RCC_OscConfig+0x280>)
 80031ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d013      	beq.n	80031f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c8:	f7fe fd1e 	bl	8001c08 <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031d0:	f7fe fd1a 	bl	8001c08 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b64      	cmp	r3, #100	@ 0x64
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e21f      	b.n	8003622 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031e2:	4b61      	ldr	r3, [pc, #388]	@ (8003368 <HAL_RCC_OscConfig+0x280>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d0f0      	beq.n	80031d0 <HAL_RCC_OscConfig+0xe8>
 80031ee:	e014      	b.n	800321a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f0:	f7fe fd0a 	bl	8001c08 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031f8:	f7fe fd06 	bl	8001c08 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b64      	cmp	r3, #100	@ 0x64
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e20b      	b.n	8003622 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800320a:	4b57      	ldr	r3, [pc, #348]	@ (8003368 <HAL_RCC_OscConfig+0x280>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1f0      	bne.n	80031f8 <HAL_RCC_OscConfig+0x110>
 8003216:	e000      	b.n	800321a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003218:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d069      	beq.n	80032fa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003226:	4b50      	ldr	r3, [pc, #320]	@ (8003368 <HAL_RCC_OscConfig+0x280>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 030c 	and.w	r3, r3, #12
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00b      	beq.n	800324a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003232:	4b4d      	ldr	r3, [pc, #308]	@ (8003368 <HAL_RCC_OscConfig+0x280>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 030c 	and.w	r3, r3, #12
 800323a:	2b08      	cmp	r3, #8
 800323c:	d11c      	bne.n	8003278 <HAL_RCC_OscConfig+0x190>
 800323e:	4b4a      	ldr	r3, [pc, #296]	@ (8003368 <HAL_RCC_OscConfig+0x280>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d116      	bne.n	8003278 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800324a:	4b47      	ldr	r3, [pc, #284]	@ (8003368 <HAL_RCC_OscConfig+0x280>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d005      	beq.n	8003262 <HAL_RCC_OscConfig+0x17a>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d001      	beq.n	8003262 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e1df      	b.n	8003622 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003262:	4b41      	ldr	r3, [pc, #260]	@ (8003368 <HAL_RCC_OscConfig+0x280>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	493d      	ldr	r1, [pc, #244]	@ (8003368 <HAL_RCC_OscConfig+0x280>)
 8003272:	4313      	orrs	r3, r2
 8003274:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003276:	e040      	b.n	80032fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d023      	beq.n	80032c8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003280:	4b39      	ldr	r3, [pc, #228]	@ (8003368 <HAL_RCC_OscConfig+0x280>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a38      	ldr	r2, [pc, #224]	@ (8003368 <HAL_RCC_OscConfig+0x280>)
 8003286:	f043 0301 	orr.w	r3, r3, #1
 800328a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328c:	f7fe fcbc 	bl	8001c08 <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003292:	e008      	b.n	80032a6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003294:	f7fe fcb8 	bl	8001c08 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e1bd      	b.n	8003622 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a6:	4b30      	ldr	r3, [pc, #192]	@ (8003368 <HAL_RCC_OscConfig+0x280>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d0f0      	beq.n	8003294 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b2:	4b2d      	ldr	r3, [pc, #180]	@ (8003368 <HAL_RCC_OscConfig+0x280>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	4929      	ldr	r1, [pc, #164]	@ (8003368 <HAL_RCC_OscConfig+0x280>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	600b      	str	r3, [r1, #0]
 80032c6:	e018      	b.n	80032fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032c8:	4b27      	ldr	r3, [pc, #156]	@ (8003368 <HAL_RCC_OscConfig+0x280>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a26      	ldr	r2, [pc, #152]	@ (8003368 <HAL_RCC_OscConfig+0x280>)
 80032ce:	f023 0301 	bic.w	r3, r3, #1
 80032d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d4:	f7fe fc98 	bl	8001c08 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032dc:	f7fe fc94 	bl	8001c08 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e199      	b.n	8003622 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003368 <HAL_RCC_OscConfig+0x280>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1f0      	bne.n	80032dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0308 	and.w	r3, r3, #8
 8003302:	2b00      	cmp	r3, #0
 8003304:	d038      	beq.n	8003378 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d019      	beq.n	8003342 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800330e:	4b16      	ldr	r3, [pc, #88]	@ (8003368 <HAL_RCC_OscConfig+0x280>)
 8003310:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003312:	4a15      	ldr	r2, [pc, #84]	@ (8003368 <HAL_RCC_OscConfig+0x280>)
 8003314:	f043 0301 	orr.w	r3, r3, #1
 8003318:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800331a:	f7fe fc75 	bl	8001c08 <HAL_GetTick>
 800331e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003320:	e008      	b.n	8003334 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003322:	f7fe fc71 	bl	8001c08 <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	2b02      	cmp	r3, #2
 800332e:	d901      	bls.n	8003334 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e176      	b.n	8003622 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003334:	4b0c      	ldr	r3, [pc, #48]	@ (8003368 <HAL_RCC_OscConfig+0x280>)
 8003336:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d0f0      	beq.n	8003322 <HAL_RCC_OscConfig+0x23a>
 8003340:	e01a      	b.n	8003378 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003342:	4b09      	ldr	r3, [pc, #36]	@ (8003368 <HAL_RCC_OscConfig+0x280>)
 8003344:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003346:	4a08      	ldr	r2, [pc, #32]	@ (8003368 <HAL_RCC_OscConfig+0x280>)
 8003348:	f023 0301 	bic.w	r3, r3, #1
 800334c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800334e:	f7fe fc5b 	bl	8001c08 <HAL_GetTick>
 8003352:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003354:	e00a      	b.n	800336c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003356:	f7fe fc57 	bl	8001c08 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d903      	bls.n	800336c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e15c      	b.n	8003622 <HAL_RCC_OscConfig+0x53a>
 8003368:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800336c:	4b91      	ldr	r3, [pc, #580]	@ (80035b4 <HAL_RCC_OscConfig+0x4cc>)
 800336e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d1ee      	bne.n	8003356 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0304 	and.w	r3, r3, #4
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 80a4 	beq.w	80034ce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003386:	4b8b      	ldr	r3, [pc, #556]	@ (80035b4 <HAL_RCC_OscConfig+0x4cc>)
 8003388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10d      	bne.n	80033ae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003392:	4b88      	ldr	r3, [pc, #544]	@ (80035b4 <HAL_RCC_OscConfig+0x4cc>)
 8003394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003396:	4a87      	ldr	r2, [pc, #540]	@ (80035b4 <HAL_RCC_OscConfig+0x4cc>)
 8003398:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800339c:	6413      	str	r3, [r2, #64]	@ 0x40
 800339e:	4b85      	ldr	r3, [pc, #532]	@ (80035b4 <HAL_RCC_OscConfig+0x4cc>)
 80033a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033a6:	60bb      	str	r3, [r7, #8]
 80033a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033aa:	2301      	movs	r3, #1
 80033ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033ae:	4b82      	ldr	r3, [pc, #520]	@ (80035b8 <HAL_RCC_OscConfig+0x4d0>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d118      	bne.n	80033ec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80033ba:	4b7f      	ldr	r3, [pc, #508]	@ (80035b8 <HAL_RCC_OscConfig+0x4d0>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a7e      	ldr	r2, [pc, #504]	@ (80035b8 <HAL_RCC_OscConfig+0x4d0>)
 80033c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033c6:	f7fe fc1f 	bl	8001c08 <HAL_GetTick>
 80033ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033cc:	e008      	b.n	80033e0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ce:	f7fe fc1b 	bl	8001c08 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b64      	cmp	r3, #100	@ 0x64
 80033da:	d901      	bls.n	80033e0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e120      	b.n	8003622 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033e0:	4b75      	ldr	r3, [pc, #468]	@ (80035b8 <HAL_RCC_OscConfig+0x4d0>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d0f0      	beq.n	80033ce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d106      	bne.n	8003402 <HAL_RCC_OscConfig+0x31a>
 80033f4:	4b6f      	ldr	r3, [pc, #444]	@ (80035b4 <HAL_RCC_OscConfig+0x4cc>)
 80033f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033f8:	4a6e      	ldr	r2, [pc, #440]	@ (80035b4 <HAL_RCC_OscConfig+0x4cc>)
 80033fa:	f043 0301 	orr.w	r3, r3, #1
 80033fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003400:	e02d      	b.n	800345e <HAL_RCC_OscConfig+0x376>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10c      	bne.n	8003424 <HAL_RCC_OscConfig+0x33c>
 800340a:	4b6a      	ldr	r3, [pc, #424]	@ (80035b4 <HAL_RCC_OscConfig+0x4cc>)
 800340c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800340e:	4a69      	ldr	r2, [pc, #420]	@ (80035b4 <HAL_RCC_OscConfig+0x4cc>)
 8003410:	f023 0301 	bic.w	r3, r3, #1
 8003414:	6713      	str	r3, [r2, #112]	@ 0x70
 8003416:	4b67      	ldr	r3, [pc, #412]	@ (80035b4 <HAL_RCC_OscConfig+0x4cc>)
 8003418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800341a:	4a66      	ldr	r2, [pc, #408]	@ (80035b4 <HAL_RCC_OscConfig+0x4cc>)
 800341c:	f023 0304 	bic.w	r3, r3, #4
 8003420:	6713      	str	r3, [r2, #112]	@ 0x70
 8003422:	e01c      	b.n	800345e <HAL_RCC_OscConfig+0x376>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	2b05      	cmp	r3, #5
 800342a:	d10c      	bne.n	8003446 <HAL_RCC_OscConfig+0x35e>
 800342c:	4b61      	ldr	r3, [pc, #388]	@ (80035b4 <HAL_RCC_OscConfig+0x4cc>)
 800342e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003430:	4a60      	ldr	r2, [pc, #384]	@ (80035b4 <HAL_RCC_OscConfig+0x4cc>)
 8003432:	f043 0304 	orr.w	r3, r3, #4
 8003436:	6713      	str	r3, [r2, #112]	@ 0x70
 8003438:	4b5e      	ldr	r3, [pc, #376]	@ (80035b4 <HAL_RCC_OscConfig+0x4cc>)
 800343a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800343c:	4a5d      	ldr	r2, [pc, #372]	@ (80035b4 <HAL_RCC_OscConfig+0x4cc>)
 800343e:	f043 0301 	orr.w	r3, r3, #1
 8003442:	6713      	str	r3, [r2, #112]	@ 0x70
 8003444:	e00b      	b.n	800345e <HAL_RCC_OscConfig+0x376>
 8003446:	4b5b      	ldr	r3, [pc, #364]	@ (80035b4 <HAL_RCC_OscConfig+0x4cc>)
 8003448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800344a:	4a5a      	ldr	r2, [pc, #360]	@ (80035b4 <HAL_RCC_OscConfig+0x4cc>)
 800344c:	f023 0301 	bic.w	r3, r3, #1
 8003450:	6713      	str	r3, [r2, #112]	@ 0x70
 8003452:	4b58      	ldr	r3, [pc, #352]	@ (80035b4 <HAL_RCC_OscConfig+0x4cc>)
 8003454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003456:	4a57      	ldr	r2, [pc, #348]	@ (80035b4 <HAL_RCC_OscConfig+0x4cc>)
 8003458:	f023 0304 	bic.w	r3, r3, #4
 800345c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d015      	beq.n	8003492 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003466:	f7fe fbcf 	bl	8001c08 <HAL_GetTick>
 800346a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800346c:	e00a      	b.n	8003484 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800346e:	f7fe fbcb 	bl	8001c08 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	f241 3288 	movw	r2, #5000	@ 0x1388
 800347c:	4293      	cmp	r3, r2
 800347e:	d901      	bls.n	8003484 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e0ce      	b.n	8003622 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003484:	4b4b      	ldr	r3, [pc, #300]	@ (80035b4 <HAL_RCC_OscConfig+0x4cc>)
 8003486:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0ee      	beq.n	800346e <HAL_RCC_OscConfig+0x386>
 8003490:	e014      	b.n	80034bc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003492:	f7fe fbb9 	bl	8001c08 <HAL_GetTick>
 8003496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003498:	e00a      	b.n	80034b0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800349a:	f7fe fbb5 	bl	8001c08 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e0b8      	b.n	8003622 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034b0:	4b40      	ldr	r3, [pc, #256]	@ (80035b4 <HAL_RCC_OscConfig+0x4cc>)
 80034b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1ee      	bne.n	800349a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034bc:	7dfb      	ldrb	r3, [r7, #23]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d105      	bne.n	80034ce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c2:	4b3c      	ldr	r3, [pc, #240]	@ (80035b4 <HAL_RCC_OscConfig+0x4cc>)
 80034c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c6:	4a3b      	ldr	r2, [pc, #236]	@ (80035b4 <HAL_RCC_OscConfig+0x4cc>)
 80034c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034cc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f000 80a4 	beq.w	8003620 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034d8:	4b36      	ldr	r3, [pc, #216]	@ (80035b4 <HAL_RCC_OscConfig+0x4cc>)
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f003 030c 	and.w	r3, r3, #12
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	d06b      	beq.n	80035bc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d149      	bne.n	8003580 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ec:	4b31      	ldr	r3, [pc, #196]	@ (80035b4 <HAL_RCC_OscConfig+0x4cc>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a30      	ldr	r2, [pc, #192]	@ (80035b4 <HAL_RCC_OscConfig+0x4cc>)
 80034f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f8:	f7fe fb86 	bl	8001c08 <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003500:	f7fe fb82 	bl	8001c08 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e087      	b.n	8003622 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003512:	4b28      	ldr	r3, [pc, #160]	@ (80035b4 <HAL_RCC_OscConfig+0x4cc>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1f0      	bne.n	8003500 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	69da      	ldr	r2, [r3, #28]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	431a      	orrs	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352c:	019b      	lsls	r3, r3, #6
 800352e:	431a      	orrs	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003534:	085b      	lsrs	r3, r3, #1
 8003536:	3b01      	subs	r3, #1
 8003538:	041b      	lsls	r3, r3, #16
 800353a:	431a      	orrs	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003540:	061b      	lsls	r3, r3, #24
 8003542:	4313      	orrs	r3, r2
 8003544:	4a1b      	ldr	r2, [pc, #108]	@ (80035b4 <HAL_RCC_OscConfig+0x4cc>)
 8003546:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800354a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800354c:	4b19      	ldr	r3, [pc, #100]	@ (80035b4 <HAL_RCC_OscConfig+0x4cc>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a18      	ldr	r2, [pc, #96]	@ (80035b4 <HAL_RCC_OscConfig+0x4cc>)
 8003552:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003556:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003558:	f7fe fb56 	bl	8001c08 <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003560:	f7fe fb52 	bl	8001c08 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e057      	b.n	8003622 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003572:	4b10      	ldr	r3, [pc, #64]	@ (80035b4 <HAL_RCC_OscConfig+0x4cc>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d0f0      	beq.n	8003560 <HAL_RCC_OscConfig+0x478>
 800357e:	e04f      	b.n	8003620 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003580:	4b0c      	ldr	r3, [pc, #48]	@ (80035b4 <HAL_RCC_OscConfig+0x4cc>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a0b      	ldr	r2, [pc, #44]	@ (80035b4 <HAL_RCC_OscConfig+0x4cc>)
 8003586:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800358a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358c:	f7fe fb3c 	bl	8001c08 <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003594:	f7fe fb38 	bl	8001c08 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e03d      	b.n	8003622 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035a6:	4b03      	ldr	r3, [pc, #12]	@ (80035b4 <HAL_RCC_OscConfig+0x4cc>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1f0      	bne.n	8003594 <HAL_RCC_OscConfig+0x4ac>
 80035b2:	e035      	b.n	8003620 <HAL_RCC_OscConfig+0x538>
 80035b4:	40023800 	.word	0x40023800
 80035b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80035bc:	4b1b      	ldr	r3, [pc, #108]	@ (800362c <HAL_RCC_OscConfig+0x544>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d028      	beq.n	800361c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d121      	bne.n	800361c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d11a      	bne.n	800361c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80035ec:	4013      	ands	r3, r2
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80035f2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d111      	bne.n	800361c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003602:	085b      	lsrs	r3, r3, #1
 8003604:	3b01      	subs	r3, #1
 8003606:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003608:	429a      	cmp	r2, r3
 800360a:	d107      	bne.n	800361c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003616:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003618:	429a      	cmp	r2, r3
 800361a:	d001      	beq.n	8003620 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e000      	b.n	8003622 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3718      	adds	r7, #24
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40023800 	.word	0x40023800

08003630 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800363a:	2300      	movs	r3, #0
 800363c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e0d0      	b.n	80037ea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003648:	4b6a      	ldr	r3, [pc, #424]	@ (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 030f 	and.w	r3, r3, #15
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	429a      	cmp	r2, r3
 8003654:	d910      	bls.n	8003678 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003656:	4b67      	ldr	r3, [pc, #412]	@ (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f023 020f 	bic.w	r2, r3, #15
 800365e:	4965      	ldr	r1, [pc, #404]	@ (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	4313      	orrs	r3, r2
 8003664:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003666:	4b63      	ldr	r3, [pc, #396]	@ (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 030f 	and.w	r3, r3, #15
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	429a      	cmp	r2, r3
 8003672:	d001      	beq.n	8003678 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e0b8      	b.n	80037ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d020      	beq.n	80036c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	2b00      	cmp	r3, #0
 800368e:	d005      	beq.n	800369c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003690:	4b59      	ldr	r3, [pc, #356]	@ (80037f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	4a58      	ldr	r2, [pc, #352]	@ (80037f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003696:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800369a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0308 	and.w	r3, r3, #8
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d005      	beq.n	80036b4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036a8:	4b53      	ldr	r3, [pc, #332]	@ (80037f8 <HAL_RCC_ClockConfig+0x1c8>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	4a52      	ldr	r2, [pc, #328]	@ (80037f8 <HAL_RCC_ClockConfig+0x1c8>)
 80036ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80036b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036b4:	4b50      	ldr	r3, [pc, #320]	@ (80037f8 <HAL_RCC_ClockConfig+0x1c8>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	494d      	ldr	r1, [pc, #308]	@ (80037f8 <HAL_RCC_ClockConfig+0x1c8>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d040      	beq.n	8003754 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d107      	bne.n	80036ea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036da:	4b47      	ldr	r3, [pc, #284]	@ (80037f8 <HAL_RCC_ClockConfig+0x1c8>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d115      	bne.n	8003712 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e07f      	b.n	80037ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d107      	bne.n	8003702 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f2:	4b41      	ldr	r3, [pc, #260]	@ (80037f8 <HAL_RCC_ClockConfig+0x1c8>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d109      	bne.n	8003712 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e073      	b.n	80037ea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003702:	4b3d      	ldr	r3, [pc, #244]	@ (80037f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e06b      	b.n	80037ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003712:	4b39      	ldr	r3, [pc, #228]	@ (80037f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f023 0203 	bic.w	r2, r3, #3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	4936      	ldr	r1, [pc, #216]	@ (80037f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003720:	4313      	orrs	r3, r2
 8003722:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003724:	f7fe fa70 	bl	8001c08 <HAL_GetTick>
 8003728:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800372a:	e00a      	b.n	8003742 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800372c:	f7fe fa6c 	bl	8001c08 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	f241 3288 	movw	r2, #5000	@ 0x1388
 800373a:	4293      	cmp	r3, r2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e053      	b.n	80037ea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003742:	4b2d      	ldr	r3, [pc, #180]	@ (80037f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 020c 	and.w	r2, r3, #12
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	429a      	cmp	r2, r3
 8003752:	d1eb      	bne.n	800372c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003754:	4b27      	ldr	r3, [pc, #156]	@ (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 030f 	and.w	r3, r3, #15
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	429a      	cmp	r2, r3
 8003760:	d210      	bcs.n	8003784 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003762:	4b24      	ldr	r3, [pc, #144]	@ (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f023 020f 	bic.w	r2, r3, #15
 800376a:	4922      	ldr	r1, [pc, #136]	@ (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	4313      	orrs	r3, r2
 8003770:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003772:	4b20      	ldr	r3, [pc, #128]	@ (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 030f 	and.w	r3, r3, #15
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	429a      	cmp	r2, r3
 800377e:	d001      	beq.n	8003784 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e032      	b.n	80037ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	2b00      	cmp	r3, #0
 800378e:	d008      	beq.n	80037a2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003790:	4b19      	ldr	r3, [pc, #100]	@ (80037f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	4916      	ldr	r1, [pc, #88]	@ (80037f8 <HAL_RCC_ClockConfig+0x1c8>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0308 	and.w	r3, r3, #8
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d009      	beq.n	80037c2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037ae:	4b12      	ldr	r3, [pc, #72]	@ (80037f8 <HAL_RCC_ClockConfig+0x1c8>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	490e      	ldr	r1, [pc, #56]	@ (80037f8 <HAL_RCC_ClockConfig+0x1c8>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037c2:	f000 f821 	bl	8003808 <HAL_RCC_GetSysClockFreq>
 80037c6:	4602      	mov	r2, r0
 80037c8:	4b0b      	ldr	r3, [pc, #44]	@ (80037f8 <HAL_RCC_ClockConfig+0x1c8>)
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	091b      	lsrs	r3, r3, #4
 80037ce:	f003 030f 	and.w	r3, r3, #15
 80037d2:	490a      	ldr	r1, [pc, #40]	@ (80037fc <HAL_RCC_ClockConfig+0x1cc>)
 80037d4:	5ccb      	ldrb	r3, [r1, r3]
 80037d6:	fa22 f303 	lsr.w	r3, r2, r3
 80037da:	4a09      	ldr	r2, [pc, #36]	@ (8003800 <HAL_RCC_ClockConfig+0x1d0>)
 80037dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037de:	4b09      	ldr	r3, [pc, #36]	@ (8003804 <HAL_RCC_ClockConfig+0x1d4>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7fe f9cc 	bl	8001b80 <HAL_InitTick>

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40023c00 	.word	0x40023c00
 80037f8:	40023800 	.word	0x40023800
 80037fc:	08005ae4 	.word	0x08005ae4
 8003800:	20000000 	.word	0x20000000
 8003804:	20000004 	.word	0x20000004

08003808 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800380c:	b090      	sub	sp, #64	@ 0x40
 800380e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003810:	2300      	movs	r3, #0
 8003812:	637b      	str	r3, [r7, #52]	@ 0x34
 8003814:	2300      	movs	r3, #0
 8003816:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003818:	2300      	movs	r3, #0
 800381a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800381c:	2300      	movs	r3, #0
 800381e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003820:	4b59      	ldr	r3, [pc, #356]	@ (8003988 <HAL_RCC_GetSysClockFreq+0x180>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f003 030c 	and.w	r3, r3, #12
 8003828:	2b08      	cmp	r3, #8
 800382a:	d00d      	beq.n	8003848 <HAL_RCC_GetSysClockFreq+0x40>
 800382c:	2b08      	cmp	r3, #8
 800382e:	f200 80a1 	bhi.w	8003974 <HAL_RCC_GetSysClockFreq+0x16c>
 8003832:	2b00      	cmp	r3, #0
 8003834:	d002      	beq.n	800383c <HAL_RCC_GetSysClockFreq+0x34>
 8003836:	2b04      	cmp	r3, #4
 8003838:	d003      	beq.n	8003842 <HAL_RCC_GetSysClockFreq+0x3a>
 800383a:	e09b      	b.n	8003974 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800383c:	4b53      	ldr	r3, [pc, #332]	@ (800398c <HAL_RCC_GetSysClockFreq+0x184>)
 800383e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003840:	e09b      	b.n	800397a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003842:	4b53      	ldr	r3, [pc, #332]	@ (8003990 <HAL_RCC_GetSysClockFreq+0x188>)
 8003844:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003846:	e098      	b.n	800397a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003848:	4b4f      	ldr	r3, [pc, #316]	@ (8003988 <HAL_RCC_GetSysClockFreq+0x180>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003850:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003852:	4b4d      	ldr	r3, [pc, #308]	@ (8003988 <HAL_RCC_GetSysClockFreq+0x180>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d028      	beq.n	80038b0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800385e:	4b4a      	ldr	r3, [pc, #296]	@ (8003988 <HAL_RCC_GetSysClockFreq+0x180>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	099b      	lsrs	r3, r3, #6
 8003864:	2200      	movs	r2, #0
 8003866:	623b      	str	r3, [r7, #32]
 8003868:	627a      	str	r2, [r7, #36]	@ 0x24
 800386a:	6a3b      	ldr	r3, [r7, #32]
 800386c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003870:	2100      	movs	r1, #0
 8003872:	4b47      	ldr	r3, [pc, #284]	@ (8003990 <HAL_RCC_GetSysClockFreq+0x188>)
 8003874:	fb03 f201 	mul.w	r2, r3, r1
 8003878:	2300      	movs	r3, #0
 800387a:	fb00 f303 	mul.w	r3, r0, r3
 800387e:	4413      	add	r3, r2
 8003880:	4a43      	ldr	r2, [pc, #268]	@ (8003990 <HAL_RCC_GetSysClockFreq+0x188>)
 8003882:	fba0 1202 	umull	r1, r2, r0, r2
 8003886:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003888:	460a      	mov	r2, r1
 800388a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800388c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800388e:	4413      	add	r3, r2
 8003890:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003892:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003894:	2200      	movs	r2, #0
 8003896:	61bb      	str	r3, [r7, #24]
 8003898:	61fa      	str	r2, [r7, #28]
 800389a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800389e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80038a2:	f7fd f843 	bl	800092c <__aeabi_uldivmod>
 80038a6:	4602      	mov	r2, r0
 80038a8:	460b      	mov	r3, r1
 80038aa:	4613      	mov	r3, r2
 80038ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038ae:	e053      	b.n	8003958 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038b0:	4b35      	ldr	r3, [pc, #212]	@ (8003988 <HAL_RCC_GetSysClockFreq+0x180>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	099b      	lsrs	r3, r3, #6
 80038b6:	2200      	movs	r2, #0
 80038b8:	613b      	str	r3, [r7, #16]
 80038ba:	617a      	str	r2, [r7, #20]
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80038c2:	f04f 0b00 	mov.w	fp, #0
 80038c6:	4652      	mov	r2, sl
 80038c8:	465b      	mov	r3, fp
 80038ca:	f04f 0000 	mov.w	r0, #0
 80038ce:	f04f 0100 	mov.w	r1, #0
 80038d2:	0159      	lsls	r1, r3, #5
 80038d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038d8:	0150      	lsls	r0, r2, #5
 80038da:	4602      	mov	r2, r0
 80038dc:	460b      	mov	r3, r1
 80038de:	ebb2 080a 	subs.w	r8, r2, sl
 80038e2:	eb63 090b 	sbc.w	r9, r3, fp
 80038e6:	f04f 0200 	mov.w	r2, #0
 80038ea:	f04f 0300 	mov.w	r3, #0
 80038ee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80038f2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80038f6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80038fa:	ebb2 0408 	subs.w	r4, r2, r8
 80038fe:	eb63 0509 	sbc.w	r5, r3, r9
 8003902:	f04f 0200 	mov.w	r2, #0
 8003906:	f04f 0300 	mov.w	r3, #0
 800390a:	00eb      	lsls	r3, r5, #3
 800390c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003910:	00e2      	lsls	r2, r4, #3
 8003912:	4614      	mov	r4, r2
 8003914:	461d      	mov	r5, r3
 8003916:	eb14 030a 	adds.w	r3, r4, sl
 800391a:	603b      	str	r3, [r7, #0]
 800391c:	eb45 030b 	adc.w	r3, r5, fp
 8003920:	607b      	str	r3, [r7, #4]
 8003922:	f04f 0200 	mov.w	r2, #0
 8003926:	f04f 0300 	mov.w	r3, #0
 800392a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800392e:	4629      	mov	r1, r5
 8003930:	028b      	lsls	r3, r1, #10
 8003932:	4621      	mov	r1, r4
 8003934:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003938:	4621      	mov	r1, r4
 800393a:	028a      	lsls	r2, r1, #10
 800393c:	4610      	mov	r0, r2
 800393e:	4619      	mov	r1, r3
 8003940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003942:	2200      	movs	r2, #0
 8003944:	60bb      	str	r3, [r7, #8]
 8003946:	60fa      	str	r2, [r7, #12]
 8003948:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800394c:	f7fc ffee 	bl	800092c <__aeabi_uldivmod>
 8003950:	4602      	mov	r2, r0
 8003952:	460b      	mov	r3, r1
 8003954:	4613      	mov	r3, r2
 8003956:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003958:	4b0b      	ldr	r3, [pc, #44]	@ (8003988 <HAL_RCC_GetSysClockFreq+0x180>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	0c1b      	lsrs	r3, r3, #16
 800395e:	f003 0303 	and.w	r3, r3, #3
 8003962:	3301      	adds	r3, #1
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003968:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800396a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800396c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003970:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003972:	e002      	b.n	800397a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003974:	4b05      	ldr	r3, [pc, #20]	@ (800398c <HAL_RCC_GetSysClockFreq+0x184>)
 8003976:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003978:	bf00      	nop
    }
  }
  return sysclockfreq;
 800397a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800397c:	4618      	mov	r0, r3
 800397e:	3740      	adds	r7, #64	@ 0x40
 8003980:	46bd      	mov	sp, r7
 8003982:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003986:	bf00      	nop
 8003988:	40023800 	.word	0x40023800
 800398c:	00f42400 	.word	0x00f42400
 8003990:	017d7840 	.word	0x017d7840

08003994 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003998:	4b03      	ldr	r3, [pc, #12]	@ (80039a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800399a:	681b      	ldr	r3, [r3, #0]
}
 800399c:	4618      	mov	r0, r3
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	20000000 	.word	0x20000000

080039ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039b0:	f7ff fff0 	bl	8003994 <HAL_RCC_GetHCLKFreq>
 80039b4:	4602      	mov	r2, r0
 80039b6:	4b05      	ldr	r3, [pc, #20]	@ (80039cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	0a9b      	lsrs	r3, r3, #10
 80039bc:	f003 0307 	and.w	r3, r3, #7
 80039c0:	4903      	ldr	r1, [pc, #12]	@ (80039d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039c2:	5ccb      	ldrb	r3, [r1, r3]
 80039c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	40023800 	.word	0x40023800
 80039d0:	08005af4 	.word	0x08005af4

080039d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039d8:	f7ff ffdc 	bl	8003994 <HAL_RCC_GetHCLKFreq>
 80039dc:	4602      	mov	r2, r0
 80039de:	4b05      	ldr	r3, [pc, #20]	@ (80039f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	0b5b      	lsrs	r3, r3, #13
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	4903      	ldr	r1, [pc, #12]	@ (80039f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039ea:	5ccb      	ldrb	r3, [r1, r3]
 80039ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	40023800 	.word	0x40023800
 80039f8:	08005af4 	.word	0x08005af4

080039fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b088      	sub	sp, #32
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003a04:	2300      	movs	r3, #0
 8003a06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003a10:	2300      	movs	r3, #0
 8003a12:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003a14:	2300      	movs	r3, #0
 8003a16:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d012      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a24:	4b69      	ldr	r3, [pc, #420]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	4a68      	ldr	r2, [pc, #416]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a2a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003a2e:	6093      	str	r3, [r2, #8]
 8003a30:	4b66      	ldr	r3, [pc, #408]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a32:	689a      	ldr	r2, [r3, #8]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a38:	4964      	ldr	r1, [pc, #400]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003a46:	2301      	movs	r3, #1
 8003a48:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d017      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a56:	4b5d      	ldr	r3, [pc, #372]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a5c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a64:	4959      	ldr	r1, [pc, #356]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a74:	d101      	bne.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003a76:	2301      	movs	r3, #1
 8003a78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003a82:	2301      	movs	r3, #1
 8003a84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d017      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a92:	4b4e      	ldr	r3, [pc, #312]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a98:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa0:	494a      	ldr	r1, [pc, #296]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ab0:	d101      	bne.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0320 	and.w	r3, r3, #32
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f000 808b 	beq.w	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ae0:	4b3a      	ldr	r3, [pc, #232]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae4:	4a39      	ldr	r2, [pc, #228]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ae6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003aea:	6413      	str	r3, [r2, #64]	@ 0x40
 8003aec:	4b37      	ldr	r3, [pc, #220]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003af4:	60bb      	str	r3, [r7, #8]
 8003af6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003af8:	4b35      	ldr	r3, [pc, #212]	@ (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a34      	ldr	r2, [pc, #208]	@ (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003afe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b04:	f7fe f880 	bl	8001c08 <HAL_GetTick>
 8003b08:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b0c:	f7fe f87c 	bl	8001c08 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b64      	cmp	r3, #100	@ 0x64
 8003b18:	d901      	bls.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e357      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b1e:	4b2c      	ldr	r3, [pc, #176]	@ (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0f0      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b2a:	4b28      	ldr	r3, [pc, #160]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b32:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d035      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d02e      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b48:	4b20      	ldr	r3, [pc, #128]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b50:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b52:	4b1e      	ldr	r3, [pc, #120]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b56:	4a1d      	ldr	r2, [pc, #116]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b5c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b5e:	4b1b      	ldr	r3, [pc, #108]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b62:	4a1a      	ldr	r2, [pc, #104]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b68:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003b6a:	4a18      	ldr	r2, [pc, #96]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b70:	4b16      	ldr	r3, [pc, #88]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d114      	bne.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7c:	f7fe f844 	bl	8001c08 <HAL_GetTick>
 8003b80:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b82:	e00a      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b84:	f7fe f840 	bl	8001c08 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e319      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0ee      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003baa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bb2:	d111      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003bb4:	4b05      	ldr	r3, [pc, #20]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003bc0:	4b04      	ldr	r3, [pc, #16]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003bc2:	400b      	ands	r3, r1
 8003bc4:	4901      	ldr	r1, [pc, #4]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	608b      	str	r3, [r1, #8]
 8003bca:	e00b      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	40007000 	.word	0x40007000
 8003bd4:	0ffffcff 	.word	0x0ffffcff
 8003bd8:	4baa      	ldr	r3, [pc, #680]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	4aa9      	ldr	r2, [pc, #676]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bde:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003be2:	6093      	str	r3, [r2, #8]
 8003be4:	4ba7      	ldr	r3, [pc, #668]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003be6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bf0:	49a4      	ldr	r1, [pc, #656]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0310 	and.w	r3, r3, #16
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d010      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c02:	4ba0      	ldr	r3, [pc, #640]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c08:	4a9e      	ldr	r2, [pc, #632]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c0e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003c12:	4b9c      	ldr	r3, [pc, #624]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c14:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c1c:	4999      	ldr	r1, [pc, #612]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00a      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c30:	4b94      	ldr	r3, [pc, #592]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c36:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c3e:	4991      	ldr	r1, [pc, #580]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00a      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c52:	4b8c      	ldr	r3, [pc, #560]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c58:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c60:	4988      	ldr	r1, [pc, #544]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00a      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c74:	4b83      	ldr	r3, [pc, #524]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c7a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c82:	4980      	ldr	r1, [pc, #512]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00a      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c96:	4b7b      	ldr	r3, [pc, #492]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c9c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ca4:	4977      	ldr	r1, [pc, #476]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00a      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cb8:	4b72      	ldr	r3, [pc, #456]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cbe:	f023 0203 	bic.w	r2, r3, #3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cc6:	496f      	ldr	r1, [pc, #444]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00a      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cda:	4b6a      	ldr	r3, [pc, #424]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ce0:	f023 020c 	bic.w	r2, r3, #12
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ce8:	4966      	ldr	r1, [pc, #408]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00a      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003cfc:	4b61      	ldr	r3, [pc, #388]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d02:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d0a:	495e      	ldr	r1, [pc, #376]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00a      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d1e:	4b59      	ldr	r3, [pc, #356]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d24:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d2c:	4955      	ldr	r1, [pc, #340]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00a      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d40:	4b50      	ldr	r3, [pc, #320]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d46:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d4e:	494d      	ldr	r1, [pc, #308]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00a      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003d62:	4b48      	ldr	r3, [pc, #288]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d68:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d70:	4944      	ldr	r1, [pc, #272]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00a      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003d84:	4b3f      	ldr	r3, [pc, #252]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d8a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d92:	493c      	ldr	r1, [pc, #240]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00a      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003da6:	4b37      	ldr	r3, [pc, #220]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dac:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003db4:	4933      	ldr	r1, [pc, #204]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00a      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003dc8:	4b2e      	ldr	r3, [pc, #184]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dce:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003dd6:	492b      	ldr	r1, [pc, #172]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d011      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003dea:	4b26      	ldr	r3, [pc, #152]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003df0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003df8:	4922      	ldr	r1, [pc, #136]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e08:	d101      	bne.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0308 	and.w	r3, r3, #8
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00a      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e2a:	4b16      	ldr	r3, [pc, #88]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e30:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e38:	4912      	ldr	r1, [pc, #72]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00b      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e52:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e5c:	4909      	ldr	r1, [pc, #36]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d006      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f000 80d9 	beq.w	800402a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e78:	4b02      	ldr	r3, [pc, #8]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a01      	ldr	r2, [pc, #4]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e7e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003e82:	e001      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003e84:	40023800 	.word	0x40023800
 8003e88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e8a:	f7fd febd 	bl	8001c08 <HAL_GetTick>
 8003e8e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e90:	e008      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e92:	f7fd feb9 	bl	8001c08 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b64      	cmp	r3, #100	@ 0x64
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e194      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ea4:	4b6c      	ldr	r3, [pc, #432]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1f0      	bne.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d021      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d11d      	bne.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ec4:	4b64      	ldr	r3, [pc, #400]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003eca:	0c1b      	lsrs	r3, r3, #16
 8003ecc:	f003 0303 	and.w	r3, r3, #3
 8003ed0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ed2:	4b61      	ldr	r3, [pc, #388]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ed4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ed8:	0e1b      	lsrs	r3, r3, #24
 8003eda:	f003 030f 	and.w	r3, r3, #15
 8003ede:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	019a      	lsls	r2, r3, #6
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	041b      	lsls	r3, r3, #16
 8003eea:	431a      	orrs	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	061b      	lsls	r3, r3, #24
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	071b      	lsls	r3, r3, #28
 8003ef8:	4957      	ldr	r1, [pc, #348]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d004      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f10:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f14:	d00a      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d02e      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f2a:	d129      	bne.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f2c:	4b4a      	ldr	r3, [pc, #296]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f32:	0c1b      	lsrs	r3, r3, #16
 8003f34:	f003 0303 	and.w	r3, r3, #3
 8003f38:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f3a:	4b47      	ldr	r3, [pc, #284]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f40:	0f1b      	lsrs	r3, r3, #28
 8003f42:	f003 0307 	and.w	r3, r3, #7
 8003f46:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	019a      	lsls	r2, r3, #6
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	041b      	lsls	r3, r3, #16
 8003f52:	431a      	orrs	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	061b      	lsls	r3, r3, #24
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	071b      	lsls	r3, r3, #28
 8003f60:	493d      	ldr	r1, [pc, #244]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003f68:	4b3b      	ldr	r3, [pc, #236]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f6e:	f023 021f 	bic.w	r2, r3, #31
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f76:	3b01      	subs	r3, #1
 8003f78:	4937      	ldr	r1, [pc, #220]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d01d      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f8c:	4b32      	ldr	r3, [pc, #200]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f92:	0e1b      	lsrs	r3, r3, #24
 8003f94:	f003 030f 	and.w	r3, r3, #15
 8003f98:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f9a:	4b2f      	ldr	r3, [pc, #188]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fa0:	0f1b      	lsrs	r3, r3, #28
 8003fa2:	f003 0307 	and.w	r3, r3, #7
 8003fa6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	019a      	lsls	r2, r3, #6
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	041b      	lsls	r3, r3, #16
 8003fb4:	431a      	orrs	r2, r3
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	061b      	lsls	r3, r3, #24
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	071b      	lsls	r3, r3, #28
 8003fc0:	4925      	ldr	r1, [pc, #148]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d011      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	019a      	lsls	r2, r3, #6
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	041b      	lsls	r3, r3, #16
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	061b      	lsls	r3, r3, #24
 8003fe8:	431a      	orrs	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	071b      	lsls	r3, r3, #28
 8003ff0:	4919      	ldr	r1, [pc, #100]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ff8:	4b17      	ldr	r3, [pc, #92]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a16      	ldr	r2, [pc, #88]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ffe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004002:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004004:	f7fd fe00 	bl	8001c08 <HAL_GetTick>
 8004008:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800400a:	e008      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800400c:	f7fd fdfc 	bl	8001c08 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b64      	cmp	r3, #100	@ 0x64
 8004018:	d901      	bls.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e0d7      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800401e:	4b0e      	ldr	r3, [pc, #56]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d0f0      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	2b01      	cmp	r3, #1
 800402e:	f040 80cd 	bne.w	80041cc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004032:	4b09      	ldr	r3, [pc, #36]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a08      	ldr	r2, [pc, #32]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004038:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800403c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800403e:	f7fd fde3 	bl	8001c08 <HAL_GetTick>
 8004042:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004044:	e00a      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004046:	f7fd fddf 	bl	8001c08 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b64      	cmp	r3, #100	@ 0x64
 8004052:	d903      	bls.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e0ba      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004058:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800405c:	4b5e      	ldr	r3, [pc, #376]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004064:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004068:	d0ed      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d003      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800407a:	2b00      	cmp	r3, #0
 800407c:	d009      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004086:	2b00      	cmp	r3, #0
 8004088:	d02e      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408e:	2b00      	cmp	r3, #0
 8004090:	d12a      	bne.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004092:	4b51      	ldr	r3, [pc, #324]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004094:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004098:	0c1b      	lsrs	r3, r3, #16
 800409a:	f003 0303 	and.w	r3, r3, #3
 800409e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80040a0:	4b4d      	ldr	r3, [pc, #308]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040a6:	0f1b      	lsrs	r3, r3, #28
 80040a8:	f003 0307 	and.w	r3, r3, #7
 80040ac:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	019a      	lsls	r2, r3, #6
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	041b      	lsls	r3, r3, #16
 80040b8:	431a      	orrs	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	061b      	lsls	r3, r3, #24
 80040c0:	431a      	orrs	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	071b      	lsls	r3, r3, #28
 80040c6:	4944      	ldr	r1, [pc, #272]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80040ce:	4b42      	ldr	r3, [pc, #264]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040d4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040dc:	3b01      	subs	r3, #1
 80040de:	021b      	lsls	r3, r3, #8
 80040e0:	493d      	ldr	r1, [pc, #244]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d022      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040fc:	d11d      	bne.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80040fe:	4b36      	ldr	r3, [pc, #216]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004100:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004104:	0e1b      	lsrs	r3, r3, #24
 8004106:	f003 030f 	and.w	r3, r3, #15
 800410a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800410c:	4b32      	ldr	r3, [pc, #200]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800410e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004112:	0f1b      	lsrs	r3, r3, #28
 8004114:	f003 0307 	and.w	r3, r3, #7
 8004118:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	019a      	lsls	r2, r3, #6
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	041b      	lsls	r3, r3, #16
 8004126:	431a      	orrs	r2, r3
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	061b      	lsls	r3, r3, #24
 800412c:	431a      	orrs	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	071b      	lsls	r3, r3, #28
 8004132:	4929      	ldr	r1, [pc, #164]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004134:	4313      	orrs	r3, r2
 8004136:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0308 	and.w	r3, r3, #8
 8004142:	2b00      	cmp	r3, #0
 8004144:	d028      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004146:	4b24      	ldr	r3, [pc, #144]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004148:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800414c:	0e1b      	lsrs	r3, r3, #24
 800414e:	f003 030f 	and.w	r3, r3, #15
 8004152:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004154:	4b20      	ldr	r3, [pc, #128]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800415a:	0c1b      	lsrs	r3, r3, #16
 800415c:	f003 0303 	and.w	r3, r3, #3
 8004160:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	019a      	lsls	r2, r3, #6
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	041b      	lsls	r3, r3, #16
 800416c:	431a      	orrs	r2, r3
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	061b      	lsls	r3, r3, #24
 8004172:	431a      	orrs	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	69db      	ldr	r3, [r3, #28]
 8004178:	071b      	lsls	r3, r3, #28
 800417a:	4917      	ldr	r1, [pc, #92]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800417c:	4313      	orrs	r3, r2
 800417e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004182:	4b15      	ldr	r3, [pc, #84]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004184:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004188:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004190:	4911      	ldr	r1, [pc, #68]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004192:	4313      	orrs	r3, r2
 8004194:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004198:	4b0f      	ldr	r3, [pc, #60]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a0e      	ldr	r2, [pc, #56]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800419e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041a4:	f7fd fd30 	bl	8001c08 <HAL_GetTick>
 80041a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041aa:	e008      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80041ac:	f7fd fd2c 	bl	8001c08 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b64      	cmp	r3, #100	@ 0x64
 80041b8:	d901      	bls.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e007      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041be:	4b06      	ldr	r3, [pc, #24]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80041c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041ca:	d1ef      	bne.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3720      	adds	r7, #32
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	40023800 	.word	0x40023800

080041dc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d101      	bne.n	80041f0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e08f      	b.n	8004310 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d106      	bne.n	800420a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7fd fb6d 	bl	80018e4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2202      	movs	r2, #2
 800420e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	6899      	ldr	r1, [r3, #8]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	4b3e      	ldr	r3, [pc, #248]	@ (8004318 <HAL_TIM_Encoder_Init+0x13c>)
 800421e:	400b      	ands	r3, r1
 8004220:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	3304      	adds	r3, #4
 800422a:	4619      	mov	r1, r3
 800422c:	4610      	mov	r0, r2
 800422e:	f000 f87b 	bl	8004328 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	6a1b      	ldr	r3, [r3, #32]
 8004248:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	4313      	orrs	r3, r2
 8004252:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	4b31      	ldr	r3, [pc, #196]	@ (800431c <HAL_TIM_Encoder_Init+0x140>)
 8004258:	4013      	ands	r3, r2
 800425a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	689a      	ldr	r2, [r3, #8]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	021b      	lsls	r3, r3, #8
 8004266:	4313      	orrs	r3, r2
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	4313      	orrs	r3, r2
 800426c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	4b2b      	ldr	r3, [pc, #172]	@ (8004320 <HAL_TIM_Encoder_Init+0x144>)
 8004272:	4013      	ands	r3, r2
 8004274:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	4b2a      	ldr	r3, [pc, #168]	@ (8004324 <HAL_TIM_Encoder_Init+0x148>)
 800427a:	4013      	ands	r3, r2
 800427c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	68da      	ldr	r2, [r3, #12]
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	69db      	ldr	r3, [r3, #28]
 8004286:	021b      	lsls	r3, r3, #8
 8004288:	4313      	orrs	r3, r2
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	4313      	orrs	r3, r2
 800428e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	011a      	lsls	r2, r3, #4
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	031b      	lsls	r3, r3, #12
 800429c:	4313      	orrs	r3, r2
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80042aa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80042b2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	685a      	ldr	r2, [r3, #4]
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	011b      	lsls	r3, r3, #4
 80042be:	4313      	orrs	r3, r2
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3718      	adds	r7, #24
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	fffebff8 	.word	0xfffebff8
 800431c:	fffffcfc 	.word	0xfffffcfc
 8004320:	fffff3f3 	.word	0xfffff3f3
 8004324:	ffff0f0f 	.word	0xffff0f0f

08004328 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a43      	ldr	r2, [pc, #268]	@ (8004448 <TIM_Base_SetConfig+0x120>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d013      	beq.n	8004368 <TIM_Base_SetConfig+0x40>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004346:	d00f      	beq.n	8004368 <TIM_Base_SetConfig+0x40>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a40      	ldr	r2, [pc, #256]	@ (800444c <TIM_Base_SetConfig+0x124>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d00b      	beq.n	8004368 <TIM_Base_SetConfig+0x40>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a3f      	ldr	r2, [pc, #252]	@ (8004450 <TIM_Base_SetConfig+0x128>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d007      	beq.n	8004368 <TIM_Base_SetConfig+0x40>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a3e      	ldr	r2, [pc, #248]	@ (8004454 <TIM_Base_SetConfig+0x12c>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d003      	beq.n	8004368 <TIM_Base_SetConfig+0x40>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a3d      	ldr	r2, [pc, #244]	@ (8004458 <TIM_Base_SetConfig+0x130>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d108      	bne.n	800437a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800436e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	4313      	orrs	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a32      	ldr	r2, [pc, #200]	@ (8004448 <TIM_Base_SetConfig+0x120>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d02b      	beq.n	80043da <TIM_Base_SetConfig+0xb2>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004388:	d027      	beq.n	80043da <TIM_Base_SetConfig+0xb2>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a2f      	ldr	r2, [pc, #188]	@ (800444c <TIM_Base_SetConfig+0x124>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d023      	beq.n	80043da <TIM_Base_SetConfig+0xb2>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a2e      	ldr	r2, [pc, #184]	@ (8004450 <TIM_Base_SetConfig+0x128>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d01f      	beq.n	80043da <TIM_Base_SetConfig+0xb2>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a2d      	ldr	r2, [pc, #180]	@ (8004454 <TIM_Base_SetConfig+0x12c>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d01b      	beq.n	80043da <TIM_Base_SetConfig+0xb2>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a2c      	ldr	r2, [pc, #176]	@ (8004458 <TIM_Base_SetConfig+0x130>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d017      	beq.n	80043da <TIM_Base_SetConfig+0xb2>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a2b      	ldr	r2, [pc, #172]	@ (800445c <TIM_Base_SetConfig+0x134>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d013      	beq.n	80043da <TIM_Base_SetConfig+0xb2>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a2a      	ldr	r2, [pc, #168]	@ (8004460 <TIM_Base_SetConfig+0x138>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d00f      	beq.n	80043da <TIM_Base_SetConfig+0xb2>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a29      	ldr	r2, [pc, #164]	@ (8004464 <TIM_Base_SetConfig+0x13c>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d00b      	beq.n	80043da <TIM_Base_SetConfig+0xb2>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a28      	ldr	r2, [pc, #160]	@ (8004468 <TIM_Base_SetConfig+0x140>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d007      	beq.n	80043da <TIM_Base_SetConfig+0xb2>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a27      	ldr	r2, [pc, #156]	@ (800446c <TIM_Base_SetConfig+0x144>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d003      	beq.n	80043da <TIM_Base_SetConfig+0xb2>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a26      	ldr	r2, [pc, #152]	@ (8004470 <TIM_Base_SetConfig+0x148>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d108      	bne.n	80043ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	689a      	ldr	r2, [r3, #8]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a0e      	ldr	r2, [pc, #56]	@ (8004448 <TIM_Base_SetConfig+0x120>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d003      	beq.n	800441a <TIM_Base_SetConfig+0xf2>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a10      	ldr	r2, [pc, #64]	@ (8004458 <TIM_Base_SetConfig+0x130>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d103      	bne.n	8004422 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	691a      	ldr	r2, [r3, #16]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f043 0204 	orr.w	r2, r3, #4
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	601a      	str	r2, [r3, #0]
}
 800443a:	bf00      	nop
 800443c:	3714      	adds	r7, #20
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	40010000 	.word	0x40010000
 800444c:	40000400 	.word	0x40000400
 8004450:	40000800 	.word	0x40000800
 8004454:	40000c00 	.word	0x40000c00
 8004458:	40010400 	.word	0x40010400
 800445c:	40014000 	.word	0x40014000
 8004460:	40014400 	.word	0x40014400
 8004464:	40014800 	.word	0x40014800
 8004468:	40001800 	.word	0x40001800
 800446c:	40001c00 	.word	0x40001c00
 8004470:	40002000 	.word	0x40002000

08004474 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004484:	2b01      	cmp	r3, #1
 8004486:	d101      	bne.n	800448c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004488:	2302      	movs	r3, #2
 800448a:	e06d      	b.n	8004568 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2202      	movs	r2, #2
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a30      	ldr	r2, [pc, #192]	@ (8004574 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d004      	beq.n	80044c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a2f      	ldr	r2, [pc, #188]	@ (8004578 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d108      	bne.n	80044d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80044c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a20      	ldr	r2, [pc, #128]	@ (8004574 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d022      	beq.n	800453c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044fe:	d01d      	beq.n	800453c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a1d      	ldr	r2, [pc, #116]	@ (800457c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d018      	beq.n	800453c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a1c      	ldr	r2, [pc, #112]	@ (8004580 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d013      	beq.n	800453c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a1a      	ldr	r2, [pc, #104]	@ (8004584 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d00e      	beq.n	800453c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a15      	ldr	r2, [pc, #84]	@ (8004578 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d009      	beq.n	800453c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a16      	ldr	r2, [pc, #88]	@ (8004588 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d004      	beq.n	800453c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a15      	ldr	r2, [pc, #84]	@ (800458c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d10c      	bne.n	8004556 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004542:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	4313      	orrs	r3, r2
 800454c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68ba      	ldr	r2, [r7, #8]
 8004554:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3714      	adds	r7, #20
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr
 8004574:	40010000 	.word	0x40010000
 8004578:	40010400 	.word	0x40010400
 800457c:	40000400 	.word	0x40000400
 8004580:	40000800 	.word	0x40000800
 8004584:	40000c00 	.word	0x40000c00
 8004588:	40014000 	.word	0x40014000
 800458c:	40001800 	.word	0x40001800

08004590 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e040      	b.n	8004624 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d106      	bne.n	80045b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7fd f9d8 	bl	8001968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2224      	movs	r2, #36	@ 0x24
 80045bc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f022 0201 	bic.w	r2, r2, #1
 80045cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d002      	beq.n	80045dc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 fb16 	bl	8004c08 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 f8af 	bl	8004740 <UART_SetConfig>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d101      	bne.n	80045ec <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e01b      	b.n	8004624 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80045fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	689a      	ldr	r2, [r3, #8]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800460a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f042 0201 	orr.w	r2, r2, #1
 800461a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 fb95 	bl	8004d4c <UART_CheckIdleState>
 8004622:	4603      	mov	r3, r0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3708      	adds	r7, #8
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b08a      	sub	sp, #40	@ 0x28
 8004630:	af02      	add	r7, sp, #8
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	603b      	str	r3, [r7, #0]
 8004638:	4613      	mov	r3, r2
 800463a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004640:	2b20      	cmp	r3, #32
 8004642:	d177      	bne.n	8004734 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d002      	beq.n	8004650 <HAL_UART_Transmit+0x24>
 800464a:	88fb      	ldrh	r3, [r7, #6]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d101      	bne.n	8004654 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e070      	b.n	8004736 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2221      	movs	r2, #33	@ 0x21
 8004660:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004662:	f7fd fad1 	bl	8001c08 <HAL_GetTick>
 8004666:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	88fa      	ldrh	r2, [r7, #6]
 800466c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	88fa      	ldrh	r2, [r7, #6]
 8004674:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004680:	d108      	bne.n	8004694 <HAL_UART_Transmit+0x68>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d104      	bne.n	8004694 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800468a:	2300      	movs	r3, #0
 800468c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	61bb      	str	r3, [r7, #24]
 8004692:	e003      	b.n	800469c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004698:	2300      	movs	r3, #0
 800469a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800469c:	e02f      	b.n	80046fe <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	9300      	str	r3, [sp, #0]
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	2200      	movs	r2, #0
 80046a6:	2180      	movs	r1, #128	@ 0x80
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f000 fba6 	bl	8004dfa <UART_WaitOnFlagUntilTimeout>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d004      	beq.n	80046be <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2220      	movs	r2, #32
 80046b8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e03b      	b.n	8004736 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10b      	bne.n	80046dc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	881b      	ldrh	r3, [r3, #0]
 80046c8:	461a      	mov	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046d2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	3302      	adds	r3, #2
 80046d8:	61bb      	str	r3, [r7, #24]
 80046da:	e007      	b.n	80046ec <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	781a      	ldrb	r2, [r3, #0]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	3301      	adds	r3, #1
 80046ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	3b01      	subs	r3, #1
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004704:	b29b      	uxth	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1c9      	bne.n	800469e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	9300      	str	r3, [sp, #0]
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	2200      	movs	r2, #0
 8004712:	2140      	movs	r1, #64	@ 0x40
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f000 fb70 	bl	8004dfa <UART_WaitOnFlagUntilTimeout>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d004      	beq.n	800472a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2220      	movs	r2, #32
 8004724:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e005      	b.n	8004736 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2220      	movs	r2, #32
 800472e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004730:	2300      	movs	r3, #0
 8004732:	e000      	b.n	8004736 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004734:	2302      	movs	r3, #2
  }
}
 8004736:	4618      	mov	r0, r3
 8004738:	3720      	adds	r7, #32
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
	...

08004740 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b088      	sub	sp, #32
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004748:	2300      	movs	r3, #0
 800474a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	689a      	ldr	r2, [r3, #8]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	431a      	orrs	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	431a      	orrs	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	69db      	ldr	r3, [r3, #28]
 8004760:	4313      	orrs	r3, r2
 8004762:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	4ba6      	ldr	r3, [pc, #664]	@ (8004a04 <UART_SetConfig+0x2c4>)
 800476c:	4013      	ands	r3, r2
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	6812      	ldr	r2, [r2, #0]
 8004772:	6979      	ldr	r1, [r7, #20]
 8004774:	430b      	orrs	r3, r1
 8004776:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	68da      	ldr	r2, [r3, #12]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	4313      	orrs	r3, r2
 800479c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a94      	ldr	r2, [pc, #592]	@ (8004a08 <UART_SetConfig+0x2c8>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d120      	bne.n	80047fe <UART_SetConfig+0xbe>
 80047bc:	4b93      	ldr	r3, [pc, #588]	@ (8004a0c <UART_SetConfig+0x2cc>)
 80047be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047c2:	f003 0303 	and.w	r3, r3, #3
 80047c6:	2b03      	cmp	r3, #3
 80047c8:	d816      	bhi.n	80047f8 <UART_SetConfig+0xb8>
 80047ca:	a201      	add	r2, pc, #4	@ (adr r2, 80047d0 <UART_SetConfig+0x90>)
 80047cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d0:	080047e1 	.word	0x080047e1
 80047d4:	080047ed 	.word	0x080047ed
 80047d8:	080047e7 	.word	0x080047e7
 80047dc:	080047f3 	.word	0x080047f3
 80047e0:	2301      	movs	r3, #1
 80047e2:	77fb      	strb	r3, [r7, #31]
 80047e4:	e150      	b.n	8004a88 <UART_SetConfig+0x348>
 80047e6:	2302      	movs	r3, #2
 80047e8:	77fb      	strb	r3, [r7, #31]
 80047ea:	e14d      	b.n	8004a88 <UART_SetConfig+0x348>
 80047ec:	2304      	movs	r3, #4
 80047ee:	77fb      	strb	r3, [r7, #31]
 80047f0:	e14a      	b.n	8004a88 <UART_SetConfig+0x348>
 80047f2:	2308      	movs	r3, #8
 80047f4:	77fb      	strb	r3, [r7, #31]
 80047f6:	e147      	b.n	8004a88 <UART_SetConfig+0x348>
 80047f8:	2310      	movs	r3, #16
 80047fa:	77fb      	strb	r3, [r7, #31]
 80047fc:	e144      	b.n	8004a88 <UART_SetConfig+0x348>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a83      	ldr	r2, [pc, #524]	@ (8004a10 <UART_SetConfig+0x2d0>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d132      	bne.n	800486e <UART_SetConfig+0x12e>
 8004808:	4b80      	ldr	r3, [pc, #512]	@ (8004a0c <UART_SetConfig+0x2cc>)
 800480a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800480e:	f003 030c 	and.w	r3, r3, #12
 8004812:	2b0c      	cmp	r3, #12
 8004814:	d828      	bhi.n	8004868 <UART_SetConfig+0x128>
 8004816:	a201      	add	r2, pc, #4	@ (adr r2, 800481c <UART_SetConfig+0xdc>)
 8004818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481c:	08004851 	.word	0x08004851
 8004820:	08004869 	.word	0x08004869
 8004824:	08004869 	.word	0x08004869
 8004828:	08004869 	.word	0x08004869
 800482c:	0800485d 	.word	0x0800485d
 8004830:	08004869 	.word	0x08004869
 8004834:	08004869 	.word	0x08004869
 8004838:	08004869 	.word	0x08004869
 800483c:	08004857 	.word	0x08004857
 8004840:	08004869 	.word	0x08004869
 8004844:	08004869 	.word	0x08004869
 8004848:	08004869 	.word	0x08004869
 800484c:	08004863 	.word	0x08004863
 8004850:	2300      	movs	r3, #0
 8004852:	77fb      	strb	r3, [r7, #31]
 8004854:	e118      	b.n	8004a88 <UART_SetConfig+0x348>
 8004856:	2302      	movs	r3, #2
 8004858:	77fb      	strb	r3, [r7, #31]
 800485a:	e115      	b.n	8004a88 <UART_SetConfig+0x348>
 800485c:	2304      	movs	r3, #4
 800485e:	77fb      	strb	r3, [r7, #31]
 8004860:	e112      	b.n	8004a88 <UART_SetConfig+0x348>
 8004862:	2308      	movs	r3, #8
 8004864:	77fb      	strb	r3, [r7, #31]
 8004866:	e10f      	b.n	8004a88 <UART_SetConfig+0x348>
 8004868:	2310      	movs	r3, #16
 800486a:	77fb      	strb	r3, [r7, #31]
 800486c:	e10c      	b.n	8004a88 <UART_SetConfig+0x348>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a68      	ldr	r2, [pc, #416]	@ (8004a14 <UART_SetConfig+0x2d4>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d120      	bne.n	80048ba <UART_SetConfig+0x17a>
 8004878:	4b64      	ldr	r3, [pc, #400]	@ (8004a0c <UART_SetConfig+0x2cc>)
 800487a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800487e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004882:	2b30      	cmp	r3, #48	@ 0x30
 8004884:	d013      	beq.n	80048ae <UART_SetConfig+0x16e>
 8004886:	2b30      	cmp	r3, #48	@ 0x30
 8004888:	d814      	bhi.n	80048b4 <UART_SetConfig+0x174>
 800488a:	2b20      	cmp	r3, #32
 800488c:	d009      	beq.n	80048a2 <UART_SetConfig+0x162>
 800488e:	2b20      	cmp	r3, #32
 8004890:	d810      	bhi.n	80048b4 <UART_SetConfig+0x174>
 8004892:	2b00      	cmp	r3, #0
 8004894:	d002      	beq.n	800489c <UART_SetConfig+0x15c>
 8004896:	2b10      	cmp	r3, #16
 8004898:	d006      	beq.n	80048a8 <UART_SetConfig+0x168>
 800489a:	e00b      	b.n	80048b4 <UART_SetConfig+0x174>
 800489c:	2300      	movs	r3, #0
 800489e:	77fb      	strb	r3, [r7, #31]
 80048a0:	e0f2      	b.n	8004a88 <UART_SetConfig+0x348>
 80048a2:	2302      	movs	r3, #2
 80048a4:	77fb      	strb	r3, [r7, #31]
 80048a6:	e0ef      	b.n	8004a88 <UART_SetConfig+0x348>
 80048a8:	2304      	movs	r3, #4
 80048aa:	77fb      	strb	r3, [r7, #31]
 80048ac:	e0ec      	b.n	8004a88 <UART_SetConfig+0x348>
 80048ae:	2308      	movs	r3, #8
 80048b0:	77fb      	strb	r3, [r7, #31]
 80048b2:	e0e9      	b.n	8004a88 <UART_SetConfig+0x348>
 80048b4:	2310      	movs	r3, #16
 80048b6:	77fb      	strb	r3, [r7, #31]
 80048b8:	e0e6      	b.n	8004a88 <UART_SetConfig+0x348>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a56      	ldr	r2, [pc, #344]	@ (8004a18 <UART_SetConfig+0x2d8>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d120      	bne.n	8004906 <UART_SetConfig+0x1c6>
 80048c4:	4b51      	ldr	r3, [pc, #324]	@ (8004a0c <UART_SetConfig+0x2cc>)
 80048c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048ca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80048ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80048d0:	d013      	beq.n	80048fa <UART_SetConfig+0x1ba>
 80048d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80048d4:	d814      	bhi.n	8004900 <UART_SetConfig+0x1c0>
 80048d6:	2b80      	cmp	r3, #128	@ 0x80
 80048d8:	d009      	beq.n	80048ee <UART_SetConfig+0x1ae>
 80048da:	2b80      	cmp	r3, #128	@ 0x80
 80048dc:	d810      	bhi.n	8004900 <UART_SetConfig+0x1c0>
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d002      	beq.n	80048e8 <UART_SetConfig+0x1a8>
 80048e2:	2b40      	cmp	r3, #64	@ 0x40
 80048e4:	d006      	beq.n	80048f4 <UART_SetConfig+0x1b4>
 80048e6:	e00b      	b.n	8004900 <UART_SetConfig+0x1c0>
 80048e8:	2300      	movs	r3, #0
 80048ea:	77fb      	strb	r3, [r7, #31]
 80048ec:	e0cc      	b.n	8004a88 <UART_SetConfig+0x348>
 80048ee:	2302      	movs	r3, #2
 80048f0:	77fb      	strb	r3, [r7, #31]
 80048f2:	e0c9      	b.n	8004a88 <UART_SetConfig+0x348>
 80048f4:	2304      	movs	r3, #4
 80048f6:	77fb      	strb	r3, [r7, #31]
 80048f8:	e0c6      	b.n	8004a88 <UART_SetConfig+0x348>
 80048fa:	2308      	movs	r3, #8
 80048fc:	77fb      	strb	r3, [r7, #31]
 80048fe:	e0c3      	b.n	8004a88 <UART_SetConfig+0x348>
 8004900:	2310      	movs	r3, #16
 8004902:	77fb      	strb	r3, [r7, #31]
 8004904:	e0c0      	b.n	8004a88 <UART_SetConfig+0x348>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a44      	ldr	r2, [pc, #272]	@ (8004a1c <UART_SetConfig+0x2dc>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d125      	bne.n	800495c <UART_SetConfig+0x21c>
 8004910:	4b3e      	ldr	r3, [pc, #248]	@ (8004a0c <UART_SetConfig+0x2cc>)
 8004912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004916:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800491a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800491e:	d017      	beq.n	8004950 <UART_SetConfig+0x210>
 8004920:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004924:	d817      	bhi.n	8004956 <UART_SetConfig+0x216>
 8004926:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800492a:	d00b      	beq.n	8004944 <UART_SetConfig+0x204>
 800492c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004930:	d811      	bhi.n	8004956 <UART_SetConfig+0x216>
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <UART_SetConfig+0x1fe>
 8004936:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800493a:	d006      	beq.n	800494a <UART_SetConfig+0x20a>
 800493c:	e00b      	b.n	8004956 <UART_SetConfig+0x216>
 800493e:	2300      	movs	r3, #0
 8004940:	77fb      	strb	r3, [r7, #31]
 8004942:	e0a1      	b.n	8004a88 <UART_SetConfig+0x348>
 8004944:	2302      	movs	r3, #2
 8004946:	77fb      	strb	r3, [r7, #31]
 8004948:	e09e      	b.n	8004a88 <UART_SetConfig+0x348>
 800494a:	2304      	movs	r3, #4
 800494c:	77fb      	strb	r3, [r7, #31]
 800494e:	e09b      	b.n	8004a88 <UART_SetConfig+0x348>
 8004950:	2308      	movs	r3, #8
 8004952:	77fb      	strb	r3, [r7, #31]
 8004954:	e098      	b.n	8004a88 <UART_SetConfig+0x348>
 8004956:	2310      	movs	r3, #16
 8004958:	77fb      	strb	r3, [r7, #31]
 800495a:	e095      	b.n	8004a88 <UART_SetConfig+0x348>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a2f      	ldr	r2, [pc, #188]	@ (8004a20 <UART_SetConfig+0x2e0>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d125      	bne.n	80049b2 <UART_SetConfig+0x272>
 8004966:	4b29      	ldr	r3, [pc, #164]	@ (8004a0c <UART_SetConfig+0x2cc>)
 8004968:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800496c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004970:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004974:	d017      	beq.n	80049a6 <UART_SetConfig+0x266>
 8004976:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800497a:	d817      	bhi.n	80049ac <UART_SetConfig+0x26c>
 800497c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004980:	d00b      	beq.n	800499a <UART_SetConfig+0x25a>
 8004982:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004986:	d811      	bhi.n	80049ac <UART_SetConfig+0x26c>
 8004988:	2b00      	cmp	r3, #0
 800498a:	d003      	beq.n	8004994 <UART_SetConfig+0x254>
 800498c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004990:	d006      	beq.n	80049a0 <UART_SetConfig+0x260>
 8004992:	e00b      	b.n	80049ac <UART_SetConfig+0x26c>
 8004994:	2301      	movs	r3, #1
 8004996:	77fb      	strb	r3, [r7, #31]
 8004998:	e076      	b.n	8004a88 <UART_SetConfig+0x348>
 800499a:	2302      	movs	r3, #2
 800499c:	77fb      	strb	r3, [r7, #31]
 800499e:	e073      	b.n	8004a88 <UART_SetConfig+0x348>
 80049a0:	2304      	movs	r3, #4
 80049a2:	77fb      	strb	r3, [r7, #31]
 80049a4:	e070      	b.n	8004a88 <UART_SetConfig+0x348>
 80049a6:	2308      	movs	r3, #8
 80049a8:	77fb      	strb	r3, [r7, #31]
 80049aa:	e06d      	b.n	8004a88 <UART_SetConfig+0x348>
 80049ac:	2310      	movs	r3, #16
 80049ae:	77fb      	strb	r3, [r7, #31]
 80049b0:	e06a      	b.n	8004a88 <UART_SetConfig+0x348>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a1b      	ldr	r2, [pc, #108]	@ (8004a24 <UART_SetConfig+0x2e4>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d138      	bne.n	8004a2e <UART_SetConfig+0x2ee>
 80049bc:	4b13      	ldr	r3, [pc, #76]	@ (8004a0c <UART_SetConfig+0x2cc>)
 80049be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049c2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80049c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80049ca:	d017      	beq.n	80049fc <UART_SetConfig+0x2bc>
 80049cc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80049d0:	d82a      	bhi.n	8004a28 <UART_SetConfig+0x2e8>
 80049d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049d6:	d00b      	beq.n	80049f0 <UART_SetConfig+0x2b0>
 80049d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049dc:	d824      	bhi.n	8004a28 <UART_SetConfig+0x2e8>
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d003      	beq.n	80049ea <UART_SetConfig+0x2aa>
 80049e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049e6:	d006      	beq.n	80049f6 <UART_SetConfig+0x2b6>
 80049e8:	e01e      	b.n	8004a28 <UART_SetConfig+0x2e8>
 80049ea:	2300      	movs	r3, #0
 80049ec:	77fb      	strb	r3, [r7, #31]
 80049ee:	e04b      	b.n	8004a88 <UART_SetConfig+0x348>
 80049f0:	2302      	movs	r3, #2
 80049f2:	77fb      	strb	r3, [r7, #31]
 80049f4:	e048      	b.n	8004a88 <UART_SetConfig+0x348>
 80049f6:	2304      	movs	r3, #4
 80049f8:	77fb      	strb	r3, [r7, #31]
 80049fa:	e045      	b.n	8004a88 <UART_SetConfig+0x348>
 80049fc:	2308      	movs	r3, #8
 80049fe:	77fb      	strb	r3, [r7, #31]
 8004a00:	e042      	b.n	8004a88 <UART_SetConfig+0x348>
 8004a02:	bf00      	nop
 8004a04:	efff69f3 	.word	0xefff69f3
 8004a08:	40011000 	.word	0x40011000
 8004a0c:	40023800 	.word	0x40023800
 8004a10:	40004400 	.word	0x40004400
 8004a14:	40004800 	.word	0x40004800
 8004a18:	40004c00 	.word	0x40004c00
 8004a1c:	40005000 	.word	0x40005000
 8004a20:	40011400 	.word	0x40011400
 8004a24:	40007800 	.word	0x40007800
 8004a28:	2310      	movs	r3, #16
 8004a2a:	77fb      	strb	r3, [r7, #31]
 8004a2c:	e02c      	b.n	8004a88 <UART_SetConfig+0x348>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a72      	ldr	r2, [pc, #456]	@ (8004bfc <UART_SetConfig+0x4bc>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d125      	bne.n	8004a84 <UART_SetConfig+0x344>
 8004a38:	4b71      	ldr	r3, [pc, #452]	@ (8004c00 <UART_SetConfig+0x4c0>)
 8004a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a3e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004a42:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004a46:	d017      	beq.n	8004a78 <UART_SetConfig+0x338>
 8004a48:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004a4c:	d817      	bhi.n	8004a7e <UART_SetConfig+0x33e>
 8004a4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a52:	d00b      	beq.n	8004a6c <UART_SetConfig+0x32c>
 8004a54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a58:	d811      	bhi.n	8004a7e <UART_SetConfig+0x33e>
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d003      	beq.n	8004a66 <UART_SetConfig+0x326>
 8004a5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a62:	d006      	beq.n	8004a72 <UART_SetConfig+0x332>
 8004a64:	e00b      	b.n	8004a7e <UART_SetConfig+0x33e>
 8004a66:	2300      	movs	r3, #0
 8004a68:	77fb      	strb	r3, [r7, #31]
 8004a6a:	e00d      	b.n	8004a88 <UART_SetConfig+0x348>
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	77fb      	strb	r3, [r7, #31]
 8004a70:	e00a      	b.n	8004a88 <UART_SetConfig+0x348>
 8004a72:	2304      	movs	r3, #4
 8004a74:	77fb      	strb	r3, [r7, #31]
 8004a76:	e007      	b.n	8004a88 <UART_SetConfig+0x348>
 8004a78:	2308      	movs	r3, #8
 8004a7a:	77fb      	strb	r3, [r7, #31]
 8004a7c:	e004      	b.n	8004a88 <UART_SetConfig+0x348>
 8004a7e:	2310      	movs	r3, #16
 8004a80:	77fb      	strb	r3, [r7, #31]
 8004a82:	e001      	b.n	8004a88 <UART_SetConfig+0x348>
 8004a84:	2310      	movs	r3, #16
 8004a86:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	69db      	ldr	r3, [r3, #28]
 8004a8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a90:	d15b      	bne.n	8004b4a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004a92:	7ffb      	ldrb	r3, [r7, #31]
 8004a94:	2b08      	cmp	r3, #8
 8004a96:	d828      	bhi.n	8004aea <UART_SetConfig+0x3aa>
 8004a98:	a201      	add	r2, pc, #4	@ (adr r2, 8004aa0 <UART_SetConfig+0x360>)
 8004a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a9e:	bf00      	nop
 8004aa0:	08004ac5 	.word	0x08004ac5
 8004aa4:	08004acd 	.word	0x08004acd
 8004aa8:	08004ad5 	.word	0x08004ad5
 8004aac:	08004aeb 	.word	0x08004aeb
 8004ab0:	08004adb 	.word	0x08004adb
 8004ab4:	08004aeb 	.word	0x08004aeb
 8004ab8:	08004aeb 	.word	0x08004aeb
 8004abc:	08004aeb 	.word	0x08004aeb
 8004ac0:	08004ae3 	.word	0x08004ae3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ac4:	f7fe ff72 	bl	80039ac <HAL_RCC_GetPCLK1Freq>
 8004ac8:	61b8      	str	r0, [r7, #24]
        break;
 8004aca:	e013      	b.n	8004af4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004acc:	f7fe ff82 	bl	80039d4 <HAL_RCC_GetPCLK2Freq>
 8004ad0:	61b8      	str	r0, [r7, #24]
        break;
 8004ad2:	e00f      	b.n	8004af4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ad4:	4b4b      	ldr	r3, [pc, #300]	@ (8004c04 <UART_SetConfig+0x4c4>)
 8004ad6:	61bb      	str	r3, [r7, #24]
        break;
 8004ad8:	e00c      	b.n	8004af4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ada:	f7fe fe95 	bl	8003808 <HAL_RCC_GetSysClockFreq>
 8004ade:	61b8      	str	r0, [r7, #24]
        break;
 8004ae0:	e008      	b.n	8004af4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ae2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ae6:	61bb      	str	r3, [r7, #24]
        break;
 8004ae8:	e004      	b.n	8004af4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004aea:	2300      	movs	r3, #0
 8004aec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	77bb      	strb	r3, [r7, #30]
        break;
 8004af2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d074      	beq.n	8004be4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	005a      	lsls	r2, r3, #1
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	085b      	lsrs	r3, r3, #1
 8004b04:	441a      	add	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b0e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	2b0f      	cmp	r3, #15
 8004b14:	d916      	bls.n	8004b44 <UART_SetConfig+0x404>
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b1c:	d212      	bcs.n	8004b44 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	f023 030f 	bic.w	r3, r3, #15
 8004b26:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	085b      	lsrs	r3, r3, #1
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	f003 0307 	and.w	r3, r3, #7
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	89fb      	ldrh	r3, [r7, #14]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	89fa      	ldrh	r2, [r7, #14]
 8004b40:	60da      	str	r2, [r3, #12]
 8004b42:	e04f      	b.n	8004be4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	77bb      	strb	r3, [r7, #30]
 8004b48:	e04c      	b.n	8004be4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b4a:	7ffb      	ldrb	r3, [r7, #31]
 8004b4c:	2b08      	cmp	r3, #8
 8004b4e:	d828      	bhi.n	8004ba2 <UART_SetConfig+0x462>
 8004b50:	a201      	add	r2, pc, #4	@ (adr r2, 8004b58 <UART_SetConfig+0x418>)
 8004b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b56:	bf00      	nop
 8004b58:	08004b7d 	.word	0x08004b7d
 8004b5c:	08004b85 	.word	0x08004b85
 8004b60:	08004b8d 	.word	0x08004b8d
 8004b64:	08004ba3 	.word	0x08004ba3
 8004b68:	08004b93 	.word	0x08004b93
 8004b6c:	08004ba3 	.word	0x08004ba3
 8004b70:	08004ba3 	.word	0x08004ba3
 8004b74:	08004ba3 	.word	0x08004ba3
 8004b78:	08004b9b 	.word	0x08004b9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b7c:	f7fe ff16 	bl	80039ac <HAL_RCC_GetPCLK1Freq>
 8004b80:	61b8      	str	r0, [r7, #24]
        break;
 8004b82:	e013      	b.n	8004bac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b84:	f7fe ff26 	bl	80039d4 <HAL_RCC_GetPCLK2Freq>
 8004b88:	61b8      	str	r0, [r7, #24]
        break;
 8004b8a:	e00f      	b.n	8004bac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b8c:	4b1d      	ldr	r3, [pc, #116]	@ (8004c04 <UART_SetConfig+0x4c4>)
 8004b8e:	61bb      	str	r3, [r7, #24]
        break;
 8004b90:	e00c      	b.n	8004bac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b92:	f7fe fe39 	bl	8003808 <HAL_RCC_GetSysClockFreq>
 8004b96:	61b8      	str	r0, [r7, #24]
        break;
 8004b98:	e008      	b.n	8004bac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b9e:	61bb      	str	r3, [r7, #24]
        break;
 8004ba0:	e004      	b.n	8004bac <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	77bb      	strb	r3, [r7, #30]
        break;
 8004baa:	bf00      	nop
    }

    if (pclk != 0U)
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d018      	beq.n	8004be4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	085a      	lsrs	r2, r3, #1
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	441a      	add	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	2b0f      	cmp	r3, #15
 8004bca:	d909      	bls.n	8004be0 <UART_SetConfig+0x4a0>
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bd2:	d205      	bcs.n	8004be0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	60da      	str	r2, [r3, #12]
 8004bde:	e001      	b.n	8004be4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004bf0:	7fbb      	ldrb	r3, [r7, #30]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3720      	adds	r7, #32
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	40007c00 	.word	0x40007c00
 8004c00:	40023800 	.word	0x40023800
 8004c04:	00f42400 	.word	0x00f42400

08004c08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c14:	f003 0308 	and.w	r3, r3, #8
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00a      	beq.n	8004c32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00a      	beq.n	8004c54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	430a      	orrs	r2, r1
 8004c52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c58:	f003 0302 	and.w	r3, r3, #2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00a      	beq.n	8004c76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c7a:	f003 0304 	and.w	r3, r3, #4
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00a      	beq.n	8004c98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	430a      	orrs	r2, r1
 8004c96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c9c:	f003 0310 	and.w	r3, r3, #16
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00a      	beq.n	8004cba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cbe:	f003 0320 	and.w	r3, r3, #32
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d01a      	beq.n	8004d1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d06:	d10a      	bne.n	8004d1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00a      	beq.n	8004d40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	605a      	str	r2, [r3, #4]
  }
}
 8004d40:	bf00      	nop
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b08c      	sub	sp, #48	@ 0x30
 8004d50:	af02      	add	r7, sp, #8
 8004d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d5c:	f7fc ff54 	bl	8001c08 <HAL_GetTick>
 8004d60:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0308 	and.w	r3, r3, #8
 8004d6c:	2b08      	cmp	r3, #8
 8004d6e:	d12e      	bne.n	8004dce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d70:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d74:	9300      	str	r3, [sp, #0]
 8004d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f83b 	bl	8004dfa <UART_WaitOnFlagUntilTimeout>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d021      	beq.n	8004dce <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	e853 3f00 	ldrex	r3, [r3]
 8004d96:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d9e:	623b      	str	r3, [r7, #32]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	461a      	mov	r2, r3
 8004da6:	6a3b      	ldr	r3, [r7, #32]
 8004da8:	61fb      	str	r3, [r7, #28]
 8004daa:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dac:	69b9      	ldr	r1, [r7, #24]
 8004dae:	69fa      	ldr	r2, [r7, #28]
 8004db0:	e841 2300 	strex	r3, r2, [r1]
 8004db4:	617b      	str	r3, [r7, #20]
   return(result);
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1e6      	bne.n	8004d8a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e011      	b.n	8004df2 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3728      	adds	r7, #40	@ 0x28
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b084      	sub	sp, #16
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	60f8      	str	r0, [r7, #12]
 8004e02:	60b9      	str	r1, [r7, #8]
 8004e04:	603b      	str	r3, [r7, #0]
 8004e06:	4613      	mov	r3, r2
 8004e08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e0a:	e04f      	b.n	8004eac <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e12:	d04b      	beq.n	8004eac <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e14:	f7fc fef8 	bl	8001c08 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	69ba      	ldr	r2, [r7, #24]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d302      	bcc.n	8004e2a <UART_WaitOnFlagUntilTimeout+0x30>
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e04e      	b.n	8004ecc <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0304 	and.w	r3, r3, #4
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d037      	beq.n	8004eac <UART_WaitOnFlagUntilTimeout+0xb2>
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	2b80      	cmp	r3, #128	@ 0x80
 8004e40:	d034      	beq.n	8004eac <UART_WaitOnFlagUntilTimeout+0xb2>
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	2b40      	cmp	r3, #64	@ 0x40
 8004e46:	d031      	beq.n	8004eac <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	f003 0308 	and.w	r3, r3, #8
 8004e52:	2b08      	cmp	r3, #8
 8004e54:	d110      	bne.n	8004e78 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2208      	movs	r2, #8
 8004e5c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	f000 f838 	bl	8004ed4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2208      	movs	r2, #8
 8004e68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e029      	b.n	8004ecc <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e86:	d111      	bne.n	8004eac <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004e90:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f000 f81e 	bl	8004ed4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e00f      	b.n	8004ecc <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	69da      	ldr	r2, [r3, #28]
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	68ba      	ldr	r2, [r7, #8]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	bf0c      	ite	eq
 8004ebc:	2301      	moveq	r3, #1
 8004ebe:	2300      	movne	r3, #0
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	79fb      	ldrb	r3, [r7, #7]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d0a0      	beq.n	8004e0c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b095      	sub	sp, #84	@ 0x54
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ee4:	e853 3f00 	ldrex	r3, [r3]
 8004ee8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ef0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004efa:	643b      	str	r3, [r7, #64]	@ 0x40
 8004efc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f00:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f02:	e841 2300 	strex	r3, r2, [r1]
 8004f06:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1e6      	bne.n	8004edc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	3308      	adds	r3, #8
 8004f14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f16:	6a3b      	ldr	r3, [r7, #32]
 8004f18:	e853 3f00 	ldrex	r3, [r3]
 8004f1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	f023 0301 	bic.w	r3, r3, #1
 8004f24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	3308      	adds	r3, #8
 8004f2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f30:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f36:	e841 2300 	strex	r3, r2, [r1]
 8004f3a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1e5      	bne.n	8004f0e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d118      	bne.n	8004f7c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	e853 3f00 	ldrex	r3, [r3]
 8004f56:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	f023 0310 	bic.w	r3, r3, #16
 8004f5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	461a      	mov	r2, r3
 8004f66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f68:	61bb      	str	r3, [r7, #24]
 8004f6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6c:	6979      	ldr	r1, [r7, #20]
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	e841 2300 	strex	r3, r2, [r1]
 8004f74:	613b      	str	r3, [r7, #16]
   return(result);
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1e6      	bne.n	8004f4a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2220      	movs	r2, #32
 8004f80:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004f90:	bf00      	nop
 8004f92:	3754      	adds	r7, #84	@ 0x54
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <siprintf>:
 8004f9c:	b40e      	push	{r1, r2, r3}
 8004f9e:	b510      	push	{r4, lr}
 8004fa0:	b09d      	sub	sp, #116	@ 0x74
 8004fa2:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004fa4:	9002      	str	r0, [sp, #8]
 8004fa6:	9006      	str	r0, [sp, #24]
 8004fa8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004fac:	480a      	ldr	r0, [pc, #40]	@ (8004fd8 <siprintf+0x3c>)
 8004fae:	9107      	str	r1, [sp, #28]
 8004fb0:	9104      	str	r1, [sp, #16]
 8004fb2:	490a      	ldr	r1, [pc, #40]	@ (8004fdc <siprintf+0x40>)
 8004fb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fb8:	9105      	str	r1, [sp, #20]
 8004fba:	2400      	movs	r4, #0
 8004fbc:	a902      	add	r1, sp, #8
 8004fbe:	6800      	ldr	r0, [r0, #0]
 8004fc0:	9301      	str	r3, [sp, #4]
 8004fc2:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004fc4:	f000 f89c 	bl	8005100 <_svfiprintf_r>
 8004fc8:	9b02      	ldr	r3, [sp, #8]
 8004fca:	701c      	strb	r4, [r3, #0]
 8004fcc:	b01d      	add	sp, #116	@ 0x74
 8004fce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fd2:	b003      	add	sp, #12
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	2000000c 	.word	0x2000000c
 8004fdc:	ffff0208 	.word	0xffff0208

08004fe0 <memset>:
 8004fe0:	4402      	add	r2, r0
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d100      	bne.n	8004fea <memset+0xa>
 8004fe8:	4770      	bx	lr
 8004fea:	f803 1b01 	strb.w	r1, [r3], #1
 8004fee:	e7f9      	b.n	8004fe4 <memset+0x4>

08004ff0 <__errno>:
 8004ff0:	4b01      	ldr	r3, [pc, #4]	@ (8004ff8 <__errno+0x8>)
 8004ff2:	6818      	ldr	r0, [r3, #0]
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	2000000c 	.word	0x2000000c

08004ffc <__libc_init_array>:
 8004ffc:	b570      	push	{r4, r5, r6, lr}
 8004ffe:	4d0d      	ldr	r5, [pc, #52]	@ (8005034 <__libc_init_array+0x38>)
 8005000:	4c0d      	ldr	r4, [pc, #52]	@ (8005038 <__libc_init_array+0x3c>)
 8005002:	1b64      	subs	r4, r4, r5
 8005004:	10a4      	asrs	r4, r4, #2
 8005006:	2600      	movs	r6, #0
 8005008:	42a6      	cmp	r6, r4
 800500a:	d109      	bne.n	8005020 <__libc_init_array+0x24>
 800500c:	4d0b      	ldr	r5, [pc, #44]	@ (800503c <__libc_init_array+0x40>)
 800500e:	4c0c      	ldr	r4, [pc, #48]	@ (8005040 <__libc_init_array+0x44>)
 8005010:	f000 fc64 	bl	80058dc <_init>
 8005014:	1b64      	subs	r4, r4, r5
 8005016:	10a4      	asrs	r4, r4, #2
 8005018:	2600      	movs	r6, #0
 800501a:	42a6      	cmp	r6, r4
 800501c:	d105      	bne.n	800502a <__libc_init_array+0x2e>
 800501e:	bd70      	pop	{r4, r5, r6, pc}
 8005020:	f855 3b04 	ldr.w	r3, [r5], #4
 8005024:	4798      	blx	r3
 8005026:	3601      	adds	r6, #1
 8005028:	e7ee      	b.n	8005008 <__libc_init_array+0xc>
 800502a:	f855 3b04 	ldr.w	r3, [r5], #4
 800502e:	4798      	blx	r3
 8005030:	3601      	adds	r6, #1
 8005032:	e7f2      	b.n	800501a <__libc_init_array+0x1e>
 8005034:	08005b38 	.word	0x08005b38
 8005038:	08005b38 	.word	0x08005b38
 800503c:	08005b38 	.word	0x08005b38
 8005040:	08005b3c 	.word	0x08005b3c

08005044 <__retarget_lock_acquire_recursive>:
 8005044:	4770      	bx	lr

08005046 <__retarget_lock_release_recursive>:
 8005046:	4770      	bx	lr

08005048 <__ssputs_r>:
 8005048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800504c:	688e      	ldr	r6, [r1, #8]
 800504e:	461f      	mov	r7, r3
 8005050:	42be      	cmp	r6, r7
 8005052:	680b      	ldr	r3, [r1, #0]
 8005054:	4682      	mov	sl, r0
 8005056:	460c      	mov	r4, r1
 8005058:	4690      	mov	r8, r2
 800505a:	d82d      	bhi.n	80050b8 <__ssputs_r+0x70>
 800505c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005060:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005064:	d026      	beq.n	80050b4 <__ssputs_r+0x6c>
 8005066:	6965      	ldr	r5, [r4, #20]
 8005068:	6909      	ldr	r1, [r1, #16]
 800506a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800506e:	eba3 0901 	sub.w	r9, r3, r1
 8005072:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005076:	1c7b      	adds	r3, r7, #1
 8005078:	444b      	add	r3, r9
 800507a:	106d      	asrs	r5, r5, #1
 800507c:	429d      	cmp	r5, r3
 800507e:	bf38      	it	cc
 8005080:	461d      	movcc	r5, r3
 8005082:	0553      	lsls	r3, r2, #21
 8005084:	d527      	bpl.n	80050d6 <__ssputs_r+0x8e>
 8005086:	4629      	mov	r1, r5
 8005088:	f000 f958 	bl	800533c <_malloc_r>
 800508c:	4606      	mov	r6, r0
 800508e:	b360      	cbz	r0, 80050ea <__ssputs_r+0xa2>
 8005090:	6921      	ldr	r1, [r4, #16]
 8005092:	464a      	mov	r2, r9
 8005094:	f000 fbc2 	bl	800581c <memcpy>
 8005098:	89a3      	ldrh	r3, [r4, #12]
 800509a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800509e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050a2:	81a3      	strh	r3, [r4, #12]
 80050a4:	6126      	str	r6, [r4, #16]
 80050a6:	6165      	str	r5, [r4, #20]
 80050a8:	444e      	add	r6, r9
 80050aa:	eba5 0509 	sub.w	r5, r5, r9
 80050ae:	6026      	str	r6, [r4, #0]
 80050b0:	60a5      	str	r5, [r4, #8]
 80050b2:	463e      	mov	r6, r7
 80050b4:	42be      	cmp	r6, r7
 80050b6:	d900      	bls.n	80050ba <__ssputs_r+0x72>
 80050b8:	463e      	mov	r6, r7
 80050ba:	6820      	ldr	r0, [r4, #0]
 80050bc:	4632      	mov	r2, r6
 80050be:	4641      	mov	r1, r8
 80050c0:	f000 fb82 	bl	80057c8 <memmove>
 80050c4:	68a3      	ldr	r3, [r4, #8]
 80050c6:	1b9b      	subs	r3, r3, r6
 80050c8:	60a3      	str	r3, [r4, #8]
 80050ca:	6823      	ldr	r3, [r4, #0]
 80050cc:	4433      	add	r3, r6
 80050ce:	6023      	str	r3, [r4, #0]
 80050d0:	2000      	movs	r0, #0
 80050d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050d6:	462a      	mov	r2, r5
 80050d8:	f000 fb48 	bl	800576c <_realloc_r>
 80050dc:	4606      	mov	r6, r0
 80050de:	2800      	cmp	r0, #0
 80050e0:	d1e0      	bne.n	80050a4 <__ssputs_r+0x5c>
 80050e2:	6921      	ldr	r1, [r4, #16]
 80050e4:	4650      	mov	r0, sl
 80050e6:	f000 fba7 	bl	8005838 <_free_r>
 80050ea:	230c      	movs	r3, #12
 80050ec:	f8ca 3000 	str.w	r3, [sl]
 80050f0:	89a3      	ldrh	r3, [r4, #12]
 80050f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050f6:	81a3      	strh	r3, [r4, #12]
 80050f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80050fc:	e7e9      	b.n	80050d2 <__ssputs_r+0x8a>
	...

08005100 <_svfiprintf_r>:
 8005100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005104:	4698      	mov	r8, r3
 8005106:	898b      	ldrh	r3, [r1, #12]
 8005108:	061b      	lsls	r3, r3, #24
 800510a:	b09d      	sub	sp, #116	@ 0x74
 800510c:	4607      	mov	r7, r0
 800510e:	460d      	mov	r5, r1
 8005110:	4614      	mov	r4, r2
 8005112:	d510      	bpl.n	8005136 <_svfiprintf_r+0x36>
 8005114:	690b      	ldr	r3, [r1, #16]
 8005116:	b973      	cbnz	r3, 8005136 <_svfiprintf_r+0x36>
 8005118:	2140      	movs	r1, #64	@ 0x40
 800511a:	f000 f90f 	bl	800533c <_malloc_r>
 800511e:	6028      	str	r0, [r5, #0]
 8005120:	6128      	str	r0, [r5, #16]
 8005122:	b930      	cbnz	r0, 8005132 <_svfiprintf_r+0x32>
 8005124:	230c      	movs	r3, #12
 8005126:	603b      	str	r3, [r7, #0]
 8005128:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800512c:	b01d      	add	sp, #116	@ 0x74
 800512e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005132:	2340      	movs	r3, #64	@ 0x40
 8005134:	616b      	str	r3, [r5, #20]
 8005136:	2300      	movs	r3, #0
 8005138:	9309      	str	r3, [sp, #36]	@ 0x24
 800513a:	2320      	movs	r3, #32
 800513c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005140:	f8cd 800c 	str.w	r8, [sp, #12]
 8005144:	2330      	movs	r3, #48	@ 0x30
 8005146:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80052e4 <_svfiprintf_r+0x1e4>
 800514a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800514e:	f04f 0901 	mov.w	r9, #1
 8005152:	4623      	mov	r3, r4
 8005154:	469a      	mov	sl, r3
 8005156:	f813 2b01 	ldrb.w	r2, [r3], #1
 800515a:	b10a      	cbz	r2, 8005160 <_svfiprintf_r+0x60>
 800515c:	2a25      	cmp	r2, #37	@ 0x25
 800515e:	d1f9      	bne.n	8005154 <_svfiprintf_r+0x54>
 8005160:	ebba 0b04 	subs.w	fp, sl, r4
 8005164:	d00b      	beq.n	800517e <_svfiprintf_r+0x7e>
 8005166:	465b      	mov	r3, fp
 8005168:	4622      	mov	r2, r4
 800516a:	4629      	mov	r1, r5
 800516c:	4638      	mov	r0, r7
 800516e:	f7ff ff6b 	bl	8005048 <__ssputs_r>
 8005172:	3001      	adds	r0, #1
 8005174:	f000 80a7 	beq.w	80052c6 <_svfiprintf_r+0x1c6>
 8005178:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800517a:	445a      	add	r2, fp
 800517c:	9209      	str	r2, [sp, #36]	@ 0x24
 800517e:	f89a 3000 	ldrb.w	r3, [sl]
 8005182:	2b00      	cmp	r3, #0
 8005184:	f000 809f 	beq.w	80052c6 <_svfiprintf_r+0x1c6>
 8005188:	2300      	movs	r3, #0
 800518a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800518e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005192:	f10a 0a01 	add.w	sl, sl, #1
 8005196:	9304      	str	r3, [sp, #16]
 8005198:	9307      	str	r3, [sp, #28]
 800519a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800519e:	931a      	str	r3, [sp, #104]	@ 0x68
 80051a0:	4654      	mov	r4, sl
 80051a2:	2205      	movs	r2, #5
 80051a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051a8:	484e      	ldr	r0, [pc, #312]	@ (80052e4 <_svfiprintf_r+0x1e4>)
 80051aa:	f7fb f839 	bl	8000220 <memchr>
 80051ae:	9a04      	ldr	r2, [sp, #16]
 80051b0:	b9d8      	cbnz	r0, 80051ea <_svfiprintf_r+0xea>
 80051b2:	06d0      	lsls	r0, r2, #27
 80051b4:	bf44      	itt	mi
 80051b6:	2320      	movmi	r3, #32
 80051b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80051bc:	0711      	lsls	r1, r2, #28
 80051be:	bf44      	itt	mi
 80051c0:	232b      	movmi	r3, #43	@ 0x2b
 80051c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80051c6:	f89a 3000 	ldrb.w	r3, [sl]
 80051ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80051cc:	d015      	beq.n	80051fa <_svfiprintf_r+0xfa>
 80051ce:	9a07      	ldr	r2, [sp, #28]
 80051d0:	4654      	mov	r4, sl
 80051d2:	2000      	movs	r0, #0
 80051d4:	f04f 0c0a 	mov.w	ip, #10
 80051d8:	4621      	mov	r1, r4
 80051da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051de:	3b30      	subs	r3, #48	@ 0x30
 80051e0:	2b09      	cmp	r3, #9
 80051e2:	d94b      	bls.n	800527c <_svfiprintf_r+0x17c>
 80051e4:	b1b0      	cbz	r0, 8005214 <_svfiprintf_r+0x114>
 80051e6:	9207      	str	r2, [sp, #28]
 80051e8:	e014      	b.n	8005214 <_svfiprintf_r+0x114>
 80051ea:	eba0 0308 	sub.w	r3, r0, r8
 80051ee:	fa09 f303 	lsl.w	r3, r9, r3
 80051f2:	4313      	orrs	r3, r2
 80051f4:	9304      	str	r3, [sp, #16]
 80051f6:	46a2      	mov	sl, r4
 80051f8:	e7d2      	b.n	80051a0 <_svfiprintf_r+0xa0>
 80051fa:	9b03      	ldr	r3, [sp, #12]
 80051fc:	1d19      	adds	r1, r3, #4
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	9103      	str	r1, [sp, #12]
 8005202:	2b00      	cmp	r3, #0
 8005204:	bfbb      	ittet	lt
 8005206:	425b      	neglt	r3, r3
 8005208:	f042 0202 	orrlt.w	r2, r2, #2
 800520c:	9307      	strge	r3, [sp, #28]
 800520e:	9307      	strlt	r3, [sp, #28]
 8005210:	bfb8      	it	lt
 8005212:	9204      	strlt	r2, [sp, #16]
 8005214:	7823      	ldrb	r3, [r4, #0]
 8005216:	2b2e      	cmp	r3, #46	@ 0x2e
 8005218:	d10a      	bne.n	8005230 <_svfiprintf_r+0x130>
 800521a:	7863      	ldrb	r3, [r4, #1]
 800521c:	2b2a      	cmp	r3, #42	@ 0x2a
 800521e:	d132      	bne.n	8005286 <_svfiprintf_r+0x186>
 8005220:	9b03      	ldr	r3, [sp, #12]
 8005222:	1d1a      	adds	r2, r3, #4
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	9203      	str	r2, [sp, #12]
 8005228:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800522c:	3402      	adds	r4, #2
 800522e:	9305      	str	r3, [sp, #20]
 8005230:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80052f4 <_svfiprintf_r+0x1f4>
 8005234:	7821      	ldrb	r1, [r4, #0]
 8005236:	2203      	movs	r2, #3
 8005238:	4650      	mov	r0, sl
 800523a:	f7fa fff1 	bl	8000220 <memchr>
 800523e:	b138      	cbz	r0, 8005250 <_svfiprintf_r+0x150>
 8005240:	9b04      	ldr	r3, [sp, #16]
 8005242:	eba0 000a 	sub.w	r0, r0, sl
 8005246:	2240      	movs	r2, #64	@ 0x40
 8005248:	4082      	lsls	r2, r0
 800524a:	4313      	orrs	r3, r2
 800524c:	3401      	adds	r4, #1
 800524e:	9304      	str	r3, [sp, #16]
 8005250:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005254:	4824      	ldr	r0, [pc, #144]	@ (80052e8 <_svfiprintf_r+0x1e8>)
 8005256:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800525a:	2206      	movs	r2, #6
 800525c:	f7fa ffe0 	bl	8000220 <memchr>
 8005260:	2800      	cmp	r0, #0
 8005262:	d036      	beq.n	80052d2 <_svfiprintf_r+0x1d2>
 8005264:	4b21      	ldr	r3, [pc, #132]	@ (80052ec <_svfiprintf_r+0x1ec>)
 8005266:	bb1b      	cbnz	r3, 80052b0 <_svfiprintf_r+0x1b0>
 8005268:	9b03      	ldr	r3, [sp, #12]
 800526a:	3307      	adds	r3, #7
 800526c:	f023 0307 	bic.w	r3, r3, #7
 8005270:	3308      	adds	r3, #8
 8005272:	9303      	str	r3, [sp, #12]
 8005274:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005276:	4433      	add	r3, r6
 8005278:	9309      	str	r3, [sp, #36]	@ 0x24
 800527a:	e76a      	b.n	8005152 <_svfiprintf_r+0x52>
 800527c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005280:	460c      	mov	r4, r1
 8005282:	2001      	movs	r0, #1
 8005284:	e7a8      	b.n	80051d8 <_svfiprintf_r+0xd8>
 8005286:	2300      	movs	r3, #0
 8005288:	3401      	adds	r4, #1
 800528a:	9305      	str	r3, [sp, #20]
 800528c:	4619      	mov	r1, r3
 800528e:	f04f 0c0a 	mov.w	ip, #10
 8005292:	4620      	mov	r0, r4
 8005294:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005298:	3a30      	subs	r2, #48	@ 0x30
 800529a:	2a09      	cmp	r2, #9
 800529c:	d903      	bls.n	80052a6 <_svfiprintf_r+0x1a6>
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d0c6      	beq.n	8005230 <_svfiprintf_r+0x130>
 80052a2:	9105      	str	r1, [sp, #20]
 80052a4:	e7c4      	b.n	8005230 <_svfiprintf_r+0x130>
 80052a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80052aa:	4604      	mov	r4, r0
 80052ac:	2301      	movs	r3, #1
 80052ae:	e7f0      	b.n	8005292 <_svfiprintf_r+0x192>
 80052b0:	ab03      	add	r3, sp, #12
 80052b2:	9300      	str	r3, [sp, #0]
 80052b4:	462a      	mov	r2, r5
 80052b6:	4b0e      	ldr	r3, [pc, #56]	@ (80052f0 <_svfiprintf_r+0x1f0>)
 80052b8:	a904      	add	r1, sp, #16
 80052ba:	4638      	mov	r0, r7
 80052bc:	f3af 8000 	nop.w
 80052c0:	1c42      	adds	r2, r0, #1
 80052c2:	4606      	mov	r6, r0
 80052c4:	d1d6      	bne.n	8005274 <_svfiprintf_r+0x174>
 80052c6:	89ab      	ldrh	r3, [r5, #12]
 80052c8:	065b      	lsls	r3, r3, #25
 80052ca:	f53f af2d 	bmi.w	8005128 <_svfiprintf_r+0x28>
 80052ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80052d0:	e72c      	b.n	800512c <_svfiprintf_r+0x2c>
 80052d2:	ab03      	add	r3, sp, #12
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	462a      	mov	r2, r5
 80052d8:	4b05      	ldr	r3, [pc, #20]	@ (80052f0 <_svfiprintf_r+0x1f0>)
 80052da:	a904      	add	r1, sp, #16
 80052dc:	4638      	mov	r0, r7
 80052de:	f000 f91b 	bl	8005518 <_printf_i>
 80052e2:	e7ed      	b.n	80052c0 <_svfiprintf_r+0x1c0>
 80052e4:	08005afc 	.word	0x08005afc
 80052e8:	08005b06 	.word	0x08005b06
 80052ec:	00000000 	.word	0x00000000
 80052f0:	08005049 	.word	0x08005049
 80052f4:	08005b02 	.word	0x08005b02

080052f8 <sbrk_aligned>:
 80052f8:	b570      	push	{r4, r5, r6, lr}
 80052fa:	4e0f      	ldr	r6, [pc, #60]	@ (8005338 <sbrk_aligned+0x40>)
 80052fc:	460c      	mov	r4, r1
 80052fe:	6831      	ldr	r1, [r6, #0]
 8005300:	4605      	mov	r5, r0
 8005302:	b911      	cbnz	r1, 800530a <sbrk_aligned+0x12>
 8005304:	f000 fa7a 	bl	80057fc <_sbrk_r>
 8005308:	6030      	str	r0, [r6, #0]
 800530a:	4621      	mov	r1, r4
 800530c:	4628      	mov	r0, r5
 800530e:	f000 fa75 	bl	80057fc <_sbrk_r>
 8005312:	1c43      	adds	r3, r0, #1
 8005314:	d103      	bne.n	800531e <sbrk_aligned+0x26>
 8005316:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800531a:	4620      	mov	r0, r4
 800531c:	bd70      	pop	{r4, r5, r6, pc}
 800531e:	1cc4      	adds	r4, r0, #3
 8005320:	f024 0403 	bic.w	r4, r4, #3
 8005324:	42a0      	cmp	r0, r4
 8005326:	d0f8      	beq.n	800531a <sbrk_aligned+0x22>
 8005328:	1a21      	subs	r1, r4, r0
 800532a:	4628      	mov	r0, r5
 800532c:	f000 fa66 	bl	80057fc <_sbrk_r>
 8005330:	3001      	adds	r0, #1
 8005332:	d1f2      	bne.n	800531a <sbrk_aligned+0x22>
 8005334:	e7ef      	b.n	8005316 <sbrk_aligned+0x1e>
 8005336:	bf00      	nop
 8005338:	20000510 	.word	0x20000510

0800533c <_malloc_r>:
 800533c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005340:	1ccd      	adds	r5, r1, #3
 8005342:	f025 0503 	bic.w	r5, r5, #3
 8005346:	3508      	adds	r5, #8
 8005348:	2d0c      	cmp	r5, #12
 800534a:	bf38      	it	cc
 800534c:	250c      	movcc	r5, #12
 800534e:	2d00      	cmp	r5, #0
 8005350:	4606      	mov	r6, r0
 8005352:	db01      	blt.n	8005358 <_malloc_r+0x1c>
 8005354:	42a9      	cmp	r1, r5
 8005356:	d904      	bls.n	8005362 <_malloc_r+0x26>
 8005358:	230c      	movs	r3, #12
 800535a:	6033      	str	r3, [r6, #0]
 800535c:	2000      	movs	r0, #0
 800535e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005362:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005438 <_malloc_r+0xfc>
 8005366:	f000 f9f5 	bl	8005754 <__malloc_lock>
 800536a:	f8d8 3000 	ldr.w	r3, [r8]
 800536e:	461c      	mov	r4, r3
 8005370:	bb44      	cbnz	r4, 80053c4 <_malloc_r+0x88>
 8005372:	4629      	mov	r1, r5
 8005374:	4630      	mov	r0, r6
 8005376:	f7ff ffbf 	bl	80052f8 <sbrk_aligned>
 800537a:	1c43      	adds	r3, r0, #1
 800537c:	4604      	mov	r4, r0
 800537e:	d158      	bne.n	8005432 <_malloc_r+0xf6>
 8005380:	f8d8 4000 	ldr.w	r4, [r8]
 8005384:	4627      	mov	r7, r4
 8005386:	2f00      	cmp	r7, #0
 8005388:	d143      	bne.n	8005412 <_malloc_r+0xd6>
 800538a:	2c00      	cmp	r4, #0
 800538c:	d04b      	beq.n	8005426 <_malloc_r+0xea>
 800538e:	6823      	ldr	r3, [r4, #0]
 8005390:	4639      	mov	r1, r7
 8005392:	4630      	mov	r0, r6
 8005394:	eb04 0903 	add.w	r9, r4, r3
 8005398:	f000 fa30 	bl	80057fc <_sbrk_r>
 800539c:	4581      	cmp	r9, r0
 800539e:	d142      	bne.n	8005426 <_malloc_r+0xea>
 80053a0:	6821      	ldr	r1, [r4, #0]
 80053a2:	1a6d      	subs	r5, r5, r1
 80053a4:	4629      	mov	r1, r5
 80053a6:	4630      	mov	r0, r6
 80053a8:	f7ff ffa6 	bl	80052f8 <sbrk_aligned>
 80053ac:	3001      	adds	r0, #1
 80053ae:	d03a      	beq.n	8005426 <_malloc_r+0xea>
 80053b0:	6823      	ldr	r3, [r4, #0]
 80053b2:	442b      	add	r3, r5
 80053b4:	6023      	str	r3, [r4, #0]
 80053b6:	f8d8 3000 	ldr.w	r3, [r8]
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	bb62      	cbnz	r2, 8005418 <_malloc_r+0xdc>
 80053be:	f8c8 7000 	str.w	r7, [r8]
 80053c2:	e00f      	b.n	80053e4 <_malloc_r+0xa8>
 80053c4:	6822      	ldr	r2, [r4, #0]
 80053c6:	1b52      	subs	r2, r2, r5
 80053c8:	d420      	bmi.n	800540c <_malloc_r+0xd0>
 80053ca:	2a0b      	cmp	r2, #11
 80053cc:	d917      	bls.n	80053fe <_malloc_r+0xc2>
 80053ce:	1961      	adds	r1, r4, r5
 80053d0:	42a3      	cmp	r3, r4
 80053d2:	6025      	str	r5, [r4, #0]
 80053d4:	bf18      	it	ne
 80053d6:	6059      	strne	r1, [r3, #4]
 80053d8:	6863      	ldr	r3, [r4, #4]
 80053da:	bf08      	it	eq
 80053dc:	f8c8 1000 	streq.w	r1, [r8]
 80053e0:	5162      	str	r2, [r4, r5]
 80053e2:	604b      	str	r3, [r1, #4]
 80053e4:	4630      	mov	r0, r6
 80053e6:	f000 f9bb 	bl	8005760 <__malloc_unlock>
 80053ea:	f104 000b 	add.w	r0, r4, #11
 80053ee:	1d23      	adds	r3, r4, #4
 80053f0:	f020 0007 	bic.w	r0, r0, #7
 80053f4:	1ac2      	subs	r2, r0, r3
 80053f6:	bf1c      	itt	ne
 80053f8:	1a1b      	subne	r3, r3, r0
 80053fa:	50a3      	strne	r3, [r4, r2]
 80053fc:	e7af      	b.n	800535e <_malloc_r+0x22>
 80053fe:	6862      	ldr	r2, [r4, #4]
 8005400:	42a3      	cmp	r3, r4
 8005402:	bf0c      	ite	eq
 8005404:	f8c8 2000 	streq.w	r2, [r8]
 8005408:	605a      	strne	r2, [r3, #4]
 800540a:	e7eb      	b.n	80053e4 <_malloc_r+0xa8>
 800540c:	4623      	mov	r3, r4
 800540e:	6864      	ldr	r4, [r4, #4]
 8005410:	e7ae      	b.n	8005370 <_malloc_r+0x34>
 8005412:	463c      	mov	r4, r7
 8005414:	687f      	ldr	r7, [r7, #4]
 8005416:	e7b6      	b.n	8005386 <_malloc_r+0x4a>
 8005418:	461a      	mov	r2, r3
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	42a3      	cmp	r3, r4
 800541e:	d1fb      	bne.n	8005418 <_malloc_r+0xdc>
 8005420:	2300      	movs	r3, #0
 8005422:	6053      	str	r3, [r2, #4]
 8005424:	e7de      	b.n	80053e4 <_malloc_r+0xa8>
 8005426:	230c      	movs	r3, #12
 8005428:	6033      	str	r3, [r6, #0]
 800542a:	4630      	mov	r0, r6
 800542c:	f000 f998 	bl	8005760 <__malloc_unlock>
 8005430:	e794      	b.n	800535c <_malloc_r+0x20>
 8005432:	6005      	str	r5, [r0, #0]
 8005434:	e7d6      	b.n	80053e4 <_malloc_r+0xa8>
 8005436:	bf00      	nop
 8005438:	20000514 	.word	0x20000514

0800543c <_printf_common>:
 800543c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005440:	4616      	mov	r6, r2
 8005442:	4698      	mov	r8, r3
 8005444:	688a      	ldr	r2, [r1, #8]
 8005446:	690b      	ldr	r3, [r1, #16]
 8005448:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800544c:	4293      	cmp	r3, r2
 800544e:	bfb8      	it	lt
 8005450:	4613      	movlt	r3, r2
 8005452:	6033      	str	r3, [r6, #0]
 8005454:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005458:	4607      	mov	r7, r0
 800545a:	460c      	mov	r4, r1
 800545c:	b10a      	cbz	r2, 8005462 <_printf_common+0x26>
 800545e:	3301      	adds	r3, #1
 8005460:	6033      	str	r3, [r6, #0]
 8005462:	6823      	ldr	r3, [r4, #0]
 8005464:	0699      	lsls	r1, r3, #26
 8005466:	bf42      	ittt	mi
 8005468:	6833      	ldrmi	r3, [r6, #0]
 800546a:	3302      	addmi	r3, #2
 800546c:	6033      	strmi	r3, [r6, #0]
 800546e:	6825      	ldr	r5, [r4, #0]
 8005470:	f015 0506 	ands.w	r5, r5, #6
 8005474:	d106      	bne.n	8005484 <_printf_common+0x48>
 8005476:	f104 0a19 	add.w	sl, r4, #25
 800547a:	68e3      	ldr	r3, [r4, #12]
 800547c:	6832      	ldr	r2, [r6, #0]
 800547e:	1a9b      	subs	r3, r3, r2
 8005480:	42ab      	cmp	r3, r5
 8005482:	dc26      	bgt.n	80054d2 <_printf_common+0x96>
 8005484:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005488:	6822      	ldr	r2, [r4, #0]
 800548a:	3b00      	subs	r3, #0
 800548c:	bf18      	it	ne
 800548e:	2301      	movne	r3, #1
 8005490:	0692      	lsls	r2, r2, #26
 8005492:	d42b      	bmi.n	80054ec <_printf_common+0xb0>
 8005494:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005498:	4641      	mov	r1, r8
 800549a:	4638      	mov	r0, r7
 800549c:	47c8      	blx	r9
 800549e:	3001      	adds	r0, #1
 80054a0:	d01e      	beq.n	80054e0 <_printf_common+0xa4>
 80054a2:	6823      	ldr	r3, [r4, #0]
 80054a4:	6922      	ldr	r2, [r4, #16]
 80054a6:	f003 0306 	and.w	r3, r3, #6
 80054aa:	2b04      	cmp	r3, #4
 80054ac:	bf02      	ittt	eq
 80054ae:	68e5      	ldreq	r5, [r4, #12]
 80054b0:	6833      	ldreq	r3, [r6, #0]
 80054b2:	1aed      	subeq	r5, r5, r3
 80054b4:	68a3      	ldr	r3, [r4, #8]
 80054b6:	bf0c      	ite	eq
 80054b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054bc:	2500      	movne	r5, #0
 80054be:	4293      	cmp	r3, r2
 80054c0:	bfc4      	itt	gt
 80054c2:	1a9b      	subgt	r3, r3, r2
 80054c4:	18ed      	addgt	r5, r5, r3
 80054c6:	2600      	movs	r6, #0
 80054c8:	341a      	adds	r4, #26
 80054ca:	42b5      	cmp	r5, r6
 80054cc:	d11a      	bne.n	8005504 <_printf_common+0xc8>
 80054ce:	2000      	movs	r0, #0
 80054d0:	e008      	b.n	80054e4 <_printf_common+0xa8>
 80054d2:	2301      	movs	r3, #1
 80054d4:	4652      	mov	r2, sl
 80054d6:	4641      	mov	r1, r8
 80054d8:	4638      	mov	r0, r7
 80054da:	47c8      	blx	r9
 80054dc:	3001      	adds	r0, #1
 80054de:	d103      	bne.n	80054e8 <_printf_common+0xac>
 80054e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80054e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054e8:	3501      	adds	r5, #1
 80054ea:	e7c6      	b.n	800547a <_printf_common+0x3e>
 80054ec:	18e1      	adds	r1, r4, r3
 80054ee:	1c5a      	adds	r2, r3, #1
 80054f0:	2030      	movs	r0, #48	@ 0x30
 80054f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80054f6:	4422      	add	r2, r4
 80054f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80054fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005500:	3302      	adds	r3, #2
 8005502:	e7c7      	b.n	8005494 <_printf_common+0x58>
 8005504:	2301      	movs	r3, #1
 8005506:	4622      	mov	r2, r4
 8005508:	4641      	mov	r1, r8
 800550a:	4638      	mov	r0, r7
 800550c:	47c8      	blx	r9
 800550e:	3001      	adds	r0, #1
 8005510:	d0e6      	beq.n	80054e0 <_printf_common+0xa4>
 8005512:	3601      	adds	r6, #1
 8005514:	e7d9      	b.n	80054ca <_printf_common+0x8e>
	...

08005518 <_printf_i>:
 8005518:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800551c:	7e0f      	ldrb	r7, [r1, #24]
 800551e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005520:	2f78      	cmp	r7, #120	@ 0x78
 8005522:	4691      	mov	r9, r2
 8005524:	4680      	mov	r8, r0
 8005526:	460c      	mov	r4, r1
 8005528:	469a      	mov	sl, r3
 800552a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800552e:	d807      	bhi.n	8005540 <_printf_i+0x28>
 8005530:	2f62      	cmp	r7, #98	@ 0x62
 8005532:	d80a      	bhi.n	800554a <_printf_i+0x32>
 8005534:	2f00      	cmp	r7, #0
 8005536:	f000 80d1 	beq.w	80056dc <_printf_i+0x1c4>
 800553a:	2f58      	cmp	r7, #88	@ 0x58
 800553c:	f000 80b8 	beq.w	80056b0 <_printf_i+0x198>
 8005540:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005544:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005548:	e03a      	b.n	80055c0 <_printf_i+0xa8>
 800554a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800554e:	2b15      	cmp	r3, #21
 8005550:	d8f6      	bhi.n	8005540 <_printf_i+0x28>
 8005552:	a101      	add	r1, pc, #4	@ (adr r1, 8005558 <_printf_i+0x40>)
 8005554:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005558:	080055b1 	.word	0x080055b1
 800555c:	080055c5 	.word	0x080055c5
 8005560:	08005541 	.word	0x08005541
 8005564:	08005541 	.word	0x08005541
 8005568:	08005541 	.word	0x08005541
 800556c:	08005541 	.word	0x08005541
 8005570:	080055c5 	.word	0x080055c5
 8005574:	08005541 	.word	0x08005541
 8005578:	08005541 	.word	0x08005541
 800557c:	08005541 	.word	0x08005541
 8005580:	08005541 	.word	0x08005541
 8005584:	080056c3 	.word	0x080056c3
 8005588:	080055ef 	.word	0x080055ef
 800558c:	0800567d 	.word	0x0800567d
 8005590:	08005541 	.word	0x08005541
 8005594:	08005541 	.word	0x08005541
 8005598:	080056e5 	.word	0x080056e5
 800559c:	08005541 	.word	0x08005541
 80055a0:	080055ef 	.word	0x080055ef
 80055a4:	08005541 	.word	0x08005541
 80055a8:	08005541 	.word	0x08005541
 80055ac:	08005685 	.word	0x08005685
 80055b0:	6833      	ldr	r3, [r6, #0]
 80055b2:	1d1a      	adds	r2, r3, #4
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	6032      	str	r2, [r6, #0]
 80055b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80055c0:	2301      	movs	r3, #1
 80055c2:	e09c      	b.n	80056fe <_printf_i+0x1e6>
 80055c4:	6833      	ldr	r3, [r6, #0]
 80055c6:	6820      	ldr	r0, [r4, #0]
 80055c8:	1d19      	adds	r1, r3, #4
 80055ca:	6031      	str	r1, [r6, #0]
 80055cc:	0606      	lsls	r6, r0, #24
 80055ce:	d501      	bpl.n	80055d4 <_printf_i+0xbc>
 80055d0:	681d      	ldr	r5, [r3, #0]
 80055d2:	e003      	b.n	80055dc <_printf_i+0xc4>
 80055d4:	0645      	lsls	r5, r0, #25
 80055d6:	d5fb      	bpl.n	80055d0 <_printf_i+0xb8>
 80055d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80055dc:	2d00      	cmp	r5, #0
 80055de:	da03      	bge.n	80055e8 <_printf_i+0xd0>
 80055e0:	232d      	movs	r3, #45	@ 0x2d
 80055e2:	426d      	negs	r5, r5
 80055e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055e8:	4858      	ldr	r0, [pc, #352]	@ (800574c <_printf_i+0x234>)
 80055ea:	230a      	movs	r3, #10
 80055ec:	e011      	b.n	8005612 <_printf_i+0xfa>
 80055ee:	6821      	ldr	r1, [r4, #0]
 80055f0:	6833      	ldr	r3, [r6, #0]
 80055f2:	0608      	lsls	r0, r1, #24
 80055f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80055f8:	d402      	bmi.n	8005600 <_printf_i+0xe8>
 80055fa:	0649      	lsls	r1, r1, #25
 80055fc:	bf48      	it	mi
 80055fe:	b2ad      	uxthmi	r5, r5
 8005600:	2f6f      	cmp	r7, #111	@ 0x6f
 8005602:	4852      	ldr	r0, [pc, #328]	@ (800574c <_printf_i+0x234>)
 8005604:	6033      	str	r3, [r6, #0]
 8005606:	bf14      	ite	ne
 8005608:	230a      	movne	r3, #10
 800560a:	2308      	moveq	r3, #8
 800560c:	2100      	movs	r1, #0
 800560e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005612:	6866      	ldr	r6, [r4, #4]
 8005614:	60a6      	str	r6, [r4, #8]
 8005616:	2e00      	cmp	r6, #0
 8005618:	db05      	blt.n	8005626 <_printf_i+0x10e>
 800561a:	6821      	ldr	r1, [r4, #0]
 800561c:	432e      	orrs	r6, r5
 800561e:	f021 0104 	bic.w	r1, r1, #4
 8005622:	6021      	str	r1, [r4, #0]
 8005624:	d04b      	beq.n	80056be <_printf_i+0x1a6>
 8005626:	4616      	mov	r6, r2
 8005628:	fbb5 f1f3 	udiv	r1, r5, r3
 800562c:	fb03 5711 	mls	r7, r3, r1, r5
 8005630:	5dc7      	ldrb	r7, [r0, r7]
 8005632:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005636:	462f      	mov	r7, r5
 8005638:	42bb      	cmp	r3, r7
 800563a:	460d      	mov	r5, r1
 800563c:	d9f4      	bls.n	8005628 <_printf_i+0x110>
 800563e:	2b08      	cmp	r3, #8
 8005640:	d10b      	bne.n	800565a <_printf_i+0x142>
 8005642:	6823      	ldr	r3, [r4, #0]
 8005644:	07df      	lsls	r7, r3, #31
 8005646:	d508      	bpl.n	800565a <_printf_i+0x142>
 8005648:	6923      	ldr	r3, [r4, #16]
 800564a:	6861      	ldr	r1, [r4, #4]
 800564c:	4299      	cmp	r1, r3
 800564e:	bfde      	ittt	le
 8005650:	2330      	movle	r3, #48	@ 0x30
 8005652:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005656:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800565a:	1b92      	subs	r2, r2, r6
 800565c:	6122      	str	r2, [r4, #16]
 800565e:	f8cd a000 	str.w	sl, [sp]
 8005662:	464b      	mov	r3, r9
 8005664:	aa03      	add	r2, sp, #12
 8005666:	4621      	mov	r1, r4
 8005668:	4640      	mov	r0, r8
 800566a:	f7ff fee7 	bl	800543c <_printf_common>
 800566e:	3001      	adds	r0, #1
 8005670:	d14a      	bne.n	8005708 <_printf_i+0x1f0>
 8005672:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005676:	b004      	add	sp, #16
 8005678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800567c:	6823      	ldr	r3, [r4, #0]
 800567e:	f043 0320 	orr.w	r3, r3, #32
 8005682:	6023      	str	r3, [r4, #0]
 8005684:	4832      	ldr	r0, [pc, #200]	@ (8005750 <_printf_i+0x238>)
 8005686:	2778      	movs	r7, #120	@ 0x78
 8005688:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800568c:	6823      	ldr	r3, [r4, #0]
 800568e:	6831      	ldr	r1, [r6, #0]
 8005690:	061f      	lsls	r7, r3, #24
 8005692:	f851 5b04 	ldr.w	r5, [r1], #4
 8005696:	d402      	bmi.n	800569e <_printf_i+0x186>
 8005698:	065f      	lsls	r7, r3, #25
 800569a:	bf48      	it	mi
 800569c:	b2ad      	uxthmi	r5, r5
 800569e:	6031      	str	r1, [r6, #0]
 80056a0:	07d9      	lsls	r1, r3, #31
 80056a2:	bf44      	itt	mi
 80056a4:	f043 0320 	orrmi.w	r3, r3, #32
 80056a8:	6023      	strmi	r3, [r4, #0]
 80056aa:	b11d      	cbz	r5, 80056b4 <_printf_i+0x19c>
 80056ac:	2310      	movs	r3, #16
 80056ae:	e7ad      	b.n	800560c <_printf_i+0xf4>
 80056b0:	4826      	ldr	r0, [pc, #152]	@ (800574c <_printf_i+0x234>)
 80056b2:	e7e9      	b.n	8005688 <_printf_i+0x170>
 80056b4:	6823      	ldr	r3, [r4, #0]
 80056b6:	f023 0320 	bic.w	r3, r3, #32
 80056ba:	6023      	str	r3, [r4, #0]
 80056bc:	e7f6      	b.n	80056ac <_printf_i+0x194>
 80056be:	4616      	mov	r6, r2
 80056c0:	e7bd      	b.n	800563e <_printf_i+0x126>
 80056c2:	6833      	ldr	r3, [r6, #0]
 80056c4:	6825      	ldr	r5, [r4, #0]
 80056c6:	6961      	ldr	r1, [r4, #20]
 80056c8:	1d18      	adds	r0, r3, #4
 80056ca:	6030      	str	r0, [r6, #0]
 80056cc:	062e      	lsls	r6, r5, #24
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	d501      	bpl.n	80056d6 <_printf_i+0x1be>
 80056d2:	6019      	str	r1, [r3, #0]
 80056d4:	e002      	b.n	80056dc <_printf_i+0x1c4>
 80056d6:	0668      	lsls	r0, r5, #25
 80056d8:	d5fb      	bpl.n	80056d2 <_printf_i+0x1ba>
 80056da:	8019      	strh	r1, [r3, #0]
 80056dc:	2300      	movs	r3, #0
 80056de:	6123      	str	r3, [r4, #16]
 80056e0:	4616      	mov	r6, r2
 80056e2:	e7bc      	b.n	800565e <_printf_i+0x146>
 80056e4:	6833      	ldr	r3, [r6, #0]
 80056e6:	1d1a      	adds	r2, r3, #4
 80056e8:	6032      	str	r2, [r6, #0]
 80056ea:	681e      	ldr	r6, [r3, #0]
 80056ec:	6862      	ldr	r2, [r4, #4]
 80056ee:	2100      	movs	r1, #0
 80056f0:	4630      	mov	r0, r6
 80056f2:	f7fa fd95 	bl	8000220 <memchr>
 80056f6:	b108      	cbz	r0, 80056fc <_printf_i+0x1e4>
 80056f8:	1b80      	subs	r0, r0, r6
 80056fa:	6060      	str	r0, [r4, #4]
 80056fc:	6863      	ldr	r3, [r4, #4]
 80056fe:	6123      	str	r3, [r4, #16]
 8005700:	2300      	movs	r3, #0
 8005702:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005706:	e7aa      	b.n	800565e <_printf_i+0x146>
 8005708:	6923      	ldr	r3, [r4, #16]
 800570a:	4632      	mov	r2, r6
 800570c:	4649      	mov	r1, r9
 800570e:	4640      	mov	r0, r8
 8005710:	47d0      	blx	sl
 8005712:	3001      	adds	r0, #1
 8005714:	d0ad      	beq.n	8005672 <_printf_i+0x15a>
 8005716:	6823      	ldr	r3, [r4, #0]
 8005718:	079b      	lsls	r3, r3, #30
 800571a:	d413      	bmi.n	8005744 <_printf_i+0x22c>
 800571c:	68e0      	ldr	r0, [r4, #12]
 800571e:	9b03      	ldr	r3, [sp, #12]
 8005720:	4298      	cmp	r0, r3
 8005722:	bfb8      	it	lt
 8005724:	4618      	movlt	r0, r3
 8005726:	e7a6      	b.n	8005676 <_printf_i+0x15e>
 8005728:	2301      	movs	r3, #1
 800572a:	4632      	mov	r2, r6
 800572c:	4649      	mov	r1, r9
 800572e:	4640      	mov	r0, r8
 8005730:	47d0      	blx	sl
 8005732:	3001      	adds	r0, #1
 8005734:	d09d      	beq.n	8005672 <_printf_i+0x15a>
 8005736:	3501      	adds	r5, #1
 8005738:	68e3      	ldr	r3, [r4, #12]
 800573a:	9903      	ldr	r1, [sp, #12]
 800573c:	1a5b      	subs	r3, r3, r1
 800573e:	42ab      	cmp	r3, r5
 8005740:	dcf2      	bgt.n	8005728 <_printf_i+0x210>
 8005742:	e7eb      	b.n	800571c <_printf_i+0x204>
 8005744:	2500      	movs	r5, #0
 8005746:	f104 0619 	add.w	r6, r4, #25
 800574a:	e7f5      	b.n	8005738 <_printf_i+0x220>
 800574c:	08005b0d 	.word	0x08005b0d
 8005750:	08005b1e 	.word	0x08005b1e

08005754 <__malloc_lock>:
 8005754:	4801      	ldr	r0, [pc, #4]	@ (800575c <__malloc_lock+0x8>)
 8005756:	f7ff bc75 	b.w	8005044 <__retarget_lock_acquire_recursive>
 800575a:	bf00      	nop
 800575c:	2000050c 	.word	0x2000050c

08005760 <__malloc_unlock>:
 8005760:	4801      	ldr	r0, [pc, #4]	@ (8005768 <__malloc_unlock+0x8>)
 8005762:	f7ff bc70 	b.w	8005046 <__retarget_lock_release_recursive>
 8005766:	bf00      	nop
 8005768:	2000050c 	.word	0x2000050c

0800576c <_realloc_r>:
 800576c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005770:	4607      	mov	r7, r0
 8005772:	4614      	mov	r4, r2
 8005774:	460d      	mov	r5, r1
 8005776:	b921      	cbnz	r1, 8005782 <_realloc_r+0x16>
 8005778:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800577c:	4611      	mov	r1, r2
 800577e:	f7ff bddd 	b.w	800533c <_malloc_r>
 8005782:	b92a      	cbnz	r2, 8005790 <_realloc_r+0x24>
 8005784:	f000 f858 	bl	8005838 <_free_r>
 8005788:	4625      	mov	r5, r4
 800578a:	4628      	mov	r0, r5
 800578c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005790:	f000 f89c 	bl	80058cc <_malloc_usable_size_r>
 8005794:	4284      	cmp	r4, r0
 8005796:	4606      	mov	r6, r0
 8005798:	d802      	bhi.n	80057a0 <_realloc_r+0x34>
 800579a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800579e:	d8f4      	bhi.n	800578a <_realloc_r+0x1e>
 80057a0:	4621      	mov	r1, r4
 80057a2:	4638      	mov	r0, r7
 80057a4:	f7ff fdca 	bl	800533c <_malloc_r>
 80057a8:	4680      	mov	r8, r0
 80057aa:	b908      	cbnz	r0, 80057b0 <_realloc_r+0x44>
 80057ac:	4645      	mov	r5, r8
 80057ae:	e7ec      	b.n	800578a <_realloc_r+0x1e>
 80057b0:	42b4      	cmp	r4, r6
 80057b2:	4622      	mov	r2, r4
 80057b4:	4629      	mov	r1, r5
 80057b6:	bf28      	it	cs
 80057b8:	4632      	movcs	r2, r6
 80057ba:	f000 f82f 	bl	800581c <memcpy>
 80057be:	4629      	mov	r1, r5
 80057c0:	4638      	mov	r0, r7
 80057c2:	f000 f839 	bl	8005838 <_free_r>
 80057c6:	e7f1      	b.n	80057ac <_realloc_r+0x40>

080057c8 <memmove>:
 80057c8:	4288      	cmp	r0, r1
 80057ca:	b510      	push	{r4, lr}
 80057cc:	eb01 0402 	add.w	r4, r1, r2
 80057d0:	d902      	bls.n	80057d8 <memmove+0x10>
 80057d2:	4284      	cmp	r4, r0
 80057d4:	4623      	mov	r3, r4
 80057d6:	d807      	bhi.n	80057e8 <memmove+0x20>
 80057d8:	1e43      	subs	r3, r0, #1
 80057da:	42a1      	cmp	r1, r4
 80057dc:	d008      	beq.n	80057f0 <memmove+0x28>
 80057de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80057e6:	e7f8      	b.n	80057da <memmove+0x12>
 80057e8:	4402      	add	r2, r0
 80057ea:	4601      	mov	r1, r0
 80057ec:	428a      	cmp	r2, r1
 80057ee:	d100      	bne.n	80057f2 <memmove+0x2a>
 80057f0:	bd10      	pop	{r4, pc}
 80057f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80057f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80057fa:	e7f7      	b.n	80057ec <memmove+0x24>

080057fc <_sbrk_r>:
 80057fc:	b538      	push	{r3, r4, r5, lr}
 80057fe:	4d06      	ldr	r5, [pc, #24]	@ (8005818 <_sbrk_r+0x1c>)
 8005800:	2300      	movs	r3, #0
 8005802:	4604      	mov	r4, r0
 8005804:	4608      	mov	r0, r1
 8005806:	602b      	str	r3, [r5, #0]
 8005808:	f7fc f93c 	bl	8001a84 <_sbrk>
 800580c:	1c43      	adds	r3, r0, #1
 800580e:	d102      	bne.n	8005816 <_sbrk_r+0x1a>
 8005810:	682b      	ldr	r3, [r5, #0]
 8005812:	b103      	cbz	r3, 8005816 <_sbrk_r+0x1a>
 8005814:	6023      	str	r3, [r4, #0]
 8005816:	bd38      	pop	{r3, r4, r5, pc}
 8005818:	20000518 	.word	0x20000518

0800581c <memcpy>:
 800581c:	440a      	add	r2, r1
 800581e:	4291      	cmp	r1, r2
 8005820:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005824:	d100      	bne.n	8005828 <memcpy+0xc>
 8005826:	4770      	bx	lr
 8005828:	b510      	push	{r4, lr}
 800582a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800582e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005832:	4291      	cmp	r1, r2
 8005834:	d1f9      	bne.n	800582a <memcpy+0xe>
 8005836:	bd10      	pop	{r4, pc}

08005838 <_free_r>:
 8005838:	b538      	push	{r3, r4, r5, lr}
 800583a:	4605      	mov	r5, r0
 800583c:	2900      	cmp	r1, #0
 800583e:	d041      	beq.n	80058c4 <_free_r+0x8c>
 8005840:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005844:	1f0c      	subs	r4, r1, #4
 8005846:	2b00      	cmp	r3, #0
 8005848:	bfb8      	it	lt
 800584a:	18e4      	addlt	r4, r4, r3
 800584c:	f7ff ff82 	bl	8005754 <__malloc_lock>
 8005850:	4a1d      	ldr	r2, [pc, #116]	@ (80058c8 <_free_r+0x90>)
 8005852:	6813      	ldr	r3, [r2, #0]
 8005854:	b933      	cbnz	r3, 8005864 <_free_r+0x2c>
 8005856:	6063      	str	r3, [r4, #4]
 8005858:	6014      	str	r4, [r2, #0]
 800585a:	4628      	mov	r0, r5
 800585c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005860:	f7ff bf7e 	b.w	8005760 <__malloc_unlock>
 8005864:	42a3      	cmp	r3, r4
 8005866:	d908      	bls.n	800587a <_free_r+0x42>
 8005868:	6820      	ldr	r0, [r4, #0]
 800586a:	1821      	adds	r1, r4, r0
 800586c:	428b      	cmp	r3, r1
 800586e:	bf01      	itttt	eq
 8005870:	6819      	ldreq	r1, [r3, #0]
 8005872:	685b      	ldreq	r3, [r3, #4]
 8005874:	1809      	addeq	r1, r1, r0
 8005876:	6021      	streq	r1, [r4, #0]
 8005878:	e7ed      	b.n	8005856 <_free_r+0x1e>
 800587a:	461a      	mov	r2, r3
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	b10b      	cbz	r3, 8005884 <_free_r+0x4c>
 8005880:	42a3      	cmp	r3, r4
 8005882:	d9fa      	bls.n	800587a <_free_r+0x42>
 8005884:	6811      	ldr	r1, [r2, #0]
 8005886:	1850      	adds	r0, r2, r1
 8005888:	42a0      	cmp	r0, r4
 800588a:	d10b      	bne.n	80058a4 <_free_r+0x6c>
 800588c:	6820      	ldr	r0, [r4, #0]
 800588e:	4401      	add	r1, r0
 8005890:	1850      	adds	r0, r2, r1
 8005892:	4283      	cmp	r3, r0
 8005894:	6011      	str	r1, [r2, #0]
 8005896:	d1e0      	bne.n	800585a <_free_r+0x22>
 8005898:	6818      	ldr	r0, [r3, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	6053      	str	r3, [r2, #4]
 800589e:	4408      	add	r0, r1
 80058a0:	6010      	str	r0, [r2, #0]
 80058a2:	e7da      	b.n	800585a <_free_r+0x22>
 80058a4:	d902      	bls.n	80058ac <_free_r+0x74>
 80058a6:	230c      	movs	r3, #12
 80058a8:	602b      	str	r3, [r5, #0]
 80058aa:	e7d6      	b.n	800585a <_free_r+0x22>
 80058ac:	6820      	ldr	r0, [r4, #0]
 80058ae:	1821      	adds	r1, r4, r0
 80058b0:	428b      	cmp	r3, r1
 80058b2:	bf04      	itt	eq
 80058b4:	6819      	ldreq	r1, [r3, #0]
 80058b6:	685b      	ldreq	r3, [r3, #4]
 80058b8:	6063      	str	r3, [r4, #4]
 80058ba:	bf04      	itt	eq
 80058bc:	1809      	addeq	r1, r1, r0
 80058be:	6021      	streq	r1, [r4, #0]
 80058c0:	6054      	str	r4, [r2, #4]
 80058c2:	e7ca      	b.n	800585a <_free_r+0x22>
 80058c4:	bd38      	pop	{r3, r4, r5, pc}
 80058c6:	bf00      	nop
 80058c8:	20000514 	.word	0x20000514

080058cc <_malloc_usable_size_r>:
 80058cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058d0:	1f18      	subs	r0, r3, #4
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	bfbc      	itt	lt
 80058d6:	580b      	ldrlt	r3, [r1, r0]
 80058d8:	18c0      	addlt	r0, r0, r3
 80058da:	4770      	bx	lr

080058dc <_init>:
 80058dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058de:	bf00      	nop
 80058e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058e2:	bc08      	pop	{r3}
 80058e4:	469e      	mov	lr, r3
 80058e6:	4770      	bx	lr

080058e8 <_fini>:
 80058e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ea:	bf00      	nop
 80058ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ee:	bc08      	pop	{r3}
 80058f0:	469e      	mov	lr, r3
 80058f2:	4770      	bx	lr
