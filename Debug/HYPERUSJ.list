
HYPERUSJ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069e0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08006bb0  08006bb0  00007bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006da0  08006da0  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006da0  08006da0  00007da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006da8  08006da8  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006da8  08006da8  00007da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006dac  08006dac  00007dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006db0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e0  20000060  08006e10  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000640  08006e10  00008640  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014c04  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b50  00000000  00000000  0001cc94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  0001f7e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dec  00000000  00000000  000209b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000280df  00000000  00000000  0002179c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000169f4  00000000  00000000  0004987b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5876  00000000  00000000  0006026f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00155ae5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050b4  00000000  00000000  00155b28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0015abdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006b98 	.word	0x08006b98

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08006b98 	.word	0x08006b98

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b10:	f000 b988 	b.w	8000e24 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9d08      	ldr	r5, [sp, #32]
 8000b32:	468e      	mov	lr, r1
 8000b34:	4604      	mov	r4, r0
 8000b36:	4688      	mov	r8, r1
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d14a      	bne.n	8000bd2 <__udivmoddi4+0xa6>
 8000b3c:	428a      	cmp	r2, r1
 8000b3e:	4617      	mov	r7, r2
 8000b40:	d962      	bls.n	8000c08 <__udivmoddi4+0xdc>
 8000b42:	fab2 f682 	clz	r6, r2
 8000b46:	b14e      	cbz	r6, 8000b5c <__udivmoddi4+0x30>
 8000b48:	f1c6 0320 	rsb	r3, r6, #32
 8000b4c:	fa01 f806 	lsl.w	r8, r1, r6
 8000b50:	fa20 f303 	lsr.w	r3, r0, r3
 8000b54:	40b7      	lsls	r7, r6
 8000b56:	ea43 0808 	orr.w	r8, r3, r8
 8000b5a:	40b4      	lsls	r4, r6
 8000b5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b60:	fa1f fc87 	uxth.w	ip, r7
 8000b64:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b68:	0c23      	lsrs	r3, r4, #16
 8000b6a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b6e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b72:	fb01 f20c 	mul.w	r2, r1, ip
 8000b76:	429a      	cmp	r2, r3
 8000b78:	d909      	bls.n	8000b8e <__udivmoddi4+0x62>
 8000b7a:	18fb      	adds	r3, r7, r3
 8000b7c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000b80:	f080 80ea 	bcs.w	8000d58 <__udivmoddi4+0x22c>
 8000b84:	429a      	cmp	r2, r3
 8000b86:	f240 80e7 	bls.w	8000d58 <__udivmoddi4+0x22c>
 8000b8a:	3902      	subs	r1, #2
 8000b8c:	443b      	add	r3, r7
 8000b8e:	1a9a      	subs	r2, r3, r2
 8000b90:	b2a3      	uxth	r3, r4
 8000b92:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b96:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b9e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ba2:	459c      	cmp	ip, r3
 8000ba4:	d909      	bls.n	8000bba <__udivmoddi4+0x8e>
 8000ba6:	18fb      	adds	r3, r7, r3
 8000ba8:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000bac:	f080 80d6 	bcs.w	8000d5c <__udivmoddi4+0x230>
 8000bb0:	459c      	cmp	ip, r3
 8000bb2:	f240 80d3 	bls.w	8000d5c <__udivmoddi4+0x230>
 8000bb6:	443b      	add	r3, r7
 8000bb8:	3802      	subs	r0, #2
 8000bba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bbe:	eba3 030c 	sub.w	r3, r3, ip
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	b11d      	cbz	r5, 8000bce <__udivmoddi4+0xa2>
 8000bc6:	40f3      	lsrs	r3, r6
 8000bc8:	2200      	movs	r2, #0
 8000bca:	e9c5 3200 	strd	r3, r2, [r5]
 8000bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d905      	bls.n	8000be2 <__udivmoddi4+0xb6>
 8000bd6:	b10d      	cbz	r5, 8000bdc <__udivmoddi4+0xb0>
 8000bd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4608      	mov	r0, r1
 8000be0:	e7f5      	b.n	8000bce <__udivmoddi4+0xa2>
 8000be2:	fab3 f183 	clz	r1, r3
 8000be6:	2900      	cmp	r1, #0
 8000be8:	d146      	bne.n	8000c78 <__udivmoddi4+0x14c>
 8000bea:	4573      	cmp	r3, lr
 8000bec:	d302      	bcc.n	8000bf4 <__udivmoddi4+0xc8>
 8000bee:	4282      	cmp	r2, r0
 8000bf0:	f200 8105 	bhi.w	8000dfe <__udivmoddi4+0x2d2>
 8000bf4:	1a84      	subs	r4, r0, r2
 8000bf6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	4690      	mov	r8, r2
 8000bfe:	2d00      	cmp	r5, #0
 8000c00:	d0e5      	beq.n	8000bce <__udivmoddi4+0xa2>
 8000c02:	e9c5 4800 	strd	r4, r8, [r5]
 8000c06:	e7e2      	b.n	8000bce <__udivmoddi4+0xa2>
 8000c08:	2a00      	cmp	r2, #0
 8000c0a:	f000 8090 	beq.w	8000d2e <__udivmoddi4+0x202>
 8000c0e:	fab2 f682 	clz	r6, r2
 8000c12:	2e00      	cmp	r6, #0
 8000c14:	f040 80a4 	bne.w	8000d60 <__udivmoddi4+0x234>
 8000c18:	1a8a      	subs	r2, r1, r2
 8000c1a:	0c03      	lsrs	r3, r0, #16
 8000c1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c20:	b280      	uxth	r0, r0
 8000c22:	b2bc      	uxth	r4, r7
 8000c24:	2101      	movs	r1, #1
 8000c26:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c2a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c32:	fb04 f20c 	mul.w	r2, r4, ip
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d907      	bls.n	8000c4a <__udivmoddi4+0x11e>
 8000c3a:	18fb      	adds	r3, r7, r3
 8000c3c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000c40:	d202      	bcs.n	8000c48 <__udivmoddi4+0x11c>
 8000c42:	429a      	cmp	r2, r3
 8000c44:	f200 80e0 	bhi.w	8000e08 <__udivmoddi4+0x2dc>
 8000c48:	46c4      	mov	ip, r8
 8000c4a:	1a9b      	subs	r3, r3, r2
 8000c4c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c50:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c54:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c58:	fb02 f404 	mul.w	r4, r2, r4
 8000c5c:	429c      	cmp	r4, r3
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0x144>
 8000c60:	18fb      	adds	r3, r7, r3
 8000c62:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0x142>
 8000c68:	429c      	cmp	r4, r3
 8000c6a:	f200 80ca 	bhi.w	8000e02 <__udivmoddi4+0x2d6>
 8000c6e:	4602      	mov	r2, r0
 8000c70:	1b1b      	subs	r3, r3, r4
 8000c72:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c76:	e7a5      	b.n	8000bc4 <__udivmoddi4+0x98>
 8000c78:	f1c1 0620 	rsb	r6, r1, #32
 8000c7c:	408b      	lsls	r3, r1
 8000c7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000c82:	431f      	orrs	r7, r3
 8000c84:	fa0e f401 	lsl.w	r4, lr, r1
 8000c88:	fa20 f306 	lsr.w	r3, r0, r6
 8000c8c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c90:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c94:	4323      	orrs	r3, r4
 8000c96:	fa00 f801 	lsl.w	r8, r0, r1
 8000c9a:	fa1f fc87 	uxth.w	ip, r7
 8000c9e:	fbbe f0f9 	udiv	r0, lr, r9
 8000ca2:	0c1c      	lsrs	r4, r3, #16
 8000ca4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ca8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000cac:	fb00 fe0c 	mul.w	lr, r0, ip
 8000cb0:	45a6      	cmp	lr, r4
 8000cb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000cb6:	d909      	bls.n	8000ccc <__udivmoddi4+0x1a0>
 8000cb8:	193c      	adds	r4, r7, r4
 8000cba:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000cbe:	f080 809c 	bcs.w	8000dfa <__udivmoddi4+0x2ce>
 8000cc2:	45a6      	cmp	lr, r4
 8000cc4:	f240 8099 	bls.w	8000dfa <__udivmoddi4+0x2ce>
 8000cc8:	3802      	subs	r0, #2
 8000cca:	443c      	add	r4, r7
 8000ccc:	eba4 040e 	sub.w	r4, r4, lr
 8000cd0:	fa1f fe83 	uxth.w	lr, r3
 8000cd4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cd8:	fb09 4413 	mls	r4, r9, r3, r4
 8000cdc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ce0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ce4:	45a4      	cmp	ip, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x1ce>
 8000ce8:	193c      	adds	r4, r7, r4
 8000cea:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000cee:	f080 8082 	bcs.w	8000df6 <__udivmoddi4+0x2ca>
 8000cf2:	45a4      	cmp	ip, r4
 8000cf4:	d97f      	bls.n	8000df6 <__udivmoddi4+0x2ca>
 8000cf6:	3b02      	subs	r3, #2
 8000cf8:	443c      	add	r4, r7
 8000cfa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000cfe:	eba4 040c 	sub.w	r4, r4, ip
 8000d02:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d06:	4564      	cmp	r4, ip
 8000d08:	4673      	mov	r3, lr
 8000d0a:	46e1      	mov	r9, ip
 8000d0c:	d362      	bcc.n	8000dd4 <__udivmoddi4+0x2a8>
 8000d0e:	d05f      	beq.n	8000dd0 <__udivmoddi4+0x2a4>
 8000d10:	b15d      	cbz	r5, 8000d2a <__udivmoddi4+0x1fe>
 8000d12:	ebb8 0203 	subs.w	r2, r8, r3
 8000d16:	eb64 0409 	sbc.w	r4, r4, r9
 8000d1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d1e:	fa22 f301 	lsr.w	r3, r2, r1
 8000d22:	431e      	orrs	r6, r3
 8000d24:	40cc      	lsrs	r4, r1
 8000d26:	e9c5 6400 	strd	r6, r4, [r5]
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	e74f      	b.n	8000bce <__udivmoddi4+0xa2>
 8000d2e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d32:	0c01      	lsrs	r1, r0, #16
 8000d34:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d38:	b280      	uxth	r0, r0
 8000d3a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d3e:	463b      	mov	r3, r7
 8000d40:	4638      	mov	r0, r7
 8000d42:	463c      	mov	r4, r7
 8000d44:	46b8      	mov	r8, r7
 8000d46:	46be      	mov	lr, r7
 8000d48:	2620      	movs	r6, #32
 8000d4a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d4e:	eba2 0208 	sub.w	r2, r2, r8
 8000d52:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d56:	e766      	b.n	8000c26 <__udivmoddi4+0xfa>
 8000d58:	4601      	mov	r1, r0
 8000d5a:	e718      	b.n	8000b8e <__udivmoddi4+0x62>
 8000d5c:	4610      	mov	r0, r2
 8000d5e:	e72c      	b.n	8000bba <__udivmoddi4+0x8e>
 8000d60:	f1c6 0220 	rsb	r2, r6, #32
 8000d64:	fa2e f302 	lsr.w	r3, lr, r2
 8000d68:	40b7      	lsls	r7, r6
 8000d6a:	40b1      	lsls	r1, r6
 8000d6c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d70:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d74:	430a      	orrs	r2, r1
 8000d76:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d7a:	b2bc      	uxth	r4, r7
 8000d7c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d80:	0c11      	lsrs	r1, r2, #16
 8000d82:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d86:	fb08 f904 	mul.w	r9, r8, r4
 8000d8a:	40b0      	lsls	r0, r6
 8000d8c:	4589      	cmp	r9, r1
 8000d8e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d92:	b280      	uxth	r0, r0
 8000d94:	d93e      	bls.n	8000e14 <__udivmoddi4+0x2e8>
 8000d96:	1879      	adds	r1, r7, r1
 8000d98:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000d9c:	d201      	bcs.n	8000da2 <__udivmoddi4+0x276>
 8000d9e:	4589      	cmp	r9, r1
 8000da0:	d81f      	bhi.n	8000de2 <__udivmoddi4+0x2b6>
 8000da2:	eba1 0109 	sub.w	r1, r1, r9
 8000da6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000daa:	fb09 f804 	mul.w	r8, r9, r4
 8000dae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000db2:	b292      	uxth	r2, r2
 8000db4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000db8:	4542      	cmp	r2, r8
 8000dba:	d229      	bcs.n	8000e10 <__udivmoddi4+0x2e4>
 8000dbc:	18ba      	adds	r2, r7, r2
 8000dbe:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000dc2:	d2c4      	bcs.n	8000d4e <__udivmoddi4+0x222>
 8000dc4:	4542      	cmp	r2, r8
 8000dc6:	d2c2      	bcs.n	8000d4e <__udivmoddi4+0x222>
 8000dc8:	f1a9 0102 	sub.w	r1, r9, #2
 8000dcc:	443a      	add	r2, r7
 8000dce:	e7be      	b.n	8000d4e <__udivmoddi4+0x222>
 8000dd0:	45f0      	cmp	r8, lr
 8000dd2:	d29d      	bcs.n	8000d10 <__udivmoddi4+0x1e4>
 8000dd4:	ebbe 0302 	subs.w	r3, lr, r2
 8000dd8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ddc:	3801      	subs	r0, #1
 8000dde:	46e1      	mov	r9, ip
 8000de0:	e796      	b.n	8000d10 <__udivmoddi4+0x1e4>
 8000de2:	eba7 0909 	sub.w	r9, r7, r9
 8000de6:	4449      	add	r1, r9
 8000de8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000dec:	fbb1 f9fe 	udiv	r9, r1, lr
 8000df0:	fb09 f804 	mul.w	r8, r9, r4
 8000df4:	e7db      	b.n	8000dae <__udivmoddi4+0x282>
 8000df6:	4673      	mov	r3, lr
 8000df8:	e77f      	b.n	8000cfa <__udivmoddi4+0x1ce>
 8000dfa:	4650      	mov	r0, sl
 8000dfc:	e766      	b.n	8000ccc <__udivmoddi4+0x1a0>
 8000dfe:	4608      	mov	r0, r1
 8000e00:	e6fd      	b.n	8000bfe <__udivmoddi4+0xd2>
 8000e02:	443b      	add	r3, r7
 8000e04:	3a02      	subs	r2, #2
 8000e06:	e733      	b.n	8000c70 <__udivmoddi4+0x144>
 8000e08:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e0c:	443b      	add	r3, r7
 8000e0e:	e71c      	b.n	8000c4a <__udivmoddi4+0x11e>
 8000e10:	4649      	mov	r1, r9
 8000e12:	e79c      	b.n	8000d4e <__udivmoddi4+0x222>
 8000e14:	eba1 0109 	sub.w	r1, r1, r9
 8000e18:	46c4      	mov	ip, r8
 8000e1a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1e:	fb09 f804 	mul.w	r8, r9, r4
 8000e22:	e7c4      	b.n	8000dae <__udivmoddi4+0x282>

08000e24 <__aeabi_idiv0>:
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop

08000e28 <INA226_INIT>:
void INA226_I2C_Write(uint8_t pByte, uint16_t Data);
void INA226_I2C_Read(uint8_t pByte, uint16_t* pData);
void INA226_I2C_ReadBuff(uint8_t pByte, uint8_t* pData, uint16_t size);

void INA226_INIT(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
	INA226_I2C_Write(INA226_CONFIG_REG, 0x4127); // Default
 8000e2c:	f244 1127 	movw	r1, #16679	@ 0x4127
 8000e30:	2000      	movs	r0, #0
 8000e32:	f000 f8d5 	bl	8000fe0 <INA226_I2C_Write>
	INA226_SetCalibration(R_SHUNT,8);
 8000e36:	eef2 0a00 	vmov.f32	s1, #32	@ 0x41000000  8.0
 8000e3a:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8000e48 <INA226_INIT+0x20>
 8000e3e:	f000 f885 	bl	8000f4c <INA226_SetCalibration>
//	INA226_Config(ShuntAndBusCont, ConvTime_1ms1, ConvTime_1ms1, Num_AVG_1); // Default
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	3c23d70a 	.word	0x3c23d70a

08000e4c <INA226_ID>:
	
	INA226_I2C_Write(INA226_CONFIG_REG, reg);
}

uint16_t INA226_ID(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
	INA226_I2C_Read(INA226_DIE_ID_REG,Buff);
 8000e50:	4905      	ldr	r1, [pc, #20]	@ (8000e68 <INA226_ID+0x1c>)
 8000e52:	20ff      	movs	r0, #255	@ 0xff
 8000e54:	f000 f8e8 	bl	8001028 <INA226_I2C_Read>
	tempReg = Buff[0]; 
 8000e58:	4b03      	ldr	r3, [pc, #12]	@ (8000e68 <INA226_ID+0x1c>)
 8000e5a:	881a      	ldrh	r2, [r3, #0]
 8000e5c:	4b03      	ldr	r3, [pc, #12]	@ (8000e6c <INA226_ID+0x20>)
 8000e5e:	801a      	strh	r2, [r3, #0]
	return tempReg;
 8000e60:	4b02      	ldr	r3, [pc, #8]	@ (8000e6c <INA226_ID+0x20>)
 8000e62:	881b      	ldrh	r3, [r3, #0]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	2000007c 	.word	0x2000007c
 8000e6c:	20000090 	.word	0x20000090

08000e70 <INA226_ShuntVoltage>:
//	*current = INA226_values.Current * 1e-03;
//	*power   = INA226_values.Power * 25e-03;
	
}

float INA226_ShuntVoltage (void){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0

	INA226_I2C_Read(INA226_SHUNT_VOLTAGE_REG,&tempReg);
 8000e74:	490e      	ldr	r1, [pc, #56]	@ (8000eb0 <INA226_ShuntVoltage+0x40>)
 8000e76:	2001      	movs	r0, #1
 8000e78:	f000 f8d6 	bl	8001028 <INA226_I2C_Read>
	return tempReg * 2.5e-06;
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb0 <INA226_ShuntVoltage+0x40>)
 8000e7e:	881b      	ldrh	r3, [r3, #0]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fb6f 	bl	8000564 <__aeabi_i2d>
 8000e86:	a308      	add	r3, pc, #32	@ (adr r3, 8000ea8 <INA226_ShuntVoltage+0x38>)
 8000e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e8c:	f7ff fbd4 	bl	8000638 <__aeabi_dmul>
 8000e90:	4602      	mov	r2, r0
 8000e92:	460b      	mov	r3, r1
 8000e94:	4610      	mov	r0, r2
 8000e96:	4619      	mov	r1, r3
 8000e98:	f7ff fde0 	bl	8000a5c <__aeabi_d2f>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	ee07 3a90 	vmov	s15, r3

}
 8000ea2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	88e368f1 	.word	0x88e368f1
 8000eac:	3ec4f8b5 	.word	0x3ec4f8b5
 8000eb0:	20000090 	.word	0x20000090

08000eb4 <INA226_BusVoltage>:

float INA226_BusVoltage (void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	INA226_I2C_Read(INA226_BUS_VOLTAGE_REG,&tempReg);
 8000eb8:	4908      	ldr	r1, [pc, #32]	@ (8000edc <INA226_BusVoltage+0x28>)
 8000eba:	2002      	movs	r0, #2
 8000ebc:	f000 f8b4 	bl	8001028 <INA226_I2C_Read>
	return tempReg * 1.25e-03f;	
 8000ec0:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <INA226_BusVoltage+0x28>)
 8000ec2:	881b      	ldrh	r3, [r3, #0]
 8000ec4:	ee07 3a90 	vmov	s15, r3
 8000ec8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ecc:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 8000ee0 <INA226_BusVoltage+0x2c>
 8000ed0:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000ed4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000090 	.word	0x20000090
 8000ee0:	3aa3d70a 	.word	0x3aa3d70a

08000ee4 <INA226_Power>:

float INA226_Power (void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
	INA226_I2C_Read(INA226_POWER_REG,&tempReg);
 8000ee8:	490a      	ldr	r1, [pc, #40]	@ (8000f14 <INA226_Power+0x30>)
 8000eea:	2003      	movs	r0, #3
 8000eec:	f000 f89c 	bl	8001028 <INA226_I2C_Read>
	
	return tempReg * (INA226_values.CurrentLSB*25);
 8000ef0:	4b08      	ldr	r3, [pc, #32]	@ (8000f14 <INA226_Power+0x30>)
 8000ef2:	881b      	ldrh	r3, [r3, #0]
 8000ef4:	ee07 3a90 	vmov	s15, r3
 8000ef8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000efc:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <INA226_Power+0x34>)
 8000efe:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f02:	eef3 6a09 	vmov.f32	s13, #57	@ 0x41c80000  25.0
 8000f06:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8000f0e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000090 	.word	0x20000090
 8000f18:	20000094 	.word	0x20000094

08000f1c <INA226_Current>:

float INA226_Current (void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	INA226_I2C_Read(INA226_CURRENT_REG,&tempReg);
 8000f20:	4908      	ldr	r1, [pc, #32]	@ (8000f44 <INA226_Current+0x28>)
 8000f22:	2004      	movs	r0, #4
 8000f24:	f000 f880 	bl	8001028 <INA226_I2C_Read>
	
	return tempReg * INA226_values.CurrentLSB;
 8000f28:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <INA226_Current+0x28>)
 8000f2a:	881b      	ldrh	r3, [r3, #0]
 8000f2c:	ee07 3a90 	vmov	s15, r3
 8000f30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f34:	4b04      	ldr	r3, [pc, #16]	@ (8000f48 <INA226_Current+0x2c>)
 8000f36:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
//	return ((INA226_ShuntVoltage()*INA226_values.Calibration)/2048) * INA226_values.CurrentLSB;
}
 8000f3e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000090 	.word	0x20000090
 8000f48:	20000094 	.word	0x20000094

08000f4c <INA226_SetCalibration>:

void INA226_SetCalibration (float R_Shunt,float MaxExpCurrent)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f56:	edc7 0a00 	vstr	s1, [r7]
	float Current_LSB;
	float CAL;
	
	if(MaxExpCurrent > 8)
 8000f5a:	edd7 7a00 	vldr	s15, [r7]
 8000f5e:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8000f62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f6a:	dd01      	ble.n	8000f70 <INA226_SetCalibration+0x24>
	{
		MaxExpCurrent = 8.192f;
 8000f6c:	4b18      	ldr	r3, [pc, #96]	@ (8000fd0 <INA226_SetCalibration+0x84>)
 8000f6e:	603b      	str	r3, [r7, #0]
	}
	
	Current_LSB = MaxExpCurrent / 32768.0f;
 8000f70:	ed97 7a00 	vldr	s14, [r7]
 8000f74:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8000fd4 <INA226_SetCalibration+0x88>
 8000f78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f7c:	edc7 7a03 	vstr	s15, [r7, #12]
	
	CAL = 0.00512f/(Current_LSB*R_Shunt);
 8000f80:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f84:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f8c:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8000fd8 <INA226_SetCalibration+0x8c>
 8000f90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f94:	edc7 7a02 	vstr	s15, [r7, #8]
	INA226_values.Calibration = CAL;
 8000f98:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fa0:	ee17 3a90 	vmov	r3, s15
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8000fdc <INA226_SetCalibration+0x90>)
 8000fa8:	811a      	strh	r2, [r3, #8]
	INA226_values.CurrentLSB = Current_LSB;
 8000faa:	4a0c      	ldr	r2, [pc, #48]	@ (8000fdc <INA226_SetCalibration+0x90>)
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	60d3      	str	r3, [r2, #12]
	INA226_I2C_Write(INA226_CALIBRATION_REG, (uint16_t)CAL);
 8000fb0:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fb8:	ee17 3a90 	vmov	r3, s15
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	2005      	movs	r0, #5
 8000fc2:	f000 f80d 	bl	8000fe0 <INA226_I2C_Write>
}
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	4103126f 	.word	0x4103126f
 8000fd4:	47000000 	.word	0x47000000
 8000fd8:	3ba7c5ac 	.word	0x3ba7c5ac
 8000fdc:	20000094 	.word	0x20000094

08000fe0 <INA226_I2C_Write>:
}

/*	*/

void INA226_I2C_Write(uint8_t pByte, uint16_t Data)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af04      	add	r7, sp, #16
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	460a      	mov	r2, r1
 8000fea:	71fb      	strb	r3, [r7, #7]
 8000fec:	4613      	mov	r3, r2
 8000fee:	80bb      	strh	r3, [r7, #4]
	uint8_t reg[2];
	
	reg[0] = (Data & 0xFF00) >> 8;
 8000ff0:	88bb      	ldrh	r3, [r7, #4]
 8000ff2:	0a1b      	lsrs	r3, r3, #8
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	733b      	strb	r3, [r7, #12]
	reg[1] =  Data & 0xFF;
 8000ffa:	88bb      	ldrh	r3, [r7, #4]
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	737b      	strb	r3, [r7, #13]
	
	HAL_I2C_Mem_Write(&hi2c2, INA226_ADDRESS << 1, pByte, 1, reg, 2, 100);
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	b29a      	uxth	r2, r3
 8001004:	2364      	movs	r3, #100	@ 0x64
 8001006:	9302      	str	r3, [sp, #8]
 8001008:	2302      	movs	r3, #2
 800100a:	9301      	str	r3, [sp, #4]
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	2301      	movs	r3, #1
 8001014:	2180      	movs	r1, #128	@ 0x80
 8001016:	4803      	ldr	r0, [pc, #12]	@ (8001024 <INA226_I2C_Write+0x44>)
 8001018:	f002 fa32 	bl	8003480 <HAL_I2C_Mem_Write>
	
}
 800101c:	bf00      	nop
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	2000013c 	.word	0x2000013c

08001028 <INA226_I2C_Read>:

void INA226_I2C_Read(uint8_t pByte, uint16_t* pData)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af04      	add	r7, sp, #16
 800102e:	4603      	mov	r3, r0
 8001030:	6039      	str	r1, [r7, #0]
 8001032:	71fb      	strb	r3, [r7, #7]
	uint8_t reg[2];

	HAL_I2C_Mem_Read(&hi2c2, INA226_ADDRESS << 1, pByte, 1, reg, 2, 100);
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	b29a      	uxth	r2, r3
 8001038:	2364      	movs	r3, #100	@ 0x64
 800103a:	9302      	str	r3, [sp, #8]
 800103c:	2302      	movs	r3, #2
 800103e:	9301      	str	r3, [sp, #4]
 8001040:	f107 030c 	add.w	r3, r7, #12
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	2301      	movs	r3, #1
 8001048:	2180      	movs	r1, #128	@ 0x80
 800104a:	4809      	ldr	r0, [pc, #36]	@ (8001070 <INA226_I2C_Read+0x48>)
 800104c:	f002 fb2c 	bl	80036a8 <HAL_I2C_Mem_Read>
	*pData = (reg[0] << 8) | reg[1];
 8001050:	7b3b      	ldrb	r3, [r7, #12]
 8001052:	b21b      	sxth	r3, r3
 8001054:	021b      	lsls	r3, r3, #8
 8001056:	b21a      	sxth	r2, r3
 8001058:	7b7b      	ldrb	r3, [r7, #13]
 800105a:	b21b      	sxth	r3, r3
 800105c:	4313      	orrs	r3, r2
 800105e:	b21b      	sxth	r3, r3
 8001060:	b29a      	uxth	r2, r3
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	801a      	strh	r2, [r3, #0]
	
}
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	2000013c 	.word	0x2000013c

08001074 <bno055_init>:
  * @param  hi2c: Pointer to I2C handle
  * @param  devAddress: I2C device address
  * @retval true if success, false otherwise
  */
bool bno055_init(bno055_t* sensor, I2C_HandleTypeDef* hi2c, uint16_t devAddress)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	4613      	mov	r3, r2
 8001080:	80fb      	strh	r3, [r7, #6]
    if (sensor == NULL || hi2c == NULL) return false;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d002      	beq.n	800108e <bno055_init+0x1a>
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d101      	bne.n	8001092 <bno055_init+0x1e>
 800108e:	2300      	movs	r3, #0
 8001090:	e053      	b.n	800113a <bno055_init+0xc6>
    
    sensor->hi2c = hi2c;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	68ba      	ldr	r2, [r7, #8]
 8001096:	601a      	str	r2, [r3, #0]
    sensor->device_address = devAddress << 1; // HAL uses 8-bit addresses
 8001098:	88fb      	ldrh	r3, [r7, #6]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	b29a      	uxth	r2, r3
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	809a      	strh	r2, [r3, #4]
    
    // Check chip ID
    uint8_t id;
    if (!bno055_getChipID(sensor, &id)) {
 80010a2:	f107 0317 	add.w	r3, r7, #23
 80010a6:	4619      	mov	r1, r3
 80010a8:	68f8      	ldr	r0, [r7, #12]
 80010aa:	f000 f884 	bl	80011b6 <bno055_getChipID>
 80010ae:	4603      	mov	r3, r0
 80010b0:	f083 0301 	eor.w	r3, r3, #1
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <bno055_init+0x4a>
        return false;
 80010ba:	2300      	movs	r3, #0
 80010bc:	e03d      	b.n	800113a <bno055_init+0xc6>
    }
    
    if (id != BNO055_ID) {
 80010be:	7dfb      	ldrb	r3, [r7, #23]
 80010c0:	2ba0      	cmp	r3, #160	@ 0xa0
 80010c2:	d001      	beq.n	80010c8 <bno055_init+0x54>
        return false;
 80010c4:	2300      	movs	r3, #0
 80010c6:	e038      	b.n	800113a <bno055_init+0xc6>
    }
    
    // Reset the device
    if (!bno055_reset(sensor)) {
 80010c8:	68f8      	ldr	r0, [r7, #12]
 80010ca:	f000 fa89 	bl	80015e0 <bno055_reset>
 80010ce:	4603      	mov	r3, r0
 80010d0:	f083 0301 	eor.w	r3, r3, #1
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <bno055_init+0x6a>
        return false;
 80010da:	2300      	movs	r3, #0
 80010dc:	e02d      	b.n	800113a <bno055_init+0xc6>
    }
    
    // Wait for reset to complete
    HAL_Delay(650);
 80010de:	f240 208a 	movw	r0, #650	@ 0x28a
 80010e2:	f001 fdd1 	bl	8002c88 <HAL_Delay>
    
    // Set to normal power mode
    if (!bno055_setPowerMode(sensor, BNO055_POWER_MODE_NORMAL)) {
 80010e6:	2100      	movs	r1, #0
 80010e8:	68f8      	ldr	r0, [r7, #12]
 80010ea:	f000 f84e 	bl	800118a <bno055_setPowerMode>
 80010ee:	4603      	mov	r3, r0
 80010f0:	f083 0301 	eor.w	r3, r3, #1
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <bno055_init+0x8a>
        return false;
 80010fa:	2300      	movs	r3, #0
 80010fc:	e01d      	b.n	800113a <bno055_init+0xc6>
    }
    
    HAL_Delay(10);
 80010fe:	200a      	movs	r0, #10
 8001100:	f001 fdc2 	bl	8002c88 <HAL_Delay>
    
    // Get revision info
    if (!bno055_getRevInfo(sensor)) {
 8001104:	68f8      	ldr	r0, [r7, #12]
 8001106:	f000 f879 	bl	80011fc <bno055_getRevInfo>
 800110a:	4603      	mov	r3, r0
 800110c:	f083 0301 	eor.w	r3, r3, #1
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <bno055_init+0xa6>
        return false;
 8001116:	2300      	movs	r3, #0
 8001118:	e00f      	b.n	800113a <bno055_init+0xc6>
    }
    
    // Set operation mode to NDOF
    if (!bno055_setOperationMode(sensor, OPERATION_MODE_NDOF)) {
 800111a:	210c      	movs	r1, #12
 800111c:	68f8      	ldr	r0, [r7, #12]
 800111e:	f000 f810 	bl	8001142 <bno055_setOperationMode>
 8001122:	4603      	mov	r3, r0
 8001124:	f083 0301 	eor.w	r3, r3, #1
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <bno055_init+0xbe>
        return false;
 800112e:	2300      	movs	r3, #0
 8001130:	e003      	b.n	800113a <bno055_init+0xc6>
    }
    
    HAL_Delay(20);
 8001132:	2014      	movs	r0, #20
 8001134:	f001 fda8 	bl	8002c88 <HAL_Delay>
    
    return true;
 8001138:	2301      	movs	r3, #1
}
 800113a:	4618      	mov	r0, r3
 800113c:	3718      	adds	r7, #24
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <bno055_setOperationMode>:
  * @param  sensor: Pointer to BNO055 structure
  * @param  mode: Operation mode
  * @retval true if success, false otherwise
  */
bool bno055_setOperationMode(bno055_t* sensor, bno055_opmode_t mode)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
 800114a:	460b      	mov	r3, r1
 800114c:	70fb      	strb	r3, [r7, #3]
    if (sensor == NULL) return false;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d101      	bne.n	8001158 <bno055_setOperationMode+0x16>
 8001154:	2300      	movs	r3, #0
 8001156:	e014      	b.n	8001182 <bno055_setOperationMode+0x40>
    
    sensor->mode = mode;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	78fa      	ldrb	r2, [r7, #3]
 800115c:	719a      	strb	r2, [r3, #6]
    if (!bno055_writeRegister(sensor, BNO055_OPR_MODE_ADDR, mode)) {
 800115e:	78fb      	ldrb	r3, [r7, #3]
 8001160:	461a      	mov	r2, r3
 8001162:	213d      	movs	r1, #61	@ 0x3d
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f000 fa4e 	bl	8001606 <bno055_writeRegister>
 800116a:	4603      	mov	r3, r0
 800116c:	f083 0301 	eor.w	r3, r3, #1
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <bno055_setOperationMode+0x38>
        return false;
 8001176:	2300      	movs	r3, #0
 8001178:	e003      	b.n	8001182 <bno055_setOperationMode+0x40>
    }
    
    HAL_Delay(30);
 800117a:	201e      	movs	r0, #30
 800117c:	f001 fd84 	bl	8002c88 <HAL_Delay>
    return true;
 8001180:	2301      	movs	r3, #1
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <bno055_setPowerMode>:
  * @param  sensor: Pointer to BNO055 structure
  * @param  powermode: Power mode
  * @retval true if success, false otherwise
  */
bool bno055_setPowerMode(bno055_t* sensor, bno055_powermode_t powermode)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
 8001192:	460b      	mov	r3, r1
 8001194:	70fb      	strb	r3, [r7, #3]
    if (sensor == NULL) return false;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d101      	bne.n	80011a0 <bno055_setPowerMode+0x16>
 800119c:	2300      	movs	r3, #0
 800119e:	e006      	b.n	80011ae <bno055_setPowerMode+0x24>
    
    return bno055_writeRegister(sensor, BNO055_PWR_MODE_ADDR, powermode);
 80011a0:	78fb      	ldrb	r3, [r7, #3]
 80011a2:	461a      	mov	r2, r3
 80011a4:	213e      	movs	r1, #62	@ 0x3e
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f000 fa2d 	bl	8001606 <bno055_writeRegister>
 80011ac:	4603      	mov	r3, r0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <bno055_getChipID>:
  * @param  sensor: Pointer to BNO055 structure
  * @param  id: Pointer to store chip ID
  * @retval true if success, false otherwise
  */
bool bno055_getChipID(bno055_t* sensor, uint8_t* id)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
 80011be:	6039      	str	r1, [r7, #0]
    if (sensor == NULL || id == NULL) return false;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d002      	beq.n	80011cc <bno055_getChipID+0x16>
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d101      	bne.n	80011d0 <bno055_getChipID+0x1a>
 80011cc:	2300      	movs	r3, #0
 80011ce:	e011      	b.n	80011f4 <bno055_getChipID+0x3e>
    
    if (!bno055_readRegister(sensor, BNO055_CHIP_ID_ADDR, id)) {
 80011d0:	683a      	ldr	r2, [r7, #0]
 80011d2:	2100      	movs	r1, #0
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f000 fa3f 	bl	8001658 <bno055_readRegister>
 80011da:	4603      	mov	r3, r0
 80011dc:	f083 0301 	eor.w	r3, r3, #1
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <bno055_getChipID+0x34>
        return false;
 80011e6:	2300      	movs	r3, #0
 80011e8:	e004      	b.n	80011f4 <bno055_getChipID+0x3e>
    }
    
    sensor->chip_id = *id;
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	781a      	ldrb	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	71da      	strb	r2, [r3, #7]
    return true;
 80011f2:	2301      	movs	r3, #1
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <bno055_getRevInfo>:
  * @brief  Get revision information
  * @param  sensor: Pointer to BNO055 structure
  * @retval true if success, false otherwise
  */
bool bno055_getRevInfo(bno055_t* sensor)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
    if (sensor == NULL) return false;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <bno055_getRevInfo+0x12>
 800120a:	2300      	movs	r3, #0
 800120c:	e065      	b.n	80012da <bno055_getRevInfo+0xde>
    
    uint8_t a, b;
    
    if (!bno055_readRegister(sensor, BNO055_ACCEL_REV_ID_ADDR, &sensor->accel_rev_id)) {
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	3308      	adds	r3, #8
 8001212:	461a      	mov	r2, r3
 8001214:	2101      	movs	r1, #1
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f000 fa1e 	bl	8001658 <bno055_readRegister>
 800121c:	4603      	mov	r3, r0
 800121e:	f083 0301 	eor.w	r3, r3, #1
 8001222:	b2db      	uxtb	r3, r3
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <bno055_getRevInfo+0x30>
        return false;
 8001228:	2300      	movs	r3, #0
 800122a:	e056      	b.n	80012da <bno055_getRevInfo+0xde>
    }
    
    if (!bno055_readRegister(sensor, BNO055_MAG_REV_ID_ADDR, &sensor->mag_rev_id)) {
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3309      	adds	r3, #9
 8001230:	461a      	mov	r2, r3
 8001232:	2102      	movs	r1, #2
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f000 fa0f 	bl	8001658 <bno055_readRegister>
 800123a:	4603      	mov	r3, r0
 800123c:	f083 0301 	eor.w	r3, r3, #1
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <bno055_getRevInfo+0x4e>
        return false;
 8001246:	2300      	movs	r3, #0
 8001248:	e047      	b.n	80012da <bno055_getRevInfo+0xde>
    }
    
    if (!bno055_readRegister(sensor, BNO055_GYRO_REV_ID_ADDR, &sensor->gyro_rev_id)) {
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	330a      	adds	r3, #10
 800124e:	461a      	mov	r2, r3
 8001250:	2103      	movs	r1, #3
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f000 fa00 	bl	8001658 <bno055_readRegister>
 8001258:	4603      	mov	r3, r0
 800125a:	f083 0301 	eor.w	r3, r3, #1
 800125e:	b2db      	uxtb	r3, r3
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <bno055_getRevInfo+0x6c>
        return false;
 8001264:	2300      	movs	r3, #0
 8001266:	e038      	b.n	80012da <bno055_getRevInfo+0xde>
    }
    
    if (!bno055_readRegister(sensor, BNO055_BL_REV_ID_ADDR, &sensor->bl_rev_id)) {
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	330e      	adds	r3, #14
 800126c:	461a      	mov	r2, r3
 800126e:	2106      	movs	r1, #6
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f000 f9f1 	bl	8001658 <bno055_readRegister>
 8001276:	4603      	mov	r3, r0
 8001278:	f083 0301 	eor.w	r3, r3, #1
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <bno055_getRevInfo+0x8a>
        return false;
 8001282:	2300      	movs	r3, #0
 8001284:	e029      	b.n	80012da <bno055_getRevInfo+0xde>
    }
    
    if (!bno055_readRegister(sensor, BNO055_SW_REV_ID_LSB_ADDR, &a)) {
 8001286:	f107 030f 	add.w	r3, r7, #15
 800128a:	461a      	mov	r2, r3
 800128c:	2104      	movs	r1, #4
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f000 f9e2 	bl	8001658 <bno055_readRegister>
 8001294:	4603      	mov	r3, r0
 8001296:	f083 0301 	eor.w	r3, r3, #1
 800129a:	b2db      	uxtb	r3, r3
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <bno055_getRevInfo+0xa8>
        return false;
 80012a0:	2300      	movs	r3, #0
 80012a2:	e01a      	b.n	80012da <bno055_getRevInfo+0xde>
    }
    
    if (!bno055_readRegister(sensor, BNO055_SW_REV_ID_MSB_ADDR, &b)) {
 80012a4:	f107 030e 	add.w	r3, r7, #14
 80012a8:	461a      	mov	r2, r3
 80012aa:	2105      	movs	r1, #5
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f000 f9d3 	bl	8001658 <bno055_readRegister>
 80012b2:	4603      	mov	r3, r0
 80012b4:	f083 0301 	eor.w	r3, r3, #1
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <bno055_getRevInfo+0xc6>
        return false;
 80012be:	2300      	movs	r3, #0
 80012c0:	e00b      	b.n	80012da <bno055_getRevInfo+0xde>
    }
    
    sensor->sw_rev_id = (((uint16_t)b) << 8) | ((uint16_t)a);
 80012c2:	7bbb      	ldrb	r3, [r7, #14]
 80012c4:	b21b      	sxth	r3, r3
 80012c6:	021b      	lsls	r3, r3, #8
 80012c8:	b21a      	sxth	r2, r3
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	b21b      	sxth	r3, r3
 80012ce:	4313      	orrs	r3, r2
 80012d0:	b21b      	sxth	r3, r3
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	819a      	strh	r2, [r3, #12]
    
    return true;
 80012d8:	2301      	movs	r3, #1
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
	...

080012e4 <bno055_getVector>:
  * @param  vector_type: Type of vector to read
  * @param  vector: Pointer to store vector data
  * @retval true if success, false otherwise
  */
bool bno055_getVector(bno055_t* sensor, uint8_t vector_type, bno055_vector_t* vector)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	460b      	mov	r3, r1
 80012ee:	607a      	str	r2, [r7, #4]
 80012f0:	72fb      	strb	r3, [r7, #11]
    if (sensor == NULL || vector == NULL) return false;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d002      	beq.n	80012fe <bno055_getVector+0x1a>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d101      	bne.n	8001302 <bno055_getVector+0x1e>
 80012fe:	2300      	movs	r3, #0
 8001300:	e165      	b.n	80015ce <bno055_getVector+0x2ea>
    
    uint8_t buffer[6];
    if (!bno055_readData(sensor, vector_type, buffer, 6)) {
 8001302:	f107 0214 	add.w	r2, r7, #20
 8001306:	7af9      	ldrb	r1, [r7, #11]
 8001308:	2306      	movs	r3, #6
 800130a:	68f8      	ldr	r0, [r7, #12]
 800130c:	f000 f9cf 	bl	80016ae <bno055_readData>
 8001310:	4603      	mov	r3, r0
 8001312:	f083 0301 	eor.w	r3, r3, #1
 8001316:	b2db      	uxtb	r3, r3
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <bno055_getVector+0x3c>
        return false;
 800131c:	2300      	movs	r3, #0
 800131e:	e156      	b.n	80015ce <bno055_getVector+0x2ea>
    }
    
    int16_t x = ((int16_t)buffer[1] << 8) | buffer[0];
 8001320:	7d7b      	ldrb	r3, [r7, #21]
 8001322:	b21b      	sxth	r3, r3
 8001324:	021b      	lsls	r3, r3, #8
 8001326:	b21a      	sxth	r2, r3
 8001328:	7d3b      	ldrb	r3, [r7, #20]
 800132a:	b21b      	sxth	r3, r3
 800132c:	4313      	orrs	r3, r2
 800132e:	83fb      	strh	r3, [r7, #30]
    int16_t y = ((int16_t)buffer[3] << 8) | buffer[2];
 8001330:	7dfb      	ldrb	r3, [r7, #23]
 8001332:	b21b      	sxth	r3, r3
 8001334:	021b      	lsls	r3, r3, #8
 8001336:	b21a      	sxth	r2, r3
 8001338:	7dbb      	ldrb	r3, [r7, #22]
 800133a:	b21b      	sxth	r3, r3
 800133c:	4313      	orrs	r3, r2
 800133e:	83bb      	strh	r3, [r7, #28]
    int16_t z = ((int16_t)buffer[5] << 8) | buffer[4];
 8001340:	7e7b      	ldrb	r3, [r7, #25]
 8001342:	b21b      	sxth	r3, r3
 8001344:	021b      	lsls	r3, r3, #8
 8001346:	b21a      	sxth	r2, r3
 8001348:	7e3b      	ldrb	r3, [r7, #24]
 800134a:	b21b      	sxth	r3, r3
 800134c:	4313      	orrs	r3, r2
 800134e:	837b      	strh	r3, [r7, #26]
    
    /* Convert the value to appropriate range (section 3.6.4) */
    /* and assign the value to the Vector type */
    switch(vector_type) {
 8001350:	7afb      	ldrb	r3, [r7, #11]
 8001352:	3b08      	subs	r3, #8
 8001354:	2b26      	cmp	r3, #38	@ 0x26
 8001356:	f200 8139 	bhi.w	80015cc <bno055_getVector+0x2e8>
 800135a:	a201      	add	r2, pc, #4	@ (adr r2, 8001360 <bno055_getVector+0x7c>)
 800135c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001360:	08001559 	.word	0x08001559
 8001364:	080015cd 	.word	0x080015cd
 8001368:	080015cd 	.word	0x080015cd
 800136c:	080015cd 	.word	0x080015cd
 8001370:	080015cd 	.word	0x080015cd
 8001374:	080015cd 	.word	0x080015cd
 8001378:	080013fd 	.word	0x080013fd
 800137c:	080015cd 	.word	0x080015cd
 8001380:	080015cd 	.word	0x080015cd
 8001384:	080015cd 	.word	0x080015cd
 8001388:	080015cd 	.word	0x080015cd
 800138c:	080015cd 	.word	0x080015cd
 8001390:	08001471 	.word	0x08001471
 8001394:	080015cd 	.word	0x080015cd
 8001398:	080015cd 	.word	0x080015cd
 800139c:	080015cd 	.word	0x080015cd
 80013a0:	080015cd 	.word	0x080015cd
 80013a4:	080015cd 	.word	0x080015cd
 80013a8:	080014e5 	.word	0x080014e5
 80013ac:	080015cd 	.word	0x080015cd
 80013b0:	080015cd 	.word	0x080015cd
 80013b4:	080015cd 	.word	0x080015cd
 80013b8:	080015cd 	.word	0x080015cd
 80013bc:	080015cd 	.word	0x080015cd
 80013c0:	080015cd 	.word	0x080015cd
 80013c4:	080015cd 	.word	0x080015cd
 80013c8:	080015cd 	.word	0x080015cd
 80013cc:	080015cd 	.word	0x080015cd
 80013d0:	080015cd 	.word	0x080015cd
 80013d4:	080015cd 	.word	0x080015cd
 80013d8:	080015cd 	.word	0x080015cd
 80013dc:	080015cd 	.word	0x080015cd
 80013e0:	08001559 	.word	0x08001559
 80013e4:	080015cd 	.word	0x080015cd
 80013e8:	080015cd 	.word	0x080015cd
 80013ec:	080015cd 	.word	0x080015cd
 80013f0:	080015cd 	.word	0x080015cd
 80013f4:	080015cd 	.word	0x080015cd
 80013f8:	08001559 	.word	0x08001559
        case VECTOR_MAGNETOMETER:
            /* 1uT = 16 LSB */
            vector->x = ((double)x)/16.0;
 80013fc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff f8af 	bl	8000564 <__aeabi_i2d>
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	4b73      	ldr	r3, [pc, #460]	@ (80015d8 <bno055_getVector+0x2f4>)
 800140c:	f7ff fa3e 	bl	800088c <__aeabi_ddiv>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	4610      	mov	r0, r2
 8001416:	4619      	mov	r1, r3
 8001418:	f7ff fb20 	bl	8000a5c <__aeabi_d2f>
 800141c:	4602      	mov	r2, r0
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	601a      	str	r2, [r3, #0]
            vector->y = ((double)y)/16.0;
 8001422:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff f89c 	bl	8000564 <__aeabi_i2d>
 800142c:	f04f 0200 	mov.w	r2, #0
 8001430:	4b69      	ldr	r3, [pc, #420]	@ (80015d8 <bno055_getVector+0x2f4>)
 8001432:	f7ff fa2b 	bl	800088c <__aeabi_ddiv>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	4610      	mov	r0, r2
 800143c:	4619      	mov	r1, r3
 800143e:	f7ff fb0d 	bl	8000a5c <__aeabi_d2f>
 8001442:	4602      	mov	r2, r0
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	605a      	str	r2, [r3, #4]
            vector->z = ((double)z)/16.0;
 8001448:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff f889 	bl	8000564 <__aeabi_i2d>
 8001452:	f04f 0200 	mov.w	r2, #0
 8001456:	4b60      	ldr	r3, [pc, #384]	@ (80015d8 <bno055_getVector+0x2f4>)
 8001458:	f7ff fa18 	bl	800088c <__aeabi_ddiv>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	f7ff fafa 	bl	8000a5c <__aeabi_d2f>
 8001468:	4602      	mov	r2, r0
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	609a      	str	r2, [r3, #8]
            break;
 800146e:	e0ad      	b.n	80015cc <bno055_getVector+0x2e8>
        case VECTOR_GYROSCOPE:
            /* 1dps = 16 LSB */
            vector->x = ((double)x)/16.0;
 8001470:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff f875 	bl	8000564 <__aeabi_i2d>
 800147a:	f04f 0200 	mov.w	r2, #0
 800147e:	4b56      	ldr	r3, [pc, #344]	@ (80015d8 <bno055_getVector+0x2f4>)
 8001480:	f7ff fa04 	bl	800088c <__aeabi_ddiv>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	4610      	mov	r0, r2
 800148a:	4619      	mov	r1, r3
 800148c:	f7ff fae6 	bl	8000a5c <__aeabi_d2f>
 8001490:	4602      	mov	r2, r0
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	601a      	str	r2, [r3, #0]
            vector->y = ((double)y)/16.0;
 8001496:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff f862 	bl	8000564 <__aeabi_i2d>
 80014a0:	f04f 0200 	mov.w	r2, #0
 80014a4:	4b4c      	ldr	r3, [pc, #304]	@ (80015d8 <bno055_getVector+0x2f4>)
 80014a6:	f7ff f9f1 	bl	800088c <__aeabi_ddiv>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	4610      	mov	r0, r2
 80014b0:	4619      	mov	r1, r3
 80014b2:	f7ff fad3 	bl	8000a5c <__aeabi_d2f>
 80014b6:	4602      	mov	r2, r0
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	605a      	str	r2, [r3, #4]
            vector->z = ((double)z)/16.0;
 80014bc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff f84f 	bl	8000564 <__aeabi_i2d>
 80014c6:	f04f 0200 	mov.w	r2, #0
 80014ca:	4b43      	ldr	r3, [pc, #268]	@ (80015d8 <bno055_getVector+0x2f4>)
 80014cc:	f7ff f9de 	bl	800088c <__aeabi_ddiv>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4610      	mov	r0, r2
 80014d6:	4619      	mov	r1, r3
 80014d8:	f7ff fac0 	bl	8000a5c <__aeabi_d2f>
 80014dc:	4602      	mov	r2, r0
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	609a      	str	r2, [r3, #8]
            break;
 80014e2:	e073      	b.n	80015cc <bno055_getVector+0x2e8>
        case VECTOR_EULER:
            /* 1 degree = 16 LSB */
            vector->x = ((double)x)/16.0;
 80014e4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff f83b 	bl	8000564 <__aeabi_i2d>
 80014ee:	f04f 0200 	mov.w	r2, #0
 80014f2:	4b39      	ldr	r3, [pc, #228]	@ (80015d8 <bno055_getVector+0x2f4>)
 80014f4:	f7ff f9ca 	bl	800088c <__aeabi_ddiv>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	4610      	mov	r0, r2
 80014fe:	4619      	mov	r1, r3
 8001500:	f7ff faac 	bl	8000a5c <__aeabi_d2f>
 8001504:	4602      	mov	r2, r0
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	601a      	str	r2, [r3, #0]
            vector->y = ((double)y)/16.0;
 800150a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff f828 	bl	8000564 <__aeabi_i2d>
 8001514:	f04f 0200 	mov.w	r2, #0
 8001518:	4b2f      	ldr	r3, [pc, #188]	@ (80015d8 <bno055_getVector+0x2f4>)
 800151a:	f7ff f9b7 	bl	800088c <__aeabi_ddiv>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	4610      	mov	r0, r2
 8001524:	4619      	mov	r1, r3
 8001526:	f7ff fa99 	bl	8000a5c <__aeabi_d2f>
 800152a:	4602      	mov	r2, r0
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	605a      	str	r2, [r3, #4]
            vector->z = ((double)z)/16.0;
 8001530:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff f815 	bl	8000564 <__aeabi_i2d>
 800153a:	f04f 0200 	mov.w	r2, #0
 800153e:	4b26      	ldr	r3, [pc, #152]	@ (80015d8 <bno055_getVector+0x2f4>)
 8001540:	f7ff f9a4 	bl	800088c <__aeabi_ddiv>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4610      	mov	r0, r2
 800154a:	4619      	mov	r1, r3
 800154c:	f7ff fa86 	bl	8000a5c <__aeabi_d2f>
 8001550:	4602      	mov	r2, r0
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	609a      	str	r2, [r3, #8]
            break;
 8001556:	e039      	b.n	80015cc <bno055_getVector+0x2e8>
        case VECTOR_ACCELEROMETER:
        case VECTOR_LINEARACCEL:
        case VECTOR_GRAVITY:
            /* 1m/s^2 = 100 LSB */
            vector->x = ((double)x)/100.0;
 8001558:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff f801 	bl	8000564 <__aeabi_i2d>
 8001562:	f04f 0200 	mov.w	r2, #0
 8001566:	4b1d      	ldr	r3, [pc, #116]	@ (80015dc <bno055_getVector+0x2f8>)
 8001568:	f7ff f990 	bl	800088c <__aeabi_ddiv>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	4610      	mov	r0, r2
 8001572:	4619      	mov	r1, r3
 8001574:	f7ff fa72 	bl	8000a5c <__aeabi_d2f>
 8001578:	4602      	mov	r2, r0
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	601a      	str	r2, [r3, #0]
            vector->y = ((double)y)/100.0;
 800157e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001582:	4618      	mov	r0, r3
 8001584:	f7fe ffee 	bl	8000564 <__aeabi_i2d>
 8001588:	f04f 0200 	mov.w	r2, #0
 800158c:	4b13      	ldr	r3, [pc, #76]	@ (80015dc <bno055_getVector+0x2f8>)
 800158e:	f7ff f97d 	bl	800088c <__aeabi_ddiv>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	4610      	mov	r0, r2
 8001598:	4619      	mov	r1, r3
 800159a:	f7ff fa5f 	bl	8000a5c <__aeabi_d2f>
 800159e:	4602      	mov	r2, r0
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	605a      	str	r2, [r3, #4]
            vector->z = ((double)z)/100.0;
 80015a4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7fe ffdb 	bl	8000564 <__aeabi_i2d>
 80015ae:	f04f 0200 	mov.w	r2, #0
 80015b2:	4b0a      	ldr	r3, [pc, #40]	@ (80015dc <bno055_getVector+0x2f8>)
 80015b4:	f7ff f96a 	bl	800088c <__aeabi_ddiv>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	4610      	mov	r0, r2
 80015be:	4619      	mov	r1, r3
 80015c0:	f7ff fa4c 	bl	8000a5c <__aeabi_d2f>
 80015c4:	4602      	mov	r2, r0
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	609a      	str	r2, [r3, #8]
            break;
 80015ca:	bf00      	nop
    }
    
    return true;
 80015cc:	2301      	movs	r3, #1
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3720      	adds	r7, #32
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40300000 	.word	0x40300000
 80015dc:	40590000 	.word	0x40590000

080015e0 <bno055_reset>:
  * @brief  Reset BNO055
  * @param  sensor: Pointer to BNO055 structure
  * @retval true if success, false otherwise
  */
bool bno055_reset(bno055_t* sensor)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
    if (sensor == NULL) return false;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <bno055_reset+0x12>
 80015ee:	2300      	movs	r3, #0
 80015f0:	e005      	b.n	80015fe <bno055_reset+0x1e>
    
    return bno055_writeRegister(sensor, BNO055_SYS_RST_ADDR, 0x20);
 80015f2:	2220      	movs	r2, #32
 80015f4:	213f      	movs	r1, #63	@ 0x3f
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f000 f805 	bl	8001606 <bno055_writeRegister>
 80015fc:	4603      	mov	r3, r0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <bno055_writeRegister>:
  * @param  reg: Register address
  * @param  value: Value to write
  * @retval true if success, false otherwise
  */
static bool bno055_writeRegister(bno055_t* sensor, uint8_t reg, uint8_t value)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b088      	sub	sp, #32
 800160a:	af04      	add	r7, sp, #16
 800160c:	6078      	str	r0, [r7, #4]
 800160e:	460b      	mov	r3, r1
 8001610:	70fb      	strb	r3, [r7, #3]
 8001612:	4613      	mov	r3, r2
 8001614:	70bb      	strb	r3, [r7, #2]
    if (sensor == NULL) return false;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d101      	bne.n	8001620 <bno055_writeRegister+0x1a>
 800161c:	2300      	movs	r3, #0
 800161e:	e017      	b.n	8001650 <bno055_writeRegister+0x4a>
    
    HAL_StatusTypeDef status = HAL_I2C_Mem_Write(sensor->hi2c, sensor->device_address, 
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6818      	ldr	r0, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	8899      	ldrh	r1, [r3, #4]
 8001628:	78fb      	ldrb	r3, [r7, #3]
 800162a:	b29a      	uxth	r2, r3
 800162c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001630:	9302      	str	r3, [sp, #8]
 8001632:	2301      	movs	r3, #1
 8001634:	9301      	str	r3, [sp, #4]
 8001636:	1cbb      	adds	r3, r7, #2
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	2301      	movs	r3, #1
 800163c:	f001 ff20 	bl	8003480 <HAL_I2C_Mem_Write>
 8001640:	4603      	mov	r3, r0
 8001642:	73fb      	strb	r3, [r7, #15]
                                                 reg, I2C_MEMADD_SIZE_8BIT, 
                                                 &value, 1, HAL_MAX_DELAY);
    return (status == HAL_OK);
 8001644:	7bfb      	ldrb	r3, [r7, #15]
 8001646:	2b00      	cmp	r3, #0
 8001648:	bf0c      	ite	eq
 800164a:	2301      	moveq	r3, #1
 800164c:	2300      	movne	r3, #0
 800164e:	b2db      	uxtb	r3, r3
}
 8001650:	4618      	mov	r0, r3
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <bno055_readRegister>:
  * @param  reg: Register address
  * @param  data: Pointer to store read data
  * @retval true if success, false otherwise
  */
static bool bno055_readRegister(bno055_t* sensor, uint8_t reg, uint8_t* data)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08a      	sub	sp, #40	@ 0x28
 800165c:	af04      	add	r7, sp, #16
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	460b      	mov	r3, r1
 8001662:	607a      	str	r2, [r7, #4]
 8001664:	72fb      	strb	r3, [r7, #11]
    if (sensor == NULL || data == NULL) return false;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d002      	beq.n	8001672 <bno055_readRegister+0x1a>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d101      	bne.n	8001676 <bno055_readRegister+0x1e>
 8001672:	2300      	movs	r3, #0
 8001674:	e017      	b.n	80016a6 <bno055_readRegister+0x4e>
    
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(sensor->hi2c, sensor->device_address, 
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6818      	ldr	r0, [r3, #0]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	8899      	ldrh	r1, [r3, #4]
 800167e:	7afb      	ldrb	r3, [r7, #11]
 8001680:	b29a      	uxth	r2, r3
 8001682:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001686:	9302      	str	r3, [sp, #8]
 8001688:	2301      	movs	r3, #1
 800168a:	9301      	str	r3, [sp, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	2301      	movs	r3, #1
 8001692:	f002 f809 	bl	80036a8 <HAL_I2C_Mem_Read>
 8001696:	4603      	mov	r3, r0
 8001698:	75fb      	strb	r3, [r7, #23]
                                                reg, I2C_MEMADD_SIZE_8BIT, 
                                                data, 1, HAL_MAX_DELAY);
    return (status == HAL_OK);
 800169a:	7dfb      	ldrb	r3, [r7, #23]
 800169c:	2b00      	cmp	r3, #0
 800169e:	bf0c      	ite	eq
 80016a0:	2301      	moveq	r3, #1
 80016a2:	2300      	movne	r3, #0
 80016a4:	b2db      	uxtb	r3, r3
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3718      	adds	r7, #24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <bno055_readData>:
  * @param  buffer: Pointer to store read data
  * @param  len: Number of bytes to read
  * @retval true if success, false otherwise
  */
static bool bno055_readData(bno055_t* sensor, uint8_t reg, uint8_t* buffer, uint8_t len)
{
 80016ae:	b590      	push	{r4, r7, lr}
 80016b0:	b08b      	sub	sp, #44	@ 0x2c
 80016b2:	af04      	add	r7, sp, #16
 80016b4:	60f8      	str	r0, [r7, #12]
 80016b6:	607a      	str	r2, [r7, #4]
 80016b8:	461a      	mov	r2, r3
 80016ba:	460b      	mov	r3, r1
 80016bc:	72fb      	strb	r3, [r7, #11]
 80016be:	4613      	mov	r3, r2
 80016c0:	72bb      	strb	r3, [r7, #10]
    if (sensor == NULL || buffer == NULL) return false;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d002      	beq.n	80016ce <bno055_readData+0x20>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d101      	bne.n	80016d2 <bno055_readData+0x24>
 80016ce:	2300      	movs	r3, #0
 80016d0:	e018      	b.n	8001704 <bno055_readData+0x56>
    
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(sensor->hi2c, sensor->device_address, 
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	6818      	ldr	r0, [r3, #0]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	8899      	ldrh	r1, [r3, #4]
 80016da:	7afb      	ldrb	r3, [r7, #11]
 80016dc:	b29a      	uxth	r2, r3
 80016de:	7abb      	ldrb	r3, [r7, #10]
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80016e6:	9402      	str	r4, [sp, #8]
 80016e8:	9301      	str	r3, [sp, #4]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	9300      	str	r3, [sp, #0]
 80016ee:	2301      	movs	r3, #1
 80016f0:	f001 ffda 	bl	80036a8 <HAL_I2C_Mem_Read>
 80016f4:	4603      	mov	r3, r0
 80016f6:	75fb      	strb	r3, [r7, #23]
                                                reg, I2C_MEMADD_SIZE_8BIT, 
                                                buffer, len, HAL_MAX_DELAY);
    return (status == HAL_OK);
 80016f8:	7dfb      	ldrb	r3, [r7, #23]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	bf0c      	ite	eq
 80016fe:	2301      	moveq	r3, #1
 8001700:	2300      	movne	r3, #0
 8001702:	b2db      	uxtb	r3, r3
}
 8001704:	4618      	mov	r0, r3
 8001706:	371c      	adds	r7, #28
 8001708:	46bd      	mov	sp, r7
 800170a:	bd90      	pop	{r4, r7, pc}

0800170c <Encoder_Update>:
/**
  * @brief  Update encoder position and calculate distance
  * @param  None
  * @retval None
  */
void Encoder_Update(void) {
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
    uint32_t current_tick = HAL_GetTick();
 8001712:	f001 faad 	bl	8002c70 <HAL_GetTick>
 8001716:	60f8      	str	r0, [r7, #12]
    int32_t count = __HAL_TIM_GET_COUNTER(&htim3);
 8001718:	4b30      	ldr	r3, [pc, #192]	@ (80017dc <Encoder_Update+0xd0>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800171e:	60bb      	str	r3, [r7, #8]

    encoder_velocity = count - encoder_last;
 8001720:	4b2f      	ldr	r3, [pc, #188]	@ (80017e0 <Encoder_Update+0xd4>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	68ba      	ldr	r2, [r7, #8]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	4a2e      	ldr	r2, [pc, #184]	@ (80017e4 <Encoder_Update+0xd8>)
 800172a:	6013      	str	r3, [r2, #0]
    encoder_last = count;
 800172c:	4a2c      	ldr	r2, [pc, #176]	@ (80017e0 <Encoder_Update+0xd4>)
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	6013      	str	r3, [r2, #0]

    // Timer sayacı taşması kontrolü
    if (encoder_velocity > 32767)
 8001732:	4b2c      	ldr	r3, [pc, #176]	@ (80017e4 <Encoder_Update+0xd8>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800173a:	db06      	blt.n	800174a <Encoder_Update+0x3e>
        encoder_velocity -= 65536;
 800173c:	4b29      	ldr	r3, [pc, #164]	@ (80017e4 <Encoder_Update+0xd8>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8001744:	4a27      	ldr	r2, [pc, #156]	@ (80017e4 <Encoder_Update+0xd8>)
 8001746:	6013      	str	r3, [r2, #0]
 8001748:	e00a      	b.n	8001760 <Encoder_Update+0x54>
    else if (encoder_velocity < -32767)
 800174a:	4b26      	ldr	r3, [pc, #152]	@ (80017e4 <Encoder_Update+0xd8>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8001752:	dc05      	bgt.n	8001760 <Encoder_Update+0x54>
        encoder_velocity += 65536;
 8001754:	4b23      	ldr	r3, [pc, #140]	@ (80017e4 <Encoder_Update+0xd8>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800175c:	4a21      	ldr	r2, [pc, #132]	@ (80017e4 <Encoder_Update+0xd8>)
 800175e:	6013      	str	r3, [r2, #0]

    // Toplam pozisyona ekle
    encoder_position += encoder_velocity;
 8001760:	4b20      	ldr	r3, [pc, #128]	@ (80017e4 <Encoder_Update+0xd8>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	4b20      	ldr	r3, [pc, #128]	@ (80017e8 <Encoder_Update+0xdc>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4413      	add	r3, r2
 800176a:	4a1f      	ldr	r2, [pc, #124]	@ (80017e8 <Encoder_Update+0xdc>)
 800176c:	6013      	str	r3, [r2, #0]

    // Toplam mesafe (mm olarak)
    encoder_total_distance = encoder_position * encoder_distance_per_pulse;
 800176e:	4b1e      	ldr	r3, [pc, #120]	@ (80017e8 <Encoder_Update+0xdc>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	ee07 3a90 	vmov	s15, r3
 8001776:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800177a:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80017ec <Encoder_Update+0xe0>
 800177e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001782:	4b1b      	ldr	r3, [pc, #108]	@ (80017f0 <Encoder_Update+0xe4>)
 8001784:	edc3 7a00 	vstr	s15, [r3]

    // Anlık hız (mm/s olarak)
    uint32_t delta_time = current_tick - last_tick;
 8001788:	4b1a      	ldr	r3, [pc, #104]	@ (80017f4 <Encoder_Update+0xe8>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	68fa      	ldr	r2, [r7, #12]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	607b      	str	r3, [r7, #4]
    if (delta_time > 0) {
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d01a      	beq.n	80017ce <Encoder_Update+0xc2>
        encoder_speed = (encoder_velocity * encoder_distance_per_pulse * 1000.0f) / delta_time;
 8001798:	4b12      	ldr	r3, [pc, #72]	@ (80017e4 <Encoder_Update+0xd8>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	ee07 3a90 	vmov	s15, r3
 80017a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017a4:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80017ec <Encoder_Update+0xe0>
 80017a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017ac:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80017f8 <Encoder_Update+0xec>
 80017b0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	ee07 3a90 	vmov	s15, r3
 80017ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017c2:	4b0e      	ldr	r3, [pc, #56]	@ (80017fc <Encoder_Update+0xf0>)
 80017c4:	edc3 7a00 	vstr	s15, [r3]
        last_tick = current_tick;
 80017c8:	4a0a      	ldr	r2, [pc, #40]	@ (80017f4 <Encoder_Update+0xe8>)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	6013      	str	r3, [r2, #0]
    }
    
    // MESAFE İÇİN LED KONTROLÜ BURADA ÇAĞRILIYOR
    DistanceLedControl();
 80017ce:	f000 f817 	bl	8001800 <DistanceLedControl>
}
 80017d2:	bf00      	nop
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000190 	.word	0x20000190
 80017e0:	200000a8 	.word	0x200000a8
 80017e4:	200000ac 	.word	0x200000ac
 80017e8:	200000a4 	.word	0x200000a4
 80017ec:	3ce38e39 	.word	0x3ce38e39
 80017f0:	200000b4 	.word	0x200000b4
 80017f4:	200000b8 	.word	0x200000b8
 80017f8:	447a0000 	.word	0x447a0000
 80017fc:	200000b0 	.word	0x200000b0

08001800 <DistanceLedControl>:
  * @brief  Control LEDs based on distance measurement
  * @param  None
  * @retval None
  */
void DistanceLedControl(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
    static uint8_t tunnel_end_alerted = 0;
    static uint8_t direction = 1; // 1: ileri, 0: geri
    static float prev_distance = 0.0f;

    // Yön tespiti (ileri mi gidiyor geri mi)
    if (encoder_total_distance > prev_distance)
 8001804:	4b7d      	ldr	r3, [pc, #500]	@ (80019fc <DistanceLedControl+0x1fc>)
 8001806:	ed93 7a00 	vldr	s14, [r3]
 800180a:	4b7d      	ldr	r3, [pc, #500]	@ (8001a00 <DistanceLedControl+0x200>)
 800180c:	edd3 7a00 	vldr	s15, [r3]
 8001810:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001818:	dd03      	ble.n	8001822 <DistanceLedControl+0x22>
        direction = 1; // ileri
 800181a:	4b7a      	ldr	r3, [pc, #488]	@ (8001a04 <DistanceLedControl+0x204>)
 800181c:	2201      	movs	r2, #1
 800181e:	701a      	strb	r2, [r3, #0]
 8001820:	e00d      	b.n	800183e <DistanceLedControl+0x3e>
    else if (encoder_total_distance < prev_distance)
 8001822:	4b76      	ldr	r3, [pc, #472]	@ (80019fc <DistanceLedControl+0x1fc>)
 8001824:	ed93 7a00 	vldr	s14, [r3]
 8001828:	4b75      	ldr	r3, [pc, #468]	@ (8001a00 <DistanceLedControl+0x200>)
 800182a:	edd3 7a00 	vldr	s15, [r3]
 800182e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001836:	d502      	bpl.n	800183e <DistanceLedControl+0x3e>
        direction = 0; // geri
 8001838:	4b72      	ldr	r3, [pc, #456]	@ (8001a04 <DistanceLedControl+0x204>)
 800183a:	2200      	movs	r2, #0
 800183c:	701a      	strb	r2, [r3, #0]
    prev_distance = encoder_total_distance;
 800183e:	4b6f      	ldr	r3, [pc, #444]	@ (80019fc <DistanceLedControl+0x1fc>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a6f      	ldr	r2, [pc, #444]	@ (8001a00 <DistanceLedControl+0x200>)
 8001844:	6013      	str	r3, [r2, #0]

    // Önce tüm ledleri kapatıyoruz
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // Kırmızı
 8001846:	2200      	movs	r2, #0
 8001848:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800184c:	486e      	ldr	r0, [pc, #440]	@ (8001a08 <DistanceLedControl+0x208>)
 800184e:	f001 fd61 	bl	8003314 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);  // Mavi
 8001852:	2200      	movs	r2, #0
 8001854:	2180      	movs	r1, #128	@ 0x80
 8001856:	486c      	ldr	r0, [pc, #432]	@ (8001a08 <DistanceLedControl+0x208>)
 8001858:	f001 fd5c 	bl	8003314 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);  // Yeşil
 800185c:	2200      	movs	r2, #0
 800185e:	2101      	movs	r1, #1
 8001860:	4869      	ldr	r0, [pc, #420]	@ (8001a08 <DistanceLedControl+0x208>)
 8001862:	f001 fd57 	bl	8003314 <HAL_GPIO_WritePin>

    // Tünel sonuna geldiyse, bütün ledleri kısa süreyle yakıp söndür
    if (!tunnel_end_alerted && encoder_total_distance >= 1860.0f) // 186 metre, mm cinsinden
 8001866:	4b69      	ldr	r3, [pc, #420]	@ (8001a0c <DistanceLedControl+0x20c>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d131      	bne.n	80018d2 <DistanceLedControl+0xd2>
 800186e:	4b63      	ldr	r3, [pc, #396]	@ (80019fc <DistanceLedControl+0x1fc>)
 8001870:	edd3 7a00 	vldr	s15, [r3]
 8001874:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8001a10 <DistanceLedControl+0x210>
 8001878:	eef4 7ac7 	vcmpe.f32	s15, s14
 800187c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001880:	db27      	blt.n	80018d2 <DistanceLedControl+0xd2>
    {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001882:	2201      	movs	r2, #1
 8001884:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001888:	485f      	ldr	r0, [pc, #380]	@ (8001a08 <DistanceLedControl+0x208>)
 800188a:	f001 fd43 	bl	8003314 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800188e:	2201      	movs	r2, #1
 8001890:	2180      	movs	r1, #128	@ 0x80
 8001892:	485d      	ldr	r0, [pc, #372]	@ (8001a08 <DistanceLedControl+0x208>)
 8001894:	f001 fd3e 	bl	8003314 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001898:	2201      	movs	r2, #1
 800189a:	2101      	movs	r1, #1
 800189c:	485a      	ldr	r0, [pc, #360]	@ (8001a08 <DistanceLedControl+0x208>)
 800189e:	f001 fd39 	bl	8003314 <HAL_GPIO_WritePin>
        HAL_Delay(1000); // 1 saniye yakıp söndür
 80018a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018a6:	f001 f9ef 	bl	8002c88 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80018aa:	2200      	movs	r2, #0
 80018ac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80018b0:	4855      	ldr	r0, [pc, #340]	@ (8001a08 <DistanceLedControl+0x208>)
 80018b2:	f001 fd2f 	bl	8003314 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2180      	movs	r1, #128	@ 0x80
 80018ba:	4853      	ldr	r0, [pc, #332]	@ (8001a08 <DistanceLedControl+0x208>)
 80018bc:	f001 fd2a 	bl	8003314 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80018c0:	2200      	movs	r2, #0
 80018c2:	2101      	movs	r1, #1
 80018c4:	4850      	ldr	r0, [pc, #320]	@ (8001a08 <DistanceLedControl+0x208>)
 80018c6:	f001 fd25 	bl	8003314 <HAL_GPIO_WritePin>
        tunnel_end_alerted = 1;
 80018ca:	4b50      	ldr	r3, [pc, #320]	@ (8001a0c <DistanceLedControl+0x20c>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	701a      	strb	r2, [r3, #0]
 80018d0:	e092      	b.n	80019f8 <DistanceLedControl+0x1f8>
    }
    // Normal aralık kontrolü:
    else if (encoder_total_distance < 1860.0f)
 80018d2:	4b4a      	ldr	r3, [pc, #296]	@ (80019fc <DistanceLedControl+0x1fc>)
 80018d4:	edd3 7a00 	vldr	s15, [r3]
 80018d8:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8001a10 <DistanceLedControl+0x210>
 80018dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e4:	d400      	bmi.n	80018e8 <DistanceLedControl+0xe8>
            else if (encoder_total_distance <= 1200.0f && encoder_total_distance > 3000.0f)
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // Yeşil
            // değilse ledler kapalı
        }
    }
}
 80018e6:	e087      	b.n	80019f8 <DistanceLedControl+0x1f8>
        tunnel_end_alerted = 0; // geri dönerken tekrar yanabilmesi için resetle
 80018e8:	4b48      	ldr	r3, [pc, #288]	@ (8001a0c <DistanceLedControl+0x20c>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	701a      	strb	r2, [r3, #0]
        if (direction) // ileri gidiyor
 80018ee:	4b45      	ldr	r3, [pc, #276]	@ (8001a04 <DistanceLedControl+0x204>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d031      	beq.n	800195a <DistanceLedControl+0x15a>
            if (encoder_total_distance >= 1200.0f)
 80018f6:	4b41      	ldr	r3, [pc, #260]	@ (80019fc <DistanceLedControl+0x1fc>)
 80018f8:	edd3 7a00 	vldr	s15, [r3]
 80018fc:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8001a14 <DistanceLedControl+0x214>
 8001900:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001908:	db05      	blt.n	8001916 <DistanceLedControl+0x116>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // Yeşil 5 m ve üstü
 800190a:	2201      	movs	r2, #1
 800190c:	2101      	movs	r1, #1
 800190e:	483e      	ldr	r0, [pc, #248]	@ (8001a08 <DistanceLedControl+0x208>)
 8001910:	f001 fd00 	bl	8003314 <HAL_GPIO_WritePin>
}
 8001914:	e070      	b.n	80019f8 <DistanceLedControl+0x1f8>
            else if (encoder_total_distance >= 600.0f)
 8001916:	4b39      	ldr	r3, [pc, #228]	@ (80019fc <DistanceLedControl+0x1fc>)
 8001918:	edd3 7a00 	vldr	s15, [r3]
 800191c:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8001a18 <DistanceLedControl+0x218>
 8001920:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001928:	db05      	blt.n	8001936 <DistanceLedControl+0x136>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET); // Mavi 3 m ve üstü
 800192a:	2201      	movs	r2, #1
 800192c:	2180      	movs	r1, #128	@ 0x80
 800192e:	4836      	ldr	r0, [pc, #216]	@ (8001a08 <DistanceLedControl+0x208>)
 8001930:	f001 fcf0 	bl	8003314 <HAL_GPIO_WritePin>
}
 8001934:	e060      	b.n	80019f8 <DistanceLedControl+0x1f8>
            else if (encoder_total_distance >= 100.0f)
 8001936:	4b31      	ldr	r3, [pc, #196]	@ (80019fc <DistanceLedControl+0x1fc>)
 8001938:	edd3 7a00 	vldr	s15, [r3]
 800193c:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8001a1c <DistanceLedControl+0x21c>
 8001940:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001948:	da00      	bge.n	800194c <DistanceLedControl+0x14c>
}
 800194a:	e055      	b.n	80019f8 <DistanceLedControl+0x1f8>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // Kırmızı 1 m ve üstü
 800194c:	2201      	movs	r2, #1
 800194e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001952:	482d      	ldr	r0, [pc, #180]	@ (8001a08 <DistanceLedControl+0x208>)
 8001954:	f001 fcde 	bl	8003314 <HAL_GPIO_WritePin>
}
 8001958:	e04e      	b.n	80019f8 <DistanceLedControl+0x1f8>
            if (encoder_total_distance <= 100.0f && encoder_total_distance > 0.0f)
 800195a:	4b28      	ldr	r3, [pc, #160]	@ (80019fc <DistanceLedControl+0x1fc>)
 800195c:	edd3 7a00 	vldr	s15, [r3]
 8001960:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8001a1c <DistanceLedControl+0x21c>
 8001964:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800196c:	d80e      	bhi.n	800198c <DistanceLedControl+0x18c>
 800196e:	4b23      	ldr	r3, [pc, #140]	@ (80019fc <DistanceLedControl+0x1fc>)
 8001970:	edd3 7a00 	vldr	s15, [r3]
 8001974:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800197c:	dd06      	ble.n	800198c <DistanceLedControl+0x18c>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // Kırmızı
 800197e:	2201      	movs	r2, #1
 8001980:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001984:	4820      	ldr	r0, [pc, #128]	@ (8001a08 <DistanceLedControl+0x208>)
 8001986:	f001 fcc5 	bl	8003314 <HAL_GPIO_WritePin>
 800198a:	e035      	b.n	80019f8 <DistanceLedControl+0x1f8>
            else if (encoder_total_distance <= 600.0f && encoder_total_distance > 1000.0f)
 800198c:	4b1b      	ldr	r3, [pc, #108]	@ (80019fc <DistanceLedControl+0x1fc>)
 800198e:	edd3 7a00 	vldr	s15, [r3]
 8001992:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001a18 <DistanceLedControl+0x218>
 8001996:	eef4 7ac7 	vcmpe.f32	s15, s14
 800199a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800199e:	d80f      	bhi.n	80019c0 <DistanceLedControl+0x1c0>
 80019a0:	4b16      	ldr	r3, [pc, #88]	@ (80019fc <DistanceLedControl+0x1fc>)
 80019a2:	edd3 7a00 	vldr	s15, [r3]
 80019a6:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001a20 <DistanceLedControl+0x220>
 80019aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b2:	dd05      	ble.n	80019c0 <DistanceLedControl+0x1c0>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET); // Mavi
 80019b4:	2201      	movs	r2, #1
 80019b6:	2180      	movs	r1, #128	@ 0x80
 80019b8:	4813      	ldr	r0, [pc, #76]	@ (8001a08 <DistanceLedControl+0x208>)
 80019ba:	f001 fcab 	bl	8003314 <HAL_GPIO_WritePin>
 80019be:	e01b      	b.n	80019f8 <DistanceLedControl+0x1f8>
            else if (encoder_total_distance <= 1200.0f && encoder_total_distance > 3000.0f)
 80019c0:	4b0e      	ldr	r3, [pc, #56]	@ (80019fc <DistanceLedControl+0x1fc>)
 80019c2:	edd3 7a00 	vldr	s15, [r3]
 80019c6:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001a14 <DistanceLedControl+0x214>
 80019ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d2:	d900      	bls.n	80019d6 <DistanceLedControl+0x1d6>
}
 80019d4:	e010      	b.n	80019f8 <DistanceLedControl+0x1f8>
            else if (encoder_total_distance <= 1200.0f && encoder_total_distance > 3000.0f)
 80019d6:	4b09      	ldr	r3, [pc, #36]	@ (80019fc <DistanceLedControl+0x1fc>)
 80019d8:	edd3 7a00 	vldr	s15, [r3]
 80019dc:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001a24 <DistanceLedControl+0x224>
 80019e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e8:	dc00      	bgt.n	80019ec <DistanceLedControl+0x1ec>
}
 80019ea:	e005      	b.n	80019f8 <DistanceLedControl+0x1f8>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // Yeşil
 80019ec:	2201      	movs	r2, #1
 80019ee:	2101      	movs	r1, #1
 80019f0:	4805      	ldr	r0, [pc, #20]	@ (8001a08 <DistanceLedControl+0x208>)
 80019f2:	f001 fc8f 	bl	8003314 <HAL_GPIO_WritePin>
}
 80019f6:	e7ff      	b.n	80019f8 <DistanceLedControl+0x1f8>
 80019f8:	bf00      	nop
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	200000b4 	.word	0x200000b4
 8001a00:	200000bc 	.word	0x200000bc
 8001a04:	20000000 	.word	0x20000000
 8001a08:	40020400 	.word	0x40020400
 8001a0c:	200000c0 	.word	0x200000c0
 8001a10:	44e88000 	.word	0x44e88000
 8001a14:	44960000 	.word	0x44960000
 8001a18:	44160000 	.word	0x44160000
 8001a1c:	42c80000 	.word	0x42c80000
 8001a20:	447a0000 	.word	0x447a0000
 8001a24:	453b8000 	.word	0x453b8000

08001a28 <ir_sensor_init>:
/* USER CODE END Header */

#include "ir_sensor.h"
#include "main.h"

bool ir_sensor_init(ir_sensor_t* sensor, GPIO_TypeDef* gpio_port, uint16_t gpio_pin) {
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	4613      	mov	r3, r2
 8001a34:	80fb      	strh	r3, [r7, #6]
    if (sensor == NULL) {
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d101      	bne.n	8001a40 <ir_sensor_init+0x18>
        return false;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	e015      	b.n	8001a6c <ir_sensor_init+0x44>
    }
    
    sensor->gpio_port = gpio_port;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	68ba      	ldr	r2, [r7, #8]
 8001a44:	601a      	str	r2, [r3, #0]
    sensor->gpio_pin = gpio_pin;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	88fa      	ldrh	r2, [r7, #6]
 8001a4a:	809a      	strh	r2, [r3, #4]
    sensor->state = IR_SENSOR_STATE_NO_OBJECT;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	719a      	strb	r2, [r3, #6]
    sensor->previous_state = IR_SENSOR_STATE_NO_OBJECT;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2200      	movs	r2, #0
 8001a56:	71da      	strb	r2, [r3, #7]
    sensor->last_change_time = 0;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	609a      	str	r2, [r3, #8]
    sensor->detection_count = 0;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2200      	movs	r2, #0
 8001a62:	60da      	str	r2, [r3, #12]
    sensor->last_detection_time = 0;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2200      	movs	r2, #0
 8001a68:	611a      	str	r2, [r3, #16]
    
    return true;
 8001a6a:	2301      	movs	r3, #1
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <ir_sensor_update>:

void ir_sensor_update(ir_sensor_t* sensor) {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
    if (sensor == NULL) {
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d030      	beq.n	8001ae8 <ir_sensor_update+0x70>
        return;
    }
    
    // Read GPIO state (0 = object detected, 1 = no object)
    uint8_t gpio_state = HAL_GPIO_ReadPin(sensor->gpio_port, sensor->gpio_pin);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	889b      	ldrh	r3, [r3, #4]
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4610      	mov	r0, r2
 8001a92:	f001 fc27 	bl	80032e4 <HAL_GPIO_ReadPin>
 8001a96:	4603      	mov	r3, r0
 8001a98:	73fb      	strb	r3, [r7, #15]
    
    // Update sensor state
    sensor->previous_state = sensor->state;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	799a      	ldrb	r2, [r3, #6]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	71da      	strb	r2, [r3, #7]
    sensor->state = (gpio_state == 0) ? IR_SENSOR_STATE_OBJECT_DETECTED : IR_SENSOR_STATE_NO_OBJECT;
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	bf0c      	ite	eq
 8001aa8:	2301      	moveq	r3, #1
 8001aaa:	2300      	movne	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	461a      	mov	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	719a      	strb	r2, [r3, #6]
    
    // Count object detections on state change
    if (sensor->previous_state != sensor->state && sensor->state == IR_SENSOR_STATE_OBJECT_DETECTED) {
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	79da      	ldrb	r2, [r3, #7]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	799b      	ldrb	r3, [r3, #6]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d00d      	beq.n	8001adc <ir_sensor_update+0x64>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	799b      	ldrb	r3, [r3, #6]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d109      	bne.n	8001adc <ir_sensor_update+0x64>
        sensor->detection_count++;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	1c5a      	adds	r2, r3, #1
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	60da      	str	r2, [r3, #12]
        sensor->last_detection_time = HAL_GetTick();
 8001ad2:	f001 f8cd 	bl	8002c70 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	611a      	str	r2, [r3, #16]
    }
    
    sensor->last_change_time = HAL_GetTick();
 8001adc:	f001 f8c8 	bl	8002c70 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	609a      	str	r2, [r3, #8]
 8001ae6:	e000      	b.n	8001aea <ir_sensor_update+0x72>
        return;
 8001ae8:	bf00      	nop
}
 8001aea:	3710      	adds	r7, #16
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <ir_sensor_get_state>:
    }
    
    return (HAL_GPIO_ReadPin(sensor->gpio_port, sensor->gpio_pin) == 0);
}

ir_sensor_state_t ir_sensor_get_state(ir_sensor_t* sensor) {
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
    if (sensor == NULL) {
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <ir_sensor_get_state+0x12>
        return IR_SENSOR_STATE_NO_OBJECT;
 8001afe:	2300      	movs	r3, #0
 8001b00:	e001      	b.n	8001b06 <ir_sensor_get_state+0x16>
    }
    
    return sensor->state;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	799b      	ldrb	r3, [r3, #6]
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
	...

08001b14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b18:	b0ae      	sub	sp, #184	@ 0xb8
 8001b1a:	af16      	add	r7, sp, #88	@ 0x58
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001b1c:	f000 fc34 	bl	8002388 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b20:	f001 f855 	bl	8002bce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b24:	f000 fa40 	bl	8001fa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b28:	f000 fbb0 	bl	800228c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001b2c:	f000 faa8 	bl	8002080 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001b30:	f000 fae6 	bl	8002100 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8001b34:	f000 fb7a 	bl	800222c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001b38:	f000 fb22 	bl	8002180 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  
  // BNO055 sensörünü başlat
  if(bno055_init(&bno055_sensor, &hi2c2, BNO055_ADDRESS_A)) {
 8001b3c:	2228      	movs	r2, #40	@ 0x28
 8001b3e:	497b      	ldr	r1, [pc, #492]	@ (8001d2c <main+0x218>)
 8001b40:	487b      	ldr	r0, [pc, #492]	@ (8001d30 <main+0x21c>)
 8001b42:	f7ff fa97 	bl	8001074 <bno055_init>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d00b      	beq.n	8001b64 <main+0x50>
      bno055_setOperationMode(&bno055_sensor, OPERATION_MODE_AMG); // Accelerometer + Magnetometer + Gyroscope
 8001b4c:	2107      	movs	r1, #7
 8001b4e:	4878      	ldr	r0, [pc, #480]	@ (8001d30 <main+0x21c>)
 8001b50:	f7ff faf7 	bl	8001142 <bno055_setOperationMode>
      HAL_Delay(100);
 8001b54:	2064      	movs	r0, #100	@ 0x64
 8001b56:	f001 f897 	bl	8002c88 <HAL_Delay>
      sprintf(uart_buffer, "BNO055 initialized successfully (AMG mode).\r\n");
 8001b5a:	4976      	ldr	r1, [pc, #472]	@ (8001d34 <main+0x220>)
 8001b5c:	4876      	ldr	r0, [pc, #472]	@ (8001d38 <main+0x224>)
 8001b5e:	f004 fb7b 	bl	8006258 <siprintf>
 8001b62:	e003      	b.n	8001b6c <main+0x58>
  } else {
      sprintf(uart_buffer, "BNO055 initialization failed.\r\n");
 8001b64:	4975      	ldr	r1, [pc, #468]	@ (8001d3c <main+0x228>)
 8001b66:	4874      	ldr	r0, [pc, #464]	@ (8001d38 <main+0x224>)
 8001b68:	f004 fb76 	bl	8006258 <siprintf>
  }
  HAL_UART_Transmit(&huart2,(uint8_t*)uart_buffer,strlen(uart_buffer),10);
 8001b6c:	4872      	ldr	r0, [pc, #456]	@ (8001d38 <main+0x224>)
 8001b6e:	f7fe fb4f 	bl	8000210 <strlen>
 8001b72:	4603      	mov	r3, r0
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	230a      	movs	r3, #10
 8001b78:	496f      	ldr	r1, [pc, #444]	@ (8001d38 <main+0x224>)
 8001b7a:	4871      	ldr	r0, [pc, #452]	@ (8001d40 <main+0x22c>)
 8001b7c:	f003 feb4 	bl	80058e8 <HAL_UART_Transmit>
  
  // MLX90614 sensor instance initialization
  mlx90614_init(&mlx90614_sensor_instance, &hi2c1, 0xB4);
 8001b80:	22b4      	movs	r2, #180	@ 0xb4
 8001b82:	4970      	ldr	r1, [pc, #448]	@ (8001d44 <main+0x230>)
 8001b84:	4870      	ldr	r0, [pc, #448]	@ (8001d48 <main+0x234>)
 8001b86:	f000 fcad 	bl	80024e4 <mlx90614_init>

  // IR sensor'ü başlat
  ir_sensor_init(&ir_sensor, IR_SENSOR_GPIO_Port, IR_SENSOR_Pin);
 8001b8a:	2220      	movs	r2, #32
 8001b8c:	496f      	ldr	r1, [pc, #444]	@ (8001d4c <main+0x238>)
 8001b8e:	4870      	ldr	r0, [pc, #448]	@ (8001d50 <main+0x23c>)
 8001b90:	f7ff ff4a 	bl	8001a28 <ir_sensor_init>

  sprintf(uart_buffer, "=== Multi-Sensor System Starting ===\r\n");
 8001b94:	496f      	ldr	r1, [pc, #444]	@ (8001d54 <main+0x240>)
 8001b96:	4868      	ldr	r0, [pc, #416]	@ (8001d38 <main+0x224>)
 8001b98:	f004 fb5e 	bl	8006258 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)uart_buffer,strlen(uart_buffer),10);
 8001b9c:	4866      	ldr	r0, [pc, #408]	@ (8001d38 <main+0x224>)
 8001b9e:	f7fe fb37 	bl	8000210 <strlen>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	230a      	movs	r3, #10
 8001ba8:	4963      	ldr	r1, [pc, #396]	@ (8001d38 <main+0x224>)
 8001baa:	4865      	ldr	r0, [pc, #404]	@ (8001d40 <main+0x22c>)
 8001bac:	f003 fe9c 	bl	80058e8 <HAL_UART_Transmit>

  // INA226 initialization (I2C2)
  INA226_INIT();
 8001bb0:	f7ff f93a 	bl	8000e28 <INA226_INIT>
  INA226_SetCalibration(0.002, 10.0); // 2mOhm shunt, 10A max current
 8001bb4:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8001bb8:	ed9f 0a67 	vldr	s0, [pc, #412]	@ 8001d58 <main+0x244>
 8001bbc:	f7ff f9c6 	bl	8000f4c <INA226_SetCalibration>
  HAL_Delay(100);
 8001bc0:	2064      	movs	r0, #100	@ 0x64
 8001bc2:	f001 f861 	bl	8002c88 <HAL_Delay>

  // Test INA226 connection
  uint16_t device_id = INA226_ID();
 8001bc6:	f7ff f941 	bl	8000e4c <INA226_ID>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
  if(device_id == 0x2260) {
 8001bd0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8001bd4:	f242 2260 	movw	r2, #8800	@ 0x2260
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d107      	bne.n	8001bec <main+0xd8>
      ina226_connection_status = 1;
 8001bdc:	4b5f      	ldr	r3, [pc, #380]	@ (8001d5c <main+0x248>)
 8001bde:	2201      	movs	r2, #1
 8001be0:	701a      	strb	r2, [r3, #0]
      sprintf(uart_buffer, "INA226 connected successfully!\r\n");
 8001be2:	495f      	ldr	r1, [pc, #380]	@ (8001d60 <main+0x24c>)
 8001be4:	4854      	ldr	r0, [pc, #336]	@ (8001d38 <main+0x224>)
 8001be6:	f004 fb37 	bl	8006258 <siprintf>
 8001bea:	e006      	b.n	8001bfa <main+0xe6>
  } else {
      ina226_connection_status = 0;
 8001bec:	4b5b      	ldr	r3, [pc, #364]	@ (8001d5c <main+0x248>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	701a      	strb	r2, [r3, #0]
      sprintf(uart_buffer, "INA226 connection failed!\r\n");
 8001bf2:	495c      	ldr	r1, [pc, #368]	@ (8001d64 <main+0x250>)
 8001bf4:	4850      	ldr	r0, [pc, #320]	@ (8001d38 <main+0x224>)
 8001bf6:	f004 fb2f 	bl	8006258 <siprintf>
  }
  HAL_UART_Transmit(&huart2,(uint8_t*)uart_buffer,strlen(uart_buffer),10);
 8001bfa:	484f      	ldr	r0, [pc, #316]	@ (8001d38 <main+0x224>)
 8001bfc:	f7fe fb08 	bl	8000210 <strlen>
 8001c00:	4603      	mov	r3, r0
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	230a      	movs	r3, #10
 8001c06:	494c      	ldr	r1, [pc, #304]	@ (8001d38 <main+0x224>)
 8001c08:	484d      	ldr	r0, [pc, #308]	@ (8001d40 <main+0x22c>)
 8001c0a:	f003 fe6d 	bl	80058e8 <HAL_UART_Transmit>

  // BNO055 initialization (I2C2) - using existing library
  if(bno055_init(&bno055_sensor, &hi2c2, BNO055_ADDRESS_A)) {
 8001c0e:	2228      	movs	r2, #40	@ 0x28
 8001c10:	4946      	ldr	r1, [pc, #280]	@ (8001d2c <main+0x218>)
 8001c12:	4847      	ldr	r0, [pc, #284]	@ (8001d30 <main+0x21c>)
 8001c14:	f7ff fa2e 	bl	8001074 <bno055_init>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d00b      	beq.n	8001c36 <main+0x122>
      bno055_setOperationMode(&bno055_sensor, OPERATION_MODE_ACCONLY);
 8001c1e:	2101      	movs	r1, #1
 8001c20:	4843      	ldr	r0, [pc, #268]	@ (8001d30 <main+0x21c>)
 8001c22:	f7ff fa8e 	bl	8001142 <bno055_setOperationMode>
      HAL_Delay(100);
 8001c26:	2064      	movs	r0, #100	@ 0x64
 8001c28:	f001 f82e 	bl	8002c88 <HAL_Delay>
      sprintf(uart_buffer, "BNO055 initialized successfully.\r\n");
 8001c2c:	494e      	ldr	r1, [pc, #312]	@ (8001d68 <main+0x254>)
 8001c2e:	4842      	ldr	r0, [pc, #264]	@ (8001d38 <main+0x224>)
 8001c30:	f004 fb12 	bl	8006258 <siprintf>
 8001c34:	e003      	b.n	8001c3e <main+0x12a>
  } else {
      sprintf(uart_buffer, "BNO055 initialization failed.\r\n");
 8001c36:	4941      	ldr	r1, [pc, #260]	@ (8001d3c <main+0x228>)
 8001c38:	483f      	ldr	r0, [pc, #252]	@ (8001d38 <main+0x224>)
 8001c3a:	f004 fb0d 	bl	8006258 <siprintf>
  }
  HAL_UART_Transmit(&huart2,(uint8_t*)uart_buffer,strlen(uart_buffer),10);
 8001c3e:	483e      	ldr	r0, [pc, #248]	@ (8001d38 <main+0x224>)
 8001c40:	f7fe fae6 	bl	8000210 <strlen>
 8001c44:	4603      	mov	r3, r0
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	230a      	movs	r3, #10
 8001c4a:	493b      	ldr	r1, [pc, #236]	@ (8001d38 <main+0x224>)
 8001c4c:	483c      	ldr	r0, [pc, #240]	@ (8001d40 <main+0x22c>)
 8001c4e:	f003 fe4b 	bl	80058e8 <HAL_UART_Transmit>

  // Encoder initialization (TIM3) - NOT TOUCHING
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001c52:	213c      	movs	r1, #60	@ 0x3c
 8001c54:	4845      	ldr	r0, [pc, #276]	@ (8001d6c <main+0x258>)
 8001c56:	f003 fc11 	bl	800547c <HAL_TIM_Encoder_Start>
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	4844      	ldr	r0, [pc, #272]	@ (8001d70 <main+0x25c>)
 8001c60:	f001 fb58 	bl	8003314 <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    
    // Read sensor data using existing libraries
    if(ina226_connection_status == 1) {
 8001c64:	4b3d      	ldr	r3, [pc, #244]	@ (8001d5c <main+0x248>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d133      	bne.n	8001cd6 <main+0x1c2>
        ina226_bus_voltage = INA226_BusVoltage();
 8001c6e:	f7ff f921 	bl	8000eb4 <INA226_BusVoltage>
 8001c72:	eef0 7a40 	vmov.f32	s15, s0
 8001c76:	4b3f      	ldr	r3, [pc, #252]	@ (8001d74 <main+0x260>)
 8001c78:	edc3 7a00 	vstr	s15, [r3]
        ina226_shunt_voltage = INA226_ShuntVoltage() * 1000.0f;
 8001c7c:	f7ff f8f8 	bl	8000e70 <INA226_ShuntVoltage>
 8001c80:	eef0 7a40 	vmov.f32	s15, s0
 8001c84:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8001d78 <main+0x264>
 8001c88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c8c:	4b3b      	ldr	r3, [pc, #236]	@ (8001d7c <main+0x268>)
 8001c8e:	edc3 7a00 	vstr	s15, [r3]
        ina226_current = INA226_Current();
 8001c92:	f7ff f943 	bl	8000f1c <INA226_Current>
 8001c96:	eef0 7a40 	vmov.f32	s15, s0
 8001c9a:	4b39      	ldr	r3, [pc, #228]	@ (8001d80 <main+0x26c>)
 8001c9c:	edc3 7a00 	vstr	s15, [r3]
        ina226_current_ma = ina226_current * 1000.0f;
 8001ca0:	4b37      	ldr	r3, [pc, #220]	@ (8001d80 <main+0x26c>)
 8001ca2:	edd3 7a00 	vldr	s15, [r3]
 8001ca6:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8001d78 <main+0x264>
 8001caa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cae:	4b35      	ldr	r3, [pc, #212]	@ (8001d84 <main+0x270>)
 8001cb0:	edc3 7a00 	vstr	s15, [r3]
        ina226_power = INA226_Power();
 8001cb4:	f7ff f916 	bl	8000ee4 <INA226_Power>
 8001cb8:	eef0 7a40 	vmov.f32	s15, s0
 8001cbc:	4b32      	ldr	r3, [pc, #200]	@ (8001d88 <main+0x274>)
 8001cbe:	edc3 7a00 	vstr	s15, [r3]
        ina226_power_mw = ina226_power * 1000.0f;
 8001cc2:	4b31      	ldr	r3, [pc, #196]	@ (8001d88 <main+0x274>)
 8001cc4:	edd3 7a00 	vldr	s15, [r3]
 8001cc8:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001d78 <main+0x264>
 8001ccc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cd0:	4b2e      	ldr	r3, [pc, #184]	@ (8001d8c <main+0x278>)
 8001cd2:	edc3 7a00 	vstr	s15, [r3]
    }
    
    // MLX90614 Temperature readings
    float ambient=0.0f, object=0.0f;
 8001cd6:	f04f 0300 	mov.w	r3, #0
 8001cda:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001cdc:	f04f 0300 	mov.w	r3, #0
 8001ce0:	657b      	str	r3, [r7, #84]	@ 0x54
    if(mlx90614_getAmbient(&mlx90614_sensor_instance, &ambient)) {
 8001ce2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4817      	ldr	r0, [pc, #92]	@ (8001d48 <main+0x234>)
 8001cea:	f000 fd11 	bl	8002710 <mlx90614_getAmbient>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d006      	beq.n	8001d02 <main+0x1ee>
        ambient_temp_C = ambient;
 8001cf4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001cf6:	4a26      	ldr	r2, [pc, #152]	@ (8001d90 <main+0x27c>)
 8001cf8:	6013      	str	r3, [r2, #0]
        mlx_connection_status = 1;
 8001cfa:	4b26      	ldr	r3, [pc, #152]	@ (8001d94 <main+0x280>)
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	701a      	strb	r2, [r3, #0]
 8001d00:	e007      	b.n	8001d12 <main+0x1fe>
    } else { 
        ambient_error_count++; 
 8001d02:	4b25      	ldr	r3, [pc, #148]	@ (8001d98 <main+0x284>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	3301      	adds	r3, #1
 8001d08:	4a23      	ldr	r2, [pc, #140]	@ (8001d98 <main+0x284>)
 8001d0a:	6013      	str	r3, [r2, #0]
        mlx_connection_status = 0; 
 8001d0c:	4b21      	ldr	r3, [pc, #132]	@ (8001d94 <main+0x280>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	701a      	strb	r2, [r3, #0]
    }
    if(mlx90614_getObject1(&mlx90614_sensor_instance, &object)) {
 8001d12:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d16:	4619      	mov	r1, r3
 8001d18:	480b      	ldr	r0, [pc, #44]	@ (8001d48 <main+0x234>)
 8001d1a:	f000 fd1e 	bl	800275a <mlx90614_getObject1>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d03d      	beq.n	8001da0 <main+0x28c>
        object_temp_C = object;
 8001d24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d26:	4a1d      	ldr	r2, [pc, #116]	@ (8001d9c <main+0x288>)
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	e03e      	b.n	8001daa <main+0x296>
 8001d2c:	2000013c 	.word	0x2000013c
 8001d30:	200000c4 	.word	0x200000c4
 8001d34:	08006bb0 	.word	0x08006bb0
 8001d38:	200002f0 	.word	0x200002f0
 8001d3c:	08006be0 	.word	0x08006be0
 8001d40:	200001dc 	.word	0x200001dc
 8001d44:	200000e8 	.word	0x200000e8
 8001d48:	200002b4 	.word	0x200002b4
 8001d4c:	40021400 	.word	0x40021400
 8001d50:	200000d4 	.word	0x200000d4
 8001d54:	08006c00 	.word	0x08006c00
 8001d58:	3b03126f 	.word	0x3b03126f
 8001d5c:	2000027c 	.word	0x2000027c
 8001d60:	08006c28 	.word	0x08006c28
 8001d64:	08006c4c 	.word	0x08006c4c
 8001d68:	08006c68 	.word	0x08006c68
 8001d6c:	20000190 	.word	0x20000190
 8001d70:	40020400 	.word	0x40020400
 8001d74:	20000264 	.word	0x20000264
 8001d78:	447a0000 	.word	0x447a0000
 8001d7c:	20000268 	.word	0x20000268
 8001d80:	2000026c 	.word	0x2000026c
 8001d84:	20000274 	.word	0x20000274
 8001d88:	20000270 	.word	0x20000270
 8001d8c:	20000278 	.word	0x20000278
 8001d90:	20000280 	.word	0x20000280
 8001d94:	20000288 	.word	0x20000288
 8001d98:	2000028c 	.word	0x2000028c
 8001d9c:	20000284 	.word	0x20000284
    } else { 
        object_error_count++; 
 8001da0:	4b6a      	ldr	r3, [pc, #424]	@ (8001f4c <main+0x438>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	3301      	adds	r3, #1
 8001da6:	4a69      	ldr	r2, [pc, #420]	@ (8001f4c <main+0x438>)
 8001da8:	6013      	str	r3, [r2, #0]
    }
    
    // BNO055 Accelerometer readings using existing library
    bno055_vector_t accel_vector;
    if(bno055_getVector(&bno055_sensor, VECTOR_ACCELEROMETER, &accel_vector)) {
 8001daa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001dae:	461a      	mov	r2, r3
 8001db0:	2108      	movs	r1, #8
 8001db2:	4867      	ldr	r0, [pc, #412]	@ (8001f50 <main+0x43c>)
 8001db4:	f7ff fa96 	bl	80012e4 <bno055_getVector>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d008      	beq.n	8001dd0 <main+0x2bc>
        accel_x = accel_vector.x;
 8001dbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001dc0:	4a64      	ldr	r2, [pc, #400]	@ (8001f54 <main+0x440>)
 8001dc2:	6013      	str	r3, [r2, #0]
        accel_y = accel_vector.y;
 8001dc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001dc6:	4a64      	ldr	r2, [pc, #400]	@ (8001f58 <main+0x444>)
 8001dc8:	6013      	str	r3, [r2, #0]
        accel_z = accel_vector.z;
 8001dca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001dcc:	4a63      	ldr	r2, [pc, #396]	@ (8001f5c <main+0x448>)
 8001dce:	6013      	str	r3, [r2, #0]
    }
    
    // BNO055 Gyroscope readings using existing library
    bno055_vector_t gyro_vector;
    if(bno055_getVector(&bno055_sensor, VECTOR_GYROSCOPE, &gyro_vector)) {
 8001dd0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	2114      	movs	r1, #20
 8001dd8:	485d      	ldr	r0, [pc, #372]	@ (8001f50 <main+0x43c>)
 8001dda:	f7ff fa83 	bl	80012e4 <bno055_getVector>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d008      	beq.n	8001df6 <main+0x2e2>
        gyro_x = gyro_vector.x;
 8001de4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001de6:	4a5e      	ldr	r2, [pc, #376]	@ (8001f60 <main+0x44c>)
 8001de8:	6013      	str	r3, [r2, #0]
        gyro_y = gyro_vector.y;
 8001dea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001dec:	4a5d      	ldr	r2, [pc, #372]	@ (8001f64 <main+0x450>)
 8001dee:	6013      	str	r3, [r2, #0]
        gyro_z = gyro_vector.z;
 8001df0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001df2:	4a5d      	ldr	r2, [pc, #372]	@ (8001f68 <main+0x454>)
 8001df4:	6013      	str	r3, [r2, #0]
    }
    
    // Encoder readings (external function)
    Encoder_Update();
 8001df6:	f7ff fc89 	bl	800170c <Encoder_Update>
    
    // IR Sensor readings using existing library
    ir_sensor_update(&ir_sensor);
 8001dfa:	485c      	ldr	r0, [pc, #368]	@ (8001f6c <main+0x458>)
 8001dfc:	f7ff fe3c 	bl	8001a78 <ir_sensor_update>
    ir_sensor_state = ir_sensor_get_state(&ir_sensor);
 8001e00:	485a      	ldr	r0, [pc, #360]	@ (8001f6c <main+0x458>)
 8001e02:	f7ff fe75 	bl	8001af0 <ir_sensor_get_state>
 8001e06:	4603      	mov	r3, r0
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4b59      	ldr	r3, [pc, #356]	@ (8001f70 <main+0x45c>)
 8001e0c:	701a      	strb	r2, [r3, #0]
    if(last_ir_sensor_state != ir_sensor_state){
 8001e0e:	4b59      	ldr	r3, [pc, #356]	@ (8001f74 <main+0x460>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	4b56      	ldr	r3, [pc, #344]	@ (8001f70 <main+0x45c>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d009      	beq.n	8001e32 <main+0x31e>
        if(ir_sensor_state == 0) ir_object_count++;
 8001e1e:	4b54      	ldr	r3, [pc, #336]	@ (8001f70 <main+0x45c>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d104      	bne.n	8001e32 <main+0x31e>
 8001e28:	4b53      	ldr	r3, [pc, #332]	@ (8001f78 <main+0x464>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	4a52      	ldr	r2, [pc, #328]	@ (8001f78 <main+0x464>)
 8001e30:	6013      	str	r3, [r2, #0]
    }
    last_ir_sensor_state = ir_sensor_state;
 8001e32:	4b4f      	ldr	r3, [pc, #316]	@ (8001f70 <main+0x45c>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	4b4e      	ldr	r3, [pc, #312]	@ (8001f74 <main+0x460>)
 8001e3a:	701a      	strb	r2, [r3, #0]
    
    // Debug output with volatile variables
    sprintf(uart_buffer,
 8001e3c:	4b4f      	ldr	r3, [pc, #316]	@ (8001f7c <main+0x468>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7fe fba1 	bl	8000588 <__aeabi_f2d>
 8001e46:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
 8001e4a:	4b4d      	ldr	r3, [pc, #308]	@ (8001f80 <main+0x46c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7fe fb9a 	bl	8000588 <__aeabi_f2d>
 8001e54:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 8001e58:	4b4a      	ldr	r3, [pc, #296]	@ (8001f84 <main+0x470>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7fe fb93 	bl	8000588 <__aeabi_f2d>
 8001e62:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8001e66:	4b48      	ldr	r3, [pc, #288]	@ (8001f88 <main+0x474>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe fb8c 	bl	8000588 <__aeabi_f2d>
 8001e70:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001e74:	4b45      	ldr	r3, [pc, #276]	@ (8001f8c <main+0x478>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7fe fb85 	bl	8000588 <__aeabi_f2d>
 8001e7e:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001e82:	4b43      	ldr	r3, [pc, #268]	@ (8001f90 <main+0x47c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7fe fb7e 	bl	8000588 <__aeabi_f2d>
 8001e8c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001e90:	4b30      	ldr	r3, [pc, #192]	@ (8001f54 <main+0x440>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7fe fb77 	bl	8000588 <__aeabi_f2d>
 8001e9a:	e9c7 0100 	strd	r0, r1, [r7]
 8001e9e:	4b2e      	ldr	r3, [pc, #184]	@ (8001f58 <main+0x444>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7fe fb70 	bl	8000588 <__aeabi_f2d>
 8001ea8:	4682      	mov	sl, r0
 8001eaa:	468b      	mov	fp, r1
 8001eac:	4b2b      	ldr	r3, [pc, #172]	@ (8001f5c <main+0x448>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe fb69 	bl	8000588 <__aeabi_f2d>
 8001eb6:	4680      	mov	r8, r0
 8001eb8:	4689      	mov	r9, r1
 8001eba:	4b36      	ldr	r3, [pc, #216]	@ (8001f94 <main+0x480>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7fe fb62 	bl	8000588 <__aeabi_f2d>
 8001ec4:	4604      	mov	r4, r0
 8001ec6:	460d      	mov	r5, r1
 8001ec8:	4b33      	ldr	r3, [pc, #204]	@ (8001f98 <main+0x484>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe fb5b 	bl	8000588 <__aeabi_f2d>
 8001ed2:	4b27      	ldr	r3, [pc, #156]	@ (8001f70 <main+0x45c>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4b27      	ldr	r3, [pc, #156]	@ (8001f78 <main+0x464>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	9315      	str	r3, [sp, #84]	@ 0x54
 8001ee0:	9214      	str	r2, [sp, #80]	@ 0x50
 8001ee2:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8001ee6:	e9cd 4510 	strd	r4, r5, [sp, #64]	@ 0x40
 8001eea:	e9cd 890e 	strd	r8, r9, [sp, #56]	@ 0x38
 8001eee:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8001ef2:	ed97 7b00 	vldr	d7, [r7]
 8001ef6:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8001efa:	ed97 7b02 	vldr	d7, [r7, #8]
 8001efe:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001f02:	ed97 7b04 	vldr	d7, [r7, #16]
 8001f06:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001f0a:	ed97 7b06 	vldr	d7, [r7, #24]
 8001f0e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001f12:	ed97 7b08 	vldr	d7, [r7, #32]
 8001f16:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001f1a:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8001f1e:	ed8d 7b00 	vstr	d7, [sp]
 8001f22:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001f26:	491d      	ldr	r1, [pc, #116]	@ (8001f9c <main+0x488>)
 8001f28:	481d      	ldr	r0, [pc, #116]	@ (8001fa0 <main+0x48c>)
 8001f2a:	f004 f995 	bl	8006258 <siprintf>
        accel_x, accel_y, accel_z,
        encoder_total_distance, encoder_speed,
        ir_sensor_state, ir_object_count
    );

    HAL_UART_Transmit(&huart2,(uint8_t*)uart_buffer,strlen(uart_buffer),10);
 8001f2e:	481c      	ldr	r0, [pc, #112]	@ (8001fa0 <main+0x48c>)
 8001f30:	f7fe f96e 	bl	8000210 <strlen>
 8001f34:	4603      	mov	r3, r0
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	230a      	movs	r3, #10
 8001f3a:	4919      	ldr	r1, [pc, #100]	@ (8001fa0 <main+0x48c>)
 8001f3c:	4819      	ldr	r0, [pc, #100]	@ (8001fa4 <main+0x490>)
 8001f3e:	f003 fcd3 	bl	80058e8 <HAL_UART_Transmit>

    HAL_Delay(100); // 100ms loop delay
 8001f42:	2064      	movs	r0, #100	@ 0x64
 8001f44:	f000 fea0 	bl	8002c88 <HAL_Delay>
  {
 8001f48:	e68c      	b.n	8001c64 <main+0x150>
 8001f4a:	bf00      	nop
 8001f4c:	20000290 	.word	0x20000290
 8001f50:	200000c4 	.word	0x200000c4
 8001f54:	20000294 	.word	0x20000294
 8001f58:	20000298 	.word	0x20000298
 8001f5c:	2000029c 	.word	0x2000029c
 8001f60:	200002a0 	.word	0x200002a0
 8001f64:	200002a4 	.word	0x200002a4
 8001f68:	200002a8 	.word	0x200002a8
 8001f6c:	200000d4 	.word	0x200000d4
 8001f70:	200002ac 	.word	0x200002ac
 8001f74:	20000001 	.word	0x20000001
 8001f78:	200002b0 	.word	0x200002b0
 8001f7c:	20000264 	.word	0x20000264
 8001f80:	20000268 	.word	0x20000268
 8001f84:	20000274 	.word	0x20000274
 8001f88:	20000278 	.word	0x20000278
 8001f8c:	20000280 	.word	0x20000280
 8001f90:	20000284 	.word	0x20000284
 8001f94:	200000b4 	.word	0x200000b4
 8001f98:	200000b0 	.word	0x200000b0
 8001f9c:	08006c8c 	.word	0x08006c8c
 8001fa0:	200002f0 	.word	0x200002f0
 8001fa4:	200001dc 	.word	0x200001dc

08001fa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b094      	sub	sp, #80	@ 0x50
 8001fac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fae:	f107 0320 	add.w	r3, r7, #32
 8001fb2:	2230      	movs	r2, #48	@ 0x30
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f004 f970 	bl	800629c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fbc:	f107 030c 	add.w	r3, r7, #12
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	605a      	str	r2, [r3, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	60da      	str	r2, [r3, #12]
 8001fca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fcc:	4b2a      	ldr	r3, [pc, #168]	@ (8002078 <SystemClock_Config+0xd0>)
 8001fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd0:	4a29      	ldr	r2, [pc, #164]	@ (8002078 <SystemClock_Config+0xd0>)
 8001fd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fd6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fd8:	4b27      	ldr	r3, [pc, #156]	@ (8002078 <SystemClock_Config+0xd0>)
 8001fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fe0:	60bb      	str	r3, [r7, #8]
 8001fe2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fe4:	4b25      	ldr	r3, [pc, #148]	@ (800207c <SystemClock_Config+0xd4>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a24      	ldr	r2, [pc, #144]	@ (800207c <SystemClock_Config+0xd4>)
 8001fea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001fee:	6013      	str	r3, [r2, #0]
 8001ff0:	4b22      	ldr	r3, [pc, #136]	@ (800207c <SystemClock_Config+0xd4>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001ff8:	607b      	str	r3, [r7, #4]
 8001ffa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002000:	2301      	movs	r3, #1
 8002002:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002004:	2310      	movs	r3, #16
 8002006:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002008:	2302      	movs	r3, #2
 800200a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800200c:	2300      	movs	r3, #0
 800200e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002010:	2308      	movs	r3, #8
 8002012:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002014:	23d8      	movs	r3, #216	@ 0xd8
 8002016:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002018:	2302      	movs	r3, #2
 800201a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800201c:	2302      	movs	r3, #2
 800201e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002020:	f107 0320 	add.w	r3, r7, #32
 8002024:	4618      	mov	r0, r3
 8002026:	f002 f909 	bl	800423c <HAL_RCC_OscConfig>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002030:	f000 f9d6 	bl	80023e0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002034:	f002 f8b2 	bl	800419c <HAL_PWREx_EnableOverDrive>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800203e:	f000 f9cf 	bl	80023e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002042:	230f      	movs	r3, #15
 8002044:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002046:	2302      	movs	r3, #2
 8002048:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800204a:	2300      	movs	r3, #0
 800204c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800204e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002052:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002054:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002058:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800205a:	f107 030c 	add.w	r3, r7, #12
 800205e:	2107      	movs	r1, #7
 8002060:	4618      	mov	r0, r3
 8002062:	f002 fb8f 	bl	8004784 <HAL_RCC_ClockConfig>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800206c:	f000 f9b8 	bl	80023e0 <Error_Handler>
  }
}
 8002070:	bf00      	nop
 8002072:	3750      	adds	r7, #80	@ 0x50
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40023800 	.word	0x40023800
 800207c:	40007000 	.word	0x40007000

08002080 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002084:	4b1b      	ldr	r3, [pc, #108]	@ (80020f4 <MX_I2C1_Init+0x74>)
 8002086:	4a1c      	ldr	r2, [pc, #112]	@ (80020f8 <MX_I2C1_Init+0x78>)
 8002088:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 800208a:	4b1a      	ldr	r3, [pc, #104]	@ (80020f4 <MX_I2C1_Init+0x74>)
 800208c:	4a1b      	ldr	r2, [pc, #108]	@ (80020fc <MX_I2C1_Init+0x7c>)
 800208e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002090:	4b18      	ldr	r3, [pc, #96]	@ (80020f4 <MX_I2C1_Init+0x74>)
 8002092:	2200      	movs	r2, #0
 8002094:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002096:	4b17      	ldr	r3, [pc, #92]	@ (80020f4 <MX_I2C1_Init+0x74>)
 8002098:	2201      	movs	r2, #1
 800209a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800209c:	4b15      	ldr	r3, [pc, #84]	@ (80020f4 <MX_I2C1_Init+0x74>)
 800209e:	2200      	movs	r2, #0
 80020a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80020a2:	4b14      	ldr	r3, [pc, #80]	@ (80020f4 <MX_I2C1_Init+0x74>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80020a8:	4b12      	ldr	r3, [pc, #72]	@ (80020f4 <MX_I2C1_Init+0x74>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020ae:	4b11      	ldr	r3, [pc, #68]	@ (80020f4 <MX_I2C1_Init+0x74>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020b4:	4b0f      	ldr	r3, [pc, #60]	@ (80020f4 <MX_I2C1_Init+0x74>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020ba:	480e      	ldr	r0, [pc, #56]	@ (80020f4 <MX_I2C1_Init+0x74>)
 80020bc:	f001 f944 	bl	8003348 <HAL_I2C_Init>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80020c6:	f000 f98b 	bl	80023e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80020ca:	2100      	movs	r1, #0
 80020cc:	4809      	ldr	r0, [pc, #36]	@ (80020f4 <MX_I2C1_Init+0x74>)
 80020ce:	f001 ffcd 	bl	800406c <HAL_I2CEx_ConfigAnalogFilter>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80020d8:	f000 f982 	bl	80023e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80020dc:	2100      	movs	r1, #0
 80020de:	4805      	ldr	r0, [pc, #20]	@ (80020f4 <MX_I2C1_Init+0x74>)
 80020e0:	f002 f80f 	bl	8004102 <HAL_I2CEx_ConfigDigitalFilter>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80020ea:	f000 f979 	bl	80023e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	200000e8 	.word	0x200000e8
 80020f8:	40005400 	.word	0x40005400
 80020fc:	20404768 	.word	0x20404768

08002100 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002104:	4b1b      	ldr	r3, [pc, #108]	@ (8002174 <MX_I2C2_Init+0x74>)
 8002106:	4a1c      	ldr	r2, [pc, #112]	@ (8002178 <MX_I2C2_Init+0x78>)
 8002108:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 800210a:	4b1a      	ldr	r3, [pc, #104]	@ (8002174 <MX_I2C2_Init+0x74>)
 800210c:	4a1b      	ldr	r2, [pc, #108]	@ (800217c <MX_I2C2_Init+0x7c>)
 800210e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002110:	4b18      	ldr	r3, [pc, #96]	@ (8002174 <MX_I2C2_Init+0x74>)
 8002112:	2200      	movs	r2, #0
 8002114:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002116:	4b17      	ldr	r3, [pc, #92]	@ (8002174 <MX_I2C2_Init+0x74>)
 8002118:	2201      	movs	r2, #1
 800211a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800211c:	4b15      	ldr	r3, [pc, #84]	@ (8002174 <MX_I2C2_Init+0x74>)
 800211e:	2200      	movs	r2, #0
 8002120:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002122:	4b14      	ldr	r3, [pc, #80]	@ (8002174 <MX_I2C2_Init+0x74>)
 8002124:	2200      	movs	r2, #0
 8002126:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002128:	4b12      	ldr	r3, [pc, #72]	@ (8002174 <MX_I2C2_Init+0x74>)
 800212a:	2200      	movs	r2, #0
 800212c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800212e:	4b11      	ldr	r3, [pc, #68]	@ (8002174 <MX_I2C2_Init+0x74>)
 8002130:	2200      	movs	r2, #0
 8002132:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002134:	4b0f      	ldr	r3, [pc, #60]	@ (8002174 <MX_I2C2_Init+0x74>)
 8002136:	2200      	movs	r2, #0
 8002138:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800213a:	480e      	ldr	r0, [pc, #56]	@ (8002174 <MX_I2C2_Init+0x74>)
 800213c:	f001 f904 	bl	8003348 <HAL_I2C_Init>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002146:	f000 f94b 	bl	80023e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800214a:	2100      	movs	r1, #0
 800214c:	4809      	ldr	r0, [pc, #36]	@ (8002174 <MX_I2C2_Init+0x74>)
 800214e:	f001 ff8d 	bl	800406c <HAL_I2CEx_ConfigAnalogFilter>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002158:	f000 f942 	bl	80023e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800215c:	2100      	movs	r1, #0
 800215e:	4805      	ldr	r0, [pc, #20]	@ (8002174 <MX_I2C2_Init+0x74>)
 8002160:	f001 ffcf 	bl	8004102 <HAL_I2CEx_ConfigDigitalFilter>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800216a:	f000 f939 	bl	80023e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	2000013c 	.word	0x2000013c
 8002178:	40005800 	.word	0x40005800
 800217c:	20404768 	.word	0x20404768

08002180 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b08c      	sub	sp, #48	@ 0x30
 8002184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002186:	f107 030c 	add.w	r3, r7, #12
 800218a:	2224      	movs	r2, #36	@ 0x24
 800218c:	2100      	movs	r1, #0
 800218e:	4618      	mov	r0, r3
 8002190:	f004 f884 	bl	800629c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002194:	463b      	mov	r3, r7
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	605a      	str	r2, [r3, #4]
 800219c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800219e:	4b21      	ldr	r3, [pc, #132]	@ (8002224 <MX_TIM3_Init+0xa4>)
 80021a0:	4a21      	ldr	r2, [pc, #132]	@ (8002228 <MX_TIM3_Init+0xa8>)
 80021a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80021a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002224 <MX_TIM3_Init+0xa4>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002224 <MX_TIM3_Init+0xa4>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80021b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002224 <MX_TIM3_Init+0xa4>)
 80021b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002224 <MX_TIM3_Init+0xa4>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021be:	4b19      	ldr	r3, [pc, #100]	@ (8002224 <MX_TIM3_Init+0xa4>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80021c4:	2303      	movs	r3, #3
 80021c6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80021c8:	2300      	movs	r3, #0
 80021ca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80021cc:	2301      	movs	r3, #1
 80021ce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80021d0:	2300      	movs	r3, #0
 80021d2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80021d8:	2300      	movs	r3, #0
 80021da:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80021dc:	2301      	movs	r3, #1
 80021de:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80021e0:	2300      	movs	r3, #0
 80021e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80021e4:	2300      	movs	r3, #0
 80021e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80021e8:	f107 030c 	add.w	r3, r7, #12
 80021ec:	4619      	mov	r1, r3
 80021ee:	480d      	ldr	r0, [pc, #52]	@ (8002224 <MX_TIM3_Init+0xa4>)
 80021f0:	f003 f89e 	bl	8005330 <HAL_TIM_Encoder_Init>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80021fa:	f000 f8f1 	bl	80023e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021fe:	2300      	movs	r3, #0
 8002200:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002202:	2300      	movs	r3, #0
 8002204:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002206:	463b      	mov	r3, r7
 8002208:	4619      	mov	r1, r3
 800220a:	4806      	ldr	r0, [pc, #24]	@ (8002224 <MX_TIM3_Init+0xa4>)
 800220c:	f003 fa90 	bl	8005730 <HAL_TIMEx_MasterConfigSynchronization>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002216:	f000 f8e3 	bl	80023e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800221a:	bf00      	nop
 800221c:	3730      	adds	r7, #48	@ 0x30
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20000190 	.word	0x20000190
 8002228:	40000400 	.word	0x40000400

0800222c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002230:	4b14      	ldr	r3, [pc, #80]	@ (8002284 <MX_USART2_UART_Init+0x58>)
 8002232:	4a15      	ldr	r2, [pc, #84]	@ (8002288 <MX_USART2_UART_Init+0x5c>)
 8002234:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002236:	4b13      	ldr	r3, [pc, #76]	@ (8002284 <MX_USART2_UART_Init+0x58>)
 8002238:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800223c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800223e:	4b11      	ldr	r3, [pc, #68]	@ (8002284 <MX_USART2_UART_Init+0x58>)
 8002240:	2200      	movs	r2, #0
 8002242:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002244:	4b0f      	ldr	r3, [pc, #60]	@ (8002284 <MX_USART2_UART_Init+0x58>)
 8002246:	2200      	movs	r2, #0
 8002248:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800224a:	4b0e      	ldr	r3, [pc, #56]	@ (8002284 <MX_USART2_UART_Init+0x58>)
 800224c:	2200      	movs	r2, #0
 800224e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002250:	4b0c      	ldr	r3, [pc, #48]	@ (8002284 <MX_USART2_UART_Init+0x58>)
 8002252:	220c      	movs	r2, #12
 8002254:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002256:	4b0b      	ldr	r3, [pc, #44]	@ (8002284 <MX_USART2_UART_Init+0x58>)
 8002258:	2200      	movs	r2, #0
 800225a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800225c:	4b09      	ldr	r3, [pc, #36]	@ (8002284 <MX_USART2_UART_Init+0x58>)
 800225e:	2200      	movs	r2, #0
 8002260:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002262:	4b08      	ldr	r3, [pc, #32]	@ (8002284 <MX_USART2_UART_Init+0x58>)
 8002264:	2200      	movs	r2, #0
 8002266:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002268:	4b06      	ldr	r3, [pc, #24]	@ (8002284 <MX_USART2_UART_Init+0x58>)
 800226a:	2200      	movs	r2, #0
 800226c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800226e:	4805      	ldr	r0, [pc, #20]	@ (8002284 <MX_USART2_UART_Init+0x58>)
 8002270:	f003 faec 	bl	800584c <HAL_UART_Init>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800227a:	f000 f8b1 	bl	80023e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800227e:	bf00      	nop
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	200001dc 	.word	0x200001dc
 8002288:	40004400 	.word	0x40004400

0800228c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08c      	sub	sp, #48	@ 0x30
 8002290:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002292:	f107 031c 	add.w	r3, r7, #28
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	605a      	str	r2, [r3, #4]
 800229c:	609a      	str	r2, [r3, #8]
 800229e:	60da      	str	r2, [r3, #12]
 80022a0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022a2:	4b36      	ldr	r3, [pc, #216]	@ (800237c <MX_GPIO_Init+0xf0>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a6:	4a35      	ldr	r2, [pc, #212]	@ (800237c <MX_GPIO_Init+0xf0>)
 80022a8:	f043 0304 	orr.w	r3, r3, #4
 80022ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ae:	4b33      	ldr	r3, [pc, #204]	@ (800237c <MX_GPIO_Init+0xf0>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b2:	f003 0304 	and.w	r3, r3, #4
 80022b6:	61bb      	str	r3, [r7, #24]
 80022b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022ba:	4b30      	ldr	r3, [pc, #192]	@ (800237c <MX_GPIO_Init+0xf0>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022be:	4a2f      	ldr	r2, [pc, #188]	@ (800237c <MX_GPIO_Init+0xf0>)
 80022c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022c6:	4b2d      	ldr	r3, [pc, #180]	@ (800237c <MX_GPIO_Init+0xf0>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d2:	4b2a      	ldr	r3, [pc, #168]	@ (800237c <MX_GPIO_Init+0xf0>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d6:	4a29      	ldr	r2, [pc, #164]	@ (800237c <MX_GPIO_Init+0xf0>)
 80022d8:	f043 0301 	orr.w	r3, r3, #1
 80022dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022de:	4b27      	ldr	r3, [pc, #156]	@ (800237c <MX_GPIO_Init+0xf0>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	613b      	str	r3, [r7, #16]
 80022e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ea:	4b24      	ldr	r3, [pc, #144]	@ (800237c <MX_GPIO_Init+0xf0>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ee:	4a23      	ldr	r2, [pc, #140]	@ (800237c <MX_GPIO_Init+0xf0>)
 80022f0:	f043 0302 	orr.w	r3, r3, #2
 80022f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022f6:	4b21      	ldr	r3, [pc, #132]	@ (800237c <MX_GPIO_Init+0xf0>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002302:	4b1e      	ldr	r3, [pc, #120]	@ (800237c <MX_GPIO_Init+0xf0>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002306:	4a1d      	ldr	r2, [pc, #116]	@ (800237c <MX_GPIO_Init+0xf0>)
 8002308:	f043 0308 	orr.w	r3, r3, #8
 800230c:	6313      	str	r3, [r2, #48]	@ 0x30
 800230e:	4b1b      	ldr	r3, [pc, #108]	@ (800237c <MX_GPIO_Init+0xf0>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002312:	f003 0308 	and.w	r3, r3, #8
 8002316:	60bb      	str	r3, [r7, #8]
 8002318:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800231a:	4b18      	ldr	r3, [pc, #96]	@ (800237c <MX_GPIO_Init+0xf0>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231e:	4a17      	ldr	r2, [pc, #92]	@ (800237c <MX_GPIO_Init+0xf0>)
 8002320:	f043 0320 	orr.w	r3, r3, #32
 8002324:	6313      	str	r3, [r2, #48]	@ 0x30
 8002326:	4b15      	ldr	r3, [pc, #84]	@ (800237c <MX_GPIO_Init+0xf0>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232a:	f003 0320 	and.w	r3, r3, #32
 800232e:	607b      	str	r3, [r7, #4]
 8002330:	687b      	ldr	r3, [r7, #4]

  // LED'ler için GPIOB başlatma (backup'tan)
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin|LD3_Pin, GPIO_PIN_RESET);
 8002332:	2200      	movs	r2, #0
 8002334:	f244 0181 	movw	r1, #16513	@ 0x4081
 8002338:	4811      	ldr	r0, [pc, #68]	@ (8002380 <MX_GPIO_Init+0xf4>)
 800233a:	f000 ffeb 	bl	8003314 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin|LD3_Pin;
 800233e:	f244 0381 	movw	r3, #16513	@ 0x4081
 8002342:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002344:	2301      	movs	r3, #1
 8002346:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234c:	2300      	movs	r3, #0
 800234e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002350:	f107 031c 	add.w	r3, r7, #28
 8002354:	4619      	mov	r1, r3
 8002356:	480a      	ldr	r0, [pc, #40]	@ (8002380 <MX_GPIO_Init+0xf4>)
 8002358:	f000 fe18 	bl	8002f8c <HAL_GPIO_Init>

  // IR sensör için GPIOF Pin 5
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800235c:	2320      	movs	r3, #32
 800235e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002360:	2300      	movs	r3, #0
 8002362:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	2300      	movs	r3, #0
 8002366:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002368:	f107 031c 	add.w	r3, r7, #28
 800236c:	4619      	mov	r1, r3
 800236e:	4805      	ldr	r0, [pc, #20]	@ (8002384 <MX_GPIO_Init+0xf8>)
 8002370:	f000 fe0c 	bl	8002f8c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002374:	bf00      	nop
 8002376:	3730      	adds	r7, #48	@ 0x30
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40023800 	.word	0x40023800
 8002380:	40020400 	.word	0x40020400
 8002384:	40021400 	.word	0x40021400

08002388 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800238e:	463b      	mov	r3, r7
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	605a      	str	r2, [r3, #4]
 8002396:	609a      	str	r2, [r3, #8]
 8002398:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800239a:	f000 fd7f 	bl	8002e9c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800239e:	2301      	movs	r3, #1
 80023a0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80023a6:	2300      	movs	r3, #0
 80023a8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80023aa:	231f      	movs	r3, #31
 80023ac:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80023ae:	2387      	movs	r3, #135	@ 0x87
 80023b0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80023b2:	2300      	movs	r3, #0
 80023b4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80023b6:	2300      	movs	r3, #0
 80023b8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80023ba:	2301      	movs	r3, #1
 80023bc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80023be:	2301      	movs	r3, #1
 80023c0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80023c2:	2300      	movs	r3, #0
 80023c4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80023c6:	2300      	movs	r3, #0
 80023c8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80023ca:	463b      	mov	r3, r7
 80023cc:	4618      	mov	r0, r3
 80023ce:	f000 fd9d 	bl	8002f0c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80023d2:	2004      	movs	r0, #4
 80023d4:	f000 fd7a 	bl	8002ecc <HAL_MPU_Enable>

}
 80023d8:	bf00      	nop
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023e4:	b672      	cpsid	i
}
 80023e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023e8:	bf00      	nop
 80023ea:	e7fd      	b.n	80023e8 <Error_Handler+0x8>

080023ec <mlx90614_read16_internal>:
    return crc;
}


static bool mlx90614_read16_internal(MLX90614_t* sensor, uint8_t address, int16_t *data)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08a      	sub	sp, #40	@ 0x28
 80023f0:	af04      	add	r7, sp, #16
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	460b      	mov	r3, r1
 80023f6:	607a      	str	r2, [r7, #4]
 80023f8:	72fb      	strb	r3, [r7, #11]
    uint8_t d[3];
    if(HAL_I2C_Mem_Read(sensor->hi2c, sensor->device_address, address, I2C_MEMADD_SIZE_8BIT, d, 3, 100) != HAL_OK)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
 8002402:	7afb      	ldrb	r3, [r7, #11]
 8002404:	b29a      	uxth	r2, r3
 8002406:	2364      	movs	r3, #100	@ 0x64
 8002408:	9302      	str	r3, [sp, #8]
 800240a:	2303      	movs	r3, #3
 800240c:	9301      	str	r3, [sp, #4]
 800240e:	f107 0314 	add.w	r3, r7, #20
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	2301      	movs	r3, #1
 8002416:	f001 f947 	bl	80036a8 <HAL_I2C_Mem_Read>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <mlx90614_read16_internal+0x38>
        return false;
 8002420:	2300      	movs	r3, #0
 8002422:	e00a      	b.n	800243a <mlx90614_read16_internal+0x4e>
    *data = d[0] | (d[1] << 8);
 8002424:	7d3b      	ldrb	r3, [r7, #20]
 8002426:	b21a      	sxth	r2, r3
 8002428:	7d7b      	ldrb	r3, [r7, #21]
 800242a:	b21b      	sxth	r3, r3
 800242c:	021b      	lsls	r3, r3, #8
 800242e:	b21b      	sxth	r3, r3
 8002430:	4313      	orrs	r3, r2
 8002432:	b21a      	sxth	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	801a      	strh	r2, [r3, #0]
    return true;
 8002438:	2301      	movs	r3, #1
}
 800243a:	4618      	mov	r0, r3
 800243c:	3718      	adds	r7, #24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
	...

08002444 <mlx90614_calcTemperature>:
    }
    return rawTemp;
}

float mlx90614_calcTemperature(MLX90614_t* sensor, int16_t rawTemp)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	460b      	mov	r3, r1
 800244e:	807b      	strh	r3, [r7, #2]
    float retTemp;
    if(sensor->unit == MLX90614_UNIT_RAW)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d108      	bne.n	800246a <mlx90614_calcTemperature+0x26>
    {
        retTemp = (float)rawTemp;
 8002458:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800245c:	ee07 3a90 	vmov	s15, r3
 8002460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002464:	edc7 7a03 	vstr	s15, [r7, #12]
 8002468:	e02b      	b.n	80024c2 <mlx90614_calcTemperature+0x7e>
    }
    else
    {
        retTemp = (float)(rawTemp) * 0.02f;
 800246a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800246e:	ee07 3a90 	vmov	s15, r3
 8002472:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002476:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80024d8 <mlx90614_calcTemperature+0x94>
 800247a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800247e:	edc7 7a03 	vstr	s15, [r7, #12]
        if(sensor->unit != MLX90614_UNIT_K)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d007      	beq.n	800249a <mlx90614_calcTemperature+0x56>
            retTemp -= 273.15f;
 800248a:	edd7 7a03 	vldr	s15, [r7, #12]
 800248e:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80024dc <mlx90614_calcTemperature+0x98>
 8002492:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002496:	edc7 7a03 	vstr	s15, [r7, #12]
        if(sensor->unit == MLX90614_UNIT_F)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b03      	cmp	r3, #3
 80024a0:	d10f      	bne.n	80024c2 <mlx90614_calcTemperature+0x7e>
            retTemp = retTemp * 9.0f / 5.0f + 32.0f;
 80024a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80024a6:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 80024aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80024ae:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 80024b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024b6:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80024e0 <mlx90614_calcTemperature+0x9c>
 80024ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024be:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    return retTemp;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	ee07 3a90 	vmov	s15, r3
}
 80024c8:	eeb0 0a67 	vmov.f32	s0, s15
 80024cc:	3714      	adds	r7, #20
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	3ca3d70a 	.word	0x3ca3d70a
 80024dc:	43889333 	.word	0x43889333
 80024e0:	42000000 	.word	0x42000000

080024e4 <mlx90614_init>:

bool mlx90614_init(MLX90614_t* sensor, I2C_HandleTypeDef* hi2c, uint16_t devAddress)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	4613      	mov	r3, r2
 80024f0:	80fb      	strh	r3, [r7, #6]
    memset(sensor, 0, sizeof(MLX90614_t));
 80024f2:	223c      	movs	r2, #60	@ 0x3c
 80024f4:	2100      	movs	r1, #0
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f003 fed0 	bl	800629c <memset>
    sensor->unit = MLX90614_UNIT_C;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2202      	movs	r2, #2
 8002500:	701a      	strb	r2, [r3, #0]
    sensor->hi2c = hi2c;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	68ba      	ldr	r2, [r7, #8]
 8002506:	635a      	str	r2, [r3, #52]	@ 0x34
    sensor->device_address = devAddress;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	88fa      	ldrh	r2, [r7, #6]
 800250c:	871a      	strh	r2, [r3, #56]	@ 0x38
    if(HAL_I2C_IsDeviceReady(hi2c, devAddress, 1, 100) != HAL_OK)
 800250e:	88f9      	ldrh	r1, [r7, #6]
 8002510:	2364      	movs	r3, #100	@ 0x64
 8002512:	2201      	movs	r2, #1
 8002514:	68b8      	ldr	r0, [r7, #8]
 8002516:	f001 f9e1 	bl	80038dc <HAL_I2C_IsDeviceReady>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <mlx90614_init+0x40>
        return false;
 8002520:	2300      	movs	r3, #0
 8002522:	e03f      	b.n	80025a4 <mlx90614_init+0xc0>
    if(!mlx90614_read16_internal(sensor, MLX90614_REGISTER_CONFIG, (int16_t*)&sensor->configReg)) return false;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	3330      	adds	r3, #48	@ 0x30
 8002528:	461a      	mov	r2, r3
 800252a:	2125      	movs	r1, #37	@ 0x25
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f7ff ff5d 	bl	80023ec <mlx90614_read16_internal>
 8002532:	4603      	mov	r3, r0
 8002534:	f083 0301 	eor.w	r3, r3, #1
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <mlx90614_init+0x5e>
 800253e:	2300      	movs	r3, #0
 8002540:	e030      	b.n	80025a4 <mlx90614_init+0xc0>
    if(!mlx90614_readID(sensor, NULL)) return false;
 8002542:	2100      	movs	r1, #0
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f000 f831 	bl	80025ac <mlx90614_readID>
 800254a:	4603      	mov	r3, r0
 800254c:	f083 0301 	eor.w	r3, r3, #1
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <mlx90614_init+0x76>
 8002556:	2300      	movs	r3, #0
 8002558:	e024      	b.n	80025a4 <mlx90614_init+0xc0>
    if(!mlx90614_getEmissivity(sensor, NULL)) return false;
 800255a:	2100      	movs	r1, #0
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f000 f85f 	bl	8002620 <mlx90614_getEmissivity>
 8002562:	4603      	mov	r3, r0
 8002564:	f083 0301 	eor.w	r3, r3, #1
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <mlx90614_init+0x8e>
 800256e:	2300      	movs	r3, #0
 8002570:	e018      	b.n	80025a4 <mlx90614_init+0xc0>
    if(!mlx90614_getMax(sensor, NULL)) return false;
 8002572:	2100      	movs	r1, #0
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f000 f881 	bl	800267c <mlx90614_getMax>
 800257a:	4603      	mov	r3, r0
 800257c:	f083 0301 	eor.w	r3, r3, #1
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <mlx90614_init+0xa6>
 8002586:	2300      	movs	r3, #0
 8002588:	e00c      	b.n	80025a4 <mlx90614_init+0xc0>
    if(!mlx90614_getMin(sensor, NULL)) return false;
 800258a:	2100      	movs	r1, #0
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f000 f89a 	bl	80026c6 <mlx90614_getMin>
 8002592:	4603      	mov	r3, r0
 8002594:	f083 0301 	eor.w	r3, r3, #1
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <mlx90614_init+0xbe>
 800259e:	2300      	movs	r3, #0
 80025a0:	e000      	b.n	80025a4 <mlx90614_init+0xc0>
    return true;
 80025a2:	2301      	movs	r3, #1
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <mlx90614_readID>:
{
    sensor->unit = MLX90614_UNIT_;
}

bool mlx90614_readID(MLX90614_t* sensor, int16_t *id)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
    for(int i=0; i<4; i++)
 80025b6:	2300      	movs	r3, #0
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	e028      	b.n	800260e <mlx90614_readID+0x62>
    {
        int16_t temp = 0;
 80025bc:	2300      	movs	r3, #0
 80025be:	817b      	strh	r3, [r7, #10]
        if(!mlx90614_read16_internal(sensor, MLX90614_REGISTER_ID0 + i, &temp))
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	333c      	adds	r3, #60	@ 0x3c
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	f107 020a 	add.w	r2, r7, #10
 80025cc:	4619      	mov	r1, r3
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7ff ff0c 	bl	80023ec <mlx90614_read16_internal>
 80025d4:	4603      	mov	r3, r0
 80025d6:	f083 0301 	eor.w	r3, r3, #1
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <mlx90614_readID+0x38>
            return false;
 80025e0:	2300      	movs	r3, #0
 80025e2:	e018      	b.n	8002616 <mlx90614_readID+0x6a>
        if(id != NULL)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d006      	beq.n	80025f8 <mlx90614_readID+0x4c>
            id[i] = (uint16_t)temp;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	4413      	add	r3, r2
 80025f2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80025f6:	801a      	strh	r2, [r3, #0]
        sensor->id[i] = (uint16_t)temp;
 80025f8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80025fc:	b299      	uxth	r1, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	3214      	adds	r2, #20
 8002604:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(int i=0; i<4; i++)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	3301      	adds	r3, #1
 800260c:	60fb      	str	r3, [r7, #12]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2b03      	cmp	r3, #3
 8002612:	ddd3      	ble.n	80025bc <mlx90614_readID+0x10>
    }
    return true;
 8002614:	2301      	movs	r3, #1
}
 8002616:	4618      	mov	r0, r3
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
	...

08002620 <mlx90614_getEmissivity>:

bool mlx90614_getEmissivity(MLX90614_t* sensor, float *emissivity)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
    if(mlx90614_read16_internal(sensor, MLX90614_REGISTER_KE, &sensor->rawEmissivity))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	3302      	adds	r3, #2
 800262e:	461a      	mov	r2, r3
 8002630:	2124      	movs	r1, #36	@ 0x24
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7ff feda 	bl	80023ec <mlx90614_read16_internal>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d017      	beq.n	800266e <mlx90614_getEmissivity+0x4e>
    {
        sensor->emissivity = ((float)((uint16_t)sensor->rawEmissivity)) / 65535.0f;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002644:	b29b      	uxth	r3, r3
 8002646:	ee07 3a90 	vmov	s15, r3
 800264a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800264e:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8002678 <mlx90614_getEmissivity+0x58>
 8002652:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	edc3 7a04 	vstr	s15, [r3, #16]
        if(emissivity != NULL)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <mlx90614_getEmissivity+0x4a>
            *emissivity = sensor->emissivity;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	691a      	ldr	r2, [r3, #16]
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	601a      	str	r2, [r3, #0]
        return true;
 800266a:	2301      	movs	r3, #1
 800266c:	e000      	b.n	8002670 <mlx90614_getEmissivity+0x50>
    }
    return false;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	477fff00 	.word	0x477fff00

0800267c <mlx90614_getMax>:
    sensor->rawMin = mlx90614_calcRawTemp(sensor, minTemp);
    return mlx90614_write16_internal(sensor, MLX90614_REGISTER_TOMIN, sensor->rawMin);
}

bool mlx90614_getMax(MLX90614_t* sensor, float *maxTemp)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
    if(mlx90614_read16_internal(sensor, MLX90614_REGISTER_TOMAX, &sensor->rawMax))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	330a      	adds	r3, #10
 800268a:	461a      	mov	r2, r3
 800268c:	2120      	movs	r1, #32
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7ff feac 	bl	80023ec <mlx90614_read16_internal>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d010      	beq.n	80026bc <mlx90614_getMax+0x40>
    {
        if(maxTemp != NULL)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d00b      	beq.n	80026b8 <mlx90614_getMax+0x3c>
            *maxTemp = mlx90614_calcTemperature(sensor, sensor->rawMax);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80026a6:	4619      	mov	r1, r3
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f7ff fecb 	bl	8002444 <mlx90614_calcTemperature>
 80026ae:	eef0 7a40 	vmov.f32	s15, s0
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	edc3 7a00 	vstr	s15, [r3]
        return true;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e000      	b.n	80026be <mlx90614_getMax+0x42>
    }
    return false;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <mlx90614_getMin>:

bool mlx90614_getMin(MLX90614_t* sensor, float *minTemp)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b082      	sub	sp, #8
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
 80026ce:	6039      	str	r1, [r7, #0]
    if(mlx90614_read16_internal(sensor, MLX90614_REGISTER_TOMIN, &sensor->rawMin))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	330c      	adds	r3, #12
 80026d4:	461a      	mov	r2, r3
 80026d6:	2121      	movs	r1, #33	@ 0x21
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f7ff fe87 	bl	80023ec <mlx90614_read16_internal>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d010      	beq.n	8002706 <mlx90614_getMin+0x40>
    {
        if(minTemp != NULL)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00b      	beq.n	8002702 <mlx90614_getMin+0x3c>
            *minTemp = mlx90614_calcTemperature(sensor, sensor->rawMin);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80026f0:	4619      	mov	r1, r3
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7ff fea6 	bl	8002444 <mlx90614_calcTemperature>
 80026f8:	eef0 7a40 	vmov.f32	s15, s0
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	edc3 7a00 	vstr	s15, [r3]
        return true;
 8002702:	2301      	movs	r3, #1
 8002704:	e000      	b.n	8002708 <mlx90614_getMin+0x42>
    }
    return false;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <mlx90614_getAmbient>:

bool mlx90614_getAmbient(MLX90614_t* sensor, float *ambientTemp)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
    if(mlx90614_read16_internal(sensor, MLX90614_REGISTER_TA, &sensor->rawAmbient))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	3304      	adds	r3, #4
 800271e:	461a      	mov	r2, r3
 8002720:	2106      	movs	r1, #6
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f7ff fe62 	bl	80023ec <mlx90614_read16_internal>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d010      	beq.n	8002750 <mlx90614_getAmbient+0x40>
    {
        if(ambientTemp != NULL)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00b      	beq.n	800274c <mlx90614_getAmbient+0x3c>
            *ambientTemp = mlx90614_calcTemperature(sensor, sensor->rawAmbient);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800273a:	4619      	mov	r1, r3
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f7ff fe81 	bl	8002444 <mlx90614_calcTemperature>
 8002742:	eef0 7a40 	vmov.f32	s15, s0
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	edc3 7a00 	vstr	s15, [r3]
        return true;
 800274c:	2301      	movs	r3, #1
 800274e:	e000      	b.n	8002752 <mlx90614_getAmbient+0x42>
    }
    return false;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <mlx90614_getObject1>:

bool mlx90614_getObject1(MLX90614_t* sensor, float *objectTemp)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
 8002762:	6039      	str	r1, [r7, #0]
    if(mlx90614_read16_internal(sensor, MLX90614_REGISTER_TOBJ1, &sensor->rawObject1))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3306      	adds	r3, #6
 8002768:	461a      	mov	r2, r3
 800276a:	2107      	movs	r1, #7
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f7ff fe3d 	bl	80023ec <mlx90614_read16_internal>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d017      	beq.n	80027a8 <mlx90614_getObject1+0x4e>
    {
        if(sensor->rawObject1 & 0x8000) return false;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800277e:	2b00      	cmp	r3, #0
 8002780:	da01      	bge.n	8002786 <mlx90614_getObject1+0x2c>
 8002782:	2300      	movs	r3, #0
 8002784:	e011      	b.n	80027aa <mlx90614_getObject1+0x50>
        if(objectTemp != NULL)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00b      	beq.n	80027a4 <mlx90614_getObject1+0x4a>
            *objectTemp = mlx90614_calcTemperature(sensor, sensor->rawObject1);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002792:	4619      	mov	r1, r3
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f7ff fe55 	bl	8002444 <mlx90614_calcTemperature>
 800279a:	eef0 7a40 	vmov.f32	s15, s0
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	edc3 7a00 	vstr	s15, [r3]
        return true;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e000      	b.n	80027aa <mlx90614_getObject1+0x50>
    }
    return false;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
	...

080027b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80027ba:	4b0f      	ldr	r3, [pc, #60]	@ (80027f8 <HAL_MspInit+0x44>)
 80027bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027be:	4a0e      	ldr	r2, [pc, #56]	@ (80027f8 <HAL_MspInit+0x44>)
 80027c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80027c6:	4b0c      	ldr	r3, [pc, #48]	@ (80027f8 <HAL_MspInit+0x44>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ce:	607b      	str	r3, [r7, #4]
 80027d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027d2:	4b09      	ldr	r3, [pc, #36]	@ (80027f8 <HAL_MspInit+0x44>)
 80027d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d6:	4a08      	ldr	r2, [pc, #32]	@ (80027f8 <HAL_MspInit+0x44>)
 80027d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80027de:	4b06      	ldr	r3, [pc, #24]	@ (80027f8 <HAL_MspInit+0x44>)
 80027e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027e6:	603b      	str	r3, [r7, #0]
 80027e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	40023800 	.word	0x40023800

080027fc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b0ac      	sub	sp, #176	@ 0xb0
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002804:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	605a      	str	r2, [r3, #4]
 800280e:	609a      	str	r2, [r3, #8]
 8002810:	60da      	str	r2, [r3, #12]
 8002812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002814:	f107 0318 	add.w	r3, r7, #24
 8002818:	2284      	movs	r2, #132	@ 0x84
 800281a:	2100      	movs	r1, #0
 800281c:	4618      	mov	r0, r3
 800281e:	f003 fd3d 	bl	800629c <memset>
  if(hi2c->Instance==I2C1)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a43      	ldr	r2, [pc, #268]	@ (8002934 <HAL_I2C_MspInit+0x138>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d13d      	bne.n	80028a8 <HAL_I2C_MspInit+0xac>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800282c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002830:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002832:	2300      	movs	r3, #0
 8002834:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002836:	f107 0318 	add.w	r3, r7, #24
 800283a:	4618      	mov	r0, r3
 800283c:	f002 f988 	bl	8004b50 <HAL_RCCEx_PeriphCLKConfig>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002846:	f7ff fdcb 	bl	80023e0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800284a:	4b3b      	ldr	r3, [pc, #236]	@ (8002938 <HAL_I2C_MspInit+0x13c>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284e:	4a3a      	ldr	r2, [pc, #232]	@ (8002938 <HAL_I2C_MspInit+0x13c>)
 8002850:	f043 0302 	orr.w	r3, r3, #2
 8002854:	6313      	str	r3, [r2, #48]	@ 0x30
 8002856:	4b38      	ldr	r3, [pc, #224]	@ (8002938 <HAL_I2C_MspInit+0x13c>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	617b      	str	r3, [r7, #20]
 8002860:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002862:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002866:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800286a:	2312      	movs	r3, #18
 800286c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002870:	2300      	movs	r3, #0
 8002872:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002876:	2303      	movs	r3, #3
 8002878:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800287c:	2304      	movs	r3, #4
 800287e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002882:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002886:	4619      	mov	r1, r3
 8002888:	482c      	ldr	r0, [pc, #176]	@ (800293c <HAL_I2C_MspInit+0x140>)
 800288a:	f000 fb7f 	bl	8002f8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800288e:	4b2a      	ldr	r3, [pc, #168]	@ (8002938 <HAL_I2C_MspInit+0x13c>)
 8002890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002892:	4a29      	ldr	r2, [pc, #164]	@ (8002938 <HAL_I2C_MspInit+0x13c>)
 8002894:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002898:	6413      	str	r3, [r2, #64]	@ 0x40
 800289a:	4b27      	ldr	r3, [pc, #156]	@ (8002938 <HAL_I2C_MspInit+0x13c>)
 800289c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028a2:	613b      	str	r3, [r7, #16]
 80028a4:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 80028a6:	e041      	b.n	800292c <HAL_I2C_MspInit+0x130>
  else if(hi2c->Instance==I2C2)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a24      	ldr	r2, [pc, #144]	@ (8002940 <HAL_I2C_MspInit+0x144>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d13c      	bne.n	800292c <HAL_I2C_MspInit+0x130>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80028b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80028b6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80028b8:	2300      	movs	r3, #0
 80028ba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028be:	f107 0318 	add.w	r3, r7, #24
 80028c2:	4618      	mov	r0, r3
 80028c4:	f002 f944 	bl	8004b50 <HAL_RCCEx_PeriphCLKConfig>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 80028ce:	f7ff fd87 	bl	80023e0 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80028d2:	4b19      	ldr	r3, [pc, #100]	@ (8002938 <HAL_I2C_MspInit+0x13c>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d6:	4a18      	ldr	r2, [pc, #96]	@ (8002938 <HAL_I2C_MspInit+0x13c>)
 80028d8:	f043 0320 	orr.w	r3, r3, #32
 80028dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80028de:	4b16      	ldr	r3, [pc, #88]	@ (8002938 <HAL_I2C_MspInit+0x13c>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e2:	f003 0320 	and.w	r3, r3, #32
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80028ea:	2303      	movs	r3, #3
 80028ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028f0:	2312      	movs	r3, #18
 80028f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f6:	2300      	movs	r3, #0
 80028f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028fc:	2303      	movs	r3, #3
 80028fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002902:	2304      	movs	r3, #4
 8002904:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002908:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800290c:	4619      	mov	r1, r3
 800290e:	480d      	ldr	r0, [pc, #52]	@ (8002944 <HAL_I2C_MspInit+0x148>)
 8002910:	f000 fb3c 	bl	8002f8c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002914:	4b08      	ldr	r3, [pc, #32]	@ (8002938 <HAL_I2C_MspInit+0x13c>)
 8002916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002918:	4a07      	ldr	r2, [pc, #28]	@ (8002938 <HAL_I2C_MspInit+0x13c>)
 800291a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800291e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002920:	4b05      	ldr	r3, [pc, #20]	@ (8002938 <HAL_I2C_MspInit+0x13c>)
 8002922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002924:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002928:	60bb      	str	r3, [r7, #8]
 800292a:	68bb      	ldr	r3, [r7, #8]
}
 800292c:	bf00      	nop
 800292e:	37b0      	adds	r7, #176	@ 0xb0
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40005400 	.word	0x40005400
 8002938:	40023800 	.word	0x40023800
 800293c:	40020400 	.word	0x40020400
 8002940:	40005800 	.word	0x40005800
 8002944:	40021400 	.word	0x40021400

08002948 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b08a      	sub	sp, #40	@ 0x28
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002950:	f107 0314 	add.w	r3, r7, #20
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	605a      	str	r2, [r3, #4]
 800295a:	609a      	str	r2, [r3, #8]
 800295c:	60da      	str	r2, [r3, #12]
 800295e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a17      	ldr	r2, [pc, #92]	@ (80029c4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d127      	bne.n	80029ba <HAL_TIM_Encoder_MspInit+0x72>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800296a:	4b17      	ldr	r3, [pc, #92]	@ (80029c8 <HAL_TIM_Encoder_MspInit+0x80>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296e:	4a16      	ldr	r2, [pc, #88]	@ (80029c8 <HAL_TIM_Encoder_MspInit+0x80>)
 8002970:	f043 0302 	orr.w	r3, r3, #2
 8002974:	6413      	str	r3, [r2, #64]	@ 0x40
 8002976:	4b14      	ldr	r3, [pc, #80]	@ (80029c8 <HAL_TIM_Encoder_MspInit+0x80>)
 8002978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	613b      	str	r3, [r7, #16]
 8002980:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002982:	4b11      	ldr	r3, [pc, #68]	@ (80029c8 <HAL_TIM_Encoder_MspInit+0x80>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002986:	4a10      	ldr	r2, [pc, #64]	@ (80029c8 <HAL_TIM_Encoder_MspInit+0x80>)
 8002988:	f043 0304 	orr.w	r3, r3, #4
 800298c:	6313      	str	r3, [r2, #48]	@ 0x30
 800298e:	4b0e      	ldr	r3, [pc, #56]	@ (80029c8 <HAL_TIM_Encoder_MspInit+0x80>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002992:	f003 0304 	and.w	r3, r3, #4
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800299a:	23c0      	movs	r3, #192	@ 0xc0
 800299c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299e:	2302      	movs	r3, #2
 80029a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a2:	2300      	movs	r3, #0
 80029a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a6:	2300      	movs	r3, #0
 80029a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80029aa:	2302      	movs	r3, #2
 80029ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029ae:	f107 0314 	add.w	r3, r7, #20
 80029b2:	4619      	mov	r1, r3
 80029b4:	4805      	ldr	r0, [pc, #20]	@ (80029cc <HAL_TIM_Encoder_MspInit+0x84>)
 80029b6:	f000 fae9 	bl	8002f8c <HAL_GPIO_Init>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 80029ba:	bf00      	nop
 80029bc:	3728      	adds	r7, #40	@ 0x28
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	40000400 	.word	0x40000400
 80029c8:	40023800 	.word	0x40023800
 80029cc:	40020800 	.word	0x40020800

080029d0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b0aa      	sub	sp, #168	@ 0xa8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	605a      	str	r2, [r3, #4]
 80029e2:	609a      	str	r2, [r3, #8]
 80029e4:	60da      	str	r2, [r3, #12]
 80029e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029e8:	f107 0310 	add.w	r3, r7, #16
 80029ec:	2284      	movs	r2, #132	@ 0x84
 80029ee:	2100      	movs	r1, #0
 80029f0:	4618      	mov	r0, r3
 80029f2:	f003 fc53 	bl	800629c <memset>
  if(huart->Instance==USART2)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a21      	ldr	r2, [pc, #132]	@ (8002a80 <HAL_UART_MspInit+0xb0>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d13a      	bne.n	8002a76 <HAL_UART_MspInit+0xa6>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002a00:	2380      	movs	r3, #128	@ 0x80
 8002a02:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002a04:	2300      	movs	r3, #0
 8002a06:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a08:	f107 0310 	add.w	r3, r7, #16
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f002 f89f 	bl	8004b50 <HAL_RCCEx_PeriphCLKConfig>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002a18:	f7ff fce2 	bl	80023e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a1c:	4b19      	ldr	r3, [pc, #100]	@ (8002a84 <HAL_UART_MspInit+0xb4>)
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a20:	4a18      	ldr	r2, [pc, #96]	@ (8002a84 <HAL_UART_MspInit+0xb4>)
 8002a22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a26:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a28:	4b16      	ldr	r3, [pc, #88]	@ (8002a84 <HAL_UART_MspInit+0xb4>)
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a34:	4b13      	ldr	r3, [pc, #76]	@ (8002a84 <HAL_UART_MspInit+0xb4>)
 8002a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a38:	4a12      	ldr	r2, [pc, #72]	@ (8002a84 <HAL_UART_MspInit+0xb4>)
 8002a3a:	f043 0301 	orr.w	r3, r3, #1
 8002a3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a40:	4b10      	ldr	r3, [pc, #64]	@ (8002a84 <HAL_UART_MspInit+0xb4>)
 8002a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	60bb      	str	r3, [r7, #8]
 8002a4a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002a4c:	230c      	movs	r3, #12
 8002a4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a52:	2302      	movs	r3, #2
 8002a54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a64:	2307      	movs	r3, #7
 8002a66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a6a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4805      	ldr	r0, [pc, #20]	@ (8002a88 <HAL_UART_MspInit+0xb8>)
 8002a72:	f000 fa8b 	bl	8002f8c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002a76:	bf00      	nop
 8002a78:	37a8      	adds	r7, #168	@ 0xa8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40004400 	.word	0x40004400
 8002a84:	40023800 	.word	0x40023800
 8002a88:	40020000 	.word	0x40020000

08002a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a90:	bf00      	nop
 8002a92:	e7fd      	b.n	8002a90 <NMI_Handler+0x4>

08002a94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a98:	bf00      	nop
 8002a9a:	e7fd      	b.n	8002a98 <HardFault_Handler+0x4>

08002a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002aa0:	bf00      	nop
 8002aa2:	e7fd      	b.n	8002aa0 <MemManage_Handler+0x4>

08002aa4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002aa8:	bf00      	nop
 8002aaa:	e7fd      	b.n	8002aa8 <BusFault_Handler+0x4>

08002aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ab0:	bf00      	nop
 8002ab2:	e7fd      	b.n	8002ab0 <UsageFault_Handler+0x4>

08002ab4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ab8:	bf00      	nop
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ac6:	bf00      	nop
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ad4:	bf00      	nop
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ae2:	f000 f8b1 	bl	8002c48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ae6:	bf00      	nop
 8002ae8:	bd80      	pop	{r7, pc}
	...

08002aec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002af4:	4a14      	ldr	r2, [pc, #80]	@ (8002b48 <_sbrk+0x5c>)
 8002af6:	4b15      	ldr	r3, [pc, #84]	@ (8002b4c <_sbrk+0x60>)
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b00:	4b13      	ldr	r3, [pc, #76]	@ (8002b50 <_sbrk+0x64>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d102      	bne.n	8002b0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b08:	4b11      	ldr	r3, [pc, #68]	@ (8002b50 <_sbrk+0x64>)
 8002b0a:	4a12      	ldr	r2, [pc, #72]	@ (8002b54 <_sbrk+0x68>)
 8002b0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b0e:	4b10      	ldr	r3, [pc, #64]	@ (8002b50 <_sbrk+0x64>)
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4413      	add	r3, r2
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d207      	bcs.n	8002b2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b1c:	f003 fbc6 	bl	80062ac <__errno>
 8002b20:	4603      	mov	r3, r0
 8002b22:	220c      	movs	r2, #12
 8002b24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002b2a:	e009      	b.n	8002b40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b2c:	4b08      	ldr	r3, [pc, #32]	@ (8002b50 <_sbrk+0x64>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b32:	4b07      	ldr	r3, [pc, #28]	@ (8002b50 <_sbrk+0x64>)
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4413      	add	r3, r2
 8002b3a:	4a05      	ldr	r2, [pc, #20]	@ (8002b50 <_sbrk+0x64>)
 8002b3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3718      	adds	r7, #24
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	20050000 	.word	0x20050000
 8002b4c:	00000400 	.word	0x00000400
 8002b50:	200004f0 	.word	0x200004f0
 8002b54:	20000640 	.word	0x20000640

08002b58 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b5c:	4b06      	ldr	r3, [pc, #24]	@ (8002b78 <SystemInit+0x20>)
 8002b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b62:	4a05      	ldr	r2, [pc, #20]	@ (8002b78 <SystemInit+0x20>)
 8002b64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b6c:	bf00      	nop
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	e000ed00 	.word	0xe000ed00

08002b7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002b7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002bb4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b80:	f7ff ffea 	bl	8002b58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b84:	480c      	ldr	r0, [pc, #48]	@ (8002bb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b86:	490d      	ldr	r1, [pc, #52]	@ (8002bbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b88:	4a0d      	ldr	r2, [pc, #52]	@ (8002bc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b8c:	e002      	b.n	8002b94 <LoopCopyDataInit>

08002b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b92:	3304      	adds	r3, #4

08002b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b98:	d3f9      	bcc.n	8002b8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8002bc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b9c:	4c0a      	ldr	r4, [pc, #40]	@ (8002bc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ba0:	e001      	b.n	8002ba6 <LoopFillZerobss>

08002ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ba4:	3204      	adds	r2, #4

08002ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ba8:	d3fb      	bcc.n	8002ba2 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8002baa:	f003 fb85 	bl	80062b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bae:	f7fe ffb1 	bl	8001b14 <main>
  bx  lr    
 8002bb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002bb4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bbc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002bc0:	08006db0 	.word	0x08006db0
  ldr r2, =_sbss
 8002bc4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002bc8:	20000640 	.word	0x20000640

08002bcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bcc:	e7fe      	b.n	8002bcc <ADC_IRQHandler>

08002bce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bd2:	2003      	movs	r0, #3
 8002bd4:	f000 f92e 	bl	8002e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bd8:	200f      	movs	r0, #15
 8002bda:	f000 f805 	bl	8002be8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bde:	f7ff fde9 	bl	80027b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bf0:	4b12      	ldr	r3, [pc, #72]	@ (8002c3c <HAL_InitTick+0x54>)
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	4b12      	ldr	r3, [pc, #72]	@ (8002c40 <HAL_InitTick+0x58>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c06:	4618      	mov	r0, r3
 8002c08:	f000 f93b 	bl	8002e82 <HAL_SYSTICK_Config>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e00e      	b.n	8002c34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b0f      	cmp	r3, #15
 8002c1a:	d80a      	bhi.n	8002c32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c24:	f000 f911 	bl	8002e4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c28:	4a06      	ldr	r2, [pc, #24]	@ (8002c44 <HAL_InitTick+0x5c>)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	e000      	b.n	8002c34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	20000004 	.word	0x20000004
 8002c40:	2000000c 	.word	0x2000000c
 8002c44:	20000008 	.word	0x20000008

08002c48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c4c:	4b06      	ldr	r3, [pc, #24]	@ (8002c68 <HAL_IncTick+0x20>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	461a      	mov	r2, r3
 8002c52:	4b06      	ldr	r3, [pc, #24]	@ (8002c6c <HAL_IncTick+0x24>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4413      	add	r3, r2
 8002c58:	4a04      	ldr	r2, [pc, #16]	@ (8002c6c <HAL_IncTick+0x24>)
 8002c5a:	6013      	str	r3, [r2, #0]
}
 8002c5c:	bf00      	nop
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	2000000c 	.word	0x2000000c
 8002c6c:	200004f4 	.word	0x200004f4

08002c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  return uwTick;
 8002c74:	4b03      	ldr	r3, [pc, #12]	@ (8002c84 <HAL_GetTick+0x14>)
 8002c76:	681b      	ldr	r3, [r3, #0]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	200004f4 	.word	0x200004f4

08002c88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c90:	f7ff ffee 	bl	8002c70 <HAL_GetTick>
 8002c94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ca0:	d005      	beq.n	8002cae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8002ccc <HAL_Delay+0x44>)
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	4413      	add	r3, r2
 8002cac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cae:	bf00      	nop
 8002cb0:	f7ff ffde 	bl	8002c70 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d8f7      	bhi.n	8002cb0 <HAL_Delay+0x28>
  {
  }
}
 8002cc0:	bf00      	nop
 8002cc2:	bf00      	nop
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	2000000c 	.word	0x2000000c

08002cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f003 0307 	and.w	r3, r3, #7
 8002cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8002d10 <__NVIC_SetPriorityGrouping+0x40>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002cec:	4013      	ands	r3, r2
 8002cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002cf8:	4b06      	ldr	r3, [pc, #24]	@ (8002d14 <__NVIC_SetPriorityGrouping+0x44>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cfe:	4a04      	ldr	r2, [pc, #16]	@ (8002d10 <__NVIC_SetPriorityGrouping+0x40>)
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	60d3      	str	r3, [r2, #12]
}
 8002d04:	bf00      	nop
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr
 8002d10:	e000ed00 	.word	0xe000ed00
 8002d14:	05fa0000 	.word	0x05fa0000

08002d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d1c:	4b04      	ldr	r3, [pc, #16]	@ (8002d30 <__NVIC_GetPriorityGrouping+0x18>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	0a1b      	lsrs	r3, r3, #8
 8002d22:	f003 0307 	and.w	r3, r3, #7
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr
 8002d30:	e000ed00 	.word	0xe000ed00

08002d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	6039      	str	r1, [r7, #0]
 8002d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	db0a      	blt.n	8002d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	b2da      	uxtb	r2, r3
 8002d4c:	490c      	ldr	r1, [pc, #48]	@ (8002d80 <__NVIC_SetPriority+0x4c>)
 8002d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d52:	0112      	lsls	r2, r2, #4
 8002d54:	b2d2      	uxtb	r2, r2
 8002d56:	440b      	add	r3, r1
 8002d58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d5c:	e00a      	b.n	8002d74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	4908      	ldr	r1, [pc, #32]	@ (8002d84 <__NVIC_SetPriority+0x50>)
 8002d64:	79fb      	ldrb	r3, [r7, #7]
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	3b04      	subs	r3, #4
 8002d6c:	0112      	lsls	r2, r2, #4
 8002d6e:	b2d2      	uxtb	r2, r2
 8002d70:	440b      	add	r3, r1
 8002d72:	761a      	strb	r2, [r3, #24]
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	e000e100 	.word	0xe000e100
 8002d84:	e000ed00 	.word	0xe000ed00

08002d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b089      	sub	sp, #36	@ 0x24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f003 0307 	and.w	r3, r3, #7
 8002d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	f1c3 0307 	rsb	r3, r3, #7
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	bf28      	it	cs
 8002da6:	2304      	movcs	r3, #4
 8002da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	3304      	adds	r3, #4
 8002dae:	2b06      	cmp	r3, #6
 8002db0:	d902      	bls.n	8002db8 <NVIC_EncodePriority+0x30>
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	3b03      	subs	r3, #3
 8002db6:	e000      	b.n	8002dba <NVIC_EncodePriority+0x32>
 8002db8:	2300      	movs	r3, #0
 8002dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	43da      	mvns	r2, r3
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	401a      	ands	r2, r3
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dd0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dda:	43d9      	mvns	r1, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de0:	4313      	orrs	r3, r2
         );
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3724      	adds	r7, #36	@ 0x24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
	...

08002df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e00:	d301      	bcc.n	8002e06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e02:	2301      	movs	r3, #1
 8002e04:	e00f      	b.n	8002e26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e06:	4a0a      	ldr	r2, [pc, #40]	@ (8002e30 <SysTick_Config+0x40>)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e0e:	210f      	movs	r1, #15
 8002e10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002e14:	f7ff ff8e 	bl	8002d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e18:	4b05      	ldr	r3, [pc, #20]	@ (8002e30 <SysTick_Config+0x40>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e1e:	4b04      	ldr	r3, [pc, #16]	@ (8002e30 <SysTick_Config+0x40>)
 8002e20:	2207      	movs	r2, #7
 8002e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	e000e010 	.word	0xe000e010

08002e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f7ff ff47 	bl	8002cd0 <__NVIC_SetPriorityGrouping>
}
 8002e42:	bf00      	nop
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b086      	sub	sp, #24
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	4603      	mov	r3, r0
 8002e52:	60b9      	str	r1, [r7, #8]
 8002e54:	607a      	str	r2, [r7, #4]
 8002e56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e5c:	f7ff ff5c 	bl	8002d18 <__NVIC_GetPriorityGrouping>
 8002e60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	68b9      	ldr	r1, [r7, #8]
 8002e66:	6978      	ldr	r0, [r7, #20]
 8002e68:	f7ff ff8e 	bl	8002d88 <NVIC_EncodePriority>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e72:	4611      	mov	r1, r2
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff ff5d 	bl	8002d34 <__NVIC_SetPriority>
}
 8002e7a:	bf00      	nop
 8002e7c:	3718      	adds	r7, #24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b082      	sub	sp, #8
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7ff ffb0 	bl	8002df0 <SysTick_Config>
 8002e90:	4603      	mov	r3, r0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
	...

08002e9c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002ea0:	f3bf 8f5f 	dmb	sy
}
 8002ea4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002ea6:	4b07      	ldr	r3, [pc, #28]	@ (8002ec4 <HAL_MPU_Disable+0x28>)
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eaa:	4a06      	ldr	r2, [pc, #24]	@ (8002ec4 <HAL_MPU_Disable+0x28>)
 8002eac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002eb0:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002eb2:	4b05      	ldr	r3, [pc, #20]	@ (8002ec8 <HAL_MPU_Disable+0x2c>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	605a      	str	r2, [r3, #4]
}
 8002eb8:	bf00      	nop
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	e000ed00 	.word	0xe000ed00
 8002ec8:	e000ed90 	.word	0xe000ed90

08002ecc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002ed4:	4a0b      	ldr	r2, [pc, #44]	@ (8002f04 <HAL_MPU_Enable+0x38>)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f043 0301 	orr.w	r3, r3, #1
 8002edc:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002ede:	4b0a      	ldr	r3, [pc, #40]	@ (8002f08 <HAL_MPU_Enable+0x3c>)
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee2:	4a09      	ldr	r2, [pc, #36]	@ (8002f08 <HAL_MPU_Enable+0x3c>)
 8002ee4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ee8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002eea:	f3bf 8f4f 	dsb	sy
}
 8002eee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002ef0:	f3bf 8f6f 	isb	sy
}
 8002ef4:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	e000ed90 	.word	0xe000ed90
 8002f08:	e000ed00 	.word	0xe000ed00

08002f0c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	785a      	ldrb	r2, [r3, #1]
 8002f18:	4b1b      	ldr	r3, [pc, #108]	@ (8002f88 <HAL_MPU_ConfigRegion+0x7c>)
 8002f1a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8002f88 <HAL_MPU_ConfigRegion+0x7c>)
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	4a19      	ldr	r2, [pc, #100]	@ (8002f88 <HAL_MPU_ConfigRegion+0x7c>)
 8002f22:	f023 0301 	bic.w	r3, r3, #1
 8002f26:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002f28:	4a17      	ldr	r2, [pc, #92]	@ (8002f88 <HAL_MPU_ConfigRegion+0x7c>)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	7b1b      	ldrb	r3, [r3, #12]
 8002f34:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	7adb      	ldrb	r3, [r3, #11]
 8002f3a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002f3c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	7a9b      	ldrb	r3, [r3, #10]
 8002f42:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002f44:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	7b5b      	ldrb	r3, [r3, #13]
 8002f4a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002f4c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	7b9b      	ldrb	r3, [r3, #14]
 8002f52:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002f54:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	7bdb      	ldrb	r3, [r3, #15]
 8002f5a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002f5c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	7a5b      	ldrb	r3, [r3, #9]
 8002f62:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002f64:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	7a1b      	ldrb	r3, [r3, #8]
 8002f6a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002f6c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	7812      	ldrb	r2, [r2, #0]
 8002f72:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002f74:	4a04      	ldr	r2, [pc, #16]	@ (8002f88 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002f76:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002f78:	6113      	str	r3, [r2, #16]
}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	e000ed90 	.word	0xe000ed90

08002f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b089      	sub	sp, #36	@ 0x24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002f96:	2300      	movs	r3, #0
 8002f98:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	61fb      	str	r3, [r7, #28]
 8002faa:	e175      	b.n	8003298 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002fac:	2201      	movs	r2, #1
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	f040 8164 	bne.w	8003292 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f003 0303 	and.w	r3, r3, #3
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d005      	beq.n	8002fe2 <HAL_GPIO_Init+0x56>
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f003 0303 	and.w	r3, r3, #3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d130      	bne.n	8003044 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	2203      	movs	r2, #3
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	68da      	ldr	r2, [r3, #12]
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	fa02 f303 	lsl.w	r3, r2, r3
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	4313      	orrs	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003018:	2201      	movs	r2, #1
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	43db      	mvns	r3, r3
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	4013      	ands	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	091b      	lsrs	r3, r3, #4
 800302e:	f003 0201 	and.w	r2, r3, #1
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	4313      	orrs	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f003 0303 	and.w	r3, r3, #3
 800304c:	2b03      	cmp	r3, #3
 800304e:	d017      	beq.n	8003080 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	2203      	movs	r2, #3
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	43db      	mvns	r3, r3
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	4013      	ands	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	4313      	orrs	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f003 0303 	and.w	r3, r3, #3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d123      	bne.n	80030d4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	08da      	lsrs	r2, r3, #3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	3208      	adds	r2, #8
 8003094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	220f      	movs	r2, #15
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	43db      	mvns	r3, r3
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	4013      	ands	r3, r2
 80030ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	691a      	ldr	r2, [r3, #16]
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	08da      	lsrs	r2, r3, #3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	3208      	adds	r2, #8
 80030ce:	69b9      	ldr	r1, [r7, #24]
 80030d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	2203      	movs	r2, #3
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	43db      	mvns	r3, r3
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	4013      	ands	r3, r2
 80030ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f003 0203 	and.w	r2, r3, #3
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	4313      	orrs	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003110:	2b00      	cmp	r3, #0
 8003112:	f000 80be 	beq.w	8003292 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003116:	4b66      	ldr	r3, [pc, #408]	@ (80032b0 <HAL_GPIO_Init+0x324>)
 8003118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800311a:	4a65      	ldr	r2, [pc, #404]	@ (80032b0 <HAL_GPIO_Init+0x324>)
 800311c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003120:	6453      	str	r3, [r2, #68]	@ 0x44
 8003122:	4b63      	ldr	r3, [pc, #396]	@ (80032b0 <HAL_GPIO_Init+0x324>)
 8003124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003126:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800312e:	4a61      	ldr	r2, [pc, #388]	@ (80032b4 <HAL_GPIO_Init+0x328>)
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	089b      	lsrs	r3, r3, #2
 8003134:	3302      	adds	r3, #2
 8003136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800313a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	f003 0303 	and.w	r3, r3, #3
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	220f      	movs	r2, #15
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	43db      	mvns	r3, r3
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	4013      	ands	r3, r2
 8003150:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a58      	ldr	r2, [pc, #352]	@ (80032b8 <HAL_GPIO_Init+0x32c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d037      	beq.n	80031ca <HAL_GPIO_Init+0x23e>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a57      	ldr	r2, [pc, #348]	@ (80032bc <HAL_GPIO_Init+0x330>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d031      	beq.n	80031c6 <HAL_GPIO_Init+0x23a>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a56      	ldr	r2, [pc, #344]	@ (80032c0 <HAL_GPIO_Init+0x334>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d02b      	beq.n	80031c2 <HAL_GPIO_Init+0x236>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a55      	ldr	r2, [pc, #340]	@ (80032c4 <HAL_GPIO_Init+0x338>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d025      	beq.n	80031be <HAL_GPIO_Init+0x232>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a54      	ldr	r2, [pc, #336]	@ (80032c8 <HAL_GPIO_Init+0x33c>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d01f      	beq.n	80031ba <HAL_GPIO_Init+0x22e>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a53      	ldr	r2, [pc, #332]	@ (80032cc <HAL_GPIO_Init+0x340>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d019      	beq.n	80031b6 <HAL_GPIO_Init+0x22a>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a52      	ldr	r2, [pc, #328]	@ (80032d0 <HAL_GPIO_Init+0x344>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d013      	beq.n	80031b2 <HAL_GPIO_Init+0x226>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a51      	ldr	r2, [pc, #324]	@ (80032d4 <HAL_GPIO_Init+0x348>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d00d      	beq.n	80031ae <HAL_GPIO_Init+0x222>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a50      	ldr	r2, [pc, #320]	@ (80032d8 <HAL_GPIO_Init+0x34c>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d007      	beq.n	80031aa <HAL_GPIO_Init+0x21e>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a4f      	ldr	r2, [pc, #316]	@ (80032dc <HAL_GPIO_Init+0x350>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d101      	bne.n	80031a6 <HAL_GPIO_Init+0x21a>
 80031a2:	2309      	movs	r3, #9
 80031a4:	e012      	b.n	80031cc <HAL_GPIO_Init+0x240>
 80031a6:	230a      	movs	r3, #10
 80031a8:	e010      	b.n	80031cc <HAL_GPIO_Init+0x240>
 80031aa:	2308      	movs	r3, #8
 80031ac:	e00e      	b.n	80031cc <HAL_GPIO_Init+0x240>
 80031ae:	2307      	movs	r3, #7
 80031b0:	e00c      	b.n	80031cc <HAL_GPIO_Init+0x240>
 80031b2:	2306      	movs	r3, #6
 80031b4:	e00a      	b.n	80031cc <HAL_GPIO_Init+0x240>
 80031b6:	2305      	movs	r3, #5
 80031b8:	e008      	b.n	80031cc <HAL_GPIO_Init+0x240>
 80031ba:	2304      	movs	r3, #4
 80031bc:	e006      	b.n	80031cc <HAL_GPIO_Init+0x240>
 80031be:	2303      	movs	r3, #3
 80031c0:	e004      	b.n	80031cc <HAL_GPIO_Init+0x240>
 80031c2:	2302      	movs	r3, #2
 80031c4:	e002      	b.n	80031cc <HAL_GPIO_Init+0x240>
 80031c6:	2301      	movs	r3, #1
 80031c8:	e000      	b.n	80031cc <HAL_GPIO_Init+0x240>
 80031ca:	2300      	movs	r3, #0
 80031cc:	69fa      	ldr	r2, [r7, #28]
 80031ce:	f002 0203 	and.w	r2, r2, #3
 80031d2:	0092      	lsls	r2, r2, #2
 80031d4:	4093      	lsls	r3, r2
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	4313      	orrs	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80031dc:	4935      	ldr	r1, [pc, #212]	@ (80032b4 <HAL_GPIO_Init+0x328>)
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	089b      	lsrs	r3, r3, #2
 80031e2:	3302      	adds	r3, #2
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031ea:	4b3d      	ldr	r3, [pc, #244]	@ (80032e0 <HAL_GPIO_Init+0x354>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	43db      	mvns	r3, r3
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	4013      	ands	r3, r2
 80031f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	4313      	orrs	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800320e:	4a34      	ldr	r2, [pc, #208]	@ (80032e0 <HAL_GPIO_Init+0x354>)
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003214:	4b32      	ldr	r3, [pc, #200]	@ (80032e0 <HAL_GPIO_Init+0x354>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	43db      	mvns	r3, r3
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	4013      	ands	r3, r2
 8003222:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	4313      	orrs	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003238:	4a29      	ldr	r2, [pc, #164]	@ (80032e0 <HAL_GPIO_Init+0x354>)
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800323e:	4b28      	ldr	r3, [pc, #160]	@ (80032e0 <HAL_GPIO_Init+0x354>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	43db      	mvns	r3, r3
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	4013      	ands	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	4313      	orrs	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003262:	4a1f      	ldr	r2, [pc, #124]	@ (80032e0 <HAL_GPIO_Init+0x354>)
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003268:	4b1d      	ldr	r3, [pc, #116]	@ (80032e0 <HAL_GPIO_Init+0x354>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	43db      	mvns	r3, r3
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	4013      	ands	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d003      	beq.n	800328c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	4313      	orrs	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800328c:	4a14      	ldr	r2, [pc, #80]	@ (80032e0 <HAL_GPIO_Init+0x354>)
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	3301      	adds	r3, #1
 8003296:	61fb      	str	r3, [r7, #28]
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	2b0f      	cmp	r3, #15
 800329c:	f67f ae86 	bls.w	8002fac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80032a0:	bf00      	nop
 80032a2:	bf00      	nop
 80032a4:	3724      	adds	r7, #36	@ 0x24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	40023800 	.word	0x40023800
 80032b4:	40013800 	.word	0x40013800
 80032b8:	40020000 	.word	0x40020000
 80032bc:	40020400 	.word	0x40020400
 80032c0:	40020800 	.word	0x40020800
 80032c4:	40020c00 	.word	0x40020c00
 80032c8:	40021000 	.word	0x40021000
 80032cc:	40021400 	.word	0x40021400
 80032d0:	40021800 	.word	0x40021800
 80032d4:	40021c00 	.word	0x40021c00
 80032d8:	40022000 	.word	0x40022000
 80032dc:	40022400 	.word	0x40022400
 80032e0:	40013c00 	.word	0x40013c00

080032e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	460b      	mov	r3, r1
 80032ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	691a      	ldr	r2, [r3, #16]
 80032f4:	887b      	ldrh	r3, [r7, #2]
 80032f6:	4013      	ands	r3, r2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d002      	beq.n	8003302 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032fc:	2301      	movs	r3, #1
 80032fe:	73fb      	strb	r3, [r7, #15]
 8003300:	e001      	b.n	8003306 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003302:	2300      	movs	r3, #0
 8003304:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003306:	7bfb      	ldrb	r3, [r7, #15]
}
 8003308:	4618      	mov	r0, r3
 800330a:	3714      	adds	r7, #20
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	460b      	mov	r3, r1
 800331e:	807b      	strh	r3, [r7, #2]
 8003320:	4613      	mov	r3, r2
 8003322:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003324:	787b      	ldrb	r3, [r7, #1]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800332a:	887a      	ldrh	r2, [r7, #2]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003330:	e003      	b.n	800333a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003332:	887b      	ldrh	r3, [r7, #2]
 8003334:	041a      	lsls	r2, r3, #16
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	619a      	str	r2, [r3, #24]
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
	...

08003348 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e08b      	b.n	8003472 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d106      	bne.n	8003374 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f7ff fa44 	bl	80027fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2224      	movs	r2, #36	@ 0x24
 8003378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0201 	bic.w	r2, r2, #1
 800338a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003398:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d107      	bne.n	80033c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	689a      	ldr	r2, [r3, #8]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033be:	609a      	str	r2, [r3, #8]
 80033c0:	e006      	b.n	80033d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689a      	ldr	r2, [r3, #8]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80033ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d108      	bne.n	80033ea <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033e6:	605a      	str	r2, [r3, #4]
 80033e8:	e007      	b.n	80033fa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	685a      	ldr	r2, [r3, #4]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6859      	ldr	r1, [r3, #4]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	4b1d      	ldr	r3, [pc, #116]	@ (800347c <HAL_I2C_Init+0x134>)
 8003406:	430b      	orrs	r3, r1
 8003408:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68da      	ldr	r2, [r3, #12]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003418:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691a      	ldr	r2, [r3, #16]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	430a      	orrs	r2, r1
 8003432:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	69d9      	ldr	r1, [r3, #28]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a1a      	ldr	r2, [r3, #32]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	430a      	orrs	r2, r1
 8003442:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f042 0201 	orr.w	r2, r2, #1
 8003452:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2220      	movs	r2, #32
 800345e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	02008000 	.word	0x02008000

08003480 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b088      	sub	sp, #32
 8003484:	af02      	add	r7, sp, #8
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	4608      	mov	r0, r1
 800348a:	4611      	mov	r1, r2
 800348c:	461a      	mov	r2, r3
 800348e:	4603      	mov	r3, r0
 8003490:	817b      	strh	r3, [r7, #10]
 8003492:	460b      	mov	r3, r1
 8003494:	813b      	strh	r3, [r7, #8]
 8003496:	4613      	mov	r3, r2
 8003498:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b20      	cmp	r3, #32
 80034a4:	f040 80f9 	bne.w	800369a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034a8:	6a3b      	ldr	r3, [r7, #32]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d002      	beq.n	80034b4 <HAL_I2C_Mem_Write+0x34>
 80034ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d105      	bne.n	80034c0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034ba:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e0ed      	b.n	800369c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d101      	bne.n	80034ce <HAL_I2C_Mem_Write+0x4e>
 80034ca:	2302      	movs	r3, #2
 80034cc:	e0e6      	b.n	800369c <HAL_I2C_Mem_Write+0x21c>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80034d6:	f7ff fbcb 	bl	8002c70 <HAL_GetTick>
 80034da:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	2319      	movs	r3, #25
 80034e2:	2201      	movs	r2, #1
 80034e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 fbc9 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e0d1      	b.n	800369c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2221      	movs	r2, #33	@ 0x21
 80034fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2240      	movs	r2, #64	@ 0x40
 8003504:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6a3a      	ldr	r2, [r7, #32]
 8003512:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003518:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003520:	88f8      	ldrh	r0, [r7, #6]
 8003522:	893a      	ldrh	r2, [r7, #8]
 8003524:	8979      	ldrh	r1, [r7, #10]
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	9301      	str	r3, [sp, #4]
 800352a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800352c:	9300      	str	r3, [sp, #0]
 800352e:	4603      	mov	r3, r0
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f000 fad9 	bl	8003ae8 <I2C_RequestMemoryWrite>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d005      	beq.n	8003548 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e0a9      	b.n	800369c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800354c:	b29b      	uxth	r3, r3
 800354e:	2bff      	cmp	r3, #255	@ 0xff
 8003550:	d90e      	bls.n	8003570 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	22ff      	movs	r2, #255	@ 0xff
 8003556:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800355c:	b2da      	uxtb	r2, r3
 800355e:	8979      	ldrh	r1, [r7, #10]
 8003560:	2300      	movs	r3, #0
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 fd4d 	bl	8004008 <I2C_TransferConfig>
 800356e:	e00f      	b.n	8003590 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003574:	b29a      	uxth	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800357e:	b2da      	uxtb	r2, r3
 8003580:	8979      	ldrh	r1, [r7, #10]
 8003582:	2300      	movs	r3, #0
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f000 fd3c 	bl	8004008 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f000 fbcc 	bl	8003d32 <I2C_WaitOnTXISFlagUntilTimeout>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e07b      	b.n	800369c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a8:	781a      	ldrb	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b4:	1c5a      	adds	r2, r3, #1
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035be:	b29b      	uxth	r3, r3
 80035c0:	3b01      	subs	r3, #1
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035cc:	3b01      	subs	r3, #1
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035d8:	b29b      	uxth	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d034      	beq.n	8003648 <HAL_I2C_Mem_Write+0x1c8>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d130      	bne.n	8003648 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ec:	2200      	movs	r2, #0
 80035ee:	2180      	movs	r1, #128	@ 0x80
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f000 fb45 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e04d      	b.n	800369c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003604:	b29b      	uxth	r3, r3
 8003606:	2bff      	cmp	r3, #255	@ 0xff
 8003608:	d90e      	bls.n	8003628 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	22ff      	movs	r2, #255	@ 0xff
 800360e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003614:	b2da      	uxtb	r2, r3
 8003616:	8979      	ldrh	r1, [r7, #10]
 8003618:	2300      	movs	r3, #0
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f000 fcf1 	bl	8004008 <I2C_TransferConfig>
 8003626:	e00f      	b.n	8003648 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800362c:	b29a      	uxth	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003636:	b2da      	uxtb	r2, r3
 8003638:	8979      	ldrh	r1, [r7, #10]
 800363a:	2300      	movs	r3, #0
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f000 fce0 	bl	8004008 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800364c:	b29b      	uxth	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d19e      	bne.n	8003590 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f000 fbb2 	bl	8003dc0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e01a      	b.n	800369c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2220      	movs	r2, #32
 800366c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	6859      	ldr	r1, [r3, #4]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	4b0a      	ldr	r3, [pc, #40]	@ (80036a4 <HAL_I2C_Mem_Write+0x224>)
 800367a:	400b      	ands	r3, r1
 800367c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2220      	movs	r2, #32
 8003682:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003696:	2300      	movs	r3, #0
 8003698:	e000      	b.n	800369c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800369a:	2302      	movs	r3, #2
  }
}
 800369c:	4618      	mov	r0, r3
 800369e:	3718      	adds	r7, #24
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	fe00e800 	.word	0xfe00e800

080036a8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b088      	sub	sp, #32
 80036ac:	af02      	add	r7, sp, #8
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	4608      	mov	r0, r1
 80036b2:	4611      	mov	r1, r2
 80036b4:	461a      	mov	r2, r3
 80036b6:	4603      	mov	r3, r0
 80036b8:	817b      	strh	r3, [r7, #10]
 80036ba:	460b      	mov	r3, r1
 80036bc:	813b      	strh	r3, [r7, #8]
 80036be:	4613      	mov	r3, r2
 80036c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b20      	cmp	r3, #32
 80036cc:	f040 80fd 	bne.w	80038ca <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80036d0:	6a3b      	ldr	r3, [r7, #32]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d002      	beq.n	80036dc <HAL_I2C_Mem_Read+0x34>
 80036d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d105      	bne.n	80036e8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036e2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e0f1      	b.n	80038cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d101      	bne.n	80036f6 <HAL_I2C_Mem_Read+0x4e>
 80036f2:	2302      	movs	r3, #2
 80036f4:	e0ea      	b.n	80038cc <HAL_I2C_Mem_Read+0x224>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036fe:	f7ff fab7 	bl	8002c70 <HAL_GetTick>
 8003702:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	9300      	str	r3, [sp, #0]
 8003708:	2319      	movs	r3, #25
 800370a:	2201      	movs	r2, #1
 800370c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f000 fab5 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e0d5      	b.n	80038cc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2222      	movs	r2, #34	@ 0x22
 8003724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2240      	movs	r2, #64	@ 0x40
 800372c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6a3a      	ldr	r2, [r7, #32]
 800373a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003740:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003748:	88f8      	ldrh	r0, [r7, #6]
 800374a:	893a      	ldrh	r2, [r7, #8]
 800374c:	8979      	ldrh	r1, [r7, #10]
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	9301      	str	r3, [sp, #4]
 8003752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	4603      	mov	r3, r0
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f000 fa19 	bl	8003b90 <I2C_RequestMemoryRead>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d005      	beq.n	8003770 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e0ad      	b.n	80038cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003774:	b29b      	uxth	r3, r3
 8003776:	2bff      	cmp	r3, #255	@ 0xff
 8003778:	d90e      	bls.n	8003798 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2201      	movs	r2, #1
 800377e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003784:	b2da      	uxtb	r2, r3
 8003786:	8979      	ldrh	r1, [r7, #10]
 8003788:	4b52      	ldr	r3, [pc, #328]	@ (80038d4 <HAL_I2C_Mem_Read+0x22c>)
 800378a:	9300      	str	r3, [sp, #0]
 800378c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f000 fc39 	bl	8004008 <I2C_TransferConfig>
 8003796:	e00f      	b.n	80037b8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800379c:	b29a      	uxth	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037a6:	b2da      	uxtb	r2, r3
 80037a8:	8979      	ldrh	r1, [r7, #10]
 80037aa:	4b4a      	ldr	r3, [pc, #296]	@ (80038d4 <HAL_I2C_Mem_Read+0x22c>)
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037b2:	68f8      	ldr	r0, [r7, #12]
 80037b4:	f000 fc28 	bl	8004008 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	9300      	str	r3, [sp, #0]
 80037bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037be:	2200      	movs	r2, #0
 80037c0:	2104      	movs	r1, #4
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f000 fa5c 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e07c      	b.n	80038cc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037dc:	b2d2      	uxtb	r2, r2
 80037de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e4:	1c5a      	adds	r2, r3, #1
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ee:	3b01      	subs	r3, #1
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	3b01      	subs	r3, #1
 80037fe:	b29a      	uxth	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003808:	b29b      	uxth	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d034      	beq.n	8003878 <HAL_I2C_Mem_Read+0x1d0>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003812:	2b00      	cmp	r3, #0
 8003814:	d130      	bne.n	8003878 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800381c:	2200      	movs	r2, #0
 800381e:	2180      	movs	r1, #128	@ 0x80
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f000 fa2d 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e04d      	b.n	80038cc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003834:	b29b      	uxth	r3, r3
 8003836:	2bff      	cmp	r3, #255	@ 0xff
 8003838:	d90e      	bls.n	8003858 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2201      	movs	r2, #1
 800383e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003844:	b2da      	uxtb	r2, r3
 8003846:	8979      	ldrh	r1, [r7, #10]
 8003848:	2300      	movs	r3, #0
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f000 fbd9 	bl	8004008 <I2C_TransferConfig>
 8003856:	e00f      	b.n	8003878 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800385c:	b29a      	uxth	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003866:	b2da      	uxtb	r2, r3
 8003868:	8979      	ldrh	r1, [r7, #10]
 800386a:	2300      	movs	r3, #0
 800386c:	9300      	str	r3, [sp, #0]
 800386e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f000 fbc8 	bl	8004008 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800387c:	b29b      	uxth	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d19a      	bne.n	80037b8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f000 fa9a 	bl	8003dc0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e01a      	b.n	80038cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2220      	movs	r2, #32
 800389c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6859      	ldr	r1, [r3, #4]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	4b0b      	ldr	r3, [pc, #44]	@ (80038d8 <HAL_I2C_Mem_Read+0x230>)
 80038aa:	400b      	ands	r3, r1
 80038ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2220      	movs	r2, #32
 80038b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80038c6:	2300      	movs	r3, #0
 80038c8:	e000      	b.n	80038cc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80038ca:	2302      	movs	r3, #2
  }
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3718      	adds	r7, #24
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	80002400 	.word	0x80002400
 80038d8:	fe00e800 	.word	0xfe00e800

080038dc <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b08a      	sub	sp, #40	@ 0x28
 80038e0:	af02      	add	r7, sp, #8
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	607a      	str	r2, [r7, #4]
 80038e6:	603b      	str	r3, [r7, #0]
 80038e8:	460b      	mov	r3, r1
 80038ea:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80038ec:	2300      	movs	r3, #0
 80038ee:	617b      	str	r3, [r7, #20]

  HAL_StatusTypeDef status = HAL_OK;
 80038f0:	2300      	movs	r3, #0
 80038f2:	77fb      	strb	r3, [r7, #31]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2b20      	cmp	r3, #32
 80038fe:	f040 80e9 	bne.w	8003ad4 <HAL_I2C_IsDeviceReady+0x1f8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800390c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003910:	d101      	bne.n	8003916 <HAL_I2C_IsDeviceReady+0x3a>
    {
      return HAL_BUSY;
 8003912:	2302      	movs	r3, #2
 8003914:	e0df      	b.n	8003ad6 <HAL_I2C_IsDeviceReady+0x1fa>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800391c:	2b01      	cmp	r3, #1
 800391e:	d101      	bne.n	8003924 <HAL_I2C_IsDeviceReady+0x48>
 8003920:	2302      	movs	r3, #2
 8003922:	e0d8      	b.n	8003ad6 <HAL_I2C_IsDeviceReady+0x1fa>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2224      	movs	r2, #36	@ 0x24
 8003930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d105      	bne.n	800394e <HAL_I2C_IsDeviceReady+0x72>
 8003942:	897b      	ldrh	r3, [r7, #10]
 8003944:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003948:	4b65      	ldr	r3, [pc, #404]	@ (8003ae0 <HAL_I2C_IsDeviceReady+0x204>)
 800394a:	4313      	orrs	r3, r2
 800394c:	e004      	b.n	8003958 <HAL_I2C_IsDeviceReady+0x7c>
 800394e:	897b      	ldrh	r3, [r7, #10]
 8003950:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003954:	4b63      	ldr	r3, [pc, #396]	@ (8003ae4 <HAL_I2C_IsDeviceReady+0x208>)
 8003956:	4313      	orrs	r3, r2
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	6812      	ldr	r2, [r2, #0]
 800395c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800395e:	f7ff f987 	bl	8002c70 <HAL_GetTick>
 8003962:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	f003 0320 	and.w	r3, r3, #32
 800396e:	2b20      	cmp	r3, #32
 8003970:	bf0c      	ite	eq
 8003972:	2301      	moveq	r3, #1
 8003974:	2300      	movne	r3, #0
 8003976:	b2db      	uxtb	r3, r3
 8003978:	77bb      	strb	r3, [r7, #30]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	f003 0310 	and.w	r3, r3, #16
 8003984:	2b10      	cmp	r3, #16
 8003986:	bf0c      	ite	eq
 8003988:	2301      	moveq	r3, #1
 800398a:	2300      	movne	r3, #0
 800398c:	b2db      	uxtb	r3, r3
 800398e:	777b      	strb	r3, [r7, #29]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003990:	e034      	b.n	80039fc <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003998:	d01a      	beq.n	80039d0 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800399a:	f7ff f969 	bl	8002c70 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d302      	bcc.n	80039b0 <HAL_I2C_IsDeviceReady+0xd4>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10f      	bne.n	80039d0 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2220      	movs	r2, #32
 80039b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039bc:	f043 0220 	orr.w	r2, r3, #32
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e082      	b.n	8003ad6 <HAL_I2C_IsDeviceReady+0x1fa>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	f003 0320 	and.w	r3, r3, #32
 80039da:	2b20      	cmp	r3, #32
 80039dc:	bf0c      	ite	eq
 80039de:	2301      	moveq	r3, #1
 80039e0:	2300      	movne	r3, #0
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	77bb      	strb	r3, [r7, #30]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	f003 0310 	and.w	r3, r3, #16
 80039f0:	2b10      	cmp	r3, #16
 80039f2:	bf0c      	ite	eq
 80039f4:	2301      	moveq	r3, #1
 80039f6:	2300      	movne	r3, #0
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	777b      	strb	r3, [r7, #29]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80039fc:	7fbb      	ldrb	r3, [r7, #30]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d102      	bne.n	8003a08 <HAL_I2C_IsDeviceReady+0x12c>
 8003a02:	7f7b      	ldrb	r3, [r7, #29]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d0c4      	beq.n	8003992 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	f003 0310 	and.w	r3, r3, #16
 8003a12:	2b10      	cmp	r3, #16
 8003a14:	d027      	beq.n	8003a66 <HAL_I2C_IsDeviceReady+0x18a>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	9300      	str	r3, [sp, #0]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	2120      	movs	r1, #32
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f000 f92d 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00e      	beq.n	8003a4a <HAL_I2C_IsDeviceReady+0x16e>
        {
          /* A non acknowledge appear during STOP Flag waiting process, a new trial must be performed */
          if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a30:	2b04      	cmp	r3, #4
 8003a32:	d107      	bne.n	8003a44 <HAL_I2C_IsDeviceReady+0x168>
          {
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2220      	movs	r2, #32
 8003a3a:	61da      	str	r2, [r3, #28]

            /* Reset the error code for next trial */
            hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	645a      	str	r2, [r3, #68]	@ 0x44
 8003a42:	e026      	b.n	8003a92 <HAL_I2C_IsDeviceReady+0x1b6>
          }
          else
          {
            status = HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	77fb      	strb	r3, [r7, #31]
 8003a48:	e023      	b.n	8003a92 <HAL_I2C_IsDeviceReady+0x1b6>
        else
        {
          /* A acknowledge appear during STOP Flag waiting process, this mean that device respond to its address */

          /* Clear STOP Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	61da      	str	r2, [r3, #28]

          /* Device is ready */
          hi2c->State = HAL_I2C_STATE_READY;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2220      	movs	r2, #32
 8003a56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_OK;
 8003a62:	2300      	movs	r3, #0
 8003a64:	e037      	b.n	8003ad6 <HAL_I2C_IsDeviceReady+0x1fa>
      {
        /* A non acknowledge is detected, this mean that device not respond to its address,
           a new trial must be performed */

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2210      	movs	r2, #16
 8003a6c:	61da      	str	r2, [r3, #28]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	9300      	str	r3, [sp, #0]
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2200      	movs	r2, #0
 8003a76:	2120      	movs	r1, #32
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f000 f901 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d002      	beq.n	8003a8a <HAL_I2C_IsDeviceReady+0x1ae>
        {
          status = HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	77fb      	strb	r3, [r7, #31]
 8003a88:	e003      	b.n	8003a92 <HAL_I2C_IsDeviceReady+0x1b6>
        }
        else
        {
          /* Clear STOP Flag, auto generated with autoend*/
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	61da      	str	r2, [r3, #28]
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	3301      	adds	r3, #1
 8003a96:	617b      	str	r3, [r7, #20]

      if ((I2C_Trials < Trials) && (status == HAL_ERROR))
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d904      	bls.n	8003aaa <HAL_I2C_IsDeviceReady+0x1ce>
 8003aa0:	7ffb      	ldrb	r3, [r7, #31]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d101      	bne.n	8003aaa <HAL_I2C_IsDeviceReady+0x1ce>
      {
        status = HAL_OK;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	77fb      	strb	r3, [r7, #31]
      }

    } while (I2C_Trials < Trials);
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	f63f af43 	bhi.w	800393a <HAL_I2C_IsDeviceReady+0x5e>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ac0:	f043 0220 	orr.w	r2, r3, #32
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e000      	b.n	8003ad6 <HAL_I2C_IsDeviceReady+0x1fa>
  }
  else
  {
    return HAL_BUSY;
 8003ad4:	2302      	movs	r3, #2
  }
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3720      	adds	r7, #32
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	02002000 	.word	0x02002000
 8003ae4:	02002800 	.word	0x02002800

08003ae8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af02      	add	r7, sp, #8
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	4608      	mov	r0, r1
 8003af2:	4611      	mov	r1, r2
 8003af4:	461a      	mov	r2, r3
 8003af6:	4603      	mov	r3, r0
 8003af8:	817b      	strh	r3, [r7, #10]
 8003afa:	460b      	mov	r3, r1
 8003afc:	813b      	strh	r3, [r7, #8]
 8003afe:	4613      	mov	r3, r2
 8003b00:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003b02:	88fb      	ldrh	r3, [r7, #6]
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	8979      	ldrh	r1, [r7, #10]
 8003b08:	4b20      	ldr	r3, [pc, #128]	@ (8003b8c <I2C_RequestMemoryWrite+0xa4>)
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f000 fa79 	bl	8004008 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b16:	69fa      	ldr	r2, [r7, #28]
 8003b18:	69b9      	ldr	r1, [r7, #24]
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f000 f909 	bl	8003d32 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e02c      	b.n	8003b84 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b2a:	88fb      	ldrh	r3, [r7, #6]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d105      	bne.n	8003b3c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b30:	893b      	ldrh	r3, [r7, #8]
 8003b32:	b2da      	uxtb	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b3a:	e015      	b.n	8003b68 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003b3c:	893b      	ldrh	r3, [r7, #8]
 8003b3e:	0a1b      	lsrs	r3, r3, #8
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	b2da      	uxtb	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b4a:	69fa      	ldr	r2, [r7, #28]
 8003b4c:	69b9      	ldr	r1, [r7, #24]
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 f8ef 	bl	8003d32 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e012      	b.n	8003b84 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b5e:	893b      	ldrh	r3, [r7, #8]
 8003b60:	b2da      	uxtb	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	2180      	movs	r1, #128	@ 0x80
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	f000 f884 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e000      	b.n	8003b84 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3710      	adds	r7, #16
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	80002000 	.word	0x80002000

08003b90 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af02      	add	r7, sp, #8
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	4608      	mov	r0, r1
 8003b9a:	4611      	mov	r1, r2
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	817b      	strh	r3, [r7, #10]
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	813b      	strh	r3, [r7, #8]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003baa:	88fb      	ldrh	r3, [r7, #6]
 8003bac:	b2da      	uxtb	r2, r3
 8003bae:	8979      	ldrh	r1, [r7, #10]
 8003bb0:	4b20      	ldr	r3, [pc, #128]	@ (8003c34 <I2C_RequestMemoryRead+0xa4>)
 8003bb2:	9300      	str	r3, [sp, #0]
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f000 fa26 	bl	8004008 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bbc:	69fa      	ldr	r2, [r7, #28]
 8003bbe:	69b9      	ldr	r1, [r7, #24]
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f000 f8b6 	bl	8003d32 <I2C_WaitOnTXISFlagUntilTimeout>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e02c      	b.n	8003c2a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bd0:	88fb      	ldrh	r3, [r7, #6]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d105      	bne.n	8003be2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003bd6:	893b      	ldrh	r3, [r7, #8]
 8003bd8:	b2da      	uxtb	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	629a      	str	r2, [r3, #40]	@ 0x28
 8003be0:	e015      	b.n	8003c0e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003be2:	893b      	ldrh	r3, [r7, #8]
 8003be4:	0a1b      	lsrs	r3, r3, #8
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	b2da      	uxtb	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bf0:	69fa      	ldr	r2, [r7, #28]
 8003bf2:	69b9      	ldr	r1, [r7, #24]
 8003bf4:	68f8      	ldr	r0, [r7, #12]
 8003bf6:	f000 f89c 	bl	8003d32 <I2C_WaitOnTXISFlagUntilTimeout>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d001      	beq.n	8003c04 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e012      	b.n	8003c2a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c04:	893b      	ldrh	r3, [r7, #8]
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	9300      	str	r3, [sp, #0]
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	2200      	movs	r2, #0
 8003c16:	2140      	movs	r1, #64	@ 0x40
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f000 f831 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d001      	beq.n	8003c28 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e000      	b.n	8003c2a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	80002000 	.word	0x80002000

08003c38 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d103      	bne.n	8003c56 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2200      	movs	r2, #0
 8003c54:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d007      	beq.n	8003c74 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	699a      	ldr	r2, [r3, #24]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 0201 	orr.w	r2, r2, #1
 8003c72:	619a      	str	r2, [r3, #24]
  }
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	603b      	str	r3, [r7, #0]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c90:	e03b      	b.n	8003d0a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c92:	69ba      	ldr	r2, [r7, #24]
 8003c94:	6839      	ldr	r1, [r7, #0]
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f000 f8d6 	bl	8003e48 <I2C_IsErrorOccurred>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d001      	beq.n	8003ca6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e041      	b.n	8003d2a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003cac:	d02d      	beq.n	8003d0a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cae:	f7fe ffdf 	bl	8002c70 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d302      	bcc.n	8003cc4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d122      	bne.n	8003d0a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	699a      	ldr	r2, [r3, #24]
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	bf0c      	ite	eq
 8003cd4:	2301      	moveq	r3, #1
 8003cd6:	2300      	movne	r3, #0
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	461a      	mov	r2, r3
 8003cdc:	79fb      	ldrb	r3, [r7, #7]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d113      	bne.n	8003d0a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ce6:	f043 0220 	orr.w	r2, r3, #32
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2220      	movs	r2, #32
 8003cf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e00f      	b.n	8003d2a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	699a      	ldr	r2, [r3, #24]
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	4013      	ands	r3, r2
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	bf0c      	ite	eq
 8003d1a:	2301      	moveq	r3, #1
 8003d1c:	2300      	movne	r3, #0
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	461a      	mov	r2, r3
 8003d22:	79fb      	ldrb	r3, [r7, #7]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d0b4      	beq.n	8003c92 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b084      	sub	sp, #16
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	60f8      	str	r0, [r7, #12]
 8003d3a:	60b9      	str	r1, [r7, #8]
 8003d3c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d3e:	e033      	b.n	8003da8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	68b9      	ldr	r1, [r7, #8]
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f000 f87f 	bl	8003e48 <I2C_IsErrorOccurred>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d001      	beq.n	8003d54 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e031      	b.n	8003db8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d5a:	d025      	beq.n	8003da8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d5c:	f7fe ff88 	bl	8002c70 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	68ba      	ldr	r2, [r7, #8]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d302      	bcc.n	8003d72 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d11a      	bne.n	8003da8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d013      	beq.n	8003da8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d84:	f043 0220 	orr.w	r2, r3, #32
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e007      	b.n	8003db8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d1c4      	bne.n	8003d40 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003dcc:	e02f      	b.n	8003e2e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	68b9      	ldr	r1, [r7, #8]
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f000 f838 	bl	8003e48 <I2C_IsErrorOccurred>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e02d      	b.n	8003e3e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003de2:	f7fe ff45 	bl	8002c70 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	68ba      	ldr	r2, [r7, #8]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d302      	bcc.n	8003df8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d11a      	bne.n	8003e2e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	f003 0320 	and.w	r3, r3, #32
 8003e02:	2b20      	cmp	r3, #32
 8003e04:	d013      	beq.n	8003e2e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e0a:	f043 0220 	orr.w	r2, r3, #32
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2220      	movs	r2, #32
 8003e16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e007      	b.n	8003e3e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	f003 0320 	and.w	r3, r3, #32
 8003e38:	2b20      	cmp	r3, #32
 8003e3a:	d1c8      	bne.n	8003dce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
	...

08003e48 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b08a      	sub	sp, #40	@ 0x28
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e54:	2300      	movs	r3, #0
 8003e56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003e62:	2300      	movs	r3, #0
 8003e64:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	f003 0310 	and.w	r3, r3, #16
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d068      	beq.n	8003f46 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2210      	movs	r2, #16
 8003e7a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e7c:	e049      	b.n	8003f12 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e84:	d045      	beq.n	8003f12 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e86:	f7fe fef3 	bl	8002c70 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	68ba      	ldr	r2, [r7, #8]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d302      	bcc.n	8003e9c <I2C_IsErrorOccurred+0x54>
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d13a      	bne.n	8003f12 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ea6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003eae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003eba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ebe:	d121      	bne.n	8003f04 <I2C_IsErrorOccurred+0xbc>
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ec6:	d01d      	beq.n	8003f04 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003ec8:	7cfb      	ldrb	r3, [r7, #19]
 8003eca:	2b20      	cmp	r3, #32
 8003ecc:	d01a      	beq.n	8003f04 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003edc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003ede:	f7fe fec7 	bl	8002c70 <HAL_GetTick>
 8003ee2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ee4:	e00e      	b.n	8003f04 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003ee6:	f7fe fec3 	bl	8002c70 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b19      	cmp	r3, #25
 8003ef2:	d907      	bls.n	8003f04 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
 8003ef6:	f043 0320 	orr.w	r3, r3, #32
 8003efa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003f02:	e006      	b.n	8003f12 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	f003 0320 	and.w	r3, r3, #32
 8003f0e:	2b20      	cmp	r3, #32
 8003f10:	d1e9      	bne.n	8003ee6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	f003 0320 	and.w	r3, r3, #32
 8003f1c:	2b20      	cmp	r3, #32
 8003f1e:	d003      	beq.n	8003f28 <I2C_IsErrorOccurred+0xe0>
 8003f20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d0aa      	beq.n	8003e7e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003f28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d103      	bne.n	8003f38 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2220      	movs	r2, #32
 8003f36:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003f38:	6a3b      	ldr	r3, [r7, #32]
 8003f3a:	f043 0304 	orr.w	r3, r3, #4
 8003f3e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00b      	beq.n	8003f70 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003f58:	6a3b      	ldr	r3, [r7, #32]
 8003f5a:	f043 0301 	orr.w	r3, r3, #1
 8003f5e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003f68:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00b      	beq.n	8003f92 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003f7a:	6a3b      	ldr	r3, [r7, #32]
 8003f7c:	f043 0308 	orr.w	r3, r3, #8
 8003f80:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f8a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00b      	beq.n	8003fb4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003f9c:	6a3b      	ldr	r3, [r7, #32]
 8003f9e:	f043 0302 	orr.w	r3, r3, #2
 8003fa2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003fb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d01c      	beq.n	8003ff6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f7ff fe3b 	bl	8003c38 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6859      	ldr	r1, [r3, #4]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8004004 <I2C_IsErrorOccurred+0x1bc>)
 8003fce:	400b      	ands	r3, r1
 8003fd0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003fd6:	6a3b      	ldr	r3, [r7, #32]
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2220      	movs	r2, #32
 8003fe2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003ff6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3728      	adds	r7, #40	@ 0x28
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	fe00e800 	.word	0xfe00e800

08004008 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004008:	b480      	push	{r7}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	607b      	str	r3, [r7, #4]
 8004012:	460b      	mov	r3, r1
 8004014:	817b      	strh	r3, [r7, #10]
 8004016:	4613      	mov	r3, r2
 8004018:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800401a:	897b      	ldrh	r3, [r7, #10]
 800401c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004020:	7a7b      	ldrb	r3, [r7, #9]
 8004022:	041b      	lsls	r3, r3, #16
 8004024:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004028:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800402e:	6a3b      	ldr	r3, [r7, #32]
 8004030:	4313      	orrs	r3, r2
 8004032:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004036:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	6a3b      	ldr	r3, [r7, #32]
 8004040:	0d5b      	lsrs	r3, r3, #21
 8004042:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004046:	4b08      	ldr	r3, [pc, #32]	@ (8004068 <I2C_TransferConfig+0x60>)
 8004048:	430b      	orrs	r3, r1
 800404a:	43db      	mvns	r3, r3
 800404c:	ea02 0103 	and.w	r1, r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	430a      	orrs	r2, r1
 8004058:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800405a:	bf00      	nop
 800405c:	371c      	adds	r7, #28
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	03ff63ff 	.word	0x03ff63ff

0800406c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b20      	cmp	r3, #32
 8004080:	d138      	bne.n	80040f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004088:	2b01      	cmp	r3, #1
 800408a:	d101      	bne.n	8004090 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800408c:	2302      	movs	r3, #2
 800408e:	e032      	b.n	80040f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2224      	movs	r2, #36	@ 0x24
 800409c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f022 0201 	bic.w	r2, r2, #1
 80040ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80040be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	6819      	ldr	r1, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f042 0201 	orr.w	r2, r2, #1
 80040de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2220      	movs	r2, #32
 80040e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80040f0:	2300      	movs	r3, #0
 80040f2:	e000      	b.n	80040f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80040f4:	2302      	movs	r3, #2
  }
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004102:	b480      	push	{r7}
 8004104:	b085      	sub	sp, #20
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
 800410a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004112:	b2db      	uxtb	r3, r3
 8004114:	2b20      	cmp	r3, #32
 8004116:	d139      	bne.n	800418c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800411e:	2b01      	cmp	r3, #1
 8004120:	d101      	bne.n	8004126 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004122:	2302      	movs	r3, #2
 8004124:	e033      	b.n	800418e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2201      	movs	r2, #1
 800412a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2224      	movs	r2, #36	@ 0x24
 8004132:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 0201 	bic.w	r2, r2, #1
 8004144:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004154:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	021b      	lsls	r3, r3, #8
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	4313      	orrs	r3, r2
 800415e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f042 0201 	orr.w	r2, r2, #1
 8004176:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2220      	movs	r2, #32
 800417c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004188:	2300      	movs	r3, #0
 800418a:	e000      	b.n	800418e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800418c:	2302      	movs	r3, #2
  }
}
 800418e:	4618      	mov	r0, r3
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
	...

0800419c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80041a2:	2300      	movs	r3, #0
 80041a4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80041a6:	4b23      	ldr	r3, [pc, #140]	@ (8004234 <HAL_PWREx_EnableOverDrive+0x98>)
 80041a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041aa:	4a22      	ldr	r2, [pc, #136]	@ (8004234 <HAL_PWREx_EnableOverDrive+0x98>)
 80041ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80041b2:	4b20      	ldr	r3, [pc, #128]	@ (8004234 <HAL_PWREx_EnableOverDrive+0x98>)
 80041b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041ba:	603b      	str	r3, [r7, #0]
 80041bc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80041be:	4b1e      	ldr	r3, [pc, #120]	@ (8004238 <HAL_PWREx_EnableOverDrive+0x9c>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a1d      	ldr	r2, [pc, #116]	@ (8004238 <HAL_PWREx_EnableOverDrive+0x9c>)
 80041c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041c8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041ca:	f7fe fd51 	bl	8002c70 <HAL_GetTick>
 80041ce:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80041d0:	e009      	b.n	80041e6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80041d2:	f7fe fd4d 	bl	8002c70 <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80041e0:	d901      	bls.n	80041e6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e022      	b.n	800422c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80041e6:	4b14      	ldr	r3, [pc, #80]	@ (8004238 <HAL_PWREx_EnableOverDrive+0x9c>)
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041f2:	d1ee      	bne.n	80041d2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80041f4:	4b10      	ldr	r3, [pc, #64]	@ (8004238 <HAL_PWREx_EnableOverDrive+0x9c>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a0f      	ldr	r2, [pc, #60]	@ (8004238 <HAL_PWREx_EnableOverDrive+0x9c>)
 80041fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041fe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004200:	f7fe fd36 	bl	8002c70 <HAL_GetTick>
 8004204:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004206:	e009      	b.n	800421c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004208:	f7fe fd32 	bl	8002c70 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004216:	d901      	bls.n	800421c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e007      	b.n	800422c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800421c:	4b06      	ldr	r3, [pc, #24]	@ (8004238 <HAL_PWREx_EnableOverDrive+0x9c>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004224:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004228:	d1ee      	bne.n	8004208 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	40023800 	.word	0x40023800
 8004238:	40007000 	.word	0x40007000

0800423c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004244:	2300      	movs	r3, #0
 8004246:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e291      	b.n	8004776 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b00      	cmp	r3, #0
 800425c:	f000 8087 	beq.w	800436e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004260:	4b96      	ldr	r3, [pc, #600]	@ (80044bc <HAL_RCC_OscConfig+0x280>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f003 030c 	and.w	r3, r3, #12
 8004268:	2b04      	cmp	r3, #4
 800426a:	d00c      	beq.n	8004286 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800426c:	4b93      	ldr	r3, [pc, #588]	@ (80044bc <HAL_RCC_OscConfig+0x280>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f003 030c 	and.w	r3, r3, #12
 8004274:	2b08      	cmp	r3, #8
 8004276:	d112      	bne.n	800429e <HAL_RCC_OscConfig+0x62>
 8004278:	4b90      	ldr	r3, [pc, #576]	@ (80044bc <HAL_RCC_OscConfig+0x280>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004280:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004284:	d10b      	bne.n	800429e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004286:	4b8d      	ldr	r3, [pc, #564]	@ (80044bc <HAL_RCC_OscConfig+0x280>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d06c      	beq.n	800436c <HAL_RCC_OscConfig+0x130>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d168      	bne.n	800436c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e26b      	b.n	8004776 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042a6:	d106      	bne.n	80042b6 <HAL_RCC_OscConfig+0x7a>
 80042a8:	4b84      	ldr	r3, [pc, #528]	@ (80044bc <HAL_RCC_OscConfig+0x280>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a83      	ldr	r2, [pc, #524]	@ (80044bc <HAL_RCC_OscConfig+0x280>)
 80042ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042b2:	6013      	str	r3, [r2, #0]
 80042b4:	e02e      	b.n	8004314 <HAL_RCC_OscConfig+0xd8>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10c      	bne.n	80042d8 <HAL_RCC_OscConfig+0x9c>
 80042be:	4b7f      	ldr	r3, [pc, #508]	@ (80044bc <HAL_RCC_OscConfig+0x280>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a7e      	ldr	r2, [pc, #504]	@ (80044bc <HAL_RCC_OscConfig+0x280>)
 80042c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042c8:	6013      	str	r3, [r2, #0]
 80042ca:	4b7c      	ldr	r3, [pc, #496]	@ (80044bc <HAL_RCC_OscConfig+0x280>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a7b      	ldr	r2, [pc, #492]	@ (80044bc <HAL_RCC_OscConfig+0x280>)
 80042d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042d4:	6013      	str	r3, [r2, #0]
 80042d6:	e01d      	b.n	8004314 <HAL_RCC_OscConfig+0xd8>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042e0:	d10c      	bne.n	80042fc <HAL_RCC_OscConfig+0xc0>
 80042e2:	4b76      	ldr	r3, [pc, #472]	@ (80044bc <HAL_RCC_OscConfig+0x280>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a75      	ldr	r2, [pc, #468]	@ (80044bc <HAL_RCC_OscConfig+0x280>)
 80042e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042ec:	6013      	str	r3, [r2, #0]
 80042ee:	4b73      	ldr	r3, [pc, #460]	@ (80044bc <HAL_RCC_OscConfig+0x280>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a72      	ldr	r2, [pc, #456]	@ (80044bc <HAL_RCC_OscConfig+0x280>)
 80042f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042f8:	6013      	str	r3, [r2, #0]
 80042fa:	e00b      	b.n	8004314 <HAL_RCC_OscConfig+0xd8>
 80042fc:	4b6f      	ldr	r3, [pc, #444]	@ (80044bc <HAL_RCC_OscConfig+0x280>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a6e      	ldr	r2, [pc, #440]	@ (80044bc <HAL_RCC_OscConfig+0x280>)
 8004302:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004306:	6013      	str	r3, [r2, #0]
 8004308:	4b6c      	ldr	r3, [pc, #432]	@ (80044bc <HAL_RCC_OscConfig+0x280>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a6b      	ldr	r2, [pc, #428]	@ (80044bc <HAL_RCC_OscConfig+0x280>)
 800430e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004312:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d013      	beq.n	8004344 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800431c:	f7fe fca8 	bl	8002c70 <HAL_GetTick>
 8004320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004322:	e008      	b.n	8004336 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004324:	f7fe fca4 	bl	8002c70 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b64      	cmp	r3, #100	@ 0x64
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e21f      	b.n	8004776 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004336:	4b61      	ldr	r3, [pc, #388]	@ (80044bc <HAL_RCC_OscConfig+0x280>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d0f0      	beq.n	8004324 <HAL_RCC_OscConfig+0xe8>
 8004342:	e014      	b.n	800436e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004344:	f7fe fc94 	bl	8002c70 <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800434c:	f7fe fc90 	bl	8002c70 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b64      	cmp	r3, #100	@ 0x64
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e20b      	b.n	8004776 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800435e:	4b57      	ldr	r3, [pc, #348]	@ (80044bc <HAL_RCC_OscConfig+0x280>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1f0      	bne.n	800434c <HAL_RCC_OscConfig+0x110>
 800436a:	e000      	b.n	800436e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800436c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d069      	beq.n	800444e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800437a:	4b50      	ldr	r3, [pc, #320]	@ (80044bc <HAL_RCC_OscConfig+0x280>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 030c 	and.w	r3, r3, #12
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00b      	beq.n	800439e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004386:	4b4d      	ldr	r3, [pc, #308]	@ (80044bc <HAL_RCC_OscConfig+0x280>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f003 030c 	and.w	r3, r3, #12
 800438e:	2b08      	cmp	r3, #8
 8004390:	d11c      	bne.n	80043cc <HAL_RCC_OscConfig+0x190>
 8004392:	4b4a      	ldr	r3, [pc, #296]	@ (80044bc <HAL_RCC_OscConfig+0x280>)
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d116      	bne.n	80043cc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800439e:	4b47      	ldr	r3, [pc, #284]	@ (80044bc <HAL_RCC_OscConfig+0x280>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d005      	beq.n	80043b6 <HAL_RCC_OscConfig+0x17a>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d001      	beq.n	80043b6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e1df      	b.n	8004776 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043b6:	4b41      	ldr	r3, [pc, #260]	@ (80044bc <HAL_RCC_OscConfig+0x280>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	00db      	lsls	r3, r3, #3
 80043c4:	493d      	ldr	r1, [pc, #244]	@ (80044bc <HAL_RCC_OscConfig+0x280>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ca:	e040      	b.n	800444e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d023      	beq.n	800441c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043d4:	4b39      	ldr	r3, [pc, #228]	@ (80044bc <HAL_RCC_OscConfig+0x280>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a38      	ldr	r2, [pc, #224]	@ (80044bc <HAL_RCC_OscConfig+0x280>)
 80043da:	f043 0301 	orr.w	r3, r3, #1
 80043de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e0:	f7fe fc46 	bl	8002c70 <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043e6:	e008      	b.n	80043fa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043e8:	f7fe fc42 	bl	8002c70 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e1bd      	b.n	8004776 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043fa:	4b30      	ldr	r3, [pc, #192]	@ (80044bc <HAL_RCC_OscConfig+0x280>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d0f0      	beq.n	80043e8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004406:	4b2d      	ldr	r3, [pc, #180]	@ (80044bc <HAL_RCC_OscConfig+0x280>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	00db      	lsls	r3, r3, #3
 8004414:	4929      	ldr	r1, [pc, #164]	@ (80044bc <HAL_RCC_OscConfig+0x280>)
 8004416:	4313      	orrs	r3, r2
 8004418:	600b      	str	r3, [r1, #0]
 800441a:	e018      	b.n	800444e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800441c:	4b27      	ldr	r3, [pc, #156]	@ (80044bc <HAL_RCC_OscConfig+0x280>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a26      	ldr	r2, [pc, #152]	@ (80044bc <HAL_RCC_OscConfig+0x280>)
 8004422:	f023 0301 	bic.w	r3, r3, #1
 8004426:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004428:	f7fe fc22 	bl	8002c70 <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004430:	f7fe fc1e 	bl	8002c70 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e199      	b.n	8004776 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004442:	4b1e      	ldr	r3, [pc, #120]	@ (80044bc <HAL_RCC_OscConfig+0x280>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1f0      	bne.n	8004430 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0308 	and.w	r3, r3, #8
 8004456:	2b00      	cmp	r3, #0
 8004458:	d038      	beq.n	80044cc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d019      	beq.n	8004496 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004462:	4b16      	ldr	r3, [pc, #88]	@ (80044bc <HAL_RCC_OscConfig+0x280>)
 8004464:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004466:	4a15      	ldr	r2, [pc, #84]	@ (80044bc <HAL_RCC_OscConfig+0x280>)
 8004468:	f043 0301 	orr.w	r3, r3, #1
 800446c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800446e:	f7fe fbff 	bl	8002c70 <HAL_GetTick>
 8004472:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004474:	e008      	b.n	8004488 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004476:	f7fe fbfb 	bl	8002c70 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	2b02      	cmp	r3, #2
 8004482:	d901      	bls.n	8004488 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e176      	b.n	8004776 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004488:	4b0c      	ldr	r3, [pc, #48]	@ (80044bc <HAL_RCC_OscConfig+0x280>)
 800448a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d0f0      	beq.n	8004476 <HAL_RCC_OscConfig+0x23a>
 8004494:	e01a      	b.n	80044cc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004496:	4b09      	ldr	r3, [pc, #36]	@ (80044bc <HAL_RCC_OscConfig+0x280>)
 8004498:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800449a:	4a08      	ldr	r2, [pc, #32]	@ (80044bc <HAL_RCC_OscConfig+0x280>)
 800449c:	f023 0301 	bic.w	r3, r3, #1
 80044a0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a2:	f7fe fbe5 	bl	8002c70 <HAL_GetTick>
 80044a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044a8:	e00a      	b.n	80044c0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044aa:	f7fe fbe1 	bl	8002c70 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d903      	bls.n	80044c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e15c      	b.n	8004776 <HAL_RCC_OscConfig+0x53a>
 80044bc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044c0:	4b91      	ldr	r3, [pc, #580]	@ (8004708 <HAL_RCC_OscConfig+0x4cc>)
 80044c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044c4:	f003 0302 	and.w	r3, r3, #2
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1ee      	bne.n	80044aa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0304 	and.w	r3, r3, #4
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 80a4 	beq.w	8004622 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044da:	4b8b      	ldr	r3, [pc, #556]	@ (8004708 <HAL_RCC_OscConfig+0x4cc>)
 80044dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10d      	bne.n	8004502 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80044e6:	4b88      	ldr	r3, [pc, #544]	@ (8004708 <HAL_RCC_OscConfig+0x4cc>)
 80044e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ea:	4a87      	ldr	r2, [pc, #540]	@ (8004708 <HAL_RCC_OscConfig+0x4cc>)
 80044ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80044f2:	4b85      	ldr	r3, [pc, #532]	@ (8004708 <HAL_RCC_OscConfig+0x4cc>)
 80044f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044fa:	60bb      	str	r3, [r7, #8]
 80044fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044fe:	2301      	movs	r3, #1
 8004500:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004502:	4b82      	ldr	r3, [pc, #520]	@ (800470c <HAL_RCC_OscConfig+0x4d0>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800450a:	2b00      	cmp	r3, #0
 800450c:	d118      	bne.n	8004540 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800450e:	4b7f      	ldr	r3, [pc, #508]	@ (800470c <HAL_RCC_OscConfig+0x4d0>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a7e      	ldr	r2, [pc, #504]	@ (800470c <HAL_RCC_OscConfig+0x4d0>)
 8004514:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004518:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800451a:	f7fe fba9 	bl	8002c70 <HAL_GetTick>
 800451e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004520:	e008      	b.n	8004534 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004522:	f7fe fba5 	bl	8002c70 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b64      	cmp	r3, #100	@ 0x64
 800452e:	d901      	bls.n	8004534 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e120      	b.n	8004776 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004534:	4b75      	ldr	r3, [pc, #468]	@ (800470c <HAL_RCC_OscConfig+0x4d0>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800453c:	2b00      	cmp	r3, #0
 800453e:	d0f0      	beq.n	8004522 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d106      	bne.n	8004556 <HAL_RCC_OscConfig+0x31a>
 8004548:	4b6f      	ldr	r3, [pc, #444]	@ (8004708 <HAL_RCC_OscConfig+0x4cc>)
 800454a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800454c:	4a6e      	ldr	r2, [pc, #440]	@ (8004708 <HAL_RCC_OscConfig+0x4cc>)
 800454e:	f043 0301 	orr.w	r3, r3, #1
 8004552:	6713      	str	r3, [r2, #112]	@ 0x70
 8004554:	e02d      	b.n	80045b2 <HAL_RCC_OscConfig+0x376>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10c      	bne.n	8004578 <HAL_RCC_OscConfig+0x33c>
 800455e:	4b6a      	ldr	r3, [pc, #424]	@ (8004708 <HAL_RCC_OscConfig+0x4cc>)
 8004560:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004562:	4a69      	ldr	r2, [pc, #420]	@ (8004708 <HAL_RCC_OscConfig+0x4cc>)
 8004564:	f023 0301 	bic.w	r3, r3, #1
 8004568:	6713      	str	r3, [r2, #112]	@ 0x70
 800456a:	4b67      	ldr	r3, [pc, #412]	@ (8004708 <HAL_RCC_OscConfig+0x4cc>)
 800456c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800456e:	4a66      	ldr	r2, [pc, #408]	@ (8004708 <HAL_RCC_OscConfig+0x4cc>)
 8004570:	f023 0304 	bic.w	r3, r3, #4
 8004574:	6713      	str	r3, [r2, #112]	@ 0x70
 8004576:	e01c      	b.n	80045b2 <HAL_RCC_OscConfig+0x376>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	2b05      	cmp	r3, #5
 800457e:	d10c      	bne.n	800459a <HAL_RCC_OscConfig+0x35e>
 8004580:	4b61      	ldr	r3, [pc, #388]	@ (8004708 <HAL_RCC_OscConfig+0x4cc>)
 8004582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004584:	4a60      	ldr	r2, [pc, #384]	@ (8004708 <HAL_RCC_OscConfig+0x4cc>)
 8004586:	f043 0304 	orr.w	r3, r3, #4
 800458a:	6713      	str	r3, [r2, #112]	@ 0x70
 800458c:	4b5e      	ldr	r3, [pc, #376]	@ (8004708 <HAL_RCC_OscConfig+0x4cc>)
 800458e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004590:	4a5d      	ldr	r2, [pc, #372]	@ (8004708 <HAL_RCC_OscConfig+0x4cc>)
 8004592:	f043 0301 	orr.w	r3, r3, #1
 8004596:	6713      	str	r3, [r2, #112]	@ 0x70
 8004598:	e00b      	b.n	80045b2 <HAL_RCC_OscConfig+0x376>
 800459a:	4b5b      	ldr	r3, [pc, #364]	@ (8004708 <HAL_RCC_OscConfig+0x4cc>)
 800459c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800459e:	4a5a      	ldr	r2, [pc, #360]	@ (8004708 <HAL_RCC_OscConfig+0x4cc>)
 80045a0:	f023 0301 	bic.w	r3, r3, #1
 80045a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80045a6:	4b58      	ldr	r3, [pc, #352]	@ (8004708 <HAL_RCC_OscConfig+0x4cc>)
 80045a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045aa:	4a57      	ldr	r2, [pc, #348]	@ (8004708 <HAL_RCC_OscConfig+0x4cc>)
 80045ac:	f023 0304 	bic.w	r3, r3, #4
 80045b0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d015      	beq.n	80045e6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ba:	f7fe fb59 	bl	8002c70 <HAL_GetTick>
 80045be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045c0:	e00a      	b.n	80045d8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045c2:	f7fe fb55 	bl	8002c70 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d901      	bls.n	80045d8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e0ce      	b.n	8004776 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d8:	4b4b      	ldr	r3, [pc, #300]	@ (8004708 <HAL_RCC_OscConfig+0x4cc>)
 80045da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d0ee      	beq.n	80045c2 <HAL_RCC_OscConfig+0x386>
 80045e4:	e014      	b.n	8004610 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e6:	f7fe fb43 	bl	8002c70 <HAL_GetTick>
 80045ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ec:	e00a      	b.n	8004604 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ee:	f7fe fb3f 	bl	8002c70 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e0b8      	b.n	8004776 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004604:	4b40      	ldr	r3, [pc, #256]	@ (8004708 <HAL_RCC_OscConfig+0x4cc>)
 8004606:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1ee      	bne.n	80045ee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004610:	7dfb      	ldrb	r3, [r7, #23]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d105      	bne.n	8004622 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004616:	4b3c      	ldr	r3, [pc, #240]	@ (8004708 <HAL_RCC_OscConfig+0x4cc>)
 8004618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461a:	4a3b      	ldr	r2, [pc, #236]	@ (8004708 <HAL_RCC_OscConfig+0x4cc>)
 800461c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004620:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	2b00      	cmp	r3, #0
 8004628:	f000 80a4 	beq.w	8004774 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800462c:	4b36      	ldr	r3, [pc, #216]	@ (8004708 <HAL_RCC_OscConfig+0x4cc>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f003 030c 	and.w	r3, r3, #12
 8004634:	2b08      	cmp	r3, #8
 8004636:	d06b      	beq.n	8004710 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	2b02      	cmp	r3, #2
 800463e:	d149      	bne.n	80046d4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004640:	4b31      	ldr	r3, [pc, #196]	@ (8004708 <HAL_RCC_OscConfig+0x4cc>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a30      	ldr	r2, [pc, #192]	@ (8004708 <HAL_RCC_OscConfig+0x4cc>)
 8004646:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800464a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464c:	f7fe fb10 	bl	8002c70 <HAL_GetTick>
 8004650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004652:	e008      	b.n	8004666 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004654:	f7fe fb0c 	bl	8002c70 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e087      	b.n	8004776 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004666:	4b28      	ldr	r3, [pc, #160]	@ (8004708 <HAL_RCC_OscConfig+0x4cc>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1f0      	bne.n	8004654 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	69da      	ldr	r2, [r3, #28]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	431a      	orrs	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004680:	019b      	lsls	r3, r3, #6
 8004682:	431a      	orrs	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004688:	085b      	lsrs	r3, r3, #1
 800468a:	3b01      	subs	r3, #1
 800468c:	041b      	lsls	r3, r3, #16
 800468e:	431a      	orrs	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004694:	061b      	lsls	r3, r3, #24
 8004696:	4313      	orrs	r3, r2
 8004698:	4a1b      	ldr	r2, [pc, #108]	@ (8004708 <HAL_RCC_OscConfig+0x4cc>)
 800469a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800469e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046a0:	4b19      	ldr	r3, [pc, #100]	@ (8004708 <HAL_RCC_OscConfig+0x4cc>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a18      	ldr	r2, [pc, #96]	@ (8004708 <HAL_RCC_OscConfig+0x4cc>)
 80046a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ac:	f7fe fae0 	bl	8002c70 <HAL_GetTick>
 80046b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046b2:	e008      	b.n	80046c6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046b4:	f7fe fadc 	bl	8002c70 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e057      	b.n	8004776 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046c6:	4b10      	ldr	r3, [pc, #64]	@ (8004708 <HAL_RCC_OscConfig+0x4cc>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d0f0      	beq.n	80046b4 <HAL_RCC_OscConfig+0x478>
 80046d2:	e04f      	b.n	8004774 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004708 <HAL_RCC_OscConfig+0x4cc>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a0b      	ldr	r2, [pc, #44]	@ (8004708 <HAL_RCC_OscConfig+0x4cc>)
 80046da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e0:	f7fe fac6 	bl	8002c70 <HAL_GetTick>
 80046e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046e6:	e008      	b.n	80046fa <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046e8:	f7fe fac2 	bl	8002c70 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e03d      	b.n	8004776 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046fa:	4b03      	ldr	r3, [pc, #12]	@ (8004708 <HAL_RCC_OscConfig+0x4cc>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1f0      	bne.n	80046e8 <HAL_RCC_OscConfig+0x4ac>
 8004706:	e035      	b.n	8004774 <HAL_RCC_OscConfig+0x538>
 8004708:	40023800 	.word	0x40023800
 800470c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004710:	4b1b      	ldr	r3, [pc, #108]	@ (8004780 <HAL_RCC_OscConfig+0x544>)
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d028      	beq.n	8004770 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004728:	429a      	cmp	r2, r3
 800472a:	d121      	bne.n	8004770 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004736:	429a      	cmp	r2, r3
 8004738:	d11a      	bne.n	8004770 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004740:	4013      	ands	r3, r2
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004746:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004748:	4293      	cmp	r3, r2
 800474a:	d111      	bne.n	8004770 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004756:	085b      	lsrs	r3, r3, #1
 8004758:	3b01      	subs	r3, #1
 800475a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800475c:	429a      	cmp	r2, r3
 800475e:	d107      	bne.n	8004770 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800476a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800476c:	429a      	cmp	r2, r3
 800476e:	d001      	beq.n	8004774 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e000      	b.n	8004776 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3718      	adds	r7, #24
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	40023800 	.word	0x40023800

08004784 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800478e:	2300      	movs	r3, #0
 8004790:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e0d0      	b.n	800493e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800479c:	4b6a      	ldr	r3, [pc, #424]	@ (8004948 <HAL_RCC_ClockConfig+0x1c4>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 030f 	and.w	r3, r3, #15
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d910      	bls.n	80047cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047aa:	4b67      	ldr	r3, [pc, #412]	@ (8004948 <HAL_RCC_ClockConfig+0x1c4>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f023 020f 	bic.w	r2, r3, #15
 80047b2:	4965      	ldr	r1, [pc, #404]	@ (8004948 <HAL_RCC_ClockConfig+0x1c4>)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ba:	4b63      	ldr	r3, [pc, #396]	@ (8004948 <HAL_RCC_ClockConfig+0x1c4>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 030f 	and.w	r3, r3, #15
 80047c2:	683a      	ldr	r2, [r7, #0]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d001      	beq.n	80047cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e0b8      	b.n	800493e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0302 	and.w	r3, r3, #2
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d020      	beq.n	800481a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0304 	and.w	r3, r3, #4
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d005      	beq.n	80047f0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047e4:	4b59      	ldr	r3, [pc, #356]	@ (800494c <HAL_RCC_ClockConfig+0x1c8>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	4a58      	ldr	r2, [pc, #352]	@ (800494c <HAL_RCC_ClockConfig+0x1c8>)
 80047ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80047ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0308 	and.w	r3, r3, #8
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d005      	beq.n	8004808 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047fc:	4b53      	ldr	r3, [pc, #332]	@ (800494c <HAL_RCC_ClockConfig+0x1c8>)
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	4a52      	ldr	r2, [pc, #328]	@ (800494c <HAL_RCC_ClockConfig+0x1c8>)
 8004802:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004806:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004808:	4b50      	ldr	r3, [pc, #320]	@ (800494c <HAL_RCC_ClockConfig+0x1c8>)
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	494d      	ldr	r1, [pc, #308]	@ (800494c <HAL_RCC_ClockConfig+0x1c8>)
 8004816:	4313      	orrs	r3, r2
 8004818:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	2b00      	cmp	r3, #0
 8004824:	d040      	beq.n	80048a8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d107      	bne.n	800483e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800482e:	4b47      	ldr	r3, [pc, #284]	@ (800494c <HAL_RCC_ClockConfig+0x1c8>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d115      	bne.n	8004866 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e07f      	b.n	800493e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	2b02      	cmp	r3, #2
 8004844:	d107      	bne.n	8004856 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004846:	4b41      	ldr	r3, [pc, #260]	@ (800494c <HAL_RCC_ClockConfig+0x1c8>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d109      	bne.n	8004866 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e073      	b.n	800493e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004856:	4b3d      	ldr	r3, [pc, #244]	@ (800494c <HAL_RCC_ClockConfig+0x1c8>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e06b      	b.n	800493e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004866:	4b39      	ldr	r3, [pc, #228]	@ (800494c <HAL_RCC_ClockConfig+0x1c8>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f023 0203 	bic.w	r2, r3, #3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	4936      	ldr	r1, [pc, #216]	@ (800494c <HAL_RCC_ClockConfig+0x1c8>)
 8004874:	4313      	orrs	r3, r2
 8004876:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004878:	f7fe f9fa 	bl	8002c70 <HAL_GetTick>
 800487c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800487e:	e00a      	b.n	8004896 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004880:	f7fe f9f6 	bl	8002c70 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800488e:	4293      	cmp	r3, r2
 8004890:	d901      	bls.n	8004896 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e053      	b.n	800493e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004896:	4b2d      	ldr	r3, [pc, #180]	@ (800494c <HAL_RCC_ClockConfig+0x1c8>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f003 020c 	and.w	r2, r3, #12
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d1eb      	bne.n	8004880 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048a8:	4b27      	ldr	r3, [pc, #156]	@ (8004948 <HAL_RCC_ClockConfig+0x1c4>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 030f 	and.w	r3, r3, #15
 80048b0:	683a      	ldr	r2, [r7, #0]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d210      	bcs.n	80048d8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048b6:	4b24      	ldr	r3, [pc, #144]	@ (8004948 <HAL_RCC_ClockConfig+0x1c4>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f023 020f 	bic.w	r2, r3, #15
 80048be:	4922      	ldr	r1, [pc, #136]	@ (8004948 <HAL_RCC_ClockConfig+0x1c4>)
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048c6:	4b20      	ldr	r3, [pc, #128]	@ (8004948 <HAL_RCC_ClockConfig+0x1c4>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 030f 	and.w	r3, r3, #15
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d001      	beq.n	80048d8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e032      	b.n	800493e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0304 	and.w	r3, r3, #4
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d008      	beq.n	80048f6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048e4:	4b19      	ldr	r3, [pc, #100]	@ (800494c <HAL_RCC_ClockConfig+0x1c8>)
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	4916      	ldr	r1, [pc, #88]	@ (800494c <HAL_RCC_ClockConfig+0x1c8>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0308 	and.w	r3, r3, #8
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d009      	beq.n	8004916 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004902:	4b12      	ldr	r3, [pc, #72]	@ (800494c <HAL_RCC_ClockConfig+0x1c8>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	00db      	lsls	r3, r3, #3
 8004910:	490e      	ldr	r1, [pc, #56]	@ (800494c <HAL_RCC_ClockConfig+0x1c8>)
 8004912:	4313      	orrs	r3, r2
 8004914:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004916:	f000 f821 	bl	800495c <HAL_RCC_GetSysClockFreq>
 800491a:	4602      	mov	r2, r0
 800491c:	4b0b      	ldr	r3, [pc, #44]	@ (800494c <HAL_RCC_ClockConfig+0x1c8>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	091b      	lsrs	r3, r3, #4
 8004922:	f003 030f 	and.w	r3, r3, #15
 8004926:	490a      	ldr	r1, [pc, #40]	@ (8004950 <HAL_RCC_ClockConfig+0x1cc>)
 8004928:	5ccb      	ldrb	r3, [r1, r3]
 800492a:	fa22 f303 	lsr.w	r3, r2, r3
 800492e:	4a09      	ldr	r2, [pc, #36]	@ (8004954 <HAL_RCC_ClockConfig+0x1d0>)
 8004930:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004932:	4b09      	ldr	r3, [pc, #36]	@ (8004958 <HAL_RCC_ClockConfig+0x1d4>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4618      	mov	r0, r3
 8004938:	f7fe f956 	bl	8002be8 <HAL_InitTick>

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	40023c00 	.word	0x40023c00
 800494c:	40023800 	.word	0x40023800
 8004950:	08006d54 	.word	0x08006d54
 8004954:	20000004 	.word	0x20000004
 8004958:	20000008 	.word	0x20000008

0800495c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800495c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004960:	b090      	sub	sp, #64	@ 0x40
 8004962:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004964:	2300      	movs	r3, #0
 8004966:	637b      	str	r3, [r7, #52]	@ 0x34
 8004968:	2300      	movs	r3, #0
 800496a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800496c:	2300      	movs	r3, #0
 800496e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8004970:	2300      	movs	r3, #0
 8004972:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004974:	4b59      	ldr	r3, [pc, #356]	@ (8004adc <HAL_RCC_GetSysClockFreq+0x180>)
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f003 030c 	and.w	r3, r3, #12
 800497c:	2b08      	cmp	r3, #8
 800497e:	d00d      	beq.n	800499c <HAL_RCC_GetSysClockFreq+0x40>
 8004980:	2b08      	cmp	r3, #8
 8004982:	f200 80a1 	bhi.w	8004ac8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004986:	2b00      	cmp	r3, #0
 8004988:	d002      	beq.n	8004990 <HAL_RCC_GetSysClockFreq+0x34>
 800498a:	2b04      	cmp	r3, #4
 800498c:	d003      	beq.n	8004996 <HAL_RCC_GetSysClockFreq+0x3a>
 800498e:	e09b      	b.n	8004ac8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004990:	4b53      	ldr	r3, [pc, #332]	@ (8004ae0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004992:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004994:	e09b      	b.n	8004ace <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004996:	4b53      	ldr	r3, [pc, #332]	@ (8004ae4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004998:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800499a:	e098      	b.n	8004ace <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800499c:	4b4f      	ldr	r3, [pc, #316]	@ (8004adc <HAL_RCC_GetSysClockFreq+0x180>)
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049a4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80049a6:	4b4d      	ldr	r3, [pc, #308]	@ (8004adc <HAL_RCC_GetSysClockFreq+0x180>)
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d028      	beq.n	8004a04 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049b2:	4b4a      	ldr	r3, [pc, #296]	@ (8004adc <HAL_RCC_GetSysClockFreq+0x180>)
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	099b      	lsrs	r3, r3, #6
 80049b8:	2200      	movs	r2, #0
 80049ba:	623b      	str	r3, [r7, #32]
 80049bc:	627a      	str	r2, [r7, #36]	@ 0x24
 80049be:	6a3b      	ldr	r3, [r7, #32]
 80049c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80049c4:	2100      	movs	r1, #0
 80049c6:	4b47      	ldr	r3, [pc, #284]	@ (8004ae4 <HAL_RCC_GetSysClockFreq+0x188>)
 80049c8:	fb03 f201 	mul.w	r2, r3, r1
 80049cc:	2300      	movs	r3, #0
 80049ce:	fb00 f303 	mul.w	r3, r0, r3
 80049d2:	4413      	add	r3, r2
 80049d4:	4a43      	ldr	r2, [pc, #268]	@ (8004ae4 <HAL_RCC_GetSysClockFreq+0x188>)
 80049d6:	fba0 1202 	umull	r1, r2, r0, r2
 80049da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049dc:	460a      	mov	r2, r1
 80049de:	62ba      	str	r2, [r7, #40]	@ 0x28
 80049e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049e2:	4413      	add	r3, r2
 80049e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049e8:	2200      	movs	r2, #0
 80049ea:	61bb      	str	r3, [r7, #24]
 80049ec:	61fa      	str	r2, [r7, #28]
 80049ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80049f6:	f7fc f881 	bl	8000afc <__aeabi_uldivmod>
 80049fa:	4602      	mov	r2, r0
 80049fc:	460b      	mov	r3, r1
 80049fe:	4613      	mov	r3, r2
 8004a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a02:	e053      	b.n	8004aac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a04:	4b35      	ldr	r3, [pc, #212]	@ (8004adc <HAL_RCC_GetSysClockFreq+0x180>)
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	099b      	lsrs	r3, r3, #6
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	613b      	str	r3, [r7, #16]
 8004a0e:	617a      	str	r2, [r7, #20]
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004a16:	f04f 0b00 	mov.w	fp, #0
 8004a1a:	4652      	mov	r2, sl
 8004a1c:	465b      	mov	r3, fp
 8004a1e:	f04f 0000 	mov.w	r0, #0
 8004a22:	f04f 0100 	mov.w	r1, #0
 8004a26:	0159      	lsls	r1, r3, #5
 8004a28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a2c:	0150      	lsls	r0, r2, #5
 8004a2e:	4602      	mov	r2, r0
 8004a30:	460b      	mov	r3, r1
 8004a32:	ebb2 080a 	subs.w	r8, r2, sl
 8004a36:	eb63 090b 	sbc.w	r9, r3, fp
 8004a3a:	f04f 0200 	mov.w	r2, #0
 8004a3e:	f04f 0300 	mov.w	r3, #0
 8004a42:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004a46:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004a4a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004a4e:	ebb2 0408 	subs.w	r4, r2, r8
 8004a52:	eb63 0509 	sbc.w	r5, r3, r9
 8004a56:	f04f 0200 	mov.w	r2, #0
 8004a5a:	f04f 0300 	mov.w	r3, #0
 8004a5e:	00eb      	lsls	r3, r5, #3
 8004a60:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a64:	00e2      	lsls	r2, r4, #3
 8004a66:	4614      	mov	r4, r2
 8004a68:	461d      	mov	r5, r3
 8004a6a:	eb14 030a 	adds.w	r3, r4, sl
 8004a6e:	603b      	str	r3, [r7, #0]
 8004a70:	eb45 030b 	adc.w	r3, r5, fp
 8004a74:	607b      	str	r3, [r7, #4]
 8004a76:	f04f 0200 	mov.w	r2, #0
 8004a7a:	f04f 0300 	mov.w	r3, #0
 8004a7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a82:	4629      	mov	r1, r5
 8004a84:	028b      	lsls	r3, r1, #10
 8004a86:	4621      	mov	r1, r4
 8004a88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a8c:	4621      	mov	r1, r4
 8004a8e:	028a      	lsls	r2, r1, #10
 8004a90:	4610      	mov	r0, r2
 8004a92:	4619      	mov	r1, r3
 8004a94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a96:	2200      	movs	r2, #0
 8004a98:	60bb      	str	r3, [r7, #8]
 8004a9a:	60fa      	str	r2, [r7, #12]
 8004a9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004aa0:	f7fc f82c 	bl	8000afc <__aeabi_uldivmod>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004aac:	4b0b      	ldr	r3, [pc, #44]	@ (8004adc <HAL_RCC_GetSysClockFreq+0x180>)
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	0c1b      	lsrs	r3, r3, #16
 8004ab2:	f003 0303 	and.w	r3, r3, #3
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	005b      	lsls	r3, r3, #1
 8004aba:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004abc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004ac6:	e002      	b.n	8004ace <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ac8:	4b05      	ldr	r3, [pc, #20]	@ (8004ae0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004aca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004acc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3740      	adds	r7, #64	@ 0x40
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ada:	bf00      	nop
 8004adc:	40023800 	.word	0x40023800
 8004ae0:	00f42400 	.word	0x00f42400
 8004ae4:	017d7840 	.word	0x017d7840

08004ae8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004aec:	4b03      	ldr	r3, [pc, #12]	@ (8004afc <HAL_RCC_GetHCLKFreq+0x14>)
 8004aee:	681b      	ldr	r3, [r3, #0]
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	20000004 	.word	0x20000004

08004b00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b04:	f7ff fff0 	bl	8004ae8 <HAL_RCC_GetHCLKFreq>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	4b05      	ldr	r3, [pc, #20]	@ (8004b20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	0a9b      	lsrs	r3, r3, #10
 8004b10:	f003 0307 	and.w	r3, r3, #7
 8004b14:	4903      	ldr	r1, [pc, #12]	@ (8004b24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b16:	5ccb      	ldrb	r3, [r1, r3]
 8004b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	40023800 	.word	0x40023800
 8004b24:	08006d64 	.word	0x08006d64

08004b28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b2c:	f7ff ffdc 	bl	8004ae8 <HAL_RCC_GetHCLKFreq>
 8004b30:	4602      	mov	r2, r0
 8004b32:	4b05      	ldr	r3, [pc, #20]	@ (8004b48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	0b5b      	lsrs	r3, r3, #13
 8004b38:	f003 0307 	and.w	r3, r3, #7
 8004b3c:	4903      	ldr	r1, [pc, #12]	@ (8004b4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b3e:	5ccb      	ldrb	r3, [r1, r3]
 8004b40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	40023800 	.word	0x40023800
 8004b4c:	08006d64 	.word	0x08006d64

08004b50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b088      	sub	sp, #32
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004b60:	2300      	movs	r3, #0
 8004b62:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004b64:	2300      	movs	r3, #0
 8004b66:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d012      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b78:	4b69      	ldr	r3, [pc, #420]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	4a68      	ldr	r2, [pc, #416]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b7e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004b82:	6093      	str	r3, [r2, #8]
 8004b84:	4b66      	ldr	r3, [pc, #408]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b86:	689a      	ldr	r2, [r3, #8]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b8c:	4964      	ldr	r1, [pc, #400]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d017      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004baa:	4b5d      	ldr	r3, [pc, #372]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004bb0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bb8:	4959      	ldr	r1, [pc, #356]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bc4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bc8:	d101      	bne.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d101      	bne.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d017      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004be6:	4b4e      	ldr	r3, [pc, #312]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004be8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004bec:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf4:	494a      	ldr	r1, [pc, #296]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c04:	d101      	bne.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004c06:	2301      	movs	r3, #1
 8004c08:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004c12:	2301      	movs	r3, #1
 8004c14:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004c22:	2301      	movs	r3, #1
 8004c24:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0320 	and.w	r3, r3, #32
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f000 808b 	beq.w	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c34:	4b3a      	ldr	r3, [pc, #232]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c38:	4a39      	ldr	r2, [pc, #228]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c40:	4b37      	ldr	r3, [pc, #220]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c48:	60bb      	str	r3, [r7, #8]
 8004c4a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004c4c:	4b35      	ldr	r3, [pc, #212]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a34      	ldr	r2, [pc, #208]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c58:	f7fe f80a 	bl	8002c70 <HAL_GetTick>
 8004c5c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c5e:	e008      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c60:	f7fe f806 	bl	8002c70 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b64      	cmp	r3, #100	@ 0x64
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e357      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c72:	4b2c      	ldr	r3, [pc, #176]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d0f0      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c7e:	4b28      	ldr	r3, [pc, #160]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c86:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d035      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d02e      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c9c:	4b20      	ldr	r3, [pc, #128]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ca0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ca4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ca6:	4b1e      	ldr	r3, [pc, #120]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004caa:	4a1d      	ldr	r2, [pc, #116]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cb0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cb2:	4b1b      	ldr	r3, [pc, #108]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cb6:	4a1a      	ldr	r2, [pc, #104]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cbc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004cbe:	4a18      	ldr	r2, [pc, #96]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004cc4:	4b16      	ldr	r3, [pc, #88]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cc8:	f003 0301 	and.w	r3, r3, #1
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d114      	bne.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd0:	f7fd ffce 	bl	8002c70 <HAL_GetTick>
 8004cd4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cd6:	e00a      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cd8:	f7fd ffca 	bl	8002c70 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d901      	bls.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e319      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cee:	4b0c      	ldr	r3, [pc, #48]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cf2:	f003 0302 	and.w	r3, r3, #2
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d0ee      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d06:	d111      	bne.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004d08:	4b05      	ldr	r3, [pc, #20]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004d14:	4b04      	ldr	r3, [pc, #16]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004d16:	400b      	ands	r3, r1
 8004d18:	4901      	ldr	r1, [pc, #4]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	608b      	str	r3, [r1, #8]
 8004d1e:	e00b      	b.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004d20:	40023800 	.word	0x40023800
 8004d24:	40007000 	.word	0x40007000
 8004d28:	0ffffcff 	.word	0x0ffffcff
 8004d2c:	4baa      	ldr	r3, [pc, #680]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	4aa9      	ldr	r2, [pc, #676]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d32:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004d36:	6093      	str	r3, [r2, #8]
 8004d38:	4ba7      	ldr	r3, [pc, #668]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d3a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d44:	49a4      	ldr	r1, [pc, #656]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0310 	and.w	r3, r3, #16
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d010      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d56:	4ba0      	ldr	r3, [pc, #640]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d5c:	4a9e      	ldr	r2, [pc, #632]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d62:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004d66:	4b9c      	ldr	r3, [pc, #624]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d68:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d70:	4999      	ldr	r1, [pc, #612]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00a      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d84:	4b94      	ldr	r3, [pc, #592]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d8a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d92:	4991      	ldr	r1, [pc, #580]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00a      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004da6:	4b8c      	ldr	r3, [pc, #560]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004db4:	4988      	ldr	r1, [pc, #544]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00a      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004dc8:	4b83      	ldr	r3, [pc, #524]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dd6:	4980      	ldr	r1, [pc, #512]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00a      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004dea:	4b7b      	ldr	r3, [pc, #492]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004df0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004df8:	4977      	ldr	r1, [pc, #476]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00a      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e0c:	4b72      	ldr	r3, [pc, #456]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e12:	f023 0203 	bic.w	r2, r3, #3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e1a:	496f      	ldr	r1, [pc, #444]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00a      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e2e:	4b6a      	ldr	r3, [pc, #424]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e34:	f023 020c 	bic.w	r2, r3, #12
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e3c:	4966      	ldr	r1, [pc, #408]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00a      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e50:	4b61      	ldr	r3, [pc, #388]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e56:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e5e:	495e      	ldr	r1, [pc, #376]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00a      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e72:	4b59      	ldr	r3, [pc, #356]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e78:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e80:	4955      	ldr	r1, [pc, #340]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00a      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e94:	4b50      	ldr	r3, [pc, #320]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e9a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ea2:	494d      	ldr	r1, [pc, #308]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00a      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004eb6:	4b48      	ldr	r3, [pc, #288]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ebc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ec4:	4944      	ldr	r1, [pc, #272]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00a      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004ed8:	4b3f      	ldr	r3, [pc, #252]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ede:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ee6:	493c      	ldr	r1, [pc, #240]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00a      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004efa:	4b37      	ldr	r3, [pc, #220]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f00:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f08:	4933      	ldr	r1, [pc, #204]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00a      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f1c:	4b2e      	ldr	r3, [pc, #184]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f22:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f2a:	492b      	ldr	r1, [pc, #172]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d011      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004f3e:	4b26      	ldr	r3, [pc, #152]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f44:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f4c:	4922      	ldr	r1, [pc, #136]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f5c:	d101      	bne.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0308 	and.w	r3, r3, #8
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d001      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00a      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f7e:	4b16      	ldr	r3, [pc, #88]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f84:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f8c:	4912      	ldr	r1, [pc, #72]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00b      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004fa0:	4b0d      	ldr	r3, [pc, #52]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fa6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fb0:	4909      	ldr	r1, [pc, #36]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d006      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	f000 80d9 	beq.w	800517e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004fcc:	4b02      	ldr	r3, [pc, #8]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a01      	ldr	r2, [pc, #4]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fd2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004fd6:	e001      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004fd8:	40023800 	.word	0x40023800
 8004fdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fde:	f7fd fe47 	bl	8002c70 <HAL_GetTick>
 8004fe2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fe4:	e008      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004fe6:	f7fd fe43 	bl	8002c70 <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	2b64      	cmp	r3, #100	@ 0x64
 8004ff2:	d901      	bls.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e194      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ff8:	4b6c      	ldr	r3, [pc, #432]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1f0      	bne.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0301 	and.w	r3, r3, #1
 800500c:	2b00      	cmp	r3, #0
 800500e:	d021      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005014:	2b00      	cmp	r3, #0
 8005016:	d11d      	bne.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005018:	4b64      	ldr	r3, [pc, #400]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800501a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800501e:	0c1b      	lsrs	r3, r3, #16
 8005020:	f003 0303 	and.w	r3, r3, #3
 8005024:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005026:	4b61      	ldr	r3, [pc, #388]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005028:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800502c:	0e1b      	lsrs	r3, r3, #24
 800502e:	f003 030f 	and.w	r3, r3, #15
 8005032:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	019a      	lsls	r2, r3, #6
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	041b      	lsls	r3, r3, #16
 800503e:	431a      	orrs	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	061b      	lsls	r3, r3, #24
 8005044:	431a      	orrs	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	071b      	lsls	r3, r3, #28
 800504c:	4957      	ldr	r1, [pc, #348]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800504e:	4313      	orrs	r3, r2
 8005050:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d004      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005064:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005068:	d00a      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005072:	2b00      	cmp	r3, #0
 8005074:	d02e      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800507a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800507e:	d129      	bne.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005080:	4b4a      	ldr	r3, [pc, #296]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005082:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005086:	0c1b      	lsrs	r3, r3, #16
 8005088:	f003 0303 	and.w	r3, r3, #3
 800508c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800508e:	4b47      	ldr	r3, [pc, #284]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005090:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005094:	0f1b      	lsrs	r3, r3, #28
 8005096:	f003 0307 	and.w	r3, r3, #7
 800509a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	019a      	lsls	r2, r3, #6
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	041b      	lsls	r3, r3, #16
 80050a6:	431a      	orrs	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	061b      	lsls	r3, r3, #24
 80050ae:	431a      	orrs	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	071b      	lsls	r3, r3, #28
 80050b4:	493d      	ldr	r1, [pc, #244]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80050bc:	4b3b      	ldr	r3, [pc, #236]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80050c2:	f023 021f 	bic.w	r2, r3, #31
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ca:	3b01      	subs	r3, #1
 80050cc:	4937      	ldr	r1, [pc, #220]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d01d      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80050e0:	4b32      	ldr	r3, [pc, #200]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050e6:	0e1b      	lsrs	r3, r3, #24
 80050e8:	f003 030f 	and.w	r3, r3, #15
 80050ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80050ee:	4b2f      	ldr	r3, [pc, #188]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050f4:	0f1b      	lsrs	r3, r3, #28
 80050f6:	f003 0307 	and.w	r3, r3, #7
 80050fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	019a      	lsls	r2, r3, #6
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	041b      	lsls	r3, r3, #16
 8005108:	431a      	orrs	r2, r3
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	061b      	lsls	r3, r3, #24
 800510e:	431a      	orrs	r2, r3
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	071b      	lsls	r3, r3, #28
 8005114:	4925      	ldr	r1, [pc, #148]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005116:	4313      	orrs	r3, r2
 8005118:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d011      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	019a      	lsls	r2, r3, #6
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	041b      	lsls	r3, r3, #16
 8005134:	431a      	orrs	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	061b      	lsls	r3, r3, #24
 800513c:	431a      	orrs	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	071b      	lsls	r3, r3, #28
 8005144:	4919      	ldr	r1, [pc, #100]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005146:	4313      	orrs	r3, r2
 8005148:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800514c:	4b17      	ldr	r3, [pc, #92]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a16      	ldr	r2, [pc, #88]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005152:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005156:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005158:	f7fd fd8a 	bl	8002c70 <HAL_GetTick>
 800515c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800515e:	e008      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005160:	f7fd fd86 	bl	8002c70 <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b64      	cmp	r3, #100	@ 0x64
 800516c:	d901      	bls.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e0d7      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005172:	4b0e      	ldr	r3, [pc, #56]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d0f0      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	2b01      	cmp	r3, #1
 8005182:	f040 80cd 	bne.w	8005320 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005186:	4b09      	ldr	r3, [pc, #36]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a08      	ldr	r2, [pc, #32]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800518c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005190:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005192:	f7fd fd6d 	bl	8002c70 <HAL_GetTick>
 8005196:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005198:	e00a      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800519a:	f7fd fd69 	bl	8002c70 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	2b64      	cmp	r3, #100	@ 0x64
 80051a6:	d903      	bls.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e0ba      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80051ac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80051b0:	4b5e      	ldr	r3, [pc, #376]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80051b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051bc:	d0ed      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d003      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d009      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d02e      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d12a      	bne.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80051e6:	4b51      	ldr	r3, [pc, #324]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ec:	0c1b      	lsrs	r3, r3, #16
 80051ee:	f003 0303 	and.w	r3, r3, #3
 80051f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80051f4:	4b4d      	ldr	r3, [pc, #308]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051fa:	0f1b      	lsrs	r3, r3, #28
 80051fc:	f003 0307 	and.w	r3, r3, #7
 8005200:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	019a      	lsls	r2, r3, #6
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	041b      	lsls	r3, r3, #16
 800520c:	431a      	orrs	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	061b      	lsls	r3, r3, #24
 8005214:	431a      	orrs	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	071b      	lsls	r3, r3, #28
 800521a:	4944      	ldr	r1, [pc, #272]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800521c:	4313      	orrs	r3, r2
 800521e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005222:	4b42      	ldr	r3, [pc, #264]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005224:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005228:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005230:	3b01      	subs	r3, #1
 8005232:	021b      	lsls	r3, r3, #8
 8005234:	493d      	ldr	r1, [pc, #244]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005236:	4313      	orrs	r3, r2
 8005238:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d022      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800524c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005250:	d11d      	bne.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005252:	4b36      	ldr	r3, [pc, #216]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005258:	0e1b      	lsrs	r3, r3, #24
 800525a:	f003 030f 	and.w	r3, r3, #15
 800525e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005260:	4b32      	ldr	r3, [pc, #200]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005266:	0f1b      	lsrs	r3, r3, #28
 8005268:	f003 0307 	and.w	r3, r3, #7
 800526c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	019a      	lsls	r2, r3, #6
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a1b      	ldr	r3, [r3, #32]
 8005278:	041b      	lsls	r3, r3, #16
 800527a:	431a      	orrs	r2, r3
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	061b      	lsls	r3, r3, #24
 8005280:	431a      	orrs	r2, r3
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	071b      	lsls	r3, r3, #28
 8005286:	4929      	ldr	r1, [pc, #164]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005288:	4313      	orrs	r3, r2
 800528a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0308 	and.w	r3, r3, #8
 8005296:	2b00      	cmp	r3, #0
 8005298:	d028      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800529a:	4b24      	ldr	r3, [pc, #144]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800529c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052a0:	0e1b      	lsrs	r3, r3, #24
 80052a2:	f003 030f 	and.w	r3, r3, #15
 80052a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80052a8:	4b20      	ldr	r3, [pc, #128]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ae:	0c1b      	lsrs	r3, r3, #16
 80052b0:	f003 0303 	and.w	r3, r3, #3
 80052b4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	019a      	lsls	r2, r3, #6
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	041b      	lsls	r3, r3, #16
 80052c0:	431a      	orrs	r2, r3
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	061b      	lsls	r3, r3, #24
 80052c6:	431a      	orrs	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	69db      	ldr	r3, [r3, #28]
 80052cc:	071b      	lsls	r3, r3, #28
 80052ce:	4917      	ldr	r1, [pc, #92]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052d0:	4313      	orrs	r3, r2
 80052d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80052d6:	4b15      	ldr	r3, [pc, #84]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80052dc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e4:	4911      	ldr	r1, [pc, #68]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80052ec:	4b0f      	ldr	r3, [pc, #60]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a0e      	ldr	r2, [pc, #56]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052f8:	f7fd fcba 	bl	8002c70 <HAL_GetTick>
 80052fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052fe:	e008      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005300:	f7fd fcb6 	bl	8002c70 <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	2b64      	cmp	r3, #100	@ 0x64
 800530c:	d901      	bls.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e007      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005312:	4b06      	ldr	r3, [pc, #24]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800531a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800531e:	d1ef      	bne.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3720      	adds	r7, #32
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	40023800 	.word	0x40023800

08005330 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d101      	bne.n	8005344 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e08f      	b.n	8005464 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800534a:	b2db      	uxtb	r3, r3
 800534c:	2b00      	cmp	r3, #0
 800534e:	d106      	bne.n	800535e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f7fd faf5 	bl	8002948 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2202      	movs	r2, #2
 8005362:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	6899      	ldr	r1, [r3, #8]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	4b3e      	ldr	r3, [pc, #248]	@ (800546c <HAL_TIM_Encoder_Init+0x13c>)
 8005372:	400b      	ands	r3, r1
 8005374:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	3304      	adds	r3, #4
 800537e:	4619      	mov	r1, r3
 8005380:	4610      	mov	r0, r2
 8005382:	f000 f909 	bl	8005598 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	699b      	ldr	r3, [r3, #24]
 8005394:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	6a1b      	ldr	r3, [r3, #32]
 800539c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	4b31      	ldr	r3, [pc, #196]	@ (8005470 <HAL_TIM_Encoder_Init+0x140>)
 80053ac:	4013      	ands	r3, r2
 80053ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	689a      	ldr	r2, [r3, #8]
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	021b      	lsls	r3, r3, #8
 80053ba:	4313      	orrs	r3, r2
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	4313      	orrs	r3, r2
 80053c0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	4b2b      	ldr	r3, [pc, #172]	@ (8005474 <HAL_TIM_Encoder_Init+0x144>)
 80053c6:	4013      	ands	r3, r2
 80053c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	4b2a      	ldr	r3, [pc, #168]	@ (8005478 <HAL_TIM_Encoder_Init+0x148>)
 80053ce:	4013      	ands	r3, r2
 80053d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	68da      	ldr	r2, [r3, #12]
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	69db      	ldr	r3, [r3, #28]
 80053da:	021b      	lsls	r3, r3, #8
 80053dc:	4313      	orrs	r3, r2
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	011a      	lsls	r2, r3, #4
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	031b      	lsls	r3, r3, #12
 80053f0:	4313      	orrs	r3, r2
 80053f2:	693a      	ldr	r2, [r7, #16]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80053fe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005406:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	685a      	ldr	r2, [r3, #4]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	695b      	ldr	r3, [r3, #20]
 8005410:	011b      	lsls	r3, r3, #4
 8005412:	4313      	orrs	r3, r2
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	4313      	orrs	r3, r2
 8005418:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2201      	movs	r2, #1
 8005436:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3718      	adds	r7, #24
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	fffebff8 	.word	0xfffebff8
 8005470:	fffffcfc 	.word	0xfffffcfc
 8005474:	fffff3f3 	.word	0xfffff3f3
 8005478:	ffff0f0f 	.word	0xffff0f0f

0800547c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800548c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005494:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800549c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80054a4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d110      	bne.n	80054ce <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80054ac:	7bfb      	ldrb	r3, [r7, #15]
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d102      	bne.n	80054b8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80054b2:	7b7b      	ldrb	r3, [r7, #13]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d001      	beq.n	80054bc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e069      	b.n	8005590 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2202      	movs	r2, #2
 80054c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2202      	movs	r2, #2
 80054c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054cc:	e031      	b.n	8005532 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	2b04      	cmp	r3, #4
 80054d2:	d110      	bne.n	80054f6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80054d4:	7bbb      	ldrb	r3, [r7, #14]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d102      	bne.n	80054e0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80054da:	7b3b      	ldrb	r3, [r7, #12]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d001      	beq.n	80054e4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e055      	b.n	8005590 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2202      	movs	r2, #2
 80054e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2202      	movs	r2, #2
 80054f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054f4:	e01d      	b.n	8005532 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80054f6:	7bfb      	ldrb	r3, [r7, #15]
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d108      	bne.n	800550e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80054fc:	7bbb      	ldrb	r3, [r7, #14]
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d105      	bne.n	800550e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005502:	7b7b      	ldrb	r3, [r7, #13]
 8005504:	2b01      	cmp	r3, #1
 8005506:	d102      	bne.n	800550e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005508:	7b3b      	ldrb	r3, [r7, #12]
 800550a:	2b01      	cmp	r3, #1
 800550c:	d001      	beq.n	8005512 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e03e      	b.n	8005590 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2202      	movs	r2, #2
 8005516:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2202      	movs	r2, #2
 800551e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2202      	movs	r2, #2
 8005526:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2202      	movs	r2, #2
 800552e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d003      	beq.n	8005540 <HAL_TIM_Encoder_Start+0xc4>
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	2b04      	cmp	r3, #4
 800553c:	d008      	beq.n	8005550 <HAL_TIM_Encoder_Start+0xd4>
 800553e:	e00f      	b.n	8005560 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2201      	movs	r2, #1
 8005546:	2100      	movs	r1, #0
 8005548:	4618      	mov	r0, r3
 800554a:	f000 f8cb 	bl	80056e4 <TIM_CCxChannelCmd>
      break;
 800554e:	e016      	b.n	800557e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2201      	movs	r2, #1
 8005556:	2104      	movs	r1, #4
 8005558:	4618      	mov	r0, r3
 800555a:	f000 f8c3 	bl	80056e4 <TIM_CCxChannelCmd>
      break;
 800555e:	e00e      	b.n	800557e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2201      	movs	r2, #1
 8005566:	2100      	movs	r1, #0
 8005568:	4618      	mov	r0, r3
 800556a:	f000 f8bb 	bl	80056e4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2201      	movs	r2, #1
 8005574:	2104      	movs	r1, #4
 8005576:	4618      	mov	r0, r3
 8005578:	f000 f8b4 	bl	80056e4 <TIM_CCxChannelCmd>
      break;
 800557c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f042 0201 	orr.w	r2, r2, #1
 800558c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3710      	adds	r7, #16
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a43      	ldr	r2, [pc, #268]	@ (80056b8 <TIM_Base_SetConfig+0x120>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d013      	beq.n	80055d8 <TIM_Base_SetConfig+0x40>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055b6:	d00f      	beq.n	80055d8 <TIM_Base_SetConfig+0x40>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a40      	ldr	r2, [pc, #256]	@ (80056bc <TIM_Base_SetConfig+0x124>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d00b      	beq.n	80055d8 <TIM_Base_SetConfig+0x40>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a3f      	ldr	r2, [pc, #252]	@ (80056c0 <TIM_Base_SetConfig+0x128>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d007      	beq.n	80055d8 <TIM_Base_SetConfig+0x40>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a3e      	ldr	r2, [pc, #248]	@ (80056c4 <TIM_Base_SetConfig+0x12c>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d003      	beq.n	80055d8 <TIM_Base_SetConfig+0x40>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a3d      	ldr	r2, [pc, #244]	@ (80056c8 <TIM_Base_SetConfig+0x130>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d108      	bne.n	80055ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a32      	ldr	r2, [pc, #200]	@ (80056b8 <TIM_Base_SetConfig+0x120>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d02b      	beq.n	800564a <TIM_Base_SetConfig+0xb2>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055f8:	d027      	beq.n	800564a <TIM_Base_SetConfig+0xb2>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a2f      	ldr	r2, [pc, #188]	@ (80056bc <TIM_Base_SetConfig+0x124>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d023      	beq.n	800564a <TIM_Base_SetConfig+0xb2>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a2e      	ldr	r2, [pc, #184]	@ (80056c0 <TIM_Base_SetConfig+0x128>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d01f      	beq.n	800564a <TIM_Base_SetConfig+0xb2>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a2d      	ldr	r2, [pc, #180]	@ (80056c4 <TIM_Base_SetConfig+0x12c>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d01b      	beq.n	800564a <TIM_Base_SetConfig+0xb2>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a2c      	ldr	r2, [pc, #176]	@ (80056c8 <TIM_Base_SetConfig+0x130>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d017      	beq.n	800564a <TIM_Base_SetConfig+0xb2>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a2b      	ldr	r2, [pc, #172]	@ (80056cc <TIM_Base_SetConfig+0x134>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d013      	beq.n	800564a <TIM_Base_SetConfig+0xb2>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a2a      	ldr	r2, [pc, #168]	@ (80056d0 <TIM_Base_SetConfig+0x138>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d00f      	beq.n	800564a <TIM_Base_SetConfig+0xb2>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a29      	ldr	r2, [pc, #164]	@ (80056d4 <TIM_Base_SetConfig+0x13c>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d00b      	beq.n	800564a <TIM_Base_SetConfig+0xb2>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a28      	ldr	r2, [pc, #160]	@ (80056d8 <TIM_Base_SetConfig+0x140>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d007      	beq.n	800564a <TIM_Base_SetConfig+0xb2>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a27      	ldr	r2, [pc, #156]	@ (80056dc <TIM_Base_SetConfig+0x144>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d003      	beq.n	800564a <TIM_Base_SetConfig+0xb2>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a26      	ldr	r2, [pc, #152]	@ (80056e0 <TIM_Base_SetConfig+0x148>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d108      	bne.n	800565c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005650:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	4313      	orrs	r3, r2
 800565a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	4313      	orrs	r3, r2
 8005668:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	689a      	ldr	r2, [r3, #8]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a0e      	ldr	r2, [pc, #56]	@ (80056b8 <TIM_Base_SetConfig+0x120>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d003      	beq.n	800568a <TIM_Base_SetConfig+0xf2>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a10      	ldr	r2, [pc, #64]	@ (80056c8 <TIM_Base_SetConfig+0x130>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d103      	bne.n	8005692 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	691a      	ldr	r2, [r3, #16]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f043 0204 	orr.w	r2, r3, #4
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	601a      	str	r2, [r3, #0]
}
 80056aa:	bf00      	nop
 80056ac:	3714      	adds	r7, #20
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	40010000 	.word	0x40010000
 80056bc:	40000400 	.word	0x40000400
 80056c0:	40000800 	.word	0x40000800
 80056c4:	40000c00 	.word	0x40000c00
 80056c8:	40010400 	.word	0x40010400
 80056cc:	40014000 	.word	0x40014000
 80056d0:	40014400 	.word	0x40014400
 80056d4:	40014800 	.word	0x40014800
 80056d8:	40001800 	.word	0x40001800
 80056dc:	40001c00 	.word	0x40001c00
 80056e0:	40002000 	.word	0x40002000

080056e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b087      	sub	sp, #28
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	f003 031f 	and.w	r3, r3, #31
 80056f6:	2201      	movs	r2, #1
 80056f8:	fa02 f303 	lsl.w	r3, r2, r3
 80056fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6a1a      	ldr	r2, [r3, #32]
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	43db      	mvns	r3, r3
 8005706:	401a      	ands	r2, r3
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6a1a      	ldr	r2, [r3, #32]
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	f003 031f 	and.w	r3, r3, #31
 8005716:	6879      	ldr	r1, [r7, #4]
 8005718:	fa01 f303 	lsl.w	r3, r1, r3
 800571c:	431a      	orrs	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	621a      	str	r2, [r3, #32]
}
 8005722:	bf00      	nop
 8005724:	371c      	adds	r7, #28
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
	...

08005730 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005740:	2b01      	cmp	r3, #1
 8005742:	d101      	bne.n	8005748 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005744:	2302      	movs	r3, #2
 8005746:	e06d      	b.n	8005824 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2202      	movs	r2, #2
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a30      	ldr	r2, [pc, #192]	@ (8005830 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d004      	beq.n	800577c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a2f      	ldr	r2, [pc, #188]	@ (8005834 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d108      	bne.n	800578e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005782:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	4313      	orrs	r3, r2
 800578c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005794:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	4313      	orrs	r3, r2
 800579e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a20      	ldr	r2, [pc, #128]	@ (8005830 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d022      	beq.n	80057f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057ba:	d01d      	beq.n	80057f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a1d      	ldr	r2, [pc, #116]	@ (8005838 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d018      	beq.n	80057f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a1c      	ldr	r2, [pc, #112]	@ (800583c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d013      	beq.n	80057f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a1a      	ldr	r2, [pc, #104]	@ (8005840 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d00e      	beq.n	80057f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a15      	ldr	r2, [pc, #84]	@ (8005834 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d009      	beq.n	80057f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a16      	ldr	r2, [pc, #88]	@ (8005844 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d004      	beq.n	80057f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a15      	ldr	r2, [pc, #84]	@ (8005848 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d10c      	bne.n	8005812 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	4313      	orrs	r3, r2
 8005808:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68ba      	ldr	r2, [r7, #8]
 8005810:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3714      	adds	r7, #20
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr
 8005830:	40010000 	.word	0x40010000
 8005834:	40010400 	.word	0x40010400
 8005838:	40000400 	.word	0x40000400
 800583c:	40000800 	.word	0x40000800
 8005840:	40000c00 	.word	0x40000c00
 8005844:	40014000 	.word	0x40014000
 8005848:	40001800 	.word	0x40001800

0800584c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d101      	bne.n	800585e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e040      	b.n	80058e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005862:	2b00      	cmp	r3, #0
 8005864:	d106      	bne.n	8005874 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f7fd f8ae 	bl	80029d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2224      	movs	r2, #36	@ 0x24
 8005878:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f022 0201 	bic.w	r2, r2, #1
 8005888:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800588e:	2b00      	cmp	r3, #0
 8005890:	d002      	beq.n	8005898 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 fb16 	bl	8005ec4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 f8af 	bl	80059fc <UART_SetConfig>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d101      	bne.n	80058a8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e01b      	b.n	80058e0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	685a      	ldr	r2, [r3, #4]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80058b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	689a      	ldr	r2, [r3, #8]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80058c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f042 0201 	orr.w	r2, r2, #1
 80058d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 fb95 	bl	8006008 <UART_CheckIdleState>
 80058de:	4603      	mov	r3, r0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3708      	adds	r7, #8
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b08a      	sub	sp, #40	@ 0x28
 80058ec:	af02      	add	r7, sp, #8
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	603b      	str	r3, [r7, #0]
 80058f4:	4613      	mov	r3, r2
 80058f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058fc:	2b20      	cmp	r3, #32
 80058fe:	d177      	bne.n	80059f0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d002      	beq.n	800590c <HAL_UART_Transmit+0x24>
 8005906:	88fb      	ldrh	r3, [r7, #6]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d101      	bne.n	8005910 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e070      	b.n	80059f2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2221      	movs	r2, #33	@ 0x21
 800591c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800591e:	f7fd f9a7 	bl	8002c70 <HAL_GetTick>
 8005922:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	88fa      	ldrh	r2, [r7, #6]
 8005928:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	88fa      	ldrh	r2, [r7, #6]
 8005930:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800593c:	d108      	bne.n	8005950 <HAL_UART_Transmit+0x68>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d104      	bne.n	8005950 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005946:	2300      	movs	r3, #0
 8005948:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	61bb      	str	r3, [r7, #24]
 800594e:	e003      	b.n	8005958 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005954:	2300      	movs	r3, #0
 8005956:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005958:	e02f      	b.n	80059ba <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	9300      	str	r3, [sp, #0]
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	2200      	movs	r2, #0
 8005962:	2180      	movs	r1, #128	@ 0x80
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f000 fba6 	bl	80060b6 <UART_WaitOnFlagUntilTimeout>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d004      	beq.n	800597a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2220      	movs	r2, #32
 8005974:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e03b      	b.n	80059f2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d10b      	bne.n	8005998 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	881b      	ldrh	r3, [r3, #0]
 8005984:	461a      	mov	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800598e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	3302      	adds	r3, #2
 8005994:	61bb      	str	r3, [r7, #24]
 8005996:	e007      	b.n	80059a8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	781a      	ldrb	r2, [r3, #0]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	3301      	adds	r3, #1
 80059a6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	3b01      	subs	r3, #1
 80059b2:	b29a      	uxth	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1c9      	bne.n	800595a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	9300      	str	r3, [sp, #0]
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	2200      	movs	r2, #0
 80059ce:	2140      	movs	r1, #64	@ 0x40
 80059d0:	68f8      	ldr	r0, [r7, #12]
 80059d2:	f000 fb70 	bl	80060b6 <UART_WaitOnFlagUntilTimeout>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d004      	beq.n	80059e6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2220      	movs	r2, #32
 80059e0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e005      	b.n	80059f2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2220      	movs	r2, #32
 80059ea:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80059ec:	2300      	movs	r3, #0
 80059ee:	e000      	b.n	80059f2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80059f0:	2302      	movs	r3, #2
  }
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3720      	adds	r7, #32
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
	...

080059fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b088      	sub	sp, #32
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a04:	2300      	movs	r3, #0
 8005a06:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	689a      	ldr	r2, [r3, #8]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	431a      	orrs	r2, r3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	431a      	orrs	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	69db      	ldr	r3, [r3, #28]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	4ba6      	ldr	r3, [pc, #664]	@ (8005cc0 <UART_SetConfig+0x2c4>)
 8005a28:	4013      	ands	r3, r2
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	6812      	ldr	r2, [r2, #0]
 8005a2e:	6979      	ldr	r1, [r7, #20]
 8005a30:	430b      	orrs	r3, r1
 8005a32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	68da      	ldr	r2, [r3, #12]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	430a      	orrs	r2, r1
 8005a48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a1b      	ldr	r3, [r3, #32]
 8005a54:	697a      	ldr	r2, [r7, #20]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	430a      	orrs	r2, r1
 8005a6c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a94      	ldr	r2, [pc, #592]	@ (8005cc4 <UART_SetConfig+0x2c8>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d120      	bne.n	8005aba <UART_SetConfig+0xbe>
 8005a78:	4b93      	ldr	r3, [pc, #588]	@ (8005cc8 <UART_SetConfig+0x2cc>)
 8005a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a7e:	f003 0303 	and.w	r3, r3, #3
 8005a82:	2b03      	cmp	r3, #3
 8005a84:	d816      	bhi.n	8005ab4 <UART_SetConfig+0xb8>
 8005a86:	a201      	add	r2, pc, #4	@ (adr r2, 8005a8c <UART_SetConfig+0x90>)
 8005a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a8c:	08005a9d 	.word	0x08005a9d
 8005a90:	08005aa9 	.word	0x08005aa9
 8005a94:	08005aa3 	.word	0x08005aa3
 8005a98:	08005aaf 	.word	0x08005aaf
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	77fb      	strb	r3, [r7, #31]
 8005aa0:	e150      	b.n	8005d44 <UART_SetConfig+0x348>
 8005aa2:	2302      	movs	r3, #2
 8005aa4:	77fb      	strb	r3, [r7, #31]
 8005aa6:	e14d      	b.n	8005d44 <UART_SetConfig+0x348>
 8005aa8:	2304      	movs	r3, #4
 8005aaa:	77fb      	strb	r3, [r7, #31]
 8005aac:	e14a      	b.n	8005d44 <UART_SetConfig+0x348>
 8005aae:	2308      	movs	r3, #8
 8005ab0:	77fb      	strb	r3, [r7, #31]
 8005ab2:	e147      	b.n	8005d44 <UART_SetConfig+0x348>
 8005ab4:	2310      	movs	r3, #16
 8005ab6:	77fb      	strb	r3, [r7, #31]
 8005ab8:	e144      	b.n	8005d44 <UART_SetConfig+0x348>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a83      	ldr	r2, [pc, #524]	@ (8005ccc <UART_SetConfig+0x2d0>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d132      	bne.n	8005b2a <UART_SetConfig+0x12e>
 8005ac4:	4b80      	ldr	r3, [pc, #512]	@ (8005cc8 <UART_SetConfig+0x2cc>)
 8005ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aca:	f003 030c 	and.w	r3, r3, #12
 8005ace:	2b0c      	cmp	r3, #12
 8005ad0:	d828      	bhi.n	8005b24 <UART_SetConfig+0x128>
 8005ad2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ad8 <UART_SetConfig+0xdc>)
 8005ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad8:	08005b0d 	.word	0x08005b0d
 8005adc:	08005b25 	.word	0x08005b25
 8005ae0:	08005b25 	.word	0x08005b25
 8005ae4:	08005b25 	.word	0x08005b25
 8005ae8:	08005b19 	.word	0x08005b19
 8005aec:	08005b25 	.word	0x08005b25
 8005af0:	08005b25 	.word	0x08005b25
 8005af4:	08005b25 	.word	0x08005b25
 8005af8:	08005b13 	.word	0x08005b13
 8005afc:	08005b25 	.word	0x08005b25
 8005b00:	08005b25 	.word	0x08005b25
 8005b04:	08005b25 	.word	0x08005b25
 8005b08:	08005b1f 	.word	0x08005b1f
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	77fb      	strb	r3, [r7, #31]
 8005b10:	e118      	b.n	8005d44 <UART_SetConfig+0x348>
 8005b12:	2302      	movs	r3, #2
 8005b14:	77fb      	strb	r3, [r7, #31]
 8005b16:	e115      	b.n	8005d44 <UART_SetConfig+0x348>
 8005b18:	2304      	movs	r3, #4
 8005b1a:	77fb      	strb	r3, [r7, #31]
 8005b1c:	e112      	b.n	8005d44 <UART_SetConfig+0x348>
 8005b1e:	2308      	movs	r3, #8
 8005b20:	77fb      	strb	r3, [r7, #31]
 8005b22:	e10f      	b.n	8005d44 <UART_SetConfig+0x348>
 8005b24:	2310      	movs	r3, #16
 8005b26:	77fb      	strb	r3, [r7, #31]
 8005b28:	e10c      	b.n	8005d44 <UART_SetConfig+0x348>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a68      	ldr	r2, [pc, #416]	@ (8005cd0 <UART_SetConfig+0x2d4>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d120      	bne.n	8005b76 <UART_SetConfig+0x17a>
 8005b34:	4b64      	ldr	r3, [pc, #400]	@ (8005cc8 <UART_SetConfig+0x2cc>)
 8005b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b3a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005b3e:	2b30      	cmp	r3, #48	@ 0x30
 8005b40:	d013      	beq.n	8005b6a <UART_SetConfig+0x16e>
 8005b42:	2b30      	cmp	r3, #48	@ 0x30
 8005b44:	d814      	bhi.n	8005b70 <UART_SetConfig+0x174>
 8005b46:	2b20      	cmp	r3, #32
 8005b48:	d009      	beq.n	8005b5e <UART_SetConfig+0x162>
 8005b4a:	2b20      	cmp	r3, #32
 8005b4c:	d810      	bhi.n	8005b70 <UART_SetConfig+0x174>
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d002      	beq.n	8005b58 <UART_SetConfig+0x15c>
 8005b52:	2b10      	cmp	r3, #16
 8005b54:	d006      	beq.n	8005b64 <UART_SetConfig+0x168>
 8005b56:	e00b      	b.n	8005b70 <UART_SetConfig+0x174>
 8005b58:	2300      	movs	r3, #0
 8005b5a:	77fb      	strb	r3, [r7, #31]
 8005b5c:	e0f2      	b.n	8005d44 <UART_SetConfig+0x348>
 8005b5e:	2302      	movs	r3, #2
 8005b60:	77fb      	strb	r3, [r7, #31]
 8005b62:	e0ef      	b.n	8005d44 <UART_SetConfig+0x348>
 8005b64:	2304      	movs	r3, #4
 8005b66:	77fb      	strb	r3, [r7, #31]
 8005b68:	e0ec      	b.n	8005d44 <UART_SetConfig+0x348>
 8005b6a:	2308      	movs	r3, #8
 8005b6c:	77fb      	strb	r3, [r7, #31]
 8005b6e:	e0e9      	b.n	8005d44 <UART_SetConfig+0x348>
 8005b70:	2310      	movs	r3, #16
 8005b72:	77fb      	strb	r3, [r7, #31]
 8005b74:	e0e6      	b.n	8005d44 <UART_SetConfig+0x348>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a56      	ldr	r2, [pc, #344]	@ (8005cd4 <UART_SetConfig+0x2d8>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d120      	bne.n	8005bc2 <UART_SetConfig+0x1c6>
 8005b80:	4b51      	ldr	r3, [pc, #324]	@ (8005cc8 <UART_SetConfig+0x2cc>)
 8005b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b86:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005b8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b8c:	d013      	beq.n	8005bb6 <UART_SetConfig+0x1ba>
 8005b8e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b90:	d814      	bhi.n	8005bbc <UART_SetConfig+0x1c0>
 8005b92:	2b80      	cmp	r3, #128	@ 0x80
 8005b94:	d009      	beq.n	8005baa <UART_SetConfig+0x1ae>
 8005b96:	2b80      	cmp	r3, #128	@ 0x80
 8005b98:	d810      	bhi.n	8005bbc <UART_SetConfig+0x1c0>
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d002      	beq.n	8005ba4 <UART_SetConfig+0x1a8>
 8005b9e:	2b40      	cmp	r3, #64	@ 0x40
 8005ba0:	d006      	beq.n	8005bb0 <UART_SetConfig+0x1b4>
 8005ba2:	e00b      	b.n	8005bbc <UART_SetConfig+0x1c0>
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	77fb      	strb	r3, [r7, #31]
 8005ba8:	e0cc      	b.n	8005d44 <UART_SetConfig+0x348>
 8005baa:	2302      	movs	r3, #2
 8005bac:	77fb      	strb	r3, [r7, #31]
 8005bae:	e0c9      	b.n	8005d44 <UART_SetConfig+0x348>
 8005bb0:	2304      	movs	r3, #4
 8005bb2:	77fb      	strb	r3, [r7, #31]
 8005bb4:	e0c6      	b.n	8005d44 <UART_SetConfig+0x348>
 8005bb6:	2308      	movs	r3, #8
 8005bb8:	77fb      	strb	r3, [r7, #31]
 8005bba:	e0c3      	b.n	8005d44 <UART_SetConfig+0x348>
 8005bbc:	2310      	movs	r3, #16
 8005bbe:	77fb      	strb	r3, [r7, #31]
 8005bc0:	e0c0      	b.n	8005d44 <UART_SetConfig+0x348>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a44      	ldr	r2, [pc, #272]	@ (8005cd8 <UART_SetConfig+0x2dc>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d125      	bne.n	8005c18 <UART_SetConfig+0x21c>
 8005bcc:	4b3e      	ldr	r3, [pc, #248]	@ (8005cc8 <UART_SetConfig+0x2cc>)
 8005bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bd6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bda:	d017      	beq.n	8005c0c <UART_SetConfig+0x210>
 8005bdc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005be0:	d817      	bhi.n	8005c12 <UART_SetConfig+0x216>
 8005be2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005be6:	d00b      	beq.n	8005c00 <UART_SetConfig+0x204>
 8005be8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bec:	d811      	bhi.n	8005c12 <UART_SetConfig+0x216>
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d003      	beq.n	8005bfa <UART_SetConfig+0x1fe>
 8005bf2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bf6:	d006      	beq.n	8005c06 <UART_SetConfig+0x20a>
 8005bf8:	e00b      	b.n	8005c12 <UART_SetConfig+0x216>
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	77fb      	strb	r3, [r7, #31]
 8005bfe:	e0a1      	b.n	8005d44 <UART_SetConfig+0x348>
 8005c00:	2302      	movs	r3, #2
 8005c02:	77fb      	strb	r3, [r7, #31]
 8005c04:	e09e      	b.n	8005d44 <UART_SetConfig+0x348>
 8005c06:	2304      	movs	r3, #4
 8005c08:	77fb      	strb	r3, [r7, #31]
 8005c0a:	e09b      	b.n	8005d44 <UART_SetConfig+0x348>
 8005c0c:	2308      	movs	r3, #8
 8005c0e:	77fb      	strb	r3, [r7, #31]
 8005c10:	e098      	b.n	8005d44 <UART_SetConfig+0x348>
 8005c12:	2310      	movs	r3, #16
 8005c14:	77fb      	strb	r3, [r7, #31]
 8005c16:	e095      	b.n	8005d44 <UART_SetConfig+0x348>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a2f      	ldr	r2, [pc, #188]	@ (8005cdc <UART_SetConfig+0x2e0>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d125      	bne.n	8005c6e <UART_SetConfig+0x272>
 8005c22:	4b29      	ldr	r3, [pc, #164]	@ (8005cc8 <UART_SetConfig+0x2cc>)
 8005c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c28:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005c2c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c30:	d017      	beq.n	8005c62 <UART_SetConfig+0x266>
 8005c32:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c36:	d817      	bhi.n	8005c68 <UART_SetConfig+0x26c>
 8005c38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c3c:	d00b      	beq.n	8005c56 <UART_SetConfig+0x25a>
 8005c3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c42:	d811      	bhi.n	8005c68 <UART_SetConfig+0x26c>
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d003      	beq.n	8005c50 <UART_SetConfig+0x254>
 8005c48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c4c:	d006      	beq.n	8005c5c <UART_SetConfig+0x260>
 8005c4e:	e00b      	b.n	8005c68 <UART_SetConfig+0x26c>
 8005c50:	2301      	movs	r3, #1
 8005c52:	77fb      	strb	r3, [r7, #31]
 8005c54:	e076      	b.n	8005d44 <UART_SetConfig+0x348>
 8005c56:	2302      	movs	r3, #2
 8005c58:	77fb      	strb	r3, [r7, #31]
 8005c5a:	e073      	b.n	8005d44 <UART_SetConfig+0x348>
 8005c5c:	2304      	movs	r3, #4
 8005c5e:	77fb      	strb	r3, [r7, #31]
 8005c60:	e070      	b.n	8005d44 <UART_SetConfig+0x348>
 8005c62:	2308      	movs	r3, #8
 8005c64:	77fb      	strb	r3, [r7, #31]
 8005c66:	e06d      	b.n	8005d44 <UART_SetConfig+0x348>
 8005c68:	2310      	movs	r3, #16
 8005c6a:	77fb      	strb	r3, [r7, #31]
 8005c6c:	e06a      	b.n	8005d44 <UART_SetConfig+0x348>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a1b      	ldr	r2, [pc, #108]	@ (8005ce0 <UART_SetConfig+0x2e4>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d138      	bne.n	8005cea <UART_SetConfig+0x2ee>
 8005c78:	4b13      	ldr	r3, [pc, #76]	@ (8005cc8 <UART_SetConfig+0x2cc>)
 8005c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c7e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005c82:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005c86:	d017      	beq.n	8005cb8 <UART_SetConfig+0x2bc>
 8005c88:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005c8c:	d82a      	bhi.n	8005ce4 <UART_SetConfig+0x2e8>
 8005c8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c92:	d00b      	beq.n	8005cac <UART_SetConfig+0x2b0>
 8005c94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c98:	d824      	bhi.n	8005ce4 <UART_SetConfig+0x2e8>
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d003      	beq.n	8005ca6 <UART_SetConfig+0x2aa>
 8005c9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ca2:	d006      	beq.n	8005cb2 <UART_SetConfig+0x2b6>
 8005ca4:	e01e      	b.n	8005ce4 <UART_SetConfig+0x2e8>
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	77fb      	strb	r3, [r7, #31]
 8005caa:	e04b      	b.n	8005d44 <UART_SetConfig+0x348>
 8005cac:	2302      	movs	r3, #2
 8005cae:	77fb      	strb	r3, [r7, #31]
 8005cb0:	e048      	b.n	8005d44 <UART_SetConfig+0x348>
 8005cb2:	2304      	movs	r3, #4
 8005cb4:	77fb      	strb	r3, [r7, #31]
 8005cb6:	e045      	b.n	8005d44 <UART_SetConfig+0x348>
 8005cb8:	2308      	movs	r3, #8
 8005cba:	77fb      	strb	r3, [r7, #31]
 8005cbc:	e042      	b.n	8005d44 <UART_SetConfig+0x348>
 8005cbe:	bf00      	nop
 8005cc0:	efff69f3 	.word	0xefff69f3
 8005cc4:	40011000 	.word	0x40011000
 8005cc8:	40023800 	.word	0x40023800
 8005ccc:	40004400 	.word	0x40004400
 8005cd0:	40004800 	.word	0x40004800
 8005cd4:	40004c00 	.word	0x40004c00
 8005cd8:	40005000 	.word	0x40005000
 8005cdc:	40011400 	.word	0x40011400
 8005ce0:	40007800 	.word	0x40007800
 8005ce4:	2310      	movs	r3, #16
 8005ce6:	77fb      	strb	r3, [r7, #31]
 8005ce8:	e02c      	b.n	8005d44 <UART_SetConfig+0x348>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a72      	ldr	r2, [pc, #456]	@ (8005eb8 <UART_SetConfig+0x4bc>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d125      	bne.n	8005d40 <UART_SetConfig+0x344>
 8005cf4:	4b71      	ldr	r3, [pc, #452]	@ (8005ebc <UART_SetConfig+0x4c0>)
 8005cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cfa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005cfe:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005d02:	d017      	beq.n	8005d34 <UART_SetConfig+0x338>
 8005d04:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005d08:	d817      	bhi.n	8005d3a <UART_SetConfig+0x33e>
 8005d0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d0e:	d00b      	beq.n	8005d28 <UART_SetConfig+0x32c>
 8005d10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d14:	d811      	bhi.n	8005d3a <UART_SetConfig+0x33e>
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d003      	beq.n	8005d22 <UART_SetConfig+0x326>
 8005d1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d1e:	d006      	beq.n	8005d2e <UART_SetConfig+0x332>
 8005d20:	e00b      	b.n	8005d3a <UART_SetConfig+0x33e>
 8005d22:	2300      	movs	r3, #0
 8005d24:	77fb      	strb	r3, [r7, #31]
 8005d26:	e00d      	b.n	8005d44 <UART_SetConfig+0x348>
 8005d28:	2302      	movs	r3, #2
 8005d2a:	77fb      	strb	r3, [r7, #31]
 8005d2c:	e00a      	b.n	8005d44 <UART_SetConfig+0x348>
 8005d2e:	2304      	movs	r3, #4
 8005d30:	77fb      	strb	r3, [r7, #31]
 8005d32:	e007      	b.n	8005d44 <UART_SetConfig+0x348>
 8005d34:	2308      	movs	r3, #8
 8005d36:	77fb      	strb	r3, [r7, #31]
 8005d38:	e004      	b.n	8005d44 <UART_SetConfig+0x348>
 8005d3a:	2310      	movs	r3, #16
 8005d3c:	77fb      	strb	r3, [r7, #31]
 8005d3e:	e001      	b.n	8005d44 <UART_SetConfig+0x348>
 8005d40:	2310      	movs	r3, #16
 8005d42:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	69db      	ldr	r3, [r3, #28]
 8005d48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d4c:	d15b      	bne.n	8005e06 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005d4e:	7ffb      	ldrb	r3, [r7, #31]
 8005d50:	2b08      	cmp	r3, #8
 8005d52:	d828      	bhi.n	8005da6 <UART_SetConfig+0x3aa>
 8005d54:	a201      	add	r2, pc, #4	@ (adr r2, 8005d5c <UART_SetConfig+0x360>)
 8005d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d5a:	bf00      	nop
 8005d5c:	08005d81 	.word	0x08005d81
 8005d60:	08005d89 	.word	0x08005d89
 8005d64:	08005d91 	.word	0x08005d91
 8005d68:	08005da7 	.word	0x08005da7
 8005d6c:	08005d97 	.word	0x08005d97
 8005d70:	08005da7 	.word	0x08005da7
 8005d74:	08005da7 	.word	0x08005da7
 8005d78:	08005da7 	.word	0x08005da7
 8005d7c:	08005d9f 	.word	0x08005d9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d80:	f7fe febe 	bl	8004b00 <HAL_RCC_GetPCLK1Freq>
 8005d84:	61b8      	str	r0, [r7, #24]
        break;
 8005d86:	e013      	b.n	8005db0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d88:	f7fe fece 	bl	8004b28 <HAL_RCC_GetPCLK2Freq>
 8005d8c:	61b8      	str	r0, [r7, #24]
        break;
 8005d8e:	e00f      	b.n	8005db0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d90:	4b4b      	ldr	r3, [pc, #300]	@ (8005ec0 <UART_SetConfig+0x4c4>)
 8005d92:	61bb      	str	r3, [r7, #24]
        break;
 8005d94:	e00c      	b.n	8005db0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d96:	f7fe fde1 	bl	800495c <HAL_RCC_GetSysClockFreq>
 8005d9a:	61b8      	str	r0, [r7, #24]
        break;
 8005d9c:	e008      	b.n	8005db0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005da2:	61bb      	str	r3, [r7, #24]
        break;
 8005da4:	e004      	b.n	8005db0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005da6:	2300      	movs	r3, #0
 8005da8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	77bb      	strb	r3, [r7, #30]
        break;
 8005dae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d074      	beq.n	8005ea0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	005a      	lsls	r2, r3, #1
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	085b      	lsrs	r3, r3, #1
 8005dc0:	441a      	add	r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	2b0f      	cmp	r3, #15
 8005dd0:	d916      	bls.n	8005e00 <UART_SetConfig+0x404>
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dd8:	d212      	bcs.n	8005e00 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	f023 030f 	bic.w	r3, r3, #15
 8005de2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	085b      	lsrs	r3, r3, #1
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	f003 0307 	and.w	r3, r3, #7
 8005dee:	b29a      	uxth	r2, r3
 8005df0:	89fb      	ldrh	r3, [r7, #14]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	89fa      	ldrh	r2, [r7, #14]
 8005dfc:	60da      	str	r2, [r3, #12]
 8005dfe:	e04f      	b.n	8005ea0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	77bb      	strb	r3, [r7, #30]
 8005e04:	e04c      	b.n	8005ea0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e06:	7ffb      	ldrb	r3, [r7, #31]
 8005e08:	2b08      	cmp	r3, #8
 8005e0a:	d828      	bhi.n	8005e5e <UART_SetConfig+0x462>
 8005e0c:	a201      	add	r2, pc, #4	@ (adr r2, 8005e14 <UART_SetConfig+0x418>)
 8005e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e12:	bf00      	nop
 8005e14:	08005e39 	.word	0x08005e39
 8005e18:	08005e41 	.word	0x08005e41
 8005e1c:	08005e49 	.word	0x08005e49
 8005e20:	08005e5f 	.word	0x08005e5f
 8005e24:	08005e4f 	.word	0x08005e4f
 8005e28:	08005e5f 	.word	0x08005e5f
 8005e2c:	08005e5f 	.word	0x08005e5f
 8005e30:	08005e5f 	.word	0x08005e5f
 8005e34:	08005e57 	.word	0x08005e57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e38:	f7fe fe62 	bl	8004b00 <HAL_RCC_GetPCLK1Freq>
 8005e3c:	61b8      	str	r0, [r7, #24]
        break;
 8005e3e:	e013      	b.n	8005e68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e40:	f7fe fe72 	bl	8004b28 <HAL_RCC_GetPCLK2Freq>
 8005e44:	61b8      	str	r0, [r7, #24]
        break;
 8005e46:	e00f      	b.n	8005e68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e48:	4b1d      	ldr	r3, [pc, #116]	@ (8005ec0 <UART_SetConfig+0x4c4>)
 8005e4a:	61bb      	str	r3, [r7, #24]
        break;
 8005e4c:	e00c      	b.n	8005e68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e4e:	f7fe fd85 	bl	800495c <HAL_RCC_GetSysClockFreq>
 8005e52:	61b8      	str	r0, [r7, #24]
        break;
 8005e54:	e008      	b.n	8005e68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e5a:	61bb      	str	r3, [r7, #24]
        break;
 8005e5c:	e004      	b.n	8005e68 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	77bb      	strb	r3, [r7, #30]
        break;
 8005e66:	bf00      	nop
    }

    if (pclk != 0U)
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d018      	beq.n	8005ea0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	085a      	lsrs	r2, r3, #1
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	441a      	add	r2, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e80:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	2b0f      	cmp	r3, #15
 8005e86:	d909      	bls.n	8005e9c <UART_SetConfig+0x4a0>
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e8e:	d205      	bcs.n	8005e9c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	b29a      	uxth	r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	60da      	str	r2, [r3, #12]
 8005e9a:	e001      	b.n	8005ea0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005eac:	7fbb      	ldrb	r3, [r7, #30]
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3720      	adds	r7, #32
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	40007c00 	.word	0x40007c00
 8005ebc:	40023800 	.word	0x40023800
 8005ec0:	00f42400 	.word	0x00f42400

08005ec4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed0:	f003 0308 	and.w	r3, r3, #8
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d00a      	beq.n	8005eee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	430a      	orrs	r2, r1
 8005eec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef2:	f003 0301 	and.w	r3, r3, #1
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d00a      	beq.n	8005f10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	430a      	orrs	r2, r1
 8005f0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f14:	f003 0302 	and.w	r3, r3, #2
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00a      	beq.n	8005f32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f36:	f003 0304 	and.w	r3, r3, #4
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00a      	beq.n	8005f54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	430a      	orrs	r2, r1
 8005f52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f58:	f003 0310 	and.w	r3, r3, #16
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00a      	beq.n	8005f76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	430a      	orrs	r2, r1
 8005f74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f7a:	f003 0320 	and.w	r3, r3, #32
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00a      	beq.n	8005f98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	430a      	orrs	r2, r1
 8005f96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d01a      	beq.n	8005fda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fc2:	d10a      	bne.n	8005fda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	430a      	orrs	r2, r1
 8005fd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00a      	beq.n	8005ffc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	605a      	str	r2, [r3, #4]
  }
}
 8005ffc:	bf00      	nop
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b08c      	sub	sp, #48	@ 0x30
 800600c:	af02      	add	r7, sp, #8
 800600e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006018:	f7fc fe2a 	bl	8002c70 <HAL_GetTick>
 800601c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0308 	and.w	r3, r3, #8
 8006028:	2b08      	cmp	r3, #8
 800602a:	d12e      	bne.n	800608a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800602c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006030:	9300      	str	r3, [sp, #0]
 8006032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006034:	2200      	movs	r2, #0
 8006036:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f83b 	bl	80060b6 <UART_WaitOnFlagUntilTimeout>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d021      	beq.n	800608a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	e853 3f00 	ldrex	r3, [r3]
 8006052:	60fb      	str	r3, [r7, #12]
   return(result);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800605a:	623b      	str	r3, [r7, #32]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	461a      	mov	r2, r3
 8006062:	6a3b      	ldr	r3, [r7, #32]
 8006064:	61fb      	str	r3, [r7, #28]
 8006066:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006068:	69b9      	ldr	r1, [r7, #24]
 800606a:	69fa      	ldr	r2, [r7, #28]
 800606c:	e841 2300 	strex	r3, r2, [r1]
 8006070:	617b      	str	r3, [r7, #20]
   return(result);
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d1e6      	bne.n	8006046 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2220      	movs	r2, #32
 800607c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e011      	b.n	80060ae <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2220      	movs	r2, #32
 800608e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2220      	movs	r2, #32
 8006094:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3728      	adds	r7, #40	@ 0x28
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b084      	sub	sp, #16
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	60f8      	str	r0, [r7, #12]
 80060be:	60b9      	str	r1, [r7, #8]
 80060c0:	603b      	str	r3, [r7, #0]
 80060c2:	4613      	mov	r3, r2
 80060c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060c6:	e04f      	b.n	8006168 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80060ce:	d04b      	beq.n	8006168 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060d0:	f7fc fdce 	bl	8002c70 <HAL_GetTick>
 80060d4:	4602      	mov	r2, r0
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	1ad3      	subs	r3, r2, r3
 80060da:	69ba      	ldr	r2, [r7, #24]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d302      	bcc.n	80060e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d101      	bne.n	80060ea <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e04e      	b.n	8006188 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 0304 	and.w	r3, r3, #4
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d037      	beq.n	8006168 <UART_WaitOnFlagUntilTimeout+0xb2>
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	2b80      	cmp	r3, #128	@ 0x80
 80060fc:	d034      	beq.n	8006168 <UART_WaitOnFlagUntilTimeout+0xb2>
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	2b40      	cmp	r3, #64	@ 0x40
 8006102:	d031      	beq.n	8006168 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	69db      	ldr	r3, [r3, #28]
 800610a:	f003 0308 	and.w	r3, r3, #8
 800610e:	2b08      	cmp	r3, #8
 8006110:	d110      	bne.n	8006134 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2208      	movs	r2, #8
 8006118:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	f000 f838 	bl	8006190 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2208      	movs	r2, #8
 8006124:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e029      	b.n	8006188 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	69db      	ldr	r3, [r3, #28]
 800613a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800613e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006142:	d111      	bne.n	8006168 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800614c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	f000 f81e 	bl	8006190 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2220      	movs	r2, #32
 8006158:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006164:	2303      	movs	r3, #3
 8006166:	e00f      	b.n	8006188 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	69da      	ldr	r2, [r3, #28]
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	4013      	ands	r3, r2
 8006172:	68ba      	ldr	r2, [r7, #8]
 8006174:	429a      	cmp	r2, r3
 8006176:	bf0c      	ite	eq
 8006178:	2301      	moveq	r3, #1
 800617a:	2300      	movne	r3, #0
 800617c:	b2db      	uxtb	r3, r3
 800617e:	461a      	mov	r2, r3
 8006180:	79fb      	ldrb	r3, [r7, #7]
 8006182:	429a      	cmp	r2, r3
 8006184:	d0a0      	beq.n	80060c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3710      	adds	r7, #16
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006190:	b480      	push	{r7}
 8006192:	b095      	sub	sp, #84	@ 0x54
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061a0:	e853 3f00 	ldrex	r3, [r3]
 80061a4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80061a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	461a      	mov	r2, r3
 80061b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80061b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80061bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80061be:	e841 2300 	strex	r3, r2, [r1]
 80061c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80061c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1e6      	bne.n	8006198 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	3308      	adds	r3, #8
 80061d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d2:	6a3b      	ldr	r3, [r7, #32]
 80061d4:	e853 3f00 	ldrex	r3, [r3]
 80061d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	f023 0301 	bic.w	r3, r3, #1
 80061e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	3308      	adds	r3, #8
 80061e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80061f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061f2:	e841 2300 	strex	r3, r2, [r1]
 80061f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80061f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1e5      	bne.n	80061ca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006202:	2b01      	cmp	r3, #1
 8006204:	d118      	bne.n	8006238 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	e853 3f00 	ldrex	r3, [r3]
 8006212:	60bb      	str	r3, [r7, #8]
   return(result);
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	f023 0310 	bic.w	r3, r3, #16
 800621a:	647b      	str	r3, [r7, #68]	@ 0x44
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	461a      	mov	r2, r3
 8006222:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006224:	61bb      	str	r3, [r7, #24]
 8006226:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006228:	6979      	ldr	r1, [r7, #20]
 800622a:	69ba      	ldr	r2, [r7, #24]
 800622c:	e841 2300 	strex	r3, r2, [r1]
 8006230:	613b      	str	r3, [r7, #16]
   return(result);
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d1e6      	bne.n	8006206 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2220      	movs	r2, #32
 800623c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800624c:	bf00      	nop
 800624e:	3754      	adds	r7, #84	@ 0x54
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <siprintf>:
 8006258:	b40e      	push	{r1, r2, r3}
 800625a:	b510      	push	{r4, lr}
 800625c:	b09d      	sub	sp, #116	@ 0x74
 800625e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006260:	9002      	str	r0, [sp, #8]
 8006262:	9006      	str	r0, [sp, #24]
 8006264:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006268:	480a      	ldr	r0, [pc, #40]	@ (8006294 <siprintf+0x3c>)
 800626a:	9107      	str	r1, [sp, #28]
 800626c:	9104      	str	r1, [sp, #16]
 800626e:	490a      	ldr	r1, [pc, #40]	@ (8006298 <siprintf+0x40>)
 8006270:	f853 2b04 	ldr.w	r2, [r3], #4
 8006274:	9105      	str	r1, [sp, #20]
 8006276:	2400      	movs	r4, #0
 8006278:	a902      	add	r1, sp, #8
 800627a:	6800      	ldr	r0, [r0, #0]
 800627c:	9301      	str	r3, [sp, #4]
 800627e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006280:	f000 f89c 	bl	80063bc <_svfiprintf_r>
 8006284:	9b02      	ldr	r3, [sp, #8]
 8006286:	701c      	strb	r4, [r3, #0]
 8006288:	b01d      	add	sp, #116	@ 0x74
 800628a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800628e:	b003      	add	sp, #12
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	20000010 	.word	0x20000010
 8006298:	ffff0208 	.word	0xffff0208

0800629c <memset>:
 800629c:	4402      	add	r2, r0
 800629e:	4603      	mov	r3, r0
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d100      	bne.n	80062a6 <memset+0xa>
 80062a4:	4770      	bx	lr
 80062a6:	f803 1b01 	strb.w	r1, [r3], #1
 80062aa:	e7f9      	b.n	80062a0 <memset+0x4>

080062ac <__errno>:
 80062ac:	4b01      	ldr	r3, [pc, #4]	@ (80062b4 <__errno+0x8>)
 80062ae:	6818      	ldr	r0, [r3, #0]
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	20000010 	.word	0x20000010

080062b8 <__libc_init_array>:
 80062b8:	b570      	push	{r4, r5, r6, lr}
 80062ba:	4d0d      	ldr	r5, [pc, #52]	@ (80062f0 <__libc_init_array+0x38>)
 80062bc:	4c0d      	ldr	r4, [pc, #52]	@ (80062f4 <__libc_init_array+0x3c>)
 80062be:	1b64      	subs	r4, r4, r5
 80062c0:	10a4      	asrs	r4, r4, #2
 80062c2:	2600      	movs	r6, #0
 80062c4:	42a6      	cmp	r6, r4
 80062c6:	d109      	bne.n	80062dc <__libc_init_array+0x24>
 80062c8:	4d0b      	ldr	r5, [pc, #44]	@ (80062f8 <__libc_init_array+0x40>)
 80062ca:	4c0c      	ldr	r4, [pc, #48]	@ (80062fc <__libc_init_array+0x44>)
 80062cc:	f000 fc64 	bl	8006b98 <_init>
 80062d0:	1b64      	subs	r4, r4, r5
 80062d2:	10a4      	asrs	r4, r4, #2
 80062d4:	2600      	movs	r6, #0
 80062d6:	42a6      	cmp	r6, r4
 80062d8:	d105      	bne.n	80062e6 <__libc_init_array+0x2e>
 80062da:	bd70      	pop	{r4, r5, r6, pc}
 80062dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80062e0:	4798      	blx	r3
 80062e2:	3601      	adds	r6, #1
 80062e4:	e7ee      	b.n	80062c4 <__libc_init_array+0xc>
 80062e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80062ea:	4798      	blx	r3
 80062ec:	3601      	adds	r6, #1
 80062ee:	e7f2      	b.n	80062d6 <__libc_init_array+0x1e>
 80062f0:	08006da8 	.word	0x08006da8
 80062f4:	08006da8 	.word	0x08006da8
 80062f8:	08006da8 	.word	0x08006da8
 80062fc:	08006dac 	.word	0x08006dac

08006300 <__retarget_lock_acquire_recursive>:
 8006300:	4770      	bx	lr

08006302 <__retarget_lock_release_recursive>:
 8006302:	4770      	bx	lr

08006304 <__ssputs_r>:
 8006304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006308:	688e      	ldr	r6, [r1, #8]
 800630a:	461f      	mov	r7, r3
 800630c:	42be      	cmp	r6, r7
 800630e:	680b      	ldr	r3, [r1, #0]
 8006310:	4682      	mov	sl, r0
 8006312:	460c      	mov	r4, r1
 8006314:	4690      	mov	r8, r2
 8006316:	d82d      	bhi.n	8006374 <__ssputs_r+0x70>
 8006318:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800631c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006320:	d026      	beq.n	8006370 <__ssputs_r+0x6c>
 8006322:	6965      	ldr	r5, [r4, #20]
 8006324:	6909      	ldr	r1, [r1, #16]
 8006326:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800632a:	eba3 0901 	sub.w	r9, r3, r1
 800632e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006332:	1c7b      	adds	r3, r7, #1
 8006334:	444b      	add	r3, r9
 8006336:	106d      	asrs	r5, r5, #1
 8006338:	429d      	cmp	r5, r3
 800633a:	bf38      	it	cc
 800633c:	461d      	movcc	r5, r3
 800633e:	0553      	lsls	r3, r2, #21
 8006340:	d527      	bpl.n	8006392 <__ssputs_r+0x8e>
 8006342:	4629      	mov	r1, r5
 8006344:	f000 f958 	bl	80065f8 <_malloc_r>
 8006348:	4606      	mov	r6, r0
 800634a:	b360      	cbz	r0, 80063a6 <__ssputs_r+0xa2>
 800634c:	6921      	ldr	r1, [r4, #16]
 800634e:	464a      	mov	r2, r9
 8006350:	f000 fbc2 	bl	8006ad8 <memcpy>
 8006354:	89a3      	ldrh	r3, [r4, #12]
 8006356:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800635a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800635e:	81a3      	strh	r3, [r4, #12]
 8006360:	6126      	str	r6, [r4, #16]
 8006362:	6165      	str	r5, [r4, #20]
 8006364:	444e      	add	r6, r9
 8006366:	eba5 0509 	sub.w	r5, r5, r9
 800636a:	6026      	str	r6, [r4, #0]
 800636c:	60a5      	str	r5, [r4, #8]
 800636e:	463e      	mov	r6, r7
 8006370:	42be      	cmp	r6, r7
 8006372:	d900      	bls.n	8006376 <__ssputs_r+0x72>
 8006374:	463e      	mov	r6, r7
 8006376:	6820      	ldr	r0, [r4, #0]
 8006378:	4632      	mov	r2, r6
 800637a:	4641      	mov	r1, r8
 800637c:	f000 fb82 	bl	8006a84 <memmove>
 8006380:	68a3      	ldr	r3, [r4, #8]
 8006382:	1b9b      	subs	r3, r3, r6
 8006384:	60a3      	str	r3, [r4, #8]
 8006386:	6823      	ldr	r3, [r4, #0]
 8006388:	4433      	add	r3, r6
 800638a:	6023      	str	r3, [r4, #0]
 800638c:	2000      	movs	r0, #0
 800638e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006392:	462a      	mov	r2, r5
 8006394:	f000 fb48 	bl	8006a28 <_realloc_r>
 8006398:	4606      	mov	r6, r0
 800639a:	2800      	cmp	r0, #0
 800639c:	d1e0      	bne.n	8006360 <__ssputs_r+0x5c>
 800639e:	6921      	ldr	r1, [r4, #16]
 80063a0:	4650      	mov	r0, sl
 80063a2:	f000 fba7 	bl	8006af4 <_free_r>
 80063a6:	230c      	movs	r3, #12
 80063a8:	f8ca 3000 	str.w	r3, [sl]
 80063ac:	89a3      	ldrh	r3, [r4, #12]
 80063ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063b2:	81a3      	strh	r3, [r4, #12]
 80063b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80063b8:	e7e9      	b.n	800638e <__ssputs_r+0x8a>
	...

080063bc <_svfiprintf_r>:
 80063bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063c0:	4698      	mov	r8, r3
 80063c2:	898b      	ldrh	r3, [r1, #12]
 80063c4:	061b      	lsls	r3, r3, #24
 80063c6:	b09d      	sub	sp, #116	@ 0x74
 80063c8:	4607      	mov	r7, r0
 80063ca:	460d      	mov	r5, r1
 80063cc:	4614      	mov	r4, r2
 80063ce:	d510      	bpl.n	80063f2 <_svfiprintf_r+0x36>
 80063d0:	690b      	ldr	r3, [r1, #16]
 80063d2:	b973      	cbnz	r3, 80063f2 <_svfiprintf_r+0x36>
 80063d4:	2140      	movs	r1, #64	@ 0x40
 80063d6:	f000 f90f 	bl	80065f8 <_malloc_r>
 80063da:	6028      	str	r0, [r5, #0]
 80063dc:	6128      	str	r0, [r5, #16]
 80063de:	b930      	cbnz	r0, 80063ee <_svfiprintf_r+0x32>
 80063e0:	230c      	movs	r3, #12
 80063e2:	603b      	str	r3, [r7, #0]
 80063e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80063e8:	b01d      	add	sp, #116	@ 0x74
 80063ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063ee:	2340      	movs	r3, #64	@ 0x40
 80063f0:	616b      	str	r3, [r5, #20]
 80063f2:	2300      	movs	r3, #0
 80063f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80063f6:	2320      	movs	r3, #32
 80063f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80063fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8006400:	2330      	movs	r3, #48	@ 0x30
 8006402:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80065a0 <_svfiprintf_r+0x1e4>
 8006406:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800640a:	f04f 0901 	mov.w	r9, #1
 800640e:	4623      	mov	r3, r4
 8006410:	469a      	mov	sl, r3
 8006412:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006416:	b10a      	cbz	r2, 800641c <_svfiprintf_r+0x60>
 8006418:	2a25      	cmp	r2, #37	@ 0x25
 800641a:	d1f9      	bne.n	8006410 <_svfiprintf_r+0x54>
 800641c:	ebba 0b04 	subs.w	fp, sl, r4
 8006420:	d00b      	beq.n	800643a <_svfiprintf_r+0x7e>
 8006422:	465b      	mov	r3, fp
 8006424:	4622      	mov	r2, r4
 8006426:	4629      	mov	r1, r5
 8006428:	4638      	mov	r0, r7
 800642a:	f7ff ff6b 	bl	8006304 <__ssputs_r>
 800642e:	3001      	adds	r0, #1
 8006430:	f000 80a7 	beq.w	8006582 <_svfiprintf_r+0x1c6>
 8006434:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006436:	445a      	add	r2, fp
 8006438:	9209      	str	r2, [sp, #36]	@ 0x24
 800643a:	f89a 3000 	ldrb.w	r3, [sl]
 800643e:	2b00      	cmp	r3, #0
 8006440:	f000 809f 	beq.w	8006582 <_svfiprintf_r+0x1c6>
 8006444:	2300      	movs	r3, #0
 8006446:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800644a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800644e:	f10a 0a01 	add.w	sl, sl, #1
 8006452:	9304      	str	r3, [sp, #16]
 8006454:	9307      	str	r3, [sp, #28]
 8006456:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800645a:	931a      	str	r3, [sp, #104]	@ 0x68
 800645c:	4654      	mov	r4, sl
 800645e:	2205      	movs	r2, #5
 8006460:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006464:	484e      	ldr	r0, [pc, #312]	@ (80065a0 <_svfiprintf_r+0x1e4>)
 8006466:	f7f9 fedb 	bl	8000220 <memchr>
 800646a:	9a04      	ldr	r2, [sp, #16]
 800646c:	b9d8      	cbnz	r0, 80064a6 <_svfiprintf_r+0xea>
 800646e:	06d0      	lsls	r0, r2, #27
 8006470:	bf44      	itt	mi
 8006472:	2320      	movmi	r3, #32
 8006474:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006478:	0711      	lsls	r1, r2, #28
 800647a:	bf44      	itt	mi
 800647c:	232b      	movmi	r3, #43	@ 0x2b
 800647e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006482:	f89a 3000 	ldrb.w	r3, [sl]
 8006486:	2b2a      	cmp	r3, #42	@ 0x2a
 8006488:	d015      	beq.n	80064b6 <_svfiprintf_r+0xfa>
 800648a:	9a07      	ldr	r2, [sp, #28]
 800648c:	4654      	mov	r4, sl
 800648e:	2000      	movs	r0, #0
 8006490:	f04f 0c0a 	mov.w	ip, #10
 8006494:	4621      	mov	r1, r4
 8006496:	f811 3b01 	ldrb.w	r3, [r1], #1
 800649a:	3b30      	subs	r3, #48	@ 0x30
 800649c:	2b09      	cmp	r3, #9
 800649e:	d94b      	bls.n	8006538 <_svfiprintf_r+0x17c>
 80064a0:	b1b0      	cbz	r0, 80064d0 <_svfiprintf_r+0x114>
 80064a2:	9207      	str	r2, [sp, #28]
 80064a4:	e014      	b.n	80064d0 <_svfiprintf_r+0x114>
 80064a6:	eba0 0308 	sub.w	r3, r0, r8
 80064aa:	fa09 f303 	lsl.w	r3, r9, r3
 80064ae:	4313      	orrs	r3, r2
 80064b0:	9304      	str	r3, [sp, #16]
 80064b2:	46a2      	mov	sl, r4
 80064b4:	e7d2      	b.n	800645c <_svfiprintf_r+0xa0>
 80064b6:	9b03      	ldr	r3, [sp, #12]
 80064b8:	1d19      	adds	r1, r3, #4
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	9103      	str	r1, [sp, #12]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	bfbb      	ittet	lt
 80064c2:	425b      	neglt	r3, r3
 80064c4:	f042 0202 	orrlt.w	r2, r2, #2
 80064c8:	9307      	strge	r3, [sp, #28]
 80064ca:	9307      	strlt	r3, [sp, #28]
 80064cc:	bfb8      	it	lt
 80064ce:	9204      	strlt	r2, [sp, #16]
 80064d0:	7823      	ldrb	r3, [r4, #0]
 80064d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80064d4:	d10a      	bne.n	80064ec <_svfiprintf_r+0x130>
 80064d6:	7863      	ldrb	r3, [r4, #1]
 80064d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80064da:	d132      	bne.n	8006542 <_svfiprintf_r+0x186>
 80064dc:	9b03      	ldr	r3, [sp, #12]
 80064de:	1d1a      	adds	r2, r3, #4
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	9203      	str	r2, [sp, #12]
 80064e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80064e8:	3402      	adds	r4, #2
 80064ea:	9305      	str	r3, [sp, #20]
 80064ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80065b0 <_svfiprintf_r+0x1f4>
 80064f0:	7821      	ldrb	r1, [r4, #0]
 80064f2:	2203      	movs	r2, #3
 80064f4:	4650      	mov	r0, sl
 80064f6:	f7f9 fe93 	bl	8000220 <memchr>
 80064fa:	b138      	cbz	r0, 800650c <_svfiprintf_r+0x150>
 80064fc:	9b04      	ldr	r3, [sp, #16]
 80064fe:	eba0 000a 	sub.w	r0, r0, sl
 8006502:	2240      	movs	r2, #64	@ 0x40
 8006504:	4082      	lsls	r2, r0
 8006506:	4313      	orrs	r3, r2
 8006508:	3401      	adds	r4, #1
 800650a:	9304      	str	r3, [sp, #16]
 800650c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006510:	4824      	ldr	r0, [pc, #144]	@ (80065a4 <_svfiprintf_r+0x1e8>)
 8006512:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006516:	2206      	movs	r2, #6
 8006518:	f7f9 fe82 	bl	8000220 <memchr>
 800651c:	2800      	cmp	r0, #0
 800651e:	d036      	beq.n	800658e <_svfiprintf_r+0x1d2>
 8006520:	4b21      	ldr	r3, [pc, #132]	@ (80065a8 <_svfiprintf_r+0x1ec>)
 8006522:	bb1b      	cbnz	r3, 800656c <_svfiprintf_r+0x1b0>
 8006524:	9b03      	ldr	r3, [sp, #12]
 8006526:	3307      	adds	r3, #7
 8006528:	f023 0307 	bic.w	r3, r3, #7
 800652c:	3308      	adds	r3, #8
 800652e:	9303      	str	r3, [sp, #12]
 8006530:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006532:	4433      	add	r3, r6
 8006534:	9309      	str	r3, [sp, #36]	@ 0x24
 8006536:	e76a      	b.n	800640e <_svfiprintf_r+0x52>
 8006538:	fb0c 3202 	mla	r2, ip, r2, r3
 800653c:	460c      	mov	r4, r1
 800653e:	2001      	movs	r0, #1
 8006540:	e7a8      	b.n	8006494 <_svfiprintf_r+0xd8>
 8006542:	2300      	movs	r3, #0
 8006544:	3401      	adds	r4, #1
 8006546:	9305      	str	r3, [sp, #20]
 8006548:	4619      	mov	r1, r3
 800654a:	f04f 0c0a 	mov.w	ip, #10
 800654e:	4620      	mov	r0, r4
 8006550:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006554:	3a30      	subs	r2, #48	@ 0x30
 8006556:	2a09      	cmp	r2, #9
 8006558:	d903      	bls.n	8006562 <_svfiprintf_r+0x1a6>
 800655a:	2b00      	cmp	r3, #0
 800655c:	d0c6      	beq.n	80064ec <_svfiprintf_r+0x130>
 800655e:	9105      	str	r1, [sp, #20]
 8006560:	e7c4      	b.n	80064ec <_svfiprintf_r+0x130>
 8006562:	fb0c 2101 	mla	r1, ip, r1, r2
 8006566:	4604      	mov	r4, r0
 8006568:	2301      	movs	r3, #1
 800656a:	e7f0      	b.n	800654e <_svfiprintf_r+0x192>
 800656c:	ab03      	add	r3, sp, #12
 800656e:	9300      	str	r3, [sp, #0]
 8006570:	462a      	mov	r2, r5
 8006572:	4b0e      	ldr	r3, [pc, #56]	@ (80065ac <_svfiprintf_r+0x1f0>)
 8006574:	a904      	add	r1, sp, #16
 8006576:	4638      	mov	r0, r7
 8006578:	f3af 8000 	nop.w
 800657c:	1c42      	adds	r2, r0, #1
 800657e:	4606      	mov	r6, r0
 8006580:	d1d6      	bne.n	8006530 <_svfiprintf_r+0x174>
 8006582:	89ab      	ldrh	r3, [r5, #12]
 8006584:	065b      	lsls	r3, r3, #25
 8006586:	f53f af2d 	bmi.w	80063e4 <_svfiprintf_r+0x28>
 800658a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800658c:	e72c      	b.n	80063e8 <_svfiprintf_r+0x2c>
 800658e:	ab03      	add	r3, sp, #12
 8006590:	9300      	str	r3, [sp, #0]
 8006592:	462a      	mov	r2, r5
 8006594:	4b05      	ldr	r3, [pc, #20]	@ (80065ac <_svfiprintf_r+0x1f0>)
 8006596:	a904      	add	r1, sp, #16
 8006598:	4638      	mov	r0, r7
 800659a:	f000 f91b 	bl	80067d4 <_printf_i>
 800659e:	e7ed      	b.n	800657c <_svfiprintf_r+0x1c0>
 80065a0:	08006d6c 	.word	0x08006d6c
 80065a4:	08006d76 	.word	0x08006d76
 80065a8:	00000000 	.word	0x00000000
 80065ac:	08006305 	.word	0x08006305
 80065b0:	08006d72 	.word	0x08006d72

080065b4 <sbrk_aligned>:
 80065b4:	b570      	push	{r4, r5, r6, lr}
 80065b6:	4e0f      	ldr	r6, [pc, #60]	@ (80065f4 <sbrk_aligned+0x40>)
 80065b8:	460c      	mov	r4, r1
 80065ba:	6831      	ldr	r1, [r6, #0]
 80065bc:	4605      	mov	r5, r0
 80065be:	b911      	cbnz	r1, 80065c6 <sbrk_aligned+0x12>
 80065c0:	f000 fa7a 	bl	8006ab8 <_sbrk_r>
 80065c4:	6030      	str	r0, [r6, #0]
 80065c6:	4621      	mov	r1, r4
 80065c8:	4628      	mov	r0, r5
 80065ca:	f000 fa75 	bl	8006ab8 <_sbrk_r>
 80065ce:	1c43      	adds	r3, r0, #1
 80065d0:	d103      	bne.n	80065da <sbrk_aligned+0x26>
 80065d2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80065d6:	4620      	mov	r0, r4
 80065d8:	bd70      	pop	{r4, r5, r6, pc}
 80065da:	1cc4      	adds	r4, r0, #3
 80065dc:	f024 0403 	bic.w	r4, r4, #3
 80065e0:	42a0      	cmp	r0, r4
 80065e2:	d0f8      	beq.n	80065d6 <sbrk_aligned+0x22>
 80065e4:	1a21      	subs	r1, r4, r0
 80065e6:	4628      	mov	r0, r5
 80065e8:	f000 fa66 	bl	8006ab8 <_sbrk_r>
 80065ec:	3001      	adds	r0, #1
 80065ee:	d1f2      	bne.n	80065d6 <sbrk_aligned+0x22>
 80065f0:	e7ef      	b.n	80065d2 <sbrk_aligned+0x1e>
 80065f2:	bf00      	nop
 80065f4:	20000634 	.word	0x20000634

080065f8 <_malloc_r>:
 80065f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065fc:	1ccd      	adds	r5, r1, #3
 80065fe:	f025 0503 	bic.w	r5, r5, #3
 8006602:	3508      	adds	r5, #8
 8006604:	2d0c      	cmp	r5, #12
 8006606:	bf38      	it	cc
 8006608:	250c      	movcc	r5, #12
 800660a:	2d00      	cmp	r5, #0
 800660c:	4606      	mov	r6, r0
 800660e:	db01      	blt.n	8006614 <_malloc_r+0x1c>
 8006610:	42a9      	cmp	r1, r5
 8006612:	d904      	bls.n	800661e <_malloc_r+0x26>
 8006614:	230c      	movs	r3, #12
 8006616:	6033      	str	r3, [r6, #0]
 8006618:	2000      	movs	r0, #0
 800661a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800661e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80066f4 <_malloc_r+0xfc>
 8006622:	f000 f9f5 	bl	8006a10 <__malloc_lock>
 8006626:	f8d8 3000 	ldr.w	r3, [r8]
 800662a:	461c      	mov	r4, r3
 800662c:	bb44      	cbnz	r4, 8006680 <_malloc_r+0x88>
 800662e:	4629      	mov	r1, r5
 8006630:	4630      	mov	r0, r6
 8006632:	f7ff ffbf 	bl	80065b4 <sbrk_aligned>
 8006636:	1c43      	adds	r3, r0, #1
 8006638:	4604      	mov	r4, r0
 800663a:	d158      	bne.n	80066ee <_malloc_r+0xf6>
 800663c:	f8d8 4000 	ldr.w	r4, [r8]
 8006640:	4627      	mov	r7, r4
 8006642:	2f00      	cmp	r7, #0
 8006644:	d143      	bne.n	80066ce <_malloc_r+0xd6>
 8006646:	2c00      	cmp	r4, #0
 8006648:	d04b      	beq.n	80066e2 <_malloc_r+0xea>
 800664a:	6823      	ldr	r3, [r4, #0]
 800664c:	4639      	mov	r1, r7
 800664e:	4630      	mov	r0, r6
 8006650:	eb04 0903 	add.w	r9, r4, r3
 8006654:	f000 fa30 	bl	8006ab8 <_sbrk_r>
 8006658:	4581      	cmp	r9, r0
 800665a:	d142      	bne.n	80066e2 <_malloc_r+0xea>
 800665c:	6821      	ldr	r1, [r4, #0]
 800665e:	1a6d      	subs	r5, r5, r1
 8006660:	4629      	mov	r1, r5
 8006662:	4630      	mov	r0, r6
 8006664:	f7ff ffa6 	bl	80065b4 <sbrk_aligned>
 8006668:	3001      	adds	r0, #1
 800666a:	d03a      	beq.n	80066e2 <_malloc_r+0xea>
 800666c:	6823      	ldr	r3, [r4, #0]
 800666e:	442b      	add	r3, r5
 8006670:	6023      	str	r3, [r4, #0]
 8006672:	f8d8 3000 	ldr.w	r3, [r8]
 8006676:	685a      	ldr	r2, [r3, #4]
 8006678:	bb62      	cbnz	r2, 80066d4 <_malloc_r+0xdc>
 800667a:	f8c8 7000 	str.w	r7, [r8]
 800667e:	e00f      	b.n	80066a0 <_malloc_r+0xa8>
 8006680:	6822      	ldr	r2, [r4, #0]
 8006682:	1b52      	subs	r2, r2, r5
 8006684:	d420      	bmi.n	80066c8 <_malloc_r+0xd0>
 8006686:	2a0b      	cmp	r2, #11
 8006688:	d917      	bls.n	80066ba <_malloc_r+0xc2>
 800668a:	1961      	adds	r1, r4, r5
 800668c:	42a3      	cmp	r3, r4
 800668e:	6025      	str	r5, [r4, #0]
 8006690:	bf18      	it	ne
 8006692:	6059      	strne	r1, [r3, #4]
 8006694:	6863      	ldr	r3, [r4, #4]
 8006696:	bf08      	it	eq
 8006698:	f8c8 1000 	streq.w	r1, [r8]
 800669c:	5162      	str	r2, [r4, r5]
 800669e:	604b      	str	r3, [r1, #4]
 80066a0:	4630      	mov	r0, r6
 80066a2:	f000 f9bb 	bl	8006a1c <__malloc_unlock>
 80066a6:	f104 000b 	add.w	r0, r4, #11
 80066aa:	1d23      	adds	r3, r4, #4
 80066ac:	f020 0007 	bic.w	r0, r0, #7
 80066b0:	1ac2      	subs	r2, r0, r3
 80066b2:	bf1c      	itt	ne
 80066b4:	1a1b      	subne	r3, r3, r0
 80066b6:	50a3      	strne	r3, [r4, r2]
 80066b8:	e7af      	b.n	800661a <_malloc_r+0x22>
 80066ba:	6862      	ldr	r2, [r4, #4]
 80066bc:	42a3      	cmp	r3, r4
 80066be:	bf0c      	ite	eq
 80066c0:	f8c8 2000 	streq.w	r2, [r8]
 80066c4:	605a      	strne	r2, [r3, #4]
 80066c6:	e7eb      	b.n	80066a0 <_malloc_r+0xa8>
 80066c8:	4623      	mov	r3, r4
 80066ca:	6864      	ldr	r4, [r4, #4]
 80066cc:	e7ae      	b.n	800662c <_malloc_r+0x34>
 80066ce:	463c      	mov	r4, r7
 80066d0:	687f      	ldr	r7, [r7, #4]
 80066d2:	e7b6      	b.n	8006642 <_malloc_r+0x4a>
 80066d4:	461a      	mov	r2, r3
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	42a3      	cmp	r3, r4
 80066da:	d1fb      	bne.n	80066d4 <_malloc_r+0xdc>
 80066dc:	2300      	movs	r3, #0
 80066de:	6053      	str	r3, [r2, #4]
 80066e0:	e7de      	b.n	80066a0 <_malloc_r+0xa8>
 80066e2:	230c      	movs	r3, #12
 80066e4:	6033      	str	r3, [r6, #0]
 80066e6:	4630      	mov	r0, r6
 80066e8:	f000 f998 	bl	8006a1c <__malloc_unlock>
 80066ec:	e794      	b.n	8006618 <_malloc_r+0x20>
 80066ee:	6005      	str	r5, [r0, #0]
 80066f0:	e7d6      	b.n	80066a0 <_malloc_r+0xa8>
 80066f2:	bf00      	nop
 80066f4:	20000638 	.word	0x20000638

080066f8 <_printf_common>:
 80066f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066fc:	4616      	mov	r6, r2
 80066fe:	4698      	mov	r8, r3
 8006700:	688a      	ldr	r2, [r1, #8]
 8006702:	690b      	ldr	r3, [r1, #16]
 8006704:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006708:	4293      	cmp	r3, r2
 800670a:	bfb8      	it	lt
 800670c:	4613      	movlt	r3, r2
 800670e:	6033      	str	r3, [r6, #0]
 8006710:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006714:	4607      	mov	r7, r0
 8006716:	460c      	mov	r4, r1
 8006718:	b10a      	cbz	r2, 800671e <_printf_common+0x26>
 800671a:	3301      	adds	r3, #1
 800671c:	6033      	str	r3, [r6, #0]
 800671e:	6823      	ldr	r3, [r4, #0]
 8006720:	0699      	lsls	r1, r3, #26
 8006722:	bf42      	ittt	mi
 8006724:	6833      	ldrmi	r3, [r6, #0]
 8006726:	3302      	addmi	r3, #2
 8006728:	6033      	strmi	r3, [r6, #0]
 800672a:	6825      	ldr	r5, [r4, #0]
 800672c:	f015 0506 	ands.w	r5, r5, #6
 8006730:	d106      	bne.n	8006740 <_printf_common+0x48>
 8006732:	f104 0a19 	add.w	sl, r4, #25
 8006736:	68e3      	ldr	r3, [r4, #12]
 8006738:	6832      	ldr	r2, [r6, #0]
 800673a:	1a9b      	subs	r3, r3, r2
 800673c:	42ab      	cmp	r3, r5
 800673e:	dc26      	bgt.n	800678e <_printf_common+0x96>
 8006740:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006744:	6822      	ldr	r2, [r4, #0]
 8006746:	3b00      	subs	r3, #0
 8006748:	bf18      	it	ne
 800674a:	2301      	movne	r3, #1
 800674c:	0692      	lsls	r2, r2, #26
 800674e:	d42b      	bmi.n	80067a8 <_printf_common+0xb0>
 8006750:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006754:	4641      	mov	r1, r8
 8006756:	4638      	mov	r0, r7
 8006758:	47c8      	blx	r9
 800675a:	3001      	adds	r0, #1
 800675c:	d01e      	beq.n	800679c <_printf_common+0xa4>
 800675e:	6823      	ldr	r3, [r4, #0]
 8006760:	6922      	ldr	r2, [r4, #16]
 8006762:	f003 0306 	and.w	r3, r3, #6
 8006766:	2b04      	cmp	r3, #4
 8006768:	bf02      	ittt	eq
 800676a:	68e5      	ldreq	r5, [r4, #12]
 800676c:	6833      	ldreq	r3, [r6, #0]
 800676e:	1aed      	subeq	r5, r5, r3
 8006770:	68a3      	ldr	r3, [r4, #8]
 8006772:	bf0c      	ite	eq
 8006774:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006778:	2500      	movne	r5, #0
 800677a:	4293      	cmp	r3, r2
 800677c:	bfc4      	itt	gt
 800677e:	1a9b      	subgt	r3, r3, r2
 8006780:	18ed      	addgt	r5, r5, r3
 8006782:	2600      	movs	r6, #0
 8006784:	341a      	adds	r4, #26
 8006786:	42b5      	cmp	r5, r6
 8006788:	d11a      	bne.n	80067c0 <_printf_common+0xc8>
 800678a:	2000      	movs	r0, #0
 800678c:	e008      	b.n	80067a0 <_printf_common+0xa8>
 800678e:	2301      	movs	r3, #1
 8006790:	4652      	mov	r2, sl
 8006792:	4641      	mov	r1, r8
 8006794:	4638      	mov	r0, r7
 8006796:	47c8      	blx	r9
 8006798:	3001      	adds	r0, #1
 800679a:	d103      	bne.n	80067a4 <_printf_common+0xac>
 800679c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80067a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067a4:	3501      	adds	r5, #1
 80067a6:	e7c6      	b.n	8006736 <_printf_common+0x3e>
 80067a8:	18e1      	adds	r1, r4, r3
 80067aa:	1c5a      	adds	r2, r3, #1
 80067ac:	2030      	movs	r0, #48	@ 0x30
 80067ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80067b2:	4422      	add	r2, r4
 80067b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80067b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80067bc:	3302      	adds	r3, #2
 80067be:	e7c7      	b.n	8006750 <_printf_common+0x58>
 80067c0:	2301      	movs	r3, #1
 80067c2:	4622      	mov	r2, r4
 80067c4:	4641      	mov	r1, r8
 80067c6:	4638      	mov	r0, r7
 80067c8:	47c8      	blx	r9
 80067ca:	3001      	adds	r0, #1
 80067cc:	d0e6      	beq.n	800679c <_printf_common+0xa4>
 80067ce:	3601      	adds	r6, #1
 80067d0:	e7d9      	b.n	8006786 <_printf_common+0x8e>
	...

080067d4 <_printf_i>:
 80067d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067d8:	7e0f      	ldrb	r7, [r1, #24]
 80067da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80067dc:	2f78      	cmp	r7, #120	@ 0x78
 80067de:	4691      	mov	r9, r2
 80067e0:	4680      	mov	r8, r0
 80067e2:	460c      	mov	r4, r1
 80067e4:	469a      	mov	sl, r3
 80067e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80067ea:	d807      	bhi.n	80067fc <_printf_i+0x28>
 80067ec:	2f62      	cmp	r7, #98	@ 0x62
 80067ee:	d80a      	bhi.n	8006806 <_printf_i+0x32>
 80067f0:	2f00      	cmp	r7, #0
 80067f2:	f000 80d1 	beq.w	8006998 <_printf_i+0x1c4>
 80067f6:	2f58      	cmp	r7, #88	@ 0x58
 80067f8:	f000 80b8 	beq.w	800696c <_printf_i+0x198>
 80067fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006800:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006804:	e03a      	b.n	800687c <_printf_i+0xa8>
 8006806:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800680a:	2b15      	cmp	r3, #21
 800680c:	d8f6      	bhi.n	80067fc <_printf_i+0x28>
 800680e:	a101      	add	r1, pc, #4	@ (adr r1, 8006814 <_printf_i+0x40>)
 8006810:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006814:	0800686d 	.word	0x0800686d
 8006818:	08006881 	.word	0x08006881
 800681c:	080067fd 	.word	0x080067fd
 8006820:	080067fd 	.word	0x080067fd
 8006824:	080067fd 	.word	0x080067fd
 8006828:	080067fd 	.word	0x080067fd
 800682c:	08006881 	.word	0x08006881
 8006830:	080067fd 	.word	0x080067fd
 8006834:	080067fd 	.word	0x080067fd
 8006838:	080067fd 	.word	0x080067fd
 800683c:	080067fd 	.word	0x080067fd
 8006840:	0800697f 	.word	0x0800697f
 8006844:	080068ab 	.word	0x080068ab
 8006848:	08006939 	.word	0x08006939
 800684c:	080067fd 	.word	0x080067fd
 8006850:	080067fd 	.word	0x080067fd
 8006854:	080069a1 	.word	0x080069a1
 8006858:	080067fd 	.word	0x080067fd
 800685c:	080068ab 	.word	0x080068ab
 8006860:	080067fd 	.word	0x080067fd
 8006864:	080067fd 	.word	0x080067fd
 8006868:	08006941 	.word	0x08006941
 800686c:	6833      	ldr	r3, [r6, #0]
 800686e:	1d1a      	adds	r2, r3, #4
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	6032      	str	r2, [r6, #0]
 8006874:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006878:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800687c:	2301      	movs	r3, #1
 800687e:	e09c      	b.n	80069ba <_printf_i+0x1e6>
 8006880:	6833      	ldr	r3, [r6, #0]
 8006882:	6820      	ldr	r0, [r4, #0]
 8006884:	1d19      	adds	r1, r3, #4
 8006886:	6031      	str	r1, [r6, #0]
 8006888:	0606      	lsls	r6, r0, #24
 800688a:	d501      	bpl.n	8006890 <_printf_i+0xbc>
 800688c:	681d      	ldr	r5, [r3, #0]
 800688e:	e003      	b.n	8006898 <_printf_i+0xc4>
 8006890:	0645      	lsls	r5, r0, #25
 8006892:	d5fb      	bpl.n	800688c <_printf_i+0xb8>
 8006894:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006898:	2d00      	cmp	r5, #0
 800689a:	da03      	bge.n	80068a4 <_printf_i+0xd0>
 800689c:	232d      	movs	r3, #45	@ 0x2d
 800689e:	426d      	negs	r5, r5
 80068a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068a4:	4858      	ldr	r0, [pc, #352]	@ (8006a08 <_printf_i+0x234>)
 80068a6:	230a      	movs	r3, #10
 80068a8:	e011      	b.n	80068ce <_printf_i+0xfa>
 80068aa:	6821      	ldr	r1, [r4, #0]
 80068ac:	6833      	ldr	r3, [r6, #0]
 80068ae:	0608      	lsls	r0, r1, #24
 80068b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80068b4:	d402      	bmi.n	80068bc <_printf_i+0xe8>
 80068b6:	0649      	lsls	r1, r1, #25
 80068b8:	bf48      	it	mi
 80068ba:	b2ad      	uxthmi	r5, r5
 80068bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80068be:	4852      	ldr	r0, [pc, #328]	@ (8006a08 <_printf_i+0x234>)
 80068c0:	6033      	str	r3, [r6, #0]
 80068c2:	bf14      	ite	ne
 80068c4:	230a      	movne	r3, #10
 80068c6:	2308      	moveq	r3, #8
 80068c8:	2100      	movs	r1, #0
 80068ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80068ce:	6866      	ldr	r6, [r4, #4]
 80068d0:	60a6      	str	r6, [r4, #8]
 80068d2:	2e00      	cmp	r6, #0
 80068d4:	db05      	blt.n	80068e2 <_printf_i+0x10e>
 80068d6:	6821      	ldr	r1, [r4, #0]
 80068d8:	432e      	orrs	r6, r5
 80068da:	f021 0104 	bic.w	r1, r1, #4
 80068de:	6021      	str	r1, [r4, #0]
 80068e0:	d04b      	beq.n	800697a <_printf_i+0x1a6>
 80068e2:	4616      	mov	r6, r2
 80068e4:	fbb5 f1f3 	udiv	r1, r5, r3
 80068e8:	fb03 5711 	mls	r7, r3, r1, r5
 80068ec:	5dc7      	ldrb	r7, [r0, r7]
 80068ee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80068f2:	462f      	mov	r7, r5
 80068f4:	42bb      	cmp	r3, r7
 80068f6:	460d      	mov	r5, r1
 80068f8:	d9f4      	bls.n	80068e4 <_printf_i+0x110>
 80068fa:	2b08      	cmp	r3, #8
 80068fc:	d10b      	bne.n	8006916 <_printf_i+0x142>
 80068fe:	6823      	ldr	r3, [r4, #0]
 8006900:	07df      	lsls	r7, r3, #31
 8006902:	d508      	bpl.n	8006916 <_printf_i+0x142>
 8006904:	6923      	ldr	r3, [r4, #16]
 8006906:	6861      	ldr	r1, [r4, #4]
 8006908:	4299      	cmp	r1, r3
 800690a:	bfde      	ittt	le
 800690c:	2330      	movle	r3, #48	@ 0x30
 800690e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006912:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006916:	1b92      	subs	r2, r2, r6
 8006918:	6122      	str	r2, [r4, #16]
 800691a:	f8cd a000 	str.w	sl, [sp]
 800691e:	464b      	mov	r3, r9
 8006920:	aa03      	add	r2, sp, #12
 8006922:	4621      	mov	r1, r4
 8006924:	4640      	mov	r0, r8
 8006926:	f7ff fee7 	bl	80066f8 <_printf_common>
 800692a:	3001      	adds	r0, #1
 800692c:	d14a      	bne.n	80069c4 <_printf_i+0x1f0>
 800692e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006932:	b004      	add	sp, #16
 8006934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006938:	6823      	ldr	r3, [r4, #0]
 800693a:	f043 0320 	orr.w	r3, r3, #32
 800693e:	6023      	str	r3, [r4, #0]
 8006940:	4832      	ldr	r0, [pc, #200]	@ (8006a0c <_printf_i+0x238>)
 8006942:	2778      	movs	r7, #120	@ 0x78
 8006944:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006948:	6823      	ldr	r3, [r4, #0]
 800694a:	6831      	ldr	r1, [r6, #0]
 800694c:	061f      	lsls	r7, r3, #24
 800694e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006952:	d402      	bmi.n	800695a <_printf_i+0x186>
 8006954:	065f      	lsls	r7, r3, #25
 8006956:	bf48      	it	mi
 8006958:	b2ad      	uxthmi	r5, r5
 800695a:	6031      	str	r1, [r6, #0]
 800695c:	07d9      	lsls	r1, r3, #31
 800695e:	bf44      	itt	mi
 8006960:	f043 0320 	orrmi.w	r3, r3, #32
 8006964:	6023      	strmi	r3, [r4, #0]
 8006966:	b11d      	cbz	r5, 8006970 <_printf_i+0x19c>
 8006968:	2310      	movs	r3, #16
 800696a:	e7ad      	b.n	80068c8 <_printf_i+0xf4>
 800696c:	4826      	ldr	r0, [pc, #152]	@ (8006a08 <_printf_i+0x234>)
 800696e:	e7e9      	b.n	8006944 <_printf_i+0x170>
 8006970:	6823      	ldr	r3, [r4, #0]
 8006972:	f023 0320 	bic.w	r3, r3, #32
 8006976:	6023      	str	r3, [r4, #0]
 8006978:	e7f6      	b.n	8006968 <_printf_i+0x194>
 800697a:	4616      	mov	r6, r2
 800697c:	e7bd      	b.n	80068fa <_printf_i+0x126>
 800697e:	6833      	ldr	r3, [r6, #0]
 8006980:	6825      	ldr	r5, [r4, #0]
 8006982:	6961      	ldr	r1, [r4, #20]
 8006984:	1d18      	adds	r0, r3, #4
 8006986:	6030      	str	r0, [r6, #0]
 8006988:	062e      	lsls	r6, r5, #24
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	d501      	bpl.n	8006992 <_printf_i+0x1be>
 800698e:	6019      	str	r1, [r3, #0]
 8006990:	e002      	b.n	8006998 <_printf_i+0x1c4>
 8006992:	0668      	lsls	r0, r5, #25
 8006994:	d5fb      	bpl.n	800698e <_printf_i+0x1ba>
 8006996:	8019      	strh	r1, [r3, #0]
 8006998:	2300      	movs	r3, #0
 800699a:	6123      	str	r3, [r4, #16]
 800699c:	4616      	mov	r6, r2
 800699e:	e7bc      	b.n	800691a <_printf_i+0x146>
 80069a0:	6833      	ldr	r3, [r6, #0]
 80069a2:	1d1a      	adds	r2, r3, #4
 80069a4:	6032      	str	r2, [r6, #0]
 80069a6:	681e      	ldr	r6, [r3, #0]
 80069a8:	6862      	ldr	r2, [r4, #4]
 80069aa:	2100      	movs	r1, #0
 80069ac:	4630      	mov	r0, r6
 80069ae:	f7f9 fc37 	bl	8000220 <memchr>
 80069b2:	b108      	cbz	r0, 80069b8 <_printf_i+0x1e4>
 80069b4:	1b80      	subs	r0, r0, r6
 80069b6:	6060      	str	r0, [r4, #4]
 80069b8:	6863      	ldr	r3, [r4, #4]
 80069ba:	6123      	str	r3, [r4, #16]
 80069bc:	2300      	movs	r3, #0
 80069be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069c2:	e7aa      	b.n	800691a <_printf_i+0x146>
 80069c4:	6923      	ldr	r3, [r4, #16]
 80069c6:	4632      	mov	r2, r6
 80069c8:	4649      	mov	r1, r9
 80069ca:	4640      	mov	r0, r8
 80069cc:	47d0      	blx	sl
 80069ce:	3001      	adds	r0, #1
 80069d0:	d0ad      	beq.n	800692e <_printf_i+0x15a>
 80069d2:	6823      	ldr	r3, [r4, #0]
 80069d4:	079b      	lsls	r3, r3, #30
 80069d6:	d413      	bmi.n	8006a00 <_printf_i+0x22c>
 80069d8:	68e0      	ldr	r0, [r4, #12]
 80069da:	9b03      	ldr	r3, [sp, #12]
 80069dc:	4298      	cmp	r0, r3
 80069de:	bfb8      	it	lt
 80069e0:	4618      	movlt	r0, r3
 80069e2:	e7a6      	b.n	8006932 <_printf_i+0x15e>
 80069e4:	2301      	movs	r3, #1
 80069e6:	4632      	mov	r2, r6
 80069e8:	4649      	mov	r1, r9
 80069ea:	4640      	mov	r0, r8
 80069ec:	47d0      	blx	sl
 80069ee:	3001      	adds	r0, #1
 80069f0:	d09d      	beq.n	800692e <_printf_i+0x15a>
 80069f2:	3501      	adds	r5, #1
 80069f4:	68e3      	ldr	r3, [r4, #12]
 80069f6:	9903      	ldr	r1, [sp, #12]
 80069f8:	1a5b      	subs	r3, r3, r1
 80069fa:	42ab      	cmp	r3, r5
 80069fc:	dcf2      	bgt.n	80069e4 <_printf_i+0x210>
 80069fe:	e7eb      	b.n	80069d8 <_printf_i+0x204>
 8006a00:	2500      	movs	r5, #0
 8006a02:	f104 0619 	add.w	r6, r4, #25
 8006a06:	e7f5      	b.n	80069f4 <_printf_i+0x220>
 8006a08:	08006d7d 	.word	0x08006d7d
 8006a0c:	08006d8e 	.word	0x08006d8e

08006a10 <__malloc_lock>:
 8006a10:	4801      	ldr	r0, [pc, #4]	@ (8006a18 <__malloc_lock+0x8>)
 8006a12:	f7ff bc75 	b.w	8006300 <__retarget_lock_acquire_recursive>
 8006a16:	bf00      	nop
 8006a18:	20000630 	.word	0x20000630

08006a1c <__malloc_unlock>:
 8006a1c:	4801      	ldr	r0, [pc, #4]	@ (8006a24 <__malloc_unlock+0x8>)
 8006a1e:	f7ff bc70 	b.w	8006302 <__retarget_lock_release_recursive>
 8006a22:	bf00      	nop
 8006a24:	20000630 	.word	0x20000630

08006a28 <_realloc_r>:
 8006a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a2c:	4607      	mov	r7, r0
 8006a2e:	4614      	mov	r4, r2
 8006a30:	460d      	mov	r5, r1
 8006a32:	b921      	cbnz	r1, 8006a3e <_realloc_r+0x16>
 8006a34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a38:	4611      	mov	r1, r2
 8006a3a:	f7ff bddd 	b.w	80065f8 <_malloc_r>
 8006a3e:	b92a      	cbnz	r2, 8006a4c <_realloc_r+0x24>
 8006a40:	f000 f858 	bl	8006af4 <_free_r>
 8006a44:	4625      	mov	r5, r4
 8006a46:	4628      	mov	r0, r5
 8006a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a4c:	f000 f89c 	bl	8006b88 <_malloc_usable_size_r>
 8006a50:	4284      	cmp	r4, r0
 8006a52:	4606      	mov	r6, r0
 8006a54:	d802      	bhi.n	8006a5c <_realloc_r+0x34>
 8006a56:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006a5a:	d8f4      	bhi.n	8006a46 <_realloc_r+0x1e>
 8006a5c:	4621      	mov	r1, r4
 8006a5e:	4638      	mov	r0, r7
 8006a60:	f7ff fdca 	bl	80065f8 <_malloc_r>
 8006a64:	4680      	mov	r8, r0
 8006a66:	b908      	cbnz	r0, 8006a6c <_realloc_r+0x44>
 8006a68:	4645      	mov	r5, r8
 8006a6a:	e7ec      	b.n	8006a46 <_realloc_r+0x1e>
 8006a6c:	42b4      	cmp	r4, r6
 8006a6e:	4622      	mov	r2, r4
 8006a70:	4629      	mov	r1, r5
 8006a72:	bf28      	it	cs
 8006a74:	4632      	movcs	r2, r6
 8006a76:	f000 f82f 	bl	8006ad8 <memcpy>
 8006a7a:	4629      	mov	r1, r5
 8006a7c:	4638      	mov	r0, r7
 8006a7e:	f000 f839 	bl	8006af4 <_free_r>
 8006a82:	e7f1      	b.n	8006a68 <_realloc_r+0x40>

08006a84 <memmove>:
 8006a84:	4288      	cmp	r0, r1
 8006a86:	b510      	push	{r4, lr}
 8006a88:	eb01 0402 	add.w	r4, r1, r2
 8006a8c:	d902      	bls.n	8006a94 <memmove+0x10>
 8006a8e:	4284      	cmp	r4, r0
 8006a90:	4623      	mov	r3, r4
 8006a92:	d807      	bhi.n	8006aa4 <memmove+0x20>
 8006a94:	1e43      	subs	r3, r0, #1
 8006a96:	42a1      	cmp	r1, r4
 8006a98:	d008      	beq.n	8006aac <memmove+0x28>
 8006a9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006aa2:	e7f8      	b.n	8006a96 <memmove+0x12>
 8006aa4:	4402      	add	r2, r0
 8006aa6:	4601      	mov	r1, r0
 8006aa8:	428a      	cmp	r2, r1
 8006aaa:	d100      	bne.n	8006aae <memmove+0x2a>
 8006aac:	bd10      	pop	{r4, pc}
 8006aae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ab2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ab6:	e7f7      	b.n	8006aa8 <memmove+0x24>

08006ab8 <_sbrk_r>:
 8006ab8:	b538      	push	{r3, r4, r5, lr}
 8006aba:	4d06      	ldr	r5, [pc, #24]	@ (8006ad4 <_sbrk_r+0x1c>)
 8006abc:	2300      	movs	r3, #0
 8006abe:	4604      	mov	r4, r0
 8006ac0:	4608      	mov	r0, r1
 8006ac2:	602b      	str	r3, [r5, #0]
 8006ac4:	f7fc f812 	bl	8002aec <_sbrk>
 8006ac8:	1c43      	adds	r3, r0, #1
 8006aca:	d102      	bne.n	8006ad2 <_sbrk_r+0x1a>
 8006acc:	682b      	ldr	r3, [r5, #0]
 8006ace:	b103      	cbz	r3, 8006ad2 <_sbrk_r+0x1a>
 8006ad0:	6023      	str	r3, [r4, #0]
 8006ad2:	bd38      	pop	{r3, r4, r5, pc}
 8006ad4:	2000063c 	.word	0x2000063c

08006ad8 <memcpy>:
 8006ad8:	440a      	add	r2, r1
 8006ada:	4291      	cmp	r1, r2
 8006adc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006ae0:	d100      	bne.n	8006ae4 <memcpy+0xc>
 8006ae2:	4770      	bx	lr
 8006ae4:	b510      	push	{r4, lr}
 8006ae6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006aea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006aee:	4291      	cmp	r1, r2
 8006af0:	d1f9      	bne.n	8006ae6 <memcpy+0xe>
 8006af2:	bd10      	pop	{r4, pc}

08006af4 <_free_r>:
 8006af4:	b538      	push	{r3, r4, r5, lr}
 8006af6:	4605      	mov	r5, r0
 8006af8:	2900      	cmp	r1, #0
 8006afa:	d041      	beq.n	8006b80 <_free_r+0x8c>
 8006afc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b00:	1f0c      	subs	r4, r1, #4
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	bfb8      	it	lt
 8006b06:	18e4      	addlt	r4, r4, r3
 8006b08:	f7ff ff82 	bl	8006a10 <__malloc_lock>
 8006b0c:	4a1d      	ldr	r2, [pc, #116]	@ (8006b84 <_free_r+0x90>)
 8006b0e:	6813      	ldr	r3, [r2, #0]
 8006b10:	b933      	cbnz	r3, 8006b20 <_free_r+0x2c>
 8006b12:	6063      	str	r3, [r4, #4]
 8006b14:	6014      	str	r4, [r2, #0]
 8006b16:	4628      	mov	r0, r5
 8006b18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b1c:	f7ff bf7e 	b.w	8006a1c <__malloc_unlock>
 8006b20:	42a3      	cmp	r3, r4
 8006b22:	d908      	bls.n	8006b36 <_free_r+0x42>
 8006b24:	6820      	ldr	r0, [r4, #0]
 8006b26:	1821      	adds	r1, r4, r0
 8006b28:	428b      	cmp	r3, r1
 8006b2a:	bf01      	itttt	eq
 8006b2c:	6819      	ldreq	r1, [r3, #0]
 8006b2e:	685b      	ldreq	r3, [r3, #4]
 8006b30:	1809      	addeq	r1, r1, r0
 8006b32:	6021      	streq	r1, [r4, #0]
 8006b34:	e7ed      	b.n	8006b12 <_free_r+0x1e>
 8006b36:	461a      	mov	r2, r3
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	b10b      	cbz	r3, 8006b40 <_free_r+0x4c>
 8006b3c:	42a3      	cmp	r3, r4
 8006b3e:	d9fa      	bls.n	8006b36 <_free_r+0x42>
 8006b40:	6811      	ldr	r1, [r2, #0]
 8006b42:	1850      	adds	r0, r2, r1
 8006b44:	42a0      	cmp	r0, r4
 8006b46:	d10b      	bne.n	8006b60 <_free_r+0x6c>
 8006b48:	6820      	ldr	r0, [r4, #0]
 8006b4a:	4401      	add	r1, r0
 8006b4c:	1850      	adds	r0, r2, r1
 8006b4e:	4283      	cmp	r3, r0
 8006b50:	6011      	str	r1, [r2, #0]
 8006b52:	d1e0      	bne.n	8006b16 <_free_r+0x22>
 8006b54:	6818      	ldr	r0, [r3, #0]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	6053      	str	r3, [r2, #4]
 8006b5a:	4408      	add	r0, r1
 8006b5c:	6010      	str	r0, [r2, #0]
 8006b5e:	e7da      	b.n	8006b16 <_free_r+0x22>
 8006b60:	d902      	bls.n	8006b68 <_free_r+0x74>
 8006b62:	230c      	movs	r3, #12
 8006b64:	602b      	str	r3, [r5, #0]
 8006b66:	e7d6      	b.n	8006b16 <_free_r+0x22>
 8006b68:	6820      	ldr	r0, [r4, #0]
 8006b6a:	1821      	adds	r1, r4, r0
 8006b6c:	428b      	cmp	r3, r1
 8006b6e:	bf04      	itt	eq
 8006b70:	6819      	ldreq	r1, [r3, #0]
 8006b72:	685b      	ldreq	r3, [r3, #4]
 8006b74:	6063      	str	r3, [r4, #4]
 8006b76:	bf04      	itt	eq
 8006b78:	1809      	addeq	r1, r1, r0
 8006b7a:	6021      	streq	r1, [r4, #0]
 8006b7c:	6054      	str	r4, [r2, #4]
 8006b7e:	e7ca      	b.n	8006b16 <_free_r+0x22>
 8006b80:	bd38      	pop	{r3, r4, r5, pc}
 8006b82:	bf00      	nop
 8006b84:	20000638 	.word	0x20000638

08006b88 <_malloc_usable_size_r>:
 8006b88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b8c:	1f18      	subs	r0, r3, #4
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	bfbc      	itt	lt
 8006b92:	580b      	ldrlt	r3, [r1, r0]
 8006b94:	18c0      	addlt	r0, r0, r3
 8006b96:	4770      	bx	lr

08006b98 <_init>:
 8006b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b9a:	bf00      	nop
 8006b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b9e:	bc08      	pop	{r3}
 8006ba0:	469e      	mov	lr, r3
 8006ba2:	4770      	bx	lr

08006ba4 <_fini>:
 8006ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ba6:	bf00      	nop
 8006ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006baa:	bc08      	pop	{r3}
 8006bac:	469e      	mov	lr, r3
 8006bae:	4770      	bx	lr
